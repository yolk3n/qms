
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПВызовСервера.ПриПолученииФормыДокумента(
		ПустаяСсылка(), ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбмене

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДальнейшиеДействия = ПолучитьДальнейшиеДействияПоДокументу(ДокументСсылка, Операция);
	
	Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
	
	Если ДальнейшиеДействия.Количество() = 0 Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято;
		Статусы.Принят  = Перечисления.СтатусыИнформированияМДЛП.Закрыто;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Статусы.ПринятДействия  , ДальнейшиеДействия);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Статусы.ОтклоненДействия, ДальнейшиеДействия);
		
		Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_КвитанцияОФиксации Тогда
			
			СтатусОбработки = ДополнительныеПараметры.СтатусОбработки;
			
			Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.Принято;
			
			Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.ПринятоЧастично Тогда
				Статусы.Отклонен = Перечисления.СтатусыИнформированияМДЛП.ЧастичноПринято;
			Иначе
				Статусы.Отклонен = Перечисления.СтатусыИнформированияМДЛП.Отклонено;
			КонецЕсли;
			
		ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_УведомлениеВладельцаОбОприходовании Тогда
			
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято;
			Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.ОприходованоНовымВладельцем;
			
		Иначе // Входящее уведомление
			
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято;
			Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.ПринятоИзМДЛП;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОбновления.Вставить("Комментарий", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Комментарий"));
	НовыйСтатус = РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления);
	
	Возврат НовыйСтатус;
	
КонецФункции

Функция ПолучитьДальнейшиеДействияПоДокументу(ДокументСсылка, Операция) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка  КАК Ссылка,
	|	Ссылка.СхемаАкцептования  КАК СхемаАкцептования,
	
	|	МИНИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&КонечныеСостояния)
	|			И НомераУпаковок.Арбитраж В (&АрбитражНеУстановлен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК ВзаимодействиеЗавершено,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноПередатьДанные) И НомераУпаковок.Арбитраж В (&АрбитражНеУстановлен) И Ссылка.СхемаАкцептования = &СхемаАкцептования_ПрямойПорядок
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&МожноПодтвердитьПолучение) И НомераУпаковок.Арбитраж В (&АрбитражНеУстановлен) И Ссылка.СхемаАкцептования = &СхемаАкцептования_ОбратныйПорядок
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияОтклоненнойИнициацииАрбитража) И НомераУпаковок.Арбитраж В (&ИнициацияПостановкиВАрбитраж) И Ссылка.СхемаАкцептования = &СхемаАкцептования_ОбратныйПорядок
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияПодтвержденногоАрбитража) И НомераУпаковок.Арбитраж В (&ИнициацияСнятияАрбитража, &ПодтверждениеСнятияАрбитража) И Ссылка.СхемаАкцептования = &СхемаАкцептования_ОбратныйПорядок
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноПередатьДанныеИлиПодтвердитьПолучение,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноАктуализироватьДанныеОбУпаковках)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноАктуализироватьДанныеОбУпаковках,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&ОжиданиеПодтверждения) И Ссылка.СхемаАкцептования = &СхемаАкцептования_ПрямойПорядок
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&ОжиданиеПодтвержденияАрбитража) И НомераУпаковок.Арбитраж В (&ИнициацияПостановкиВАрбитраж, &ИнициацияСнятияАрбитража)
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияПодтвержденногоАрбитража) И НомераУпаковок.Арбитраж В (&ИнициацияСнятияАрбитража, &ПодтверждениеСнятияАрбитража) И Ссылка.СхемаАкцептования = &СхемаАкцептования_ПрямойПорядок
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК ОжиданиеПодтверждения,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&ОжиданиеОбмена)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК ОжиданиеОбмена,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноПолучитьКвитанциюОФиксации)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноПолучитьКвитанциюОФиксации,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноОтозватьТовары) И НомераУпаковок.Арбитраж В (&АрбитражНеУстановлен)
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияОтклоненнойИнициацииАрбитража) И НомераУпаковок.Арбитраж В (&ИнициацияПостановкиВАрбитраж)
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияОтклоненногоПодтвержденияАрбитража) И НомераУпаковок.Арбитраж В (&ПодтверждениеПостановкиВАрбитраж)
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияПодтвержденногоАрбитража) И НомераУпаковок.Арбитраж В (&ИнициацияСнятияАрбитража, &ПодтверждениеСнятияАрбитража)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноОтозватьТовары,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ &ВозможнаПостановкаВАрбитраж
	|			ТОГДА ЛОЖЬ
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноПостановитьВАрбитраж) И НомераУпаковок.Арбитраж В (&АрбитражНеУстановлен) И Ссылка.СхемаАкцептования = &СхемаАкцептования_ОбратныйПорядок
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияОтклоненнойИнициацииАрбитража) И НомераУпаковок.Арбитраж В (&ИнициацияПостановкиВАрбитраж, &ИнициацияСнятияАрбитража)
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияОтклоненногоПодтвержденияАрбитража) И НомераУпаковок.Арбитраж В (&ИнициацияСнятияАрбитража, &ПодтверждениеСнятияАрбитража)
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияПодтвержденногоАрбитража) И НомераУпаковок.Арбитраж <> &АрбитражНеУстановлен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноПостановитьСнятьАрбитраж,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ &ВозможнаПостановкаВАрбитраж
	|			ТОГДА ЛОЖЬ
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража) И НомераУпаковок.Арбитраж В (&ПодтверждениеПостановкиВАрбитраж, &ПодтверждениеСнятияАрбитража)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража,
	
	|	МИНИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноЗакрытьВСвязиСОприходованиемНовымВладельцем)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноЗакрытьВСвязиСОприходованиемНовымВладельцем
	
	|ИЗ
	|	(ВЫБРАТЬ
	|		НомераУпаковок.Ссылка                  КАК Ссылка,
	|		НомераУпаковок.Арбитраж                КАК Арбитраж,
	|		НомераУпаковок.СостояниеПодтверждения  КАК СостояниеПодтверждения
	|	ИЗ
	|		Документ.УведомлениеОбОтгрузкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ГДЕ
	|		НомераУпаковок.Ссылка = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НомераУпаковок.Ссылка                  КАК Ссылка,
	|		НомераУпаковок.Арбитраж                КАК Арбитраж,
	|		НомераУпаковок.СостояниеПодтверждения  КАК СостояниеПодтверждения
	|	ИЗ
	|		Документ.УведомлениеОбОтгрузкеМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|	ГДЕ
	|		НомераУпаковок.Ссылка = &Ссылка
	|	) КАК НомераУпаковок
	|СГРУППИРОВАТЬ ПО
	|	Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.УстановитьПараметр("СхемаАкцептования_ПрямойПорядок", Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок);
	Запрос.УстановитьПараметр("СхемаАкцептования_ОбратныйПорядок", Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок);
	
	Запрос.УстановитьПараметр("АрбитражНеУстановлен"            , Перечисления.СостоянияАрбитражаМДЛП.ПустаяСсылка());
	Запрос.УстановитьПараметр("ИнициацияПостановкиВАрбитраж"    , Перечисления.СостоянияАрбитражаМДЛП.УстановленПередача);
	Запрос.УстановитьПараметр("ИнициацияСнятияАрбитража"        , Перечисления.СостоянияАрбитражаМДЛП.СнятПередача);
	Запрос.УстановитьПараметр("ПодтверждениеПостановкиВАрбитраж", Перечисления.СостоянияАрбитражаМДЛП.УстановленПолучение);
	Запрос.УстановитьПараметр("ПодтверждениеСнятияАрбитража"    , Перечисления.СостоянияАрбитражаМДЛП.СнятПолучение);
	
	
	КонечныеСостояния = Новый Массив;
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем);
	Запрос.УстановитьПараметр("КонечныеСостояния", КонечныеСостояния);
	
	
	СостоянияОтклоненнойИнициацииАрбитража = Новый Массив;
	СостоянияОтклоненнойИнициацииАрбитража.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	СостоянияОтклоненнойИнициацииАрбитража.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем);
	Запрос.УстановитьПараметр("СостоянияОтклоненнойИнициацииАрбитража", СостоянияОтклоненнойИнициацииАрбитража);
	
	СостоянияОтклоненногоПодтвержденияАрбитража = Новый Массив;
	СостоянияОтклоненногоПодтвержденияАрбитража.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПоставщиком);
	Запрос.УстановитьПараметр("СостоянияОтклоненногоПодтвержденияАрбитража", СостоянияОтклоненногоПодтвержденияАрбитража);
	
	СостоянияПодтвержденногоАрбитража = Новый Массив;
	СостоянияПодтвержденногоАрбитража.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено);
	Запрос.УстановитьПараметр("СостоянияПодтвержденногоАрбитража", СостоянияПодтвержденногоАрбитража);
	
	
	МожноПередатьДанные = Новый Массив;
	МожноПередатьДанные.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПустаяСсылка());
	МожноПередатьДанные.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.КПередаче);
	МожноПередатьДанные.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	Запрос.УстановитьПараметр("МожноПередатьДанные", МожноПередатьДанные);
	
	МожноПодтвердитьПолучение = Новый Массив;
	МожноПодтвердитьПолучение.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить);
	МожноПодтвердитьПолучение.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ);
	МожноПодтвердитьПолучение.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьОтклоненоГИСМ);
	Запрос.УстановитьПараметр("МожноПодтвердитьПолучение", МожноПодтвердитьПолучение);
	
	
	МожноАктуализироватьДанныеОбУпаковках = Новый Массив;
	МожноАктуализироватьДанныеОбУпаковках.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.АктуализироватьДанныеОбУпаковках);
	Запрос.УстановитьПараметр("МожноАктуализироватьДанныеОбУпаковках", МожноАктуализироватьДанныеОбУпаковках);
	
	
	ОжиданиеОбмена = Новый Массив;
	ОжиданиеОбмена.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодготовленоКПередаче);
	ОжиданиеОбмена.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Передано);
	ОжиданиеОбмена.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьПодготовленоКПередаче);
	ОжиданиеОбмена.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьПередано);
	ОжиданиеОбмена.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьПодготовленоКПередаче);
	ОжиданиеОбмена.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьПередано);
	Запрос.УстановитьПараметр("ОжиданиеОбмена", ОжиданиеОбмена);
	
	
	МожноПолучитьКвитанциюОФиксации = Новый Массив;
	МожноПолучитьКвитанциюОФиксации.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Передано);
	МожноПолучитьКвитанциюОФиксации.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьПередано);
	МожноПолучитьКвитанциюОФиксации.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьПередано);
	Запрос.УстановитьПараметр("МожноПолучитьКвитанциюОФиксации", МожноПолучитьКвитанциюОФиксации);
	
	
	ОжиданиеПодтверждения = Новый Массив;
	ОжиданиеПодтверждения.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ);
	ОжиданиеПодтверждения.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьОтклоненоГИСМ);
	Запрос.УстановитьПараметр("ОжиданиеПодтверждения", ОжиданиеПодтверждения);
	
	ОжиданиеПодтвержденияАрбитража = Новый Массив;
	ОжиданиеПодтвержденияАрбитража.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ);
	Запрос.УстановитьПараметр("ОжиданиеПодтвержденияАрбитража", ОжиданиеПодтвержденияАрбитража);
	
	
	МожноОтозватьТовары = Новый Массив;
	МожноОтозватьТовары.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ);
	МожноОтозватьТовары.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить);
	МожноОтозватьТовары.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ);
	МожноОтозватьТовары.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Отозвать);
	МожноОтозватьТовары.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьОтклоненоГИСМ);
	Запрос.УстановитьПараметр("МожноОтозватьТовары", МожноОтозватьТовары);
	
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, Новый Структура("Операция, ВерсияСхемОбмена", "Операция", "Организация.ВерсияСхемОбмена"));
	ВозможнаПостановкаВАрбитраж = ВозможнаПостановкаВАрбитраж(ДанныеДокумента.Операция, ДанныеДокумента.ВерсияСхемОбмена);
	Запрос.УстановитьПараметр("ВозможнаПостановкаВАрбитраж", ВозможнаПостановкаВАрбитраж);
	
	МожноПостановитьВАрбитраж = Новый Массив;
	МожноПостановитьВАрбитраж.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить);
	МожноПостановитьВАрбитраж.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ);
	МожноПостановитьВАрбитраж.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьОтклоненоГИСМ);
	// Инициатор документооборота не должен быть также инициатором постановки в арбитраж,
	// т.к. на стороне подтверждения нельзя будет опраделить что подтверждается, приемка/отгрузка товаров или постановка в арбитраж.
	//МожноПостановитьВАрбитраж.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ);
	Запрос.УстановитьПараметр("МожноПостановитьВАрбитраж", МожноПостановитьВАрбитраж);
	
	МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража = Новый Массив;
	МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить);
	МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ);
	МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ);
	Запрос.УстановитьПараметр("МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража", МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража);
	
	
	МожноЗакрытьВСвязиСОприходованиемНовымВладельцем = Новый Массив;
	МожноЗакрытьВСвязиСОприходованиемНовымВладельцем.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОприходованоНовымВладельцем);
	Запрос.УстановитьПараметр("МожноЗакрытьВСвязиСОприходованиемНовымВладельцем", МожноЗакрытьВСвязиСОприходованиемНовымВладельцем);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДальнейшиеДействия = Новый Массив;
	Если Выборка.ВзаимодействиеЗавершено Тогда
		
	ИначеЕсли Выборка.ОжиданиеОбмена Тогда
		
		Если Выборка.МожноПолучитьКвитанциюОФиксации Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации);
		КонецЕсли;
		
		ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
		
	Иначе
		
		Если Выборка.МожноАктуализироватьДанныеОбУпаковках Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.АктуализируйтеДанныеОбУпаковках);
		КонецЕсли;
		
		Если Выборка.МожноПередатьДанныеИлиПодтвердитьПолучение Тогда
			Если Выборка.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок Тогда
				ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПодтвердитеПолучение);
			Иначе
				ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ОжиданиеПодтверждения Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолученияПодтверждения);
		КонецЕсли;
		
		Если Выборка.МожноПостановитьСнятьАрбитраж Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПостановкуВАрбитражСнятиеАрбитража);
		ИначеЕсли Выборка.МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПодтвердитеПостановкуВАрбитражСнятиеАрбитража);
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОткажитесьОтПостановкиСнятияАрбитража);
		КонецЕсли;
		
		Если Выборка.МожноОтозватьТовары Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОтзовитеПереданныйТовар);
		КонецЕсли;
		
		Если Выборка.МожноЗакрытьВСвязиСОприходованиемНовымВладельцем
		 Или ДальнейшиеДействия.Количество() = 1 И ДальнейшиеДействия[0] = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДальнейшиеДействия;
	
КонецФункции

Процедура ОбновитьСостояниеПодтверждения(ДокументОбъект, Операция, Сообщение, СтатусОбработки, ОтклоненныеНомера = Неопределено) Экспорт
	
	НовоеСостояние = Неопределено;
	СхемаАкцептования = ДокументОбъект.СхемаАкцептования;
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПодтверждениеСведенийОПриемке Тогда
		
		ИсходноеСообщение = Сообщение;
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.КПередаче Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьПодготовленоКПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Ошибка Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Передано Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьПередано;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ;
		Иначе
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтзывПереданногоТовара Тогда
		
		ИсходноеСообщение = Сообщение;
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.КПередаче Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьПодготовленоКПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Ошибка Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Отозвать;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Передано Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьПередано;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьОтклоненоГИСМ;
		Иначе
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком;
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтказОтПриемкиТовара Тогда
		
		// Отказ от постановки в арбитраж / снятия арбитража
		ИсходноеСообщение = Сообщение;
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.КПередаче Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяПодготовленоКПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Ошибка Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Отказаться;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Передано Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяПередано;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ;
		Иначе
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПоставщиком;
		КонецЕсли;
		
	Иначе
		
		ИсходноеСообщение = Сообщение;
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.КПередаче Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПодготовленоКПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Ошибка Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Передано Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Передано;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
		Иначе
			Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСкладаНезарегистрированномуУчастнику
			 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСкладаЕАЭС Тогда
				НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
			Иначе
				НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовоеСостояние = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = ИнтеграцияМДЛПВызовСервера.ТекстСообщенияИзПротокола(ИсходноеСообщение);
	ОбъектXDTO = ИнтеграцияМДЛП.ОбъектXDTOПоТекстуСообщенияXML(ТекстСообщения, "documents", ИнтеграцияМДЛП.ПространствоИмен());
	
	КонечныеСостояния = Новый Массив;
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОприходованоНовымВладельцем);
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСклада
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСкладаНезарегистрированномуУчастнику
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСкладаЕАЭС Тогда
		
		Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСклада Тогда
			Уведомление = ОбъектXDTO.move_order;
		ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСкладаНезарегистрированномуУчастнику Тогда
			Уведомление = ОбъектXDTO.move_unregistered_order;
		ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСкладаЕАЭС Тогда
			Уведомление = ОбъектXDTO.move_eeu;
		КонецЕсли;
		
		Для Каждого Данные Из Уведомление.order_details.union Цикл
			
			Если ЗначениеЗаполнено(Данные.sgtin) Тогда
				НомерУпаковки = Данные.sgtin;
				Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
			Иначе
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Данные, "sscc_detail") Тогда
					НомерУпаковки = Данные.sscc_detail.sscc;
				Иначе
					НомерУпаковки = Данные.sscc;
				КонецЕсли;
				Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
			КонецЕсли;
			
			Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено  Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
				Строка.СостояниеПодтверждения = НовоеСостояние;
			Иначе
				Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПостановкаСнятиеАрбитража Тогда
		
		Для Каждого НомерУпаковки Из ОбъектXDTO.arbitration.order_details.sgtin Цикл
			
			Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
			
			Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
				Строка.СостояниеПодтверждения = НовоеСостояние;
			Иначе
				Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого НомерУпаковки Из ОбъектXDTO.arbitration.order_details.sscc Цикл
			
			Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
			
			Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено  Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
				Строка.СостояниеПодтверждения = НовоеСостояние;
			Иначе
				Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПодтверждениеСведенийОПриемке Тогда
		
		Для Каждого НомерУпаковки Из ОбъектXDTO.accept.order_details.sgtin Цикл
			
			Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
			
			Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено  Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
				Строка.СостояниеПодтверждения = НовоеСостояние;
			Иначе
				Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого НомерУпаковки Из ОбъектXDTO.accept.order_details.sscc Цикл
			
			Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
			
			Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено  Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
				Строка.СостояниеПодтверждения = НовоеСостояние;
			Иначе
				Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтзывПереданногоТовара Тогда
		
		Для Каждого НомерУпаковки Из ОбъектXDTO.refusal_sender.order_details.sgtin Цикл
			
			Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
			
			Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено  Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
				Строка.СостояниеПодтверждения = НовоеСостояние;
			Иначе
				Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьОтклоненоГИСМ;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого НомерУпаковки Из ОбъектXDTO.refusal_sender.order_details.sscc Цикл
			
			Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
			
			Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено  Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
				Строка.СостояниеПодтверждения = НовоеСостояние;
			Иначе
				Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтозватьОтклоненоГИСМ;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтказОтПриемкиТовара Тогда
		
		Для Каждого НомерУпаковки Из ОбъектXDTO.refusal_receiver.order_details.sgtin Цикл
			
			Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
			
			Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено  Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
				Строка.СостояниеПодтверждения = НовоеСостояние;
			Иначе
				Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого НомерУпаковки Из ОбъектXDTO.refusal_receiver.order_details.sscc Цикл
			
			Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
			
			Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено  Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
				Строка.СостояниеПодтверждения = НовоеСостояние;
			Иначе
				Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Уведомление = Неопределено;
		Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
			ЗначениеСвойства = ОбъектXDTO[Свойство.Имя];
			Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
				Уведомление = ЗначениеСвойства;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Уведомление <> Неопределено Тогда
			Для Каждого НомерУпаковки Из Уведомление.order_details.sgtin Цикл
				Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
				Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено  Тогда
					Продолжить;
				КонецЕсли;
				
				Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
					Строка.СостояниеПодтверждения = НовоеСостояние;
				Иначе
					Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
					Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
				КонецЕсли;
			КонецЦикла;
			Для Каждого НомерУпаковки Из Уведомление.order_details.sscc Цикл
				Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
				Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено  Тогда
					Продолжить;
				КонецЕсли;
				
				Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
					Строка.СостояниеПодтверждения = НовоеСостояние;
				Иначе
					Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
					Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Определить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОРозничнойПродажеМДЛП - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Основание");
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбОтгрузке(Основание);
	КонецЕсли;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящее = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	Входящее  = Перечисления.ТипыСообщенийМДЛП.Входящее;
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		Операция = ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСклада);
		Операция = ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее , Перечисления.ОперацииОбменаМДЛП.Получение_ПодтверждениеСведенийОПриемке);
		
		Операция = ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтзывПереданногоТовара);
		Операция = ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Входящее , Перечисления.ОперацииОбменаМДЛП.Получение_ОтказПолучателяОтПриемкиТовара);
		
		Возврат Таблица;
	КонецЕсли;
	
	РеквизитыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "СхемаАкцептования, КонтрагентНеЗарегистрированВГИСМ, МестоДеятельностиГрузополучателя, Операция");
	
	ОтгрузкаНезарегистрированномуКонтрагенту = 
		РеквизитыУведомления.Операция = Перечисления.ОперацииОтгрузкиМДЛП.Продажа
		И (РеквизитыУведомления.КонтрагентНеЗарегистрированВГИСМ = Истина
			Или Не ЗначениеЗаполнено(РеквизитыУведомления.МестоДеятельностиГрузополучателя));
	ОтгрузкаНаНезарегистрированноеМестоДеятельности = РеквизитыУведомления.Операция = Перечисления.ОперацииОтгрузкиМДЛП.Продажа
		И (РеквизитыУведомления.КонтрагентНеЗарегистрированВГИСМ = Ложь
			И Не ЗначениеЗаполнено(РеквизитыУведомления.МестоДеятельностиГрузополучателя));

	Если РеквизитыУведомления.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок Тогда
		Если ОтгрузкаНезарегистрированномуКонтрагенту Тогда
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСкладаНезарегистрированномуУчастнику);
		ИначеЕсли РеквизитыУведомления.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ВывозВЕАЭС Тогда
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСкладаЕАЭС);
		Иначе
			Если РеквизитыУведомления.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ВозвратПриостановленныхЛП Тогда
				ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВозвратПриостановленныхЛП);
			ИначеЕсли РеквизитыУведомления.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ОтгрузкаВРамкахАгентскогоДоговора Тогда
				ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСкладаВРамкахАгентскогоДоговора);
			ИначеЕсли РеквизитыУведомления.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ПередачаСобственнику Тогда
				ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПередачаЛПСобственнику);
			ИначеЕсли РеквизитыУведомления.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ПередачаСобственникуВРамкахГЛО Тогда
				ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСкладаВРамкахГЛО);
			ИначеЕсли РеквизитыУведомления.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ПередачаСобственникуДляВыпуска Тогда
				ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПДляВыпускаГотовойПродукции);
			ИначеЕсли РеквизитыУведомления.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ВозвратКонтрактномуПроизводителю Тогда
				ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВозвратКонтрактномуПроизводителю);
			Иначе
				ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСклада);
			КонецЕсли;
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее , Перечисления.ОперацииОбменаМДЛП.Получение_ПодтверждениеСведенийОПриемке);
		КонецЕсли;
	Иначе
		Если РеквизитыУведомления.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ОтгрузкаВРамкахАгентскогоДоговора Тогда
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее , Перечисления.ОперацииОбменаМДЛП.Получение_ПриемкаЛПвРамкахАгентскогоДоговора);
		Иначе
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее , Перечисления.ОперацииОбменаМДЛП.Получение_ПриемкаЛПНаСкладПокупателя);
		КонецЕсли;
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПодтверждениеСведенийОПриемке);
	КонецЕсли;
	
	Если Не ОтгрузкаНезарегистрированномуКонтрагенту И Не РеквизитыУведомления.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ВывозВЕАЭС Тогда
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтзывПереданногоТовара);
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Входящее , Перечисления.ОперацииОбменаМДЛП.Получение_ОтказПолучателяОтПриемкиТовара);
	КонецЕсли;
	
	Если ОтгрузкаНаНезарегистрированноеМестоДеятельности Тогда
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Входящее , Перечисления.ОперацииОбменаМДЛП.Получение_РегистрацияПолучателяИПриемкаНаСклад);
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус информирования по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияМДЛП - Статус по-умолчанию.
//
Функция СтатусИнформированияПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыИнформированияМДЛП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные;
	
КонецФункции

// Возвращает запрос для получения статуса оформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ основание.
// 
// Возвращаемое значение:
//  Запрос - Запрос для получения статуса оформления.
//
Функция ЗапросСтатусаОформления(ДокументОснование) Экспорт
	
	Запрос = ИнтеграцияМДЛППереопределяемый.ЗапросСтатусаОформленияУведомленияОбОтгрузке(ДокументОснование);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПанельМаркировкиМДЛП

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПодтвердитеПолучение);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.АктуализируйтеДанныеОбУпаковках);
	Если Все Или Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеОбмен);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации);
	
	Возврат Действия;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолученияПодтверждения);
	Если Все Или ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	КонецЕсли;
	
	Возврат Действия;
	
КонецФункции

Процедура ПриЗаполненииДокументовПанелиМаркировкиМДЛП(ТаблицаДокументы) Экспорт
	
	Описание = ИнтеграцияМДЛП.ДобавитьДокументНаПанельМаркировки(
		ТаблицаДокументы,
		Метаданные.Документы.УведомлениеОбОтгрузкеМДЛП,
		НСтр("ru = 'Отгрузка товаров'"),
		ИнтеграцияМДЛПКлиентСервер.ПанельМаркировкаРазделЗакупки());
	
	Описание.Оформите    = Истина;
	Описание.Отработайте = Истина;
	Описание.Ожидайте    = Истина;
	
КонецПроцедуры

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОформите() Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.УведомлениеОбОтгрузкеТекстЗапросаОформите();
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОтработайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОтработайте(Метаданные.Документы.УведомлениеОбОтгрузкеМДЛП);
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОжидайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОжидайте(Метаданные.Документы.УведомлениеОбОтгрузкеМДЛП);
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического списка формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСписока() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаФормДокументов(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического Списка к оформлению формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	ТекстЗапроса = ИнтеграцияМДЛППереопределяемый.УведомлениеОбОтгрузкеТекстЗапросаДинамическогоСпискаКОформлению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщениеМДЛП

Функция СообщениеКПередаче(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОтзовитеПереданныйТовар Тогда
		Возврат УведомлениеОбОтзывеПереданногоТовара(ДокументСсылка, ДополнительныеПараметры);
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПостановкуВАрбитражСнятиеАрбитража Тогда
		Возврат УведомлениеОПостановкеСнятииАрбитража(ДокументСсылка);
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПодтвердитеПостановкуВАрбитражСнятиеАрбитража Тогда
		Возврат УведомлениеОПодтвержденииПостановкиСнятияАрбитража(ДокументСсылка);
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОткажитесьОтПостановкиСнятияАрбитража Тогда
		Возврат УведомлениеОбОтказеОтПостановкиСнятияАрбитража(ДокументСсылка, ДополнительныеПараметры);
	Иначе
		Возврат УведомлениеОбОтгрузкеМаркированныхТоваров(ДокументСсылка, ДальнейшееДействие);
	КонецЕсли;
	
КонецФункции

Функция ОпределитьДокументыДляЗагрузки(ДанныеДокумента, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПриемкаЛПНаСкладПокупателя Тогда
		Возврат ОпределитьУведомлениеОбОтгрузке(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПриемкаЛПвРамкахАгентскогоДоговора Тогда
		Возврат ОпределитьУведомлениеОбОтгрузке(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПодтверждениеСведенийОПриемке Тогда
		Возврат ОпределитьУведомленияОбОтгрузкеПоПодтверждению(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтказПолучателяОтПриемкиТовара Тогда
		Возврат ОпределитьУведомленияОбОтгрузкеПоОтказу(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПостановкаСнятиеАрбитража Тогда
		Возврат ОпределитьУведомленияОбОтгрузкеПоПостановкеСнятииАрбитража(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_РегистрацияПолучателяИПриемкаНаСклад Тогда
		Возврат ОпределитьУведомленияОбОтгрузкеНаНезарегистрированноеМестоДеятелоности(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОшибкиПриПриемкеЛПНаСкладеПолучателя Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Неопределено); // Сообщение загружаться не будет
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_УведомлениеВладельцаОбОприходовании Тогда
		Возврат ОпределитьУведомленияОбОтгрузкеПоОприходованию(ДанныеДокумента);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьВходящееСообщение(ДанныеДокумента, Операция, ДокументСсылка) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПриемкаЛПНаСкладПокупателя Тогда
		ЗагрузитьУведомлениеОПриемкеНаСкладПокупателя(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПриемкаЛПвРамкахАгентскогоДоговора Тогда
		ЗагрузитьУведомлениеОПриемкеВРамкахАгентскогоДоговора(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПодтверждениеСведенийОПриемке Тогда
		ЗагрузитьУведомлениеОПодтверждении(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтказПолучателяОтПриемкиТовара Тогда
		ЗагрузитьУведомлениеОбОтказе(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПостановкаСнятиеАрбитража Тогда
		ЗагрузитьУведомлениеОПостановкеСнятииАрбитража(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_РегистрацияПолучателяИПриемкаНаСклад Тогда
		// ни каких действий не требуется
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_УведомлениеВладельцаОбОприходовании Тогда
		ЗагрузитьУведомлениеВладельцаОбОприходовании(ДанныеДокумента, ДокументСсылка);
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не известная операция %1'"), Операция);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает данные для заполнения представления документа.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * КомандаСоздать - Строка - Представление документа, если документ требуется создать.
//  * ИмяКомандыСоздать - Строка - Имя команды "Создать".
//  * ИмяКомандыОткрыть - Строка - Имя команды "Открыть".
//  * ДокументОтсутствуетНетПравНаСоздание - Строка - Представление документа, если документ не создан.
//  * Представление - Строка - Представление документа.
//  * НесколькоДокументовПредставление - Строка - Представление документа, если их несколько.
//
Функция ПредставлениеДокумента() Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияМДЛП.ПустоеПредставлениеДокумента();
	ВозвращаемоеЗначение.КомандаСоздать                       = НСтр("ru = 'Создать уведомление об отгрузке МДЛП'");
	ВозвращаемоеЗначение.ИмяКомандыСоздать                    = "СоздатьУведомлениеОбОтгрузкеМДЛП";
	ВозвращаемоеЗначение.ИмяКомандыОткрыть                    = "ОткрытьУведомлениеОбОтгрузкеМДЛП";
	ВозвращаемоеЗначение.ДокументОтсутствуетНетПравНаСоздание = НСтр("ru = 'Уведомление об отгрузке МДЛП не создано'");
	ВозвращаемоеЗначение.Представление                        = НСтр("ru = 'Уведомление об отгрузке МДЛП: %1'");
	ВозвращаемоеЗначение.НесколькоДокументовПредставление     = НСтр("ru = 'Уведомление об отгрузке МДЛП (%1)'");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПоддерживаетЗагрузкуУведомлений() Экспорт
	Возврат Истина;
КонецФункции

Функция ВозможнаПостановкаВАрбитраж(Знач ОперацияОтгрузки, Знач ВерсияСхемОбмена = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ВерсияСхемОбмена) Тогда
		ВерсияСхемОбмена = ИнтеграцияМДЛП.ИспользуемаяВерсияСхемОбмена();
	КонецЕсли;
	
	Если ВерсияСхемОбмена >= "1.35" Тогда
		
		ОперацииОтгрузки = Новый Массив;
		ОперацииОтгрузки.Добавить(Перечисления.ОперацииОтгрузкиМДЛП.Продажа);                           // 415
		ОперацииОтгрузки.Добавить(Перечисления.ОперацииОтгрузкиМДЛП.Возврат);                           // 415
		ОперацииОтгрузки.Добавить(Перечисления.ОперацииОтгрузкиМДЛП.ВозвратПриостановленныхЛП);         // 417
		ОперацииОтгрузки.Добавить(Перечисления.ОперацииОтгрузкиМДЛП.ПередачаСобственникуВРамкахГЛО);    // 471
		ОперацииОтгрузки.Добавить(Перечисления.ОперацииОтгрузкиМДЛП.ОтгрузкаВРамкахАгентскогоДоговора); // 472
		
		Если ОперацииОтгрузки.Найти(ОперацияОтгрузки) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьИменаРеквизитовПоТипуОперации(Операция, ВсеРеквизиты, РеквизитыОперации) Экспорт
	
	ВсеРеквизиты = Новый Массив;
	ВсеРеквизиты.Добавить("ТипОперации");
	ВсеРеквизиты.Добавить("МестоДеятельности");
	ВсеРеквизиты.Добавить("Грузополучатель");
	ВсеРеквизиты.Добавить("МестоДеятельностиГрузополучателя");
	ВсеРеквизиты.Добавить("ТипДоговора");
	ВсеРеквизиты.Добавить("ИсточникФинансирования");
	ВсеРеквизиты.Добавить("НомерКонтракта");
	ВсеРеквизиты.Добавить("КонтрагентНеЗарегистрированВГИСМ");
	ВсеРеквизиты.Добавить("Контрагент");
	ВсеРеквизиты.Добавить("КонтрагентИТИН");
	ВсеРеквизиты.Добавить("КонтрагентКодСтраны");
	ВсеРеквизиты.Добавить("Товары.Цена");
	ВсеРеквизиты.Добавить("Товары.Сумма");
	ВсеРеквизиты.Добавить("Товары.СуммаНДС");
	ВсеРеквизиты.Добавить("ТранспортныеУпаковки.Цена");
	ВсеРеквизиты.Добавить("ТранспортныеУпаковки.СуммаНДС");
	ВсеРеквизиты.Добавить("СоставТранспортныхУпаковок");
	ВсеРеквизиты.Добавить("СоставТранспортныхУпаковок.Номенклатура");
	ВсеРеквизиты.Добавить("СоставТранспортныхУпаковок.GTIN");
	ВсеРеквизиты.Добавить("СоставТранспортныхУпаковок.НомерСерии");
	ВсеРеквизиты.Добавить("СоставТранспортныхУпаковок.Цена");
	ВсеРеквизиты.Добавить("СоставТранспортныхУпаковок.СуммаНДС");
	ВсеРеквизиты.Добавить("НомерГосударственногоКонтракта");
	ВсеРеквизиты.Добавить("ДатаГосударственногоКонтракта");
	
	РеквизитыОперации = Новый Массив;
	Если Операция = Перечисления.ОперацииОтгрузкиМДЛП.Продажа Тогда
		РеквизитыОперации.Добавить("МестоДеятельности");
		РеквизитыОперации.Добавить("Грузополучатель");
		РеквизитыОперации.Добавить("МестоДеятельностиГрузополучателя");
		РеквизитыОперации.Добавить("ТипДоговора");
		РеквизитыОперации.Добавить("ИсточникФинансирования");
		РеквизитыОперации.Добавить("НомерКонтракта");
		РеквизитыОперации.Добавить("КонтрагентНеЗарегистрированВГИСМ");
		РеквизитыОперации.Добавить("Контрагент");
		РеквизитыОперации.Добавить("Товары.Цена");
		РеквизитыОперации.Добавить("Товары.Сумма");
		РеквизитыОперации.Добавить("Товары.СуммаНДС");
		РеквизитыОперации.Добавить("ТранспортныеУпаковки.Цена");
		РеквизитыОперации.Добавить("ТранспортныеУпаковки.СуммаНДС");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.Номенклатура");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.GTIN");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.НомерСерии");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.Цена");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.СуммаНДС");
		РеквизитыОперации.Добавить("НомерГосударственногоКонтракта");
		РеквизитыОперации.Добавить("ДатаГосударственногоКонтракта");
	ИначеЕсли Операция = Перечисления.ОперацииОтгрузкиМДЛП.Возврат Тогда
		РеквизитыОперации.Добавить("МестоДеятельности");
		РеквизитыОперации.Добавить("Грузополучатель");
		РеквизитыОперации.Добавить("МестоДеятельностиГрузополучателя");
		РеквизитыОперации.Добавить("ТипДоговора");
		РеквизитыОперации.Добавить("ИсточникФинансирования");
		РеквизитыОперации.Добавить("НомерКонтракта");
		РеквизитыОперации.Добавить("Товары.Цена");
		РеквизитыОперации.Добавить("Товары.Сумма");
		РеквизитыОперации.Добавить("Товары.СуммаНДС");
		РеквизитыОперации.Добавить("ТранспортныеУпаковки.Цена");
		РеквизитыОперации.Добавить("ТранспортныеУпаковки.СуммаНДС");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.Номенклатура");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.GTIN");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.НомерСерии");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.Цена");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.СуммаНДС");
		РеквизитыОперации.Добавить("НомерГосударственногоКонтракта");
		РеквизитыОперации.Добавить("ДатаГосударственногоКонтракта");
	ИначеЕсли Операция = Перечисления.ОперацииОтгрузкиМДЛП.ОтгрузкаВРамкахАгентскогоДоговора Тогда
		РеквизитыОперации.Добавить("ТипОперации");
		РеквизитыОперации.Добавить("МестоДеятельности");
		РеквизитыОперации.Добавить("Грузополучатель");
		РеквизитыОперации.Добавить("МестоДеятельностиГрузополучателя");
		РеквизитыОперации.Добавить("НомерДокумента");
		РеквизитыОперации.Добавить("ДатаДокумента");
	ИначеЕсли Операция = Перечисления.ОперацииОтгрузкиМДЛП.ПередачаСобственникуВРамкахГЛО Тогда
		РеквизитыОперации.Добавить("ТипОперации");
		РеквизитыОперации.Добавить("МестоДеятельности");
		РеквизитыОперации.Добавить("Грузополучатель");
		РеквизитыОперации.Добавить("МестоДеятельностиГрузополучателя");
	ИначеЕсли Операция = Перечисления.ОперацииОтгрузкиМДЛП.ПередачаСобственнику
		  Или Операция = Перечисления.ОперацииОтгрузкиМДЛП.ПередачаСобственникуДляВыпуска Тогда
		РеквизитыОперации.Добавить("МестоДеятельности");
		РеквизитыОперации.Добавить("Грузополучатель");
		РеквизитыОперации.Добавить("МестоДеятельностиГрузополучателя");
	ИначеЕсли Операция = Перечисления.ОперацииОтгрузкиМДЛП.ВозвратПриостановленныхЛП
			Или Операция = Перечисления.ОперацииОтгрузкиМДЛП.ВозвратКонтрактномуПроизводителю Тогда
		РеквизитыОперации.Добавить("МестоДеятельности");
		РеквизитыОперации.Добавить("Грузополучатель");
		РеквизитыОперации.Добавить("МестоДеятельностиГрузополучателя");
	ИначеЕсли Операция = Перечисления.ОперацииОтгрузкиМДЛП.ВывозВЕАЭС Тогда
		РеквизитыОперации.Добавить("МестоДеятельности");
		РеквизитыОперации.Добавить("ТипДоговора");
		РеквизитыОперации.Добавить("Контрагент");
		РеквизитыОперации.Добавить("КонтрагентИТИН");
		РеквизитыОперации.Добавить("КонтрагентКодСтраны");
		РеквизитыОперации.Добавить("Товары.Цена");
		РеквизитыОперации.Добавить("Товары.Сумма");
		РеквизитыОперации.Добавить("Товары.СуммаНДС");
		РеквизитыОперации.Добавить("ТранспортныеУпаковки.Цена");
		РеквизитыОперации.Добавить("ТранспортныеУпаковки.СуммаНДС");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.Номенклатура");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.GTIN");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.НомерСерии");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.Цена");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.СуммаНДС");
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработкаСообщенийМДЛП

Функция УведомлениеОбОтгрузкеМаркированныхТоваров(ДокументСсылка, ДальнейшееДействие)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные Тогда
		СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСклада;
	Иначе
		СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПодтверждениеСведенийОПриемке;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена                    КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                                          КАК Ссылка,
	|	Шапка.Дата                                            КАК Дата,
	|	Шапка.Основание                                       КАК Основание,
	|	Шапка.Операция                                        КАК Операция,
	|	ВЫБОР
	|		КОГДА Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОтгрузкиМДЛП.Продажа)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОперацийОтгрузкиМДЛП.Продажа)
	|		КОГДА Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОтгрузкиМДЛП.Возврат)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОперацийОтгрузкиМДЛП.Возврат)
	|		ИНАЧЕ Шапка.ТипОперации
	|	КОНЕЦ                                                 КАК ТипОперации,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Шапка.МестоДеятельности.Идентификатор
	|		ИНАЧЕ Шапка.ИдентификаторОрганизации
	|	КОНЕЦ                                                 КАК ИдентификаторОрганизации,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Шапка.МестоДеятельностиГрузополучателя.Идентификатор
	|		ИНАЧЕ Шапка.ИдентификаторКонтрагента
	|	КОНЕЦ                                                 КАК ИдентификаторКонтрагента,
	|	Шапка.Грузополучатель.РегистрационныйНомерУчастника   КАК ИдентификаторГрузополучателя,
	|	Шапка.СхемаАкцептования                               КАК СхемаАкцептования,
	|	Шапка.ИсточникФинансирования                          КАК ИсточникФинансирования,
	|	Шапка.НомерКонтракта                                  КАК НомерКонтракта,
	|	Шапка.КонтрагентНеЗарегистрированВГИСМ                КАК КонтрагентНеЗарегистрированВГИСМ,
	|	Шапка.КонтрагентФизическоеЛицо                        КАК КонтрагентФизическоеЛицо,
	|	Шапка.КонтрагентИНН                                   КАК КонтрагентИНН,
	|	Шапка.КонтрагентКПП                                   КАК КонтрагентКПП,
	|	Шапка.КонтрагентИТИН                                  КАК КонтрагентИТИН,
	|	Шапка.КонтрагентКодСтраны                             КАК КонтрагентКодСтраны,
	|	Шапка.АдресСкладаКонтрагентаИдентификаторАдресногоОбъекта  КАК АдресСкладаКонтрагентаИдентификаторАдресногоОбъекта,
	|	Шапка.АдресСкладаКонтрагентаИдентификаторДома              КАК АдресСкладаКонтрагентаИдентификаторДома,
	|	Шапка.АдресСкладаКонтрагентаПомещение                      КАК АдресСкладаКонтрагентаПомещение,
	|	Шапка.ТипДоговора                                     КАК ТипДоговора,
	|	Шапка.НомерДокумента                                  КАК НомерДокумента,
	|	Шапка.ДатаДокумента                                   КАК ДатаДокумента,
	|	Шапка.НомерГосударственногоКонтракта                  КАК НомерГосударственногоКонтракта,
	|	Шапка.ДатаГосударственногоКонтракта                   КАК ДатаГосударственногоКонтракта
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN              КАК GTIN,
	|	НомераУпаковок.НомерКиЗ  КАК НомерКиЗ,
	|	ВЫБОР
	|		КОГДА Товары.КоличествоУпаковок = Товары.Количество
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК Число(15,2))
	|	КОНЕЦ                    КАК Цена,
	|	ВЫРАЗИТЬ(Товары.СуммаНДС / Товары.Количество КАК Число(15, 2)) КАК СуммаНДС
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОтгрузкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения В (ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче), ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить))
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.ПустаяСсылка))
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки                        КАК НомерКиЗ,
	|	НомераУпаковок.Цена                                 КАК ЦенаОстальныхПозиций,
	|	НомераУпаковок.СуммаНДС                             КАК СуммаНДСОстальныхПозиций,
	|	ВЫБОР
	|		КОГДА Состав.GTIN ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                               КАК УказанСостав,
	|	Состав.GTIN                                         КАК GTIN,
	|	Состав.НомерСерии                                   КАК НомерСерии,
	|	ЕСТЬNULL(Состав.Цена    , НомераУпаковок.Цена)      КАК Цена,
	|	ЕСТЬNULL(Состав.СуммаНДС, НомераУпаковок.СуммаНДС)  КАК СуммаНДС
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОтгрузкеМДЛП.СоставТранспортныхУпаковок КАК Состав
	|	ПО
	|		Состав.Ссылка = НомераУпаковок.Ссылка
	|		И Состав.ИдентификаторСтроки = НомераУпаковок.ИдентификаторСтроки
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения В (ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче), ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить))
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.ПустаяСсылка))
	|ИТОГИ
	|	МАКСИМУМ(ЦенаОстальныхПозиций),
	|	МАКСИМУМ(СуммаНДСОстальныхПозиций),
	|	МАКСИМУМ(Цена),
	|	МАКСИМУМ(СуммаНДС),
	|	МАКСИМУМ(УказанСостав)
	|ПО
	|	НомерКиЗ
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Результат[2].Пустой()) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Если Шапка.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок Тогда
		
		Если Шапка.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ВывозВЕАЭС Тогда
			ИмяПакета = "move_eeu";
			СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСкладаЕАЭС;
		ИначеЕсли Шапка.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ОтгрузкаВРамкахАгентскогоДоговора Тогда
			ИмяПакета = "agent_dispatch";
			СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСкладаВРамкахАгентскогоДоговора;
		ИначеЕсли Шапка.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ПередачаСобственнику Тогда
			ИмяПакета = "move_owner";
			СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПередачаЛПСобственнику;
		ИначеЕсли Шапка.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ВозвратПриостановленныхЛП Тогда
			ИмяПакета = "move_return";
			СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВозвратПриостановленныхЛП;
		ИначеЕсли Шапка.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ПередачаСобственникуВРамкахГЛО Тогда
			ИмяПакета = "state_dispatch";
			СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСкладаВРамкахГЛО;
		ИначеЕсли Шапка.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ПередачаСобственникуДляВыпуска Тогда
			ИмяПакета = "move_to_release";
			СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПДляВыпускаГотовойПродукции;
		ИначеЕсли Шапка.КонтрагентНеЗарегистрированВГИСМ Или Не ЗначениеЗаполнено(Шапка.ИдентификаторКонтрагента) Тогда
			ИмяПакета = "move_unregistered_order";
			СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСкладаНезарегистрированномуУчастнику;
		ИначеЕсли Шапка.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ВозвратКонтрактномуПроизводителю Тогда
			ИмяПакета = "return_contract_production";
			СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВозвратКонтрактномуПроизводителю;
		Иначе
			ИмяПакета = "move_order";
			СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтгрузкаЛПСоСклада;
		КонецЕсли;
		
		Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
		ПередачаДанных[ИмяПакета] = Уведомление;
		
		Уведомление.action_id = Уведомление.action_id;
		
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
		
		Если Шапка.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ВывозВЕАЭС Тогда
			
			ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
			
			ДанныеПолучателя = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "info_org_eeu");
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ДанныеПолучателя, "itin", Шапка.КонтрагентИТИН, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ДанныеПолучателя, "code_country", Шапка.КонтрагентКодСтраны, СообщениеКПередаче);
			
			Уведомление.info_org_eeu = ДанныеПолучателя;
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_num", Шапка.НомерДокумента, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_date", Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_type", ИнтеграцияМДЛП.КодЗначенияПеречисления(Шапка.ТипДоговора), СообщениеКПередаче);
			
		ИначеЕсли Шапка.КонтрагентНеЗарегистрированВГИСМ Или Не ЗначениеЗаполнено(Шапка.ИдентификаторКонтрагента) Тогда
			
			ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
			
			Контрагент = Неопределено;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Уведомление, "receiver_org") Тогда
				Контрагент = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "receiver_org");
				Уведомление.receiver_org = Контрагент;
				Контрагент.address = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Контрагент, "address");
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Контрагент.address, "aoguid"   , Шапка.АдресСкладаКонтрагентаИдентификаторАдресногоОбъекта, СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Контрагент.address, "houseguid", Шапка.АдресСкладаКонтрагентаИдентификаторДома, СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Контрагент.address, "flat"     , Шапка.АдресСкладаКонтрагентаПомещение, СообщениеКПередаче);
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Уведомление, "receiver_info") Тогда
				Уведомление.receiver_info = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "receiver_info");
				Если Шапка.КонтрагентНеЗарегистрированВГИСМ Тогда
					Контрагент = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.receiver_info, "receiver_inn");
					Уведомление.receiver_info.receiver_inn = Контрагент;
				Иначе
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.receiver_info, "receiver_id", Шапка.ИдентификаторГрузополучателя, СообщениеКПередаче);
				КонецЕсли;
			Иначе
				Контрагент = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "receiver_inn");
				Уведомление.receiver_inn = Контрагент;
			КонецЕсли;
			
			Если Контрагент <> Неопределено Тогда
				Если Шапка.КонтрагентФизическоеЛицо Тогда
					Контрагент.fl = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Контрагент, "fl");
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Контрагент.fl, "inn", Шапка.КонтрагентИНН, СообщениеКПередаче);
				Иначе
					Контрагент.ul = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Контрагент, "ul");
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Контрагент.ul, "inn", Шапка.КонтрагентИНН, СообщениеКПередаче);
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Контрагент.ul, "kpp", Шапка.КонтрагентКПП, СообщениеКПередаче);
				КонецЕсли;
			КонецЕсли;
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "source", ИнтеграцияМДЛП.КодЗначенияПеречисления(Шапка.ИсточникФинансирования), СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_type", ИнтеграцияМДЛП.КодЗначенияПеречисления(Шапка.ТипДоговора), СообщениеКПередаче);
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_num", Шапка.НомерДокумента, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_date", Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
			
		ИначеЕсли Шапка.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ПередачаСобственнику
				Или Шапка.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ПередачаСобственникуДляВыпуска Тогда
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "owner_id", Шапка.ИдентификаторКонтрагента, СообщениеКПередаче);
			ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_date", Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_num", Шапка.НомерДокумента, СообщениеКПередаче);
			
		Иначе
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "receiver_id", Шапка.ИдентификаторКонтрагента, СообщениеКПередаче);
			ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_num", Шапка.НомерДокумента, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_date", Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "turnover_type", ИнтеграцияМДЛП.КодЗначенияПеречисления(Шапка.ТипОперации), СообщениеКПередаче);
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "source", ИнтеграцияМДЛП.КодЗначенияПеречисления(Шапка.ИсточникФинансирования), СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_type", ИнтеграцияМДЛП.КодЗначенияПеречисления(Шапка.ТипДоговора), СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_num", СокрЛП(Шапка.НомерКонтракта), СообщениеКПередаче);
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_gos_num", СокрЛП(Шапка.НомерГосударственногоКонтракта), СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_gos_date", Формат(Шапка.ДатаГосударственногоКонтракта, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
			
		КонецЕсли;
		
		Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Уведомление.order_details, "union") Тогда
			Для Каждого Строка Из Товары Цикл
				НоваяСтрока = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.order_details, "union");
				
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sgtin"    , Строка.НомерКИЗ, СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Строка.Цена    , СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Строка.СуммаНДС, СообщениеКПередаче);
				
				Уведомление.order_details.union.Добавить(НоваяСтрока);
			КонецЦикла;
			Пока Упаковки.Следующий() Цикл
				НоваяСтрока = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.order_details, "union");
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "sscc_detail") Тогда
					НоваяСтрока.sscc_detail = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(НоваяСтрока, "sscc_detail");
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока.sscc_detail, "sscc", Упаковки.НомерКИЗ, СообщениеКПередаче);
					Если Упаковки.УказанСостав Тогда
						СоставУпаковки = Упаковки.Выбрать();
						Пока СоставУпаковки.Следующий() Цикл
							СтрокаСостава = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(НоваяСтрока.sscc_detail, "detail");
							ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "gtin"         , СоставУпаковки.GTIN, СообщениеКПередаче);
							ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "series_number", СоставУпаковки.НомерСерии, СообщениеКПередаче);
							ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "cost"         , СоставУпаковки.Цена, СообщениеКПередаче);
							ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "vat_value"    , СоставУпаковки.СуммаНДС, СообщениеКПередаче);
							НоваяСтрока.sscc_detail.detail.Добавить(СтрокаСостава);
						КонецЦикла;
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Упаковки.ЦенаОстальныхПозиций, СообщениеКПередаче);
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Упаковки.СуммаНДСОстальныхПозиций, СообщениеКПередаче);
					Иначе
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Упаковки.Цена, СообщениеКПередаче);
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Упаковки.СуммаНДС, СообщениеКПередаче);
					КонецЕсли;
				Иначе
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sscc"     , Упаковки.НомерКИЗ, СообщениеКПередаче);
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Упаковки.Цена, СообщениеКПередаче);
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Упаковки.СуммаНДС, СообщениеКПередаче);
				КонецЕсли;
				
				Уведомление.order_details.union.Добавить(НоваяСтрока);
			КонецЦикла;
		Иначе
			Для Каждого Строка Из Товары Цикл
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sgtin", Строка.НомерКиЗ, СообщениеКПередаче);
			КонецЦикла;
			Пока Упаковки.Следующий() Цикл
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sscc" , Упаковки.НомерКиЗ, СообщениеКПередаче);
			КонецЦикла;
		КонецЕсли;
	Иначе
		
		СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПодтверждениеСведенийОПриемке;
		
		ИмяПакета = "accept";
		
		Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
		ПередачаДанных[ИмяПакета] = Уведомление;
		
		Уведомление.action_id = Уведомление.action_id;
		
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "counterparty_id", Шапка.ИдентификаторКонтрагента, СообщениеКПередаче);
		ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
		
		ЭтоВозвратПриостановленныхЛП = Шапка.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ВозвратПриостановленныхЛП;
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "confirm_paused", ЭтоВозвратПриостановленныхЛП, СообщениеКПередаче);
		
		Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
		Для Каждого Строка Из Товары Цикл
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sgtin", Строка.НомерКИЗ, СообщениеКПередаче);
		КонецЦикла;
		Пока Упаковки.Следующий() Цикл
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sscc", Упаковки.НомерКИЗ, СообщениеКПередаче);
		КонецЦикла;
		
	КонецЕсли;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция УведомлениеОбОтзывеПереданногоТовара(ДокументСсылка, ДополнительныеПараметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтзывПереданногоТовара;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена  КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                        КАК Ссылка,
	|	Шапка.Дата                          КАК Дата,
	|	Шапка.Основание                     КАК Основание,
	|	Шапка.Операция                      КАК Операция,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Шапка.МестоДеятельности.Идентификатор
	|		ИНАЧЕ Шапка.ИдентификаторОрганизации
	|	КОНЕЦ                               КАК ИдентификаторОрганизации,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Шапка.МестоДеятельностиГрузополучателя.Идентификатор
	|		ИНАЧЕ Шапка.ИдентификаторКонтрагента
	|	КОНЕЦ                               КАК ИдентификаторКонтрагента,
	|	Шапка.СхемаАкцептования             КАК СхемаАкцептования
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN              КАК GTIN,
	|	НомераУпаковок.НомерКиЗ  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОтгрузкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Отозвать)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Отозвать)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выгрузить();
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Упаковки.Количество() = 0) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "refusal_sender";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "receiver_id" , Шапка.ИдентификаторКонтрагента, СообщениеКПередаче);
	
	ПричинаОтзыва = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Причина");
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "reason", ПричинаОтзыва, СообщениеКПередаче);
	
	ЭтоВозвратПриостановленныхЛП = Шапка.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ВозвратПриостановленныхЛП;
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "confirm_paused", ЭтоВозвратПриостановленныхЛП, СообщениеКПередаче);
	
	Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
	Для Каждого Строка Из Товары Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sgtin", Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	Для Каждого Строка Из Упаковки Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sscc" , Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция УведомлениеОПостановкеСнятииАрбитража(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПостановкаСнятиеАрбитража;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена  КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                        КАК Ссылка,
	|	Шапка.Дата                          КАК Дата,
	|	Шапка.Основание                     КАК Основание,
	|	Шапка.Операция                      КАК Операция,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Шапка.МестоДеятельности.Идентификатор
	|		ИНАЧЕ Шапка.ИдентификаторОрганизации
	|	КОНЕЦ                               КАК ИдентификаторОрганизации,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Шапка.МестоДеятельностиГрузополучателя.Идентификатор
	|		ИНАЧЕ Шапка.ИдентификаторКонтрагента
	|	КОНЕЦ                               КАК ИдентификаторКонтрагента,
	|	Шапка.СхемаАкцептования             КАК СхемаАкцептования,
	|	Шапка.НомерДокумента                КАК НомерДокумента,
	|	Шапка.ДатаДокумента                 КАК ДатаДокумента
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN              КАК GTIN,
	|	НомераУпаковок.НомерКиЗ  КАК НомерКиЗ,
	|	НомераУпаковок.Арбитраж  КАК Арбитраж
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОтгрузкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.УстановленПередача), ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.СнятПередача))
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки  КАК НомерКиЗ,
	|	НомераУпаковок.Арбитраж       КАК Арбитраж
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.УстановленПередача), ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.СнятПередача))
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выгрузить();
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Упаковки.Количество() = 0) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПризнакПостановкиСнятияАрбитража = Неопределено;
	НомераУпаковок = Новый Массив;
	Для Каждого Строка Из Товары Цикл
		
		НомераУпаковок.Добавить(Строка.НомерКиЗ);
		
		Если ПризнакПостановкиСнятияАрбитража <> Строка.Арбитраж Тогда
			Если ПризнакПостановкиСнятияАрбитража <> Неопределено Тогда
				ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Передача уведомления с одновременной постановкой в арбитраж и снятием арбитража недопустима.'"));
				Сообщения.Добавить(СообщениеКПередаче);
				Возврат Сообщения;
			КонецЕсли;
			ПризнакПостановкиСнятияАрбитража = Строка.Арбитраж;
		КонецЕсли;
		
	КонецЦикла;
	
	НомераТранспортныхУпаковок = Новый Массив;
	Для Каждого Строка Из Упаковки Цикл
		
		НомераТранспортныхУпаковок.Добавить(Строка.НомерКиЗ);
		
		Если ПризнакПостановкиСнятияАрбитража <> Строка.Арбитраж Тогда
			Если ПризнакПостановкиСнятияАрбитража <> Неопределено Тогда
				ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Передача уведомления с одновременной постановкой в арбитраж и снятием арбитража недопустима.'"));
				Сообщения.Добавить(СообщениеКПередаче);
				Возврат Сообщения;
			КонецЕсли;
			ПризнакПостановкиСнятияАрбитража = Строка.Арбитраж;
		КонецЕсли;
		
	КонецЦикла;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "arbitration";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "counterparty_id", Шапка.ИдентификаторКонтрагента, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_date", Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_num", Шапка.НомерДокумента, СообщениеКПередаче);
	
	Если ПризнакПостановкиСнятияАрбитража = Перечисления.СостоянияАрбитражаМДЛП.УстановленПередача Тогда
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "sign_arbitration", 1, СообщениеКПередаче);
	ИначеЕсли ПризнакПостановкиСнятияАрбитража = Перечисления.СостоянияАрбитражаМДЛП.СнятПередача Тогда
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "sign_arbitration", 2, СообщениеКПередаче);
	КонецЕсли;
	
	Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
	Для Каждого НомерКиЗ Из НомераУпаковок Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sgtin", НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	Для Каждого НомерКиЗ Из НомераТранспортныхУпаковок Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sscc", НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция УведомлениеОПодтвержденииПостановкиСнятияАрбитража(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПодтверждениеСведенийОПриемке;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена                    КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                                          КАК Ссылка,
	|	Шапка.Дата                                            КАК Дата,
	|	Шапка.Основание                                       КАК Основание,
	|	Шапка.Операция                                        КАК Операция,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Шапка.МестоДеятельности.Идентификатор
	|		ИНАЧЕ Шапка.ИдентификаторОрганизации
	|	КОНЕЦ                                                 КАК ИдентификаторОрганизации,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Шапка.МестоДеятельностиГрузополучателя.Идентификатор
	|		ИНАЧЕ Шапка.ИдентификаторКонтрагента
	|	КОНЕЦ                                                 КАК ИдентификаторКонтрагента,
	|	Шапка.СхемаАкцептования                               КАК СхемаАкцептования
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN              КАК GTIN,
	|	НомераУпаковок.НомерКиЗ  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОтгрузкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить)
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.УстановленПолучение), ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.СнятПолучение))
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить)
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.УстановленПолучение), ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.СнятПолучение))
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выгрузить();
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Упаковки.Количество() = 0) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	ИмяПакета = "accept";
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "counterparty_id", Шапка.ИдентификаторКонтрагента, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	
	ЭтоВозвратПриостановленныхЛП = Шапка.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ВозвратПриостановленныхЛП;
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "confirm_paused", ЭтоВозвратПриостановленныхЛП, СообщениеКПередаче);
	
	Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
	Для Каждого Строка Из Товары Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sgtin", Строка.НомерКИЗ, СообщениеКПередаче);
	КонецЦикла;
	Для Каждого Строка Из Упаковки Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sscc", Строка.НомерКИЗ, СообщениеКПередаче);
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция УведомлениеОбОтказеОтПостановкиСнятияАрбитража(ДокументСсылка, ДополнительныеПараметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтказОтПриемкиТовара;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена  КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                        КАК Ссылка,
	|	Шапка.Дата                          КАК Дата,
	|	Шапка.Основание                     КАК Основание,
	|	Шапка.Операция                      КАК Операция,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Шапка.МестоДеятельности.Идентификатор
	|		ИНАЧЕ Шапка.ИдентификаторОрганизации
	|	КОНЕЦ                               КАК ИдентификаторОрганизации,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Шапка.МестоДеятельностиГрузополучателя.Идентификатор
	|		ИНАЧЕ Шапка.ИдентификаторКонтрагента
	|	КОНЕЦ                               КАК ИдентификаторКонтрагента,
	|	Шапка.СхемаАкцептования             КАК СхемаАкцептования
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN              КАК GTIN,
	|	НомераУпаковок.НомерКиЗ  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОтгрузкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Отказаться)
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.УстановленПолучение), ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.СнятПолучение))
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Отказаться)
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.УстановленПолучение), ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.СнятПолучение))
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выгрузить();
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Упаковки.Количество() = 0) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "refusal_receiver";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "shipper_id" , Шапка.ИдентификаторКонтрагента, СообщениеКПередаче);
	
	ПричинаОтзыва = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Причина");
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "reason", ПричинаОтзыва, СообщениеКПередаче);
	
	ЭтоВозвратПриостановленныхЛП = Шапка.Операция = Перечисления.ОперацииОтгрузкиМДЛП.ВозвратПриостановленныхЛП;
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "confirm_paused", ЭтоВозвратПриостановленныхЛП, СообщениеКПередаче);
	
	Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
	Для Каждого Строка Из Товары Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sgtin", Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	Для Каждого Строка Из Упаковки Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sscc" , Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция ОпределитьУведомлениеОбОтгрузке(ДанныеДокумента)
	
	ДокументСсылка = ПолучитьСсылку();
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка);
	
КонецФункции

Функция ОпределитьУведомленияОбОтгрузкеПоПодтверждению(ДанныеДокумента)
	
	ДатаОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
	ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "counterparty_id");
	ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	СхемаАкцептования = Новый Массив;
	СхемаАкцептования.Добавить(Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок);
	СхемаАкцептования.Добавить(Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок);
	Возврат ОпределитьДокументыОтгрузки(ДатаОперации, ИдентификаторОрганизации, ИдентификаторКонтрагента, НомераПотребительскихУпаковок, НомераТранспортныхУпаковок, СхемаАкцептования);
	
КонецФункции

Функция ОпределитьУведомленияОбОтгрузкеПоОтказу(ДанныеДокумента)
	
	ДатаОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
	ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "shipper_id");
	ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	СхемаАкцептования = Новый Массив;
	СхемаАкцептования.Добавить(Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок);
	СхемаАкцептования.Добавить(Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок);
	Возврат ОпределитьДокументыОтгрузки(ДатаОперации, ИдентификаторОрганизации, ИдентификаторКонтрагента, НомераПотребительскихУпаковок, НомераТранспортныхУпаковок, СхемаАкцептования);
	
КонецФункции

Функция ОпределитьУведомленияОбОтгрузкеПоПостановкеСнятииАрбитража(ДанныеДокумента)
	
	ДатаОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
	ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "counterparty_id");
	ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	СхемаАкцептования = Новый Массив;
	СхемаАкцептования.Добавить(Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок);
	СхемаАкцептования.Добавить(Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок);
	Возврат ОпределитьДокументыОтгрузки(ДатаОперации, ИдентификаторОрганизации, ИдентификаторКонтрагента, НомераПотребительскихУпаковок, НомераТранспортныхУпаковок, СхемаАкцептования);
	
КонецФункции

Функция ОпределитьДокументыОтгрузки(ДатаОперации, ИдентификаторОрганизации, ИдентификаторКонтрагента, НомераПотребительскихУпаковок, НомераТранспортныхУпаковок, СхемаАкцептования)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка       КАК Документ,
	|	Ссылка.Дата  КАК Дата
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.НомераУпаковок КАК Упаковки
	|ГДЕ
	|	Упаковки.НомерКиЗ В (&НомераПотребительскихУпаковок)
	|	И НЕ (Упаковки.СостояниеПодтверждения В (&КонечныеСостояния) И Упаковки.Арбитраж = &АрбитражНеУстановлен)
	|	И ВЫБОР
	|		КОГДА Ссылка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Ссылка.МестоДеятельности.Идентификатор
	|		ИНАЧЕ Ссылка.ИдентификаторОрганизации
	|	КОНЕЦ = &ИдентификаторОрганизации
	|	И ВЫБОР
	|		КОГДА Ссылка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Ссылка.МестоДеятельностиГрузополучателя.Идентификатор
	|		ИНАЧЕ Ссылка.ИдентификаторКонтрагента
	|	КОНЕЦ = &ИдентификаторКонтрагента
	|	И Ссылка.СхемаАкцептования В (&СхемаАкцептования)
	|	И НЕ Ссылка.ПометкаУдаления
	|	И Ссылка.Дата <= &ДатаОперации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Ссылка       КАК Документ,
	|	Ссылка.Дата  КАК Дата
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.ТранспортныеУпаковки КАК Упаковки
	|ГДЕ
	|	Упаковки.НомерУпаковки В (&НомераТранспортныхУпаковок)
	|	И НЕ (Упаковки.СостояниеПодтверждения В (&КонечныеСостояния) И Упаковки.Арбитраж = &АрбитражНеУстановлен)
	|	И ВЫБОР
	|		КОГДА Ссылка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Ссылка.МестоДеятельности.Идентификатор
	|		ИНАЧЕ Ссылка.ИдентификаторОрганизации
	|	КОНЕЦ = &ИдентификаторОрганизации
	|	И ВЫБОР
	|		КОГДА Ссылка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Ссылка.МестоДеятельностиГрузополучателя.Идентификатор
	|		ИНАЧЕ Ссылка.ИдентификаторКонтрагента
	|	КОНЕЦ = &ИдентификаторКонтрагента
	|	И Ссылка.СхемаАкцептования В (&СхемаАкцептования)
	|	И НЕ Ссылка.ПометкаУдаления
	|	И Ссылка.Дата <= &ДатаОперации
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка.Дата УБЫВ,
	|	Ссылка УБЫВ
	|");
	
	КонечныеСостояния = Новый Массив;
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОприходованоНовымВладельцем);
	
	Запрос.УстановитьПараметр("КонечныеСостояния"            , КонечныеСостояния);
	Запрос.УстановитьПараметр("НомераПотребительскихУпаковок", НомераПотребительскихУпаковок);
	Запрос.УстановитьПараметр("НомераТранспортныхУпаковок"   , НомераТранспортныхУпаковок);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации"     , ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента"     , ИдентификаторКонтрагента);
	Запрос.УстановитьПараметр("СхемаАкцептования"            , СхемаАкцептования);
	Запрос.УстановитьПараметр("ДатаОперации"                 , ДатаОперации);
	Запрос.УстановитьПараметр("АрбитражНеУстановлен"         , Перечисления.СостоянияАрбитражаМДЛП.ПустаяСсылка());
	
	ДокументыСУпаковками = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	Возврат ДокументыСУпаковками;
	
КонецФункции

Функция ОпределитьУведомленияОбОтгрузкеНаНезарегистрированноеМестоДеятелоности(ДанныеДокумента)
	
	ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "shipper_id");
	ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка  КАК Документ
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.НомераУпаковок КАК Упаковки
	|ГДЕ
	|	Упаковки.НомерКиЗ В (&НомераПотребительскихУпаковок)
	|	И Упаковки.СостояниеПодтверждения В (&КонечныеСостояния)
	|	И Ссылка.МестоДеятельности.Идентификатор = &ИдентификаторОрганизации
	|	И Ссылка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|	И Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОтгрузкиМДЛП.Продажа)
	|	И Ссылка.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.ОрганизацииМДЛП.ПустаяСсылка)
	|	И Ссылка.МестоДеятельностиГрузополучателя = ЗНАЧЕНИЕ(Справочник.МестаДеятельностиМДЛП.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Ссылка  КАК Документ
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.ТранспортныеУпаковки КАК Упаковки
	|ГДЕ
	|	Упаковки.НомерУпаковки В (&НомераТранспортныхУпаковок)
	|	И Ссылка.МестоДеятельности.Идентификатор = &ИдентификаторОрганизации
	|	И Ссылка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|	И Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОтгрузкиМДЛП.Продажа)
	|	И Ссылка.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.ОрганизацииМДЛП.ПустаяСсылка)
	|	И Ссылка.МестоДеятельностиГрузополучателя = ЗНАЧЕНИЕ(Справочник.МестаДеятельностиМДЛП.ПустаяСсылка)
	|");
	
	КонечныеСостояния = Новый Массив;
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено);
	
	Запрос.УстановитьПараметр("КонечныеСостояния", КонечныеСостояния);
	Запрос.УстановитьПараметр("НомераПотребительскихУпаковок", НомераПотребительскихУпаковок);
	Запрос.УстановитьПараметр("НомераТранспортныхУпаковок"   , НомераТранспортныхУпаковок);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации"     , ИдентификаторОрганизации);
	
	ДокументыСУпаковками = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	Если ДокументыСУпаковками.Количество() = 0 Тогда
		// Данные сообщения являются информационными и их не обязательно куда-то ривязывать.
		ДокументыСУпаковками.Добавить(Неопределено);
	КонецЕсли;
	Возврат ДокументыСУпаковками;
	
КонецФункции

Функция ОпределитьУведомленияОбОтгрузкеПоОприходованию(ДанныеДокумента)
	
	ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "owner_id");
	ИдентификаторОрганизацииОтправителя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "ИдентификаторОрганизацииОтправителя");
	ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	
	Если ИдентификаторОрганизации = ИдентификаторКонтрагента Или ИдентификаторОрганизации = ИдентификаторОрганизацииОтправителя Тогда
		// Операция Оприходования была применена к собственным упаковкам, на том же МД.
		// В этом случае обрабатывать Уведомление владельца об оприходовании не нужно.
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
	
	НомераУпаковок = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НомераУпаковок, ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НомераУпаковок, ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = РегистрыСведений.УпаковкиМДЛП.ПолучитьДанныеУпаковок(НомераУпаковок, Тип("МенеджерВременныхТаблиц"));
	Запрос.Текст = "
	// Упаковки без родителей.
	|ВЫБРАТЬ
	|	ДанныеУпаковок.НомерУпаковки      КАК НомерУпаковки,
	|	ДанныеУпаковок.ГрупповаяУпаковка  КАК ГрупповаяУпаковка
	|ПОМЕСТИТЬ УпаковкиДляПоиска
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|ГДЕ
	|	ДанныеУпаковок.НомерГрупповойУпаковки = &ПустаяГрупповаяУпаковка
	|	И ДанныеУпаковок.МестоДеятельности.Идентификатор = &ИдентификаторОрганизации
	|
	|ОБЪЕДИНИТЬ
	|
	// Родительские упаковки самого верхнего уровня. Необходимы в случае если в 702 было использовано автоизъятие.
	|ВЫБРАТЬ
	|	РодительскиеУпаковкиСамогоВерхнегоУровня.НомерУпаковки      КАК НомерУпаковки,
	|	РодительскиеУпаковкиСамогоВерхнегоУровня.ГрупповаяУпаковка  КАК ГрупповаяУпаковка
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.УпаковкиМДЛП КАК РодительскиеУпаковкиСамогоВерхнегоУровня
	|		ПО
	|			РодительскиеУпаковкиСамогоВерхнегоУровня.НомерУпаковки = ДанныеУпаковок.ДокументРезерва
	|			И РодительскиеУпаковкиСамогоВерхнегоУровня.МестоДеятельности.Идентификатор = &ИдентификаторОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Получение документов, в которых указаны упаковки из оприходования.
	// Примечание. Брать документ напрямую из измерения ДокументРезерва РС.УпаковкиМДЛП нельзя,
	// т.к. документ может быть не проведен, а только загружен.
	|ВЫБРАТЬ
	|	Упаковки.Ссылка       КАК Документ,
	|	Упаковки.Ссылка.Дата  КАК Дата
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.НомераУпаковок КАК Упаковки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			УпаковкиДляПоиска КАК УпаковкиДляПоиска
	|		ПО
	|			УпаковкиДляПоиска.НомерУпаковки = Упаковки.НомерКиЗ
	|			И НЕ УпаковкиДляПоиска.ГрупповаяУпаковка
	|ГДЕ
	|	НЕ Упаковки.СостояниеПодтверждения В (&КонечныеСостояния)
	|	И ВЫБОР
	|		КОГДА Упаковки.Ссылка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Упаковки.Ссылка.МестоДеятельности.Идентификатор
	|		ИНАЧЕ Упаковки.Ссылка.ИдентификаторОрганизации
	|	КОНЕЦ = &ИдентификаторОрганизации
	|	И ВЫБОР
	|		КОГДА Упаковки.Ссылка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Упаковки.Ссылка.МестоДеятельностиГрузополучателя.Идентификатор
	|		ИНАЧЕ Упаковки.Ссылка.ИдентификаторКонтрагента
	|	КОНЕЦ = &ИдентификаторКонтрагента
	|	И НЕ Ссылка.ПометкаУдаления
	|	И Упаковки.Ссылка.Дата <= &ДатаОперации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Упаковки.Ссылка       КАК Документ,
	|	Упаковки.Ссылка.Дата  КАК Дата
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП.ТранспортныеУпаковки КАК Упаковки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			УпаковкиДляПоиска КАК УпаковкиДляПоиска
	|		ПО
	|			УпаковкиДляПоиска.НомерУпаковки = Упаковки.НомерУпаковки
	|			И УпаковкиДляПоиска.ГрупповаяУпаковка
	|ГДЕ
	|	НЕ Упаковки.СостояниеПодтверждения В (&КонечныеСостояния)
	|	И ВЫБОР
	|		КОГДА Упаковки.Ссылка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Упаковки.Ссылка.МестоДеятельности.Идентификатор
	|		ИНАЧЕ Упаковки.Ссылка.ИдентификаторОрганизации
	|	КОНЕЦ = &ИдентификаторОрганизации
	|	И ВЫБОР
	|		КОГДА Упаковки.Ссылка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок)
	|			ТОГДА Упаковки.Ссылка.МестоДеятельностиГрузополучателя.Идентификатор
	|		ИНАЧЕ Упаковки.Ссылка.ИдентификаторКонтрагента
	|	КОНЕЦ = &ИдентификаторКонтрагента
	|	И НЕ Ссылка.ПометкаУдаления
	|	И Упаковки.Ссылка.Дата <= &ДатаОперации
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Документ УБЫВ
	|";
	
	КонечныеСостояния = Новый Массив;
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ДанныеОбУпаковкахАктуализированы);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОприходованоНовымВладельцем);
	
	Запрос.УстановитьПараметр("КонечныеСостояния"       , КонечныеСостояния);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	Запрос.УстановитьПараметр("ДатаОперации"            , ДатаОперации);
	Запрос.УстановитьПараметр("ПустаяГрупповаяУпаковка" , Метаданные.ОпределяемыеТипы.SSCC.Тип.ПривестиЗначение());
	
	ДокументыСУпаковками = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	Возврат ДокументыСУпаковками;
	
КонецФункции

Процедура ЗагрузитьУведомлениеОПриемкеНаСкладПокупателя(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если Документ = Неопределено Тогда
		
		ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "shipper_id");
		ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
		НомерДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_num");
		ДатаДокумента = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_date"));
		Операция = Перечисления.ОперацииОтгрузкиМДЛП.Получить(
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "receive_type", 1) - 1);
		ТипДоговора = Перечисления.ТипыДоговоровМДЛП.Получить(
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "contract_type", 1) - 1);
		НомерКонтракта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "contract_num");
		ИсточникФинансирования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "source");
		Если ИсточникФинансирования <> Неопределено Тогда
			ИсточникФинансирования = Перечисления.ИсточникиФинансированияМДЛП.Получить(ИсточникФинансирования - 1);
		КонецЕсли;
		НомерГосударственногоКонтракта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "contract_gos_num");
		ДатаГосударственногоКонтракта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "contract_gos_date");
		Если ЗначениеЗаполнено(ДатаГосударственногоКонтракта) Тогда
			ДатаГосударственногоКонтракта = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаГосударственногоКонтракта);
		КонецЕсли;
		
		Документ = СоздатьДокумент();
		Документ.УстановитьСсылкуНового(ДокументСсылка);
		Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
		Документ.ИдентификаторОрганизации = ИдентификаторОрганизации;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация, Документ.МестоДеятельности);
		Документ.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторКонтрагента, Документ.Грузополучатель, Документ.МестоДеятельностиГрузополучателя);
		Документ.СхемаАкцептования        = Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок;
		Документ.НомерДокумента           = НомерДокумента;
		Документ.ДатаДокумента            = ДатаДокумента;
		Документ.Операция                 = Операция;
		Документ.ИсточникФинансирования   = ИсточникФинансирования;
		Документ.ТипДоговора              = ТипДоговора;
		Документ.НомерКонтракта           = НомерКонтракта;
		Документ.НомерГосударственногоКонтракта = НомерГосударственногоКонтракта;
		Документ.ДатаГосударственногоКонтракта  = ДатаГосударственногоКонтракта;
		
	Иначе
		Документ.Заблокировать();
	КонецЕсли;
	
	Для Каждого Товар Из ДанныеДокумента.order_details.union Цикл
		
		Если Товар.sgtin <> Неопределено Тогда
			
			GTIN = Лев(Товар.sgtin, 14);
			Цена = Товар.cost;
			НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN, Цена", GTIN, Цена));
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаТовара = Документ.Товары.Добавить();
				СтрокаТовара.GTIN = GTIN;
				СтрокаТовара.Цена = Цена;
				СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			Иначе
				СтрокаТовара = НайденныеСтроки[0];
			КонецЕсли;
			
			СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
			СтрокаТовара.СуммаНДС   = СтрокаТовара.СуммаНДС + ?(Товар.vat_value = Неопределено, 0, Товар.vat_value);
			СтрокаТовара.Сумма      = СтрокаТовара.Сумма + СтрокаТовара.Цена;
			
			СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
			СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
			СтрокаУпаковки.НомерКИЗ = Товар.sgtin;
			СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Товар, "sscc_detail") И Товар.sscc_detail <> Неопределено Тогда
			
			СтрокаУпаковки = Документ.ТранспортныеУпаковки.Добавить();
			СтрокаУпаковки.НомерУпаковки = Товар.sscc_detail.sscc;
			СтрокаУпаковки.Цена          = Товар.cost;
			СтрокаУпаковки.СуммаНДС      = Товар.vat_value;
			СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
			СтрокаУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			
			Для Каждого СоставУпаковки Из Товар.sscc_detail.detail Цикл
				СтрокаСостава = Документ.СоставТранспортныхУпаковок.Добавить();
				СтрокаСостава.ИдентификаторСтроки = СтрокаУпаковки.ИдентификаторСтроки;
				СтрокаСостава.GTIN       = СоставУпаковки.GTIN;
				СтрокаСостава.НомерСерии = СоставУпаковки.series_number;
				СтрокаСостава.Цена       = СоставУпаковки.cost;
				СтрокаСостава.СуммаНДС   = СоставУпаковки.vat_value;
			КонецЦикла;
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Товар, "sscc") И Товар.sscc <> Неопределено Тогда
			
			СтрокаУпаковки = Документ.ТранспортныеУпаковки.Добавить();
			СтрокаУпаковки.НомерУпаковки = Товар.sscc;
			СтрокаУпаковки.Цена          = Товар.cost;
			СтрокаУпаковки.СуммаНДС      = Товар.vat_value;
			СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
			СтрокаУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОПриемке(Документ);
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОПриемкеВРамкахАгентскогоДоговора(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если Документ = Неопределено Тогда
		
		ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "shipper_id");
		ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
		НомерДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_num");
		ДатаДокумента = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_date"));
		Операция = Перечисления.ОперацииОтгрузкиМДЛП.ОтгрузкаВРамкахАгентскогоДоговора;
		ИндексТипаОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "receive_type", 1) - 1;
		ТипОперации = Перечисления.ТипыОперацийОтгрузкиМДЛП.Получить(ИндексТипаОперации);
		
		Документ = СоздатьДокумент();
		Документ.УстановитьСсылкуНового(ДокументСсылка);
		Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
		Документ.ИдентификаторОрганизации = ИдентификаторОрганизации;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация, Документ.МестоДеятельности);
		Документ.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторКонтрагента, Документ.Грузополучатель, Документ.МестоДеятельностиГрузополучателя);
		Документ.СхемаАкцептования        = Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок;
		Документ.НомерДокумента           = НомерДокумента;
		Документ.ДатаДокумента            = ДатаДокумента;
		Документ.Операция                 = Операция;
		Документ.ТипОперации              = ТипОперации;
		
	Иначе
		Документ.Заблокировать();
	КонецЕсли;
	
	Для Каждого sgtin Из ДанныеДокумента.order_details.sgtin Цикл
		
		GTIN = Лев(sgtin, 14);
		НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN, НомерСерии", GTIN, ""));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовара = Документ.Товары.Добавить();
			СтрокаТовара.GTIN = GTIN;
			СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		Иначе
			СтрокаТовара = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
		
		СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
		СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
		СтрокаУпаковки.НомерКИЗ = sgtin;
		СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
		
	КонецЦикла;
	
	Для Каждого sscc Из ДанныеДокумента.order_details.sscc Цикл
		
		СтрокаУпаковки = Документ.ТранспортныеУпаковки.Добавить();
		СтрокаУпаковки.НомерУпаковки = sscc;
		СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
		СтрокаУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОПриемке(Документ);
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОПодтверждении(ДанныеДокумента, ДокументСсылка)
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Документ.Заблокировать();
	
	Для Каждого НомерУпаковки Из НомераПотребительскихУпаковок Цикл
		Строка = Документ.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
		Если Строка <> Неопределено Тогда
			
			// Снятие арбитража было подтверждено ранее. Сейчас загружается подтверждение приемки товаров. Нужно очистить Арбитраж.
			Если (Строка.Арбитраж = Перечисления.СостоянияАрбитражаМДЛП.СнятПередача Или Строка.Арбитраж = Перечисления.СостоянияАрбитражаМДЛП.СнятПолучение)
			   И Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено Тогда
				Строка.Арбитраж = Перечисления.СостоянияАрбитражаМДЛП.ПустаяСсылка();
			КонецЕсли;
			
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НомерУпаковки Из НомераТранспортныхУпаковок Цикл
		Строка = Документ.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
		Если Строка <> Неопределено Тогда
			
			// Снятие арбитража было подтверждено ранее. Сейчас загружается подтверждение приемки товаров. Нужно очистить Арбитраж.
			Если (Строка.Арбитраж = Перечисления.СостоянияАрбитражаМДЛП.СнятПередача Или Строка.Арбитраж = Перечисления.СостоянияАрбитражаМДЛП.СнятПолучение)
			   И Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено Тогда
				Строка.Арбитраж = Перечисления.СостоянияАрбитражаМДЛП.ПустаяСсылка();
			КонецЕсли;
			
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
			
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОбОтказе(ДанныеДокумента, ДокументСсылка)
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Документ.Заблокировать();
	
	Для Каждого НомерУпаковки Из НомераПотребительскихУпаковок Цикл
		Строка = Документ.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НомерУпаковки Из НомераТранспортныхУпаковок Цикл
		Строка = Документ.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем;
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОПостановкеСнятииАрбитража(ДанныеДокумента, ДокументСсылка)
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	// На этапе загрузки уведомления (схема 621) постановка в арбитраж/снятие арбитража не может быть подтверждена.
	// Подтверждения устанавливаются в момент загрузки квитанции к схеме 701 (для подтверждающего постановку в арбитраж/снятие арбитража),
	// или при загрузке уведомления по схеме 607 (для инициатора постановки в арбитраж/снятия арбитража).
	ПризнакПостановкиСнятияАрбитража = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "sign_arbitration");
	Если ПризнакПостановкиСнятияАрбитража = 1 Тогда
		Арбитраж = Перечисления.СостоянияАрбитражаМДЛП.УстановленПолучение;
	ИначеЕсли ПризнакПостановкиСнятияАрбитража = 2 Тогда
		Арбитраж = Перечисления.СостоянияАрбитражаМДЛП.СнятПолучение;
	КонецЕсли;
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Документ.Заблокировать();
	
	Для Каждого НомерУпаковки Из НомераПотребительскихУпаковок Цикл
		Строка = Документ.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
			Строка.Арбитраж = Арбитраж;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НомерУпаковки Из НомераТранспортныхУпаковок Цикл
		Строка = Документ.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
			Строка.Арбитраж = Арбитраж;
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеВладельцаОбОприходовании(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если Документ = Неопределено Тогда
		// Новый документ, при загрузке Уведомления владельца об оприходовании не создается.
		Возврат;
	Иначе
		Документ.Заблокировать();
	КонецЕсли;
	
	ИсходныеНомераТранспортныхУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	НомераТранспортныхУпаковок = ?(ЗначениеЗаполнено(ИсходныеНомераТранспортныхУпаковок), ОбщегоНазначения.СкопироватьРекурсивно(ИсходныеНомераТранспортныхУпаковок), Новый Массив);
	
	ИсходныеНомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераПотребительскихУпаковок = ?(ЗначениеЗаполнено(ИсходныеНомераПотребительскихУпаковок), ОбщегоНазначения.СкопироватьРекурсивно(ИсходныеНомераПотребительскихУпаковок), Новый Массив);
	
	НеотработанныеТранспортныеУпаковкиДокумента = Новый Массив;
	Для Каждого Строка Из Документ.ТранспортныеУпаковки Цикл
		
		Если Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОприходованоНовымВладельцем Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексУпаковки = НомераТранспортныхУпаковок.Найти(Строка.НомерУпаковки);
		Если ИндексУпаковки <> Неопределено Тогда
			
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОприходованоНовымВладельцем;
			Строка.Арбитраж = Неопределено;
			
			НомераТранспортныхУпаковок.Удалить(ИндексУпаковки);
			
		Иначе
			НеотработанныеТранспортныеУпаковкиДокумента.Добавить(Строка.НомерУпаковки);
		КонецЕсли;
		
	КонецЦикла;
	
	НеотработанныеПотребительскиеУпаковкиДокумента = Новый Массив;
	Для Каждого Строка Из Документ.НомераУпаковок Цикл
		
		Если Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОприходованоНовымВладельцем Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексУпаковки = НомераПотребительскихУпаковок.Найти(Строка.НомерКИЗ);
		Если ИндексУпаковки <> Неопределено Тогда
			
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОприходованоНовымВладельцем;
			Строка.Арбитраж = Неопределено;
			
			НомераПотребительскихУпаковок.Удалить(ИндексУпаковки);
			
		Иначе
			НеотработанныеПотребительскиеУпаковкиДокумента.Добавить(Строка.НомерКИЗ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НеотработанныеТранспортныеУпаковкиДокумента.Количество() > 0 И (НомераТранспортныхУпаковок.Количество() > 0 Или НомераПотребительскихУпаковок.Количество() > 0) Тогда
		
		// Обработка случая, когда со стороны грузополучателя было автоизъятие.
		
		ТаблицаВложенныхУпаковок = РегистрыСведений.УпаковкиМДЛП.ПолучитьДанныеВсехПодчиненныхУпаковокБезИерархии(НеотработанныеТранспортныеУпаковкиДокумента, Новый Структура("МестоДеятельности", Документ.МестоДеятельности));
		ТаблицаВложенныхУпаковок.Колонки.Добавить("Отработана", Новый ОписаниеТипов("Булево"));
		
		Для Каждого НомерУпаковки Из НеотработанныеТранспортныеУпаковкиДокумента Цикл
			
			// Ограничения:
			// Нет возможности обработать транспортную упаковку, в случае если на стороне грузополучателя было автоизъятие, а информации о вложенных потребительских упаковках в ИБ нет.
			
			Очередь = ТаблицаВложенныхУпаковок.НайтиСтроки(Новый Структура("НомерГрупповойУпаковки", НомерУпаковки));
			Пока Очередь.Количество() > 0 Цикл
				
				СтрокаТаблицы = Очередь[0];
				Очередь.Удалить(0);
				
				Если Не СтрокаТаблицы.ГрупповаяУпаковка Тогда
					
					Если НомераПотребительскихУпаковок.Количество() > 0 Тогда
						
						ИндексУпаковки = НомераПотребительскихУпаковок.Найти(СтрокаТаблицы.НомерУпаковки);
						Если ИндексУпаковки <> Неопределено Тогда
							
							СтрокаТаблицы.Отработана = Истина;
							
							Если НеотработанныеПотребительскиеУпаковкиДокумента.Количество() > 0 Тогда
								Строка = Документ.НомераУпаковок.Найти(СтрокаТаблицы.НомерУпаковки, "НомерКиЗ");
								Если Строка <> Неопределено Тогда
									Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОприходованоНовымВладельцем;
									Строка.Арбитраж = Неопределено;
								КонецЕсли;
							КонецЕсли;
							
							НомераПотребительскихУпаковок.Удалить(ИндексУпаковки);
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					
					Если НомераТранспортныхУпаковок.Количество() > 0 Тогда
						
						ИндексУпаковки = НомераТранспортныхУпаковок.Найти(СтрокаТаблицы.НомерУпаковки);
						Если ИндексУпаковки <> Неопределено Тогда
							
							СтрокаТаблицы.Отработана = Истина;
							
							Если НеотработанныеПотребительскиеУпаковкиДокумента.Количество() > 0 Тогда
								Строки = Документ.НомераУпаковок.НайтиСтроки(Новый Структура("НомерГрупповойУпаковки", СтрокаТаблицы.НомерУпаковки));
								Если Строки.Количество() > 0 Тогда
									Для Каждого Строка Из Строки Цикл
										Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОприходованоНовымВладельцем;
										Строка.Арбитраж = Неопределено;
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
							
							НомераТранспортныхУпаковок.Удалить(ИндексУпаковки);
							
						КонецЕсли;
						
					КонецЕсли;
					
					ОчередныеВложенныеУпаковки = ТаблицаВложенныхУпаковок.НайтиСтроки(Новый Структура("НомерГрупповойУпаковки", СтрокаТаблицы.НомерУпаковки));
					
					Если СтрокаТаблицы.Отработана Тогда
						Для Каждого ВложеннаяСтрокаТаблицы Из ОчередныеВложенныеУпаковки Цикл
							ВложеннаяСтрокаТаблицы.Отработана = Истина;
						КонецЦикла;
					КонецЕсли;
					
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Очередь, ОчередныеВложенныеУпаковки);
					
				КонецЕсли;
				
			КонецЦикла;
			
			НеотработанныеВложенныеПотребительскиеУпаковки = ТаблицаВложенныхУпаковок.НайтиСтроки(Новый Структура("ДокументРезерва, ГрупповаяУпаковка, Отработана", НомерУпаковки, Ложь, Ложь));
			Если НеотработанныеВложенныеПотребительскиеУпаковки.Количество() = 0 Тогда
				Строка = Документ.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
				Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОприходованоНовымВладельцем;
				Строка.Арбитраж = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияВладельцаОбОприходовании(Документ);
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерий(ПустаяСсылка().Метаданные(), Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//  ПараметрыУказанияСерий - Структура
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПустаяСсылка().Метаданные(), ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции Подключаемые.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДокументыДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОбОтгрузкеМДЛП КАК ДокументыДляОбработки
	|ГДЕ
	|		ДокументыДляОбработки.ИдентификаторОрганизации <> """"
	|		И ДокументыДляОбработки.МестоДеятельности = ЗНАЧЕНИЕ(Справочник.МестаДеятельностиМДЛП.ПустаяСсылка)
	|	ИЛИ
	|		ДокументыДляОбработки.ИдентификаторКонтрагента <> """"
	|		И ДокументыДляОбработки.МестоДеятельностиГрузополучателя = ЗНАЧЕНИЕ(Справочник.МестаДеятельностиМДЛП.ПустаяСсылка)
	|");

	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.УведомлениеОбОтгрузкеМДЛП";
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПараметрыОбработки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если ПараметрыОбработки.ЕстьЗаписиВоВременнойТаблице Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДокументыДляОбработки.Ссылка              КАК Ссылка,
		|	МестаДеятельности.Организация             КАК Организация,
		|	МестаДеятельности.Ссылка                  КАК МестоДеятельности,
		|	МестаДеятельностиКонтрагента.Организация  КАК Грузополучатель,
		|	МестаДеятельностиКонтрагента.Ссылка       КАК МестоДеятельностиГрузополучателя,
		|	Документ.ИдентификаторОрганизации         КАК Идентификатор,
		|	Документ.ИдентификаторКонтрагента         КАК ИдентификаторКонтрагента
		|ИЗ
		|	#ДокументыДляОбработки КАК ДокументыДляОбработки
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.УведомлениеОбОтгрузкеМДЛП КАК Документ
		|	ПО
		|		Документ.Ссылка = ДокументыДляОбработки.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.МестаДеятельностиМДЛП КАК МестаДеятельности
		|	ПО
		|		МестаДеятельности.Идентификатор = Документ.ИдентификаторОрганизации
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.МестаДеятельностиМДЛП КАК МестаДеятельностиКонтрагента
		|	ПО
		|		МестаДеятельностиКонтрагента.Идентификатор = Документ.ИдентификаторКонтрагента
		|";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументыДляОбработки", ПараметрыОбработки.ИмяВременнойТаблицы);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				Блокировка.Заблокировать();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось заблокировать объект: %Объект% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										Выборка.Ссылка.Метаданные(),
										Выборка.Ссылка,
										ТекстСообщения);
				Продолжить;
			КонецПопытки;
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Если Объект = Неопределено
			 Или Не ЗначениеЗаполнено(Выборка.МестоДеятельности)
			   И Не ИнтеграцияМДЛП.ЗначениеСоответствуетТипуXDTO(Выборка.Идентификатор, "subject_id_type")
			   И Не ЗначениеЗаполнено(Выборка.МестоДеятельностиГрузополучателя)
			   И Не ИнтеграцияМДЛП.ЗначениеСоответствуетТипуXDTO(Выборка.ИдентификаторКонтрагента, "subject_id_type") Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.МестоДеятельности) Тогда
				Объект.Организация       = Выборка.Организация;
				Объект.МестоДеятельности = Выборка.МестоДеятельности;
			ИначеЕсли ИнтеграцияМДЛП.ЗначениеСоответствуетТипуXDTO(Выборка.Идентификатор, "subject_id_type") Тогда
				ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(Выборка.Идентификатор, Объект.Организация, Объект.МестоДеятельности);
				Если Не ЗначениеЗаполнено(Объект.МестоДеятельности) Тогда
					МестоДеятельности = Справочники.МестаДеятельностиМДЛП.СоздатьЭлемент();
					МестоДеятельности.Идентификатор = Выборка.Идентификатор;
					МестоДеятельности.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Место деятельности %1'"), Выборка.Идентификатор);
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(МестоДеятельности);
					Объект.МестоДеятельности = МестоДеятельности.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.МестоДеятельностиГрузополучателя) Тогда
				Объект.Грузополучатель                  = Выборка.Грузополучатель;
				Объект.МестоДеятельностиГрузополучателя = Выборка.МестоДеятельностиГрузополучателя;
			ИначеЕсли ИнтеграцияМДЛП.ЗначениеСоответствуетТипуXDTO(Выборка.ИдентификаторКонтрагента, "subject_id_type") Тогда
				ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(Выборка.ИдентификаторКонтрагента, Объект.Грузополучатель, Объект.МестоДеятельностиГрузополучателя);
				Если Не ЗначениеЗаполнено(Объект.МестоДеятельностиГрузополучателя) Тогда
					МестоДеятельности = Справочники.МестаДеятельностиМДЛП.СоздатьЭлемент();
					МестоДеятельности.Идентификатор = Выборка.ИдентификаторКонтрагента;
					МестоДеятельности.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Место деятельности %1'"), Выборка.ИдентификаторКонтрагента);
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(МестоДеятельности);
					Объект.МестоДеятельностиГрузополучателя = МестоДеятельности.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать: %Объект% по причине: %Причина%'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					Выборка.Ссылка.Метаданные(),
					Выборка.Ссылка,
					ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла;
		
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		
	Иначе
		Параметры.ОбработкаЗавершена = Не ПараметрыОбработки.ЕстьДанныеДляОбработки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
