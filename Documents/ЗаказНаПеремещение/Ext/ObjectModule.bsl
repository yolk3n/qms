#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Отменяет все строки, по которым не было документально оформлено поступление
//
Функция ОтменитьНепоставленныеСтроки(Знач ПроверятьОстатки = Ложь) Экспорт
	
	КоличествоОтмененныхСтрок = 0;
	
	Если ПроверятьОстатки Тогда
		
		Выборка = Документы.ТребованиеОтделения.ПолучитьРезультатЗапросаПоОстаткам(Ссылка).Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// Найдем отменяемую строку с нужным кодом строки
			
			Отбор = Новый Структура;
			Отбор.Вставить("КодСтроки", Выборка.КодСтроки);
			Отбор.Вставить("Номенклатура", Выборка.Номенклатура);
			Отбор.Вставить("ТорговоеНаименование", Выборка.ТорговоеНаименование);
			Отбор.Вставить("ДействующиеВеществаМНН", Выборка.ДействующиеВеществаМНН);
			Отбор.Вставить("ФормаВыпуска", Выборка.ФормаВыпуска);
			Отбор.Вставить("ЕдиницаИзмерения", Выборка.ЕдиницаИзмеренияЗаказа);
			Отбор.Вставить("Отменено", Ложь);
			
			НайденныеСтроки = Товары.НайтиСтроки(Отбор);
			КОформлениюОстаток = Выборка.КОформлению;
			
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				
				Если КОформлениюОстаток = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекСтрока.КоличествоВЕдиницахИзмерения <= КОформлениюОстаток Тогда
					
					ТекСтрока.Отменено    = Истина;
					
					КОформлениюОстаток = КОформлениюОстаток - ТекСтрока.КоличествоВЕдиницахИзмерения;
					
				Иначе
					
					// Если поступила только часть строки, разобьем строку на две
					НоваяСтрока = Товары.Добавить();
					
					КопируемыеПоля = "Номенклатура, ТорговоеНаименование, ДействующиеВеществаМНН, ФормаВыпуска, ЕдиницаИзмерения";
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока, КопируемыеПоля);
					НоваяСтрока.Отменено      = Истина;
					НоваяСтрока.КоличествоВЕдиницахИзмерения = КОформлениюОстаток;
					
					ТекКоличество = ТекСтрока.КоличествоВЕдиницахИзмерения;
					ТекСтрока.КоличествоВЕдиницахИзмерения = ТекКоличество - КОформлениюОстаток;
					
					КОформлениюОстаток = 0;
					
				КонецЕсли;
				
				КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ТекСтрока Из Товары Цикл
			
			Если Не ТекСтрока.Отменено Тогда
				ТекСтрока.Отменено = Истина;
				КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

// Устанавливает статус для объекта документа
//
// Параметры:
// 		НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
// 		Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыВнутреннихЗаказов[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ОтменаНеотработанныхСтрок") Тогда
			
			ПроверятьОстатки = (Статус = Перечисления.СтатусыВнутреннихЗаказов.КВыполнению Или Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт);
			ОтменитьНепоставленныеСтроки(ПроверятьОстатки);
			
		КонецЕсли;
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
	ЗаполнитьПоЗначениямАвтозаполнения();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	ЖелаемаяДатаПоступления = Дата(1,1,1);
	ДатаСогласования = Дата(1,1,1);
	МаксимальныйКодСтроки = 0;
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		
		ТекущаяСтрока.КодСтроки = 0;
		ТекущаяСтрока.Отменено = Ложь;
		
	КонецЦикла;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если ЗначениеЗаполнено(СкладОтправитель) И СкладОтправитель = СкладПолучатель Тогда
		ТекстОшибки = НСтр("ru = 'Один склад не может быть как отправителем, так и получателем. Измените один из складов.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "СкладОтправитель",, Отказ);
	КонецЕсли;
	
	// Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами
	   И ЗначениеЗаполнено(Организация)
	   И ЗначениеЗаполнено(ОрганизацияПолучатель)
	   И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(Организация, ОрганизацияПолучатель) Тогда
		
		ТекстОшибки = НСтр("ru='Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ОрганизацияПолучатель",, Отказ);
		
	КонецЕсли;
	
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами Тогда
		НепроверяемыеРеквизиты.Добавить("ОрганизацияПолучатель");
	КонецЕсли;
	
	// Дата поступления в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда
		ТекстОшибки = НСтр("ru='Желаемая дата поступления должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ЖелаемаяДатаПоступления",, Отказ);
	КонецЕсли;
	
	ВсеСтрокиОтменены = (Товары.НайтиСтроки(Новый Структура("Отменено", Ложь)).Количество() = 0);
	
	АдресОшибки = " " + НСтр("ru='в строке %1 списка ""%ИмяТабличнойЧасти%""'");
	АдресОшибки = СтрЗаменить(АдресОшибки, "%ИмяТабличнойЧасти%", Метаданные().ТабличныеЧасти.Товары.Синоним);
	
	Для Каждого СтрокаТребования Из Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТребования.ДействующиеВеществаМНН)
		   И Не ЗначениеЗаполнено(СтрокаТребования.ТорговоеНаименование)
		   И Не ЗначениеЗаполнено(СтрокаТребования.Номенклатура) Тогда
			
			ТекстОшибки =
				НСтр("ru='Не заполнена колонка ""Действующие вещества (МНН)"" или ""Торговое наименование"" или ""Номенклатура""'")
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(АдресОшибки, СтрокаТребования.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, 
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТребования.НомерСтроки, "ДействующиеВеществаМНН"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(СтрокаТребования.ДействующиеВеществаМНН) Или ЗначениеЗаполнено(СтрокаТребования.ТорговоеНаименование))
		   И Не ЗначениеЗаполнено(СтрокаТребования.ФормаВыпуска) Тогда
			
			ТекстОшибки =
				НСтр("ru='Не заполнена колонка ""Форма выпуска""'")
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(АдресОшибки, СтрокаТребования.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, 
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТребования.НомерСтроки, "ФормаВыпуска"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеБольничнаяАптека.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");
	
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами Тогда
		ОрганизацияПолучатель = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	ДокументБылСогласован = Согласован;
	
	ОбщегоНазначенияБольничнаяАптека.ИзменитьПризнакСогласованностиДокумента(
		ЭтотОбъект,
		РежимЗаписи,
		Перечисления.СтатусыВнутреннихЗаказов.НеСогласован);
	
	// Установим дату согласования, если документ согласован
	Если Не ДокументБылСогласован И Согласован Тогда
		ДатаСогласования = ТекущаяДатаСеанса();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ, РежимПроведения);
	
	РегистрыСведений.СостоянияВнутреннихЗаказов.ОтразитьСостояниеЗаказа(Ссылка);
	
	ЗаказыСервер.ВыполнитьКонтрольЗаказаПослеПроведения(Ссылка, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение документа
#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент()
	
	Автор = Пользователи.ТекущийПользователь();
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если Не ОбщегоНазначенияБольничнаяАптека.ИспользоватьСтатусы(Ссылка) Тогда
		Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
	КонецЕсли;
	
	Организация = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	СкладПолучатель = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьСкладПоУмолчанию(СкладПолучатель);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗначениямАвтозаполнения()
	
	ОбщегоНазначенияБольничнаяАптека.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "Организация, СкладПолучатель, СкладОтправитель");
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

#КонецОбласти // ИнициализацияИЗаполнение

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

Функция СписокРегистровДляКонтроля() Экспорт
	
	РегистрыДляКонтроля = Новый Массив;
	РегистрыДляКонтроля.Добавить(Движения.ЗаказыНаПеремещение);
	
	Возврат РегистрыДляКонтроля;
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли