#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Получает непоставленные стоки заказа на перемещение
//
// Возвращаемое значение
//  РезультатЗапроса
//
Функция ПолучитьРезультатЗапросаПоОстаткам(Заказ, Регистратор = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ"      , Заказ);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Отбор = Новый Структура;
	Отбор.Вставить("ЗаказНаПеремещение", "Заказ");
	Запрос.Текст = РегистрыНакопления.ЗаказыНаПеремещение.ТекстЗапросаОстатки(, Отбор, "КОформлению > 0") + "
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказНаПеремещение,
	|	КодСтроки
	|";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Возвращает параметры для расчета состояния выполнения заказов.
// Вызывается из РегистрСведений.СостоянияВнутреннихЗаказов.
//
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыРасчетаСостоянияЗаказов() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("СтатусНеСогласован", Перечисления.СтатусыВнутреннихЗаказов.НеСогласован);
	Параметры.Вставить("СтатусСогласован"  , Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению);
	Параметры.Вставить("СтатусКВыполнению" , Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
	Параметры.Вставить("СтатусЗакрыт"      , Перечисления.СтатусыВнутреннихЗаказов.Закрыт);
	Параметры.Вставить("РеквизитДатаПервогоПоступления", "ЖелаемаяДатаПоступления");
	
	Возврат Параметры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа со статусами документа
#Область Статусы

// Определяет необходимость контроля закрытия заказа
//
Функция КонтролироватьВыполнениеЗаказа() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаПеремещениеБезПолнойОтгрузки");
	
КонецФункции

// Проверяет возможность ручного изменения статуса
//
// Возвращаемое значение
//  Булево - Истина -ручное изменение разрешено
//
Функция РазрешеноРучноеИзменениеСтатуса() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//  МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//  НовыйСтатус - Строка - Имя нового статуса
//  ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//  Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыВнутреннихЗаказов[НовыйСтатус];
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка                КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус)                  КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                   КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен              КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления       КАК ПометкаУдаления,
	|	ИСТИНА                                  КАК ЗаписьПроведением
	|ПОМЕСТИТЬ втДокументы
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;";
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ЗаказыНаПеремещениеОстатки.ЗаказНаПеремещение КАК ЗаказНаПеремещение
		|ПОМЕСТИТЬ ОстатокПоЗаказу
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(, ЗаказНаПеремещение В (&МассивДокументов)) КАК ЗаказыНаПеремещениеОстатки
		|ГДЕ
		|	ЗаказыНаПеремещениеОстатки.КОформлениюОстаток > 0
		|	ИЛИ ЗаказыНаПеремещениеОстатки.ЗаказаноОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*,
		|	ВЫБОР
		|		КОГДА ОстатокПоЗаказу.ЗаказНаПеремещение ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОстаткиПоЗаказу
		|ИЗ
		|	втДокументы КАК втДокументы
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		ОстатокПоЗаказу КАК ОстатокПоЗаказу
		|	ПО
		|		втДокументы.Ссылка = ОстатокПоЗаказу.ЗаказНаПеремещение
		|";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ * ИЗ втДокументы КАК втДокументы";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус"          , ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//  ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//  НовыйСтатус - Перечисление - Новый статус
//  ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//  Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа")
	   И ВыборкаПроверки.ЕстьОстаткиПоЗаказу Тогда
		
		ТекстОшибки = НСтр("ru='У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ выполнен не полностью'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

#КонецОбласти // Статусы

////////////////////////////////////////////////////////////////////////////////
// Работа с отменой строк документа
#Область ОтменаСтрок

// Возвращает признак использования причин отмены строк заказа
//
// Возвращаемое значение
//  Булево - Истина, если используются причины отмены
//
Функция ИспользоватьПричиныОтмены() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает полное имя объекта метаданных причин отмены
//
// Возвращаемое значение
//   Строка
//
Функция ИмяОбъектаПричиныОтмены() Экспорт
	
	ВызватьИсключение НСтр("ru = 'Причины отмены не используются.'");
	
КонецФункции

#КонецОбласти // ОтменаСтрок

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И( ЗначениеРазрешено(СкладОтправитель)
	|	ИЛИ ЗначениеРазрешено(СкладПолучатель)
	|	) ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение
#Область Проведение

// Инициализирует таблицы значений, содержащие данные для проведения документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицыДвиженийДляПроведения(ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	ОсновныеДанныеДокумента = ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства);
	
	ИнициализироватьКлючиАналитикиОписанийОтборовНоменклатуры(ОсновныеДанныеДокумента);
	
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтТаблицаТовары());
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтАналитика());
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаЗаказыНаПеремещение(), Метаданные.РегистрыНакопления.ЗаказыНаПеремещение);
	
	Запрос = Новый Запрос(ПроведениеБольничнаяАптека.ПолучитьТекстЗапросаДвижений(ДополнительныеСвойства, Регистры));
	
	Для Каждого ДанныеДокумента Из ОсновныеДанныеДокумента Цикл
		Запрос.УстановитьПараметр(ДанныеДокумента.Ключ, ДанныеДокумента.Значение);
	КонецЦикла;
	
	ПроведениеБольничнаяАптека.ЗаполнитьТаблицыДвижений(ДополнительныеСвойства, Запрос.ВыполнитьПакет(), Регистры);
	
КонецПроцедуры

Функция ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства)
	
	ЗапрашиваемыеДанные = Новый Структура;
	ЗапрашиваемыеДанные.Вставить("Ссылка");
	ЗапрашиваемыеДанные.Вставить("Период", "Дата");
	ЗапрашиваемыеДанные.Вставить("Организация");
	ЗапрашиваемыеДанные.Вставить("СкладОтправитель");
	ЗапрашиваемыеДанные.Вставить("СкладПолучатель");
	ЗапрашиваемыеДанные.Вставить("Статус");
	
	ОсновныеДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроведениеБольничнаяАптека.ПолучитьСсылкуНаДокументДляПроведения(ДополнительныеСвойства),
		ЗапрашиваемыеДанные);
	
	Возврат ОсновныеДанныеДокумента;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаТовары()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                   КАК НомерСтроки,
	|	ТаблицаТовары.КодСтроки                     КАК КодСтроки,
	|	&Организация                                КАК Организация,
	|	ТаблицаТовары.ДействующиеВеществаМНН        КАК ДействующиеВеществаМНН,
	|	ТаблицаТовары.ТорговоеНаименование          КАК ТорговоеНаименование,
	|	ТаблицаТовары.ФормаВыпуска                  КАК ФормаВыпуска,
	|	ТаблицаТовары.ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Номенклатура                  КАК Номенклатура,
	|	ТаблицаТовары.КоличествоВЕдиницахИзмерения  КАК Количество,
	|	ТаблицаТовары.Отменено                      КАК Отменено
	|ПОМЕСТИТЬ ВтТаблицаТовары
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтАналитика()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки       КАК НомерСтроки,
	|	ТаблицаТовары.КодСтроки         КАК КодСтроки,
	|	&Период                         КАК Период,
	|	&Ссылка                         КАК ЗаказНаПеремещение,
	|	АналитикаОтборов.КлючАналитики  КАК АналитикаОписанияОтбораНоменклатуры,
	|	ТаблицаТовары.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество        КАК Количество,
	|	ТаблицаТовары.Отменено          КАК Отменено
	|ПОМЕСТИТЬ ВтАналитика
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаОписанийОтборовНоменклатуры КАК АналитикаОтборов
	|		ПО
	|			ТаблицаТовары.ДействующиеВеществаМНН = АналитикаОтборов.ДействующиеВеществаМНН
	|			И ТаблицаТовары.ТорговоеНаименование = АналитикаОтборов.ТорговоеНаименование
	|			И ТаблицаТовары.ФормаВыпуска         = АналитикаОтборов.ФормаВыпуска
	|			И ТаблицаТовары.Номенклатура         = АналитикаОтборов.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаказыНаПеремещение()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1                                                  КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                          КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)             КАК ВидДвижения,
	|	ТаблицаТовары.Период                               КАК Период,
	|	ТаблицаТовары.КодСтроки                            КАК КодСтроки,
	|	ТаблицаТовары.ЗаказНаПеремещение                   КАК ЗаказНаПеремещение,
	|	ТаблицаТовары.АналитикаОписанияОтбораНоменклатуры  КАК ОтборНоменклатуры,
	|	ТаблицаТовары.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество                           КАК Заказано,
	|	ВЫБОР
	|		КОГДА (НЕ ТаблицаТовары.Отменено)
	|			И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.КВыполнению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт))
	|			ТОГДА ТаблицаТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ                                              КАК КОформлению
	|ИЗ
	|	ВтАналитика КАК ТаблицаТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                                  КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                          КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)             КАК ВидДвижения,
	|	ТаблицаТовары.Период                               КАК Период,
	|	ТаблицаТовары.КодСтроки                            КАК КодСтроки,
	|	ТаблицаТовары.ЗаказНаПеремещение                   КАК ЗаказНаПеремещение,
	|	ТаблицаТовары.АналитикаОписанияОтбораНоменклатуры  КАК ОтборНоменклатуры,
	|	ТаблицаТовары.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
	|	-ТаблицаТовары.Количество                          КАК Заказано,
	|	0                                                  КАК КОформлению
	|ИЗ
	|	ВтАналитика КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиОписанийОтборовНоменклатуры(Реквизиты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.ДействующиеВеществаМНН КАК ДействующиеВеществаМНН,
	|	ТаблицаТовары.ТорговоеНаименование КАК ТорговоеНаименование,
	|	ТаблицаТовары.ФормаВыпуска КАК ФормаВыпуска,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втТаблицаАналитики
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ТорговоеНаименование,
	|	ДействующиеВеществаМНН,
	|	ФормаВыпуска
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
	Запрос.Выполнить();
	
	Справочники.КлючиАналитикиОписанийОтборовНоменклатуры.ИнициализироватьКлючиАналитики(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

#КонецОбласти // Проведение

////////////////////////////////////////////////////////////////////////////////
// Электронная подпись
#Область ЭлектроннаяПодпись

// Возвращает описание ключевых полей для подписи.
//
// Возвращаемое значение:
//  Структура - описание ключевых полей см. ЭлектроннаяПодписьБольничнаяАптека.ПустоеОписаниеКлючевыхПолей().
//
Функция ОписаниеКлючевыхПолей(Версия = Неопределено) Экспорт
	
	МетаданныеОбъекта = ПустаяСсылка().Метаданные();
	
	ОписаниеКлючевыхПолей = ЭлектроннаяПодписьБольничнаяАптека.ПустоеОписаниеКлючевыхПолей();
	
	ПоляШапки = МетаданныеОбъекта.Реквизиты;
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьОписаниеРеквизита(ОписаниеКлючевыхПолей, ПоляШапки.Организация.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьОписаниеРеквизита(ОписаниеКлючевыхПолей, ПоляШапки.ОрганизацияПолучатель.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьОписаниеРеквизита(ОписаниеКлючевыхПолей, ПоляШапки.СкладОтправитель.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьОписаниеРеквизита(ОписаниеКлючевыхПолей, ПоляШапки.СкладПолучатель.Имя);
	
	ЭлектроннаяПодписьБольничнаяАптека.ВключитьФайлыВОписаниеКлючевыхПолей(ОписаниеКлючевыхПолей);
	
	// Товары
	ИмяТаблицы = МетаданныеОбъекта.ТабличныеЧасти.Товары.Имя;
	ТаблицаТовары = ЭлектроннаяПодписьБольничнаяАптека.ДобавитьПустоеОписаниеТабличнойЧасти(ОписаниеКлючевыхПолей, ИмяТаблицы);
	
	ПоляТовары = МетаданныеОбъекта.ТабличныеЧасти.Товары.Реквизиты;
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьГруппируемоеПолеТабличнойЧасти(ТаблицаТовары, ПоляТовары.Номенклатура.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьГруппируемоеПолеТабличнойЧасти(ТаблицаТовары, ПоляТовары.ТорговоеНаименование.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьГруппируемоеПолеТабличнойЧасти(ТаблицаТовары, ПоляТовары.ДействующиеВеществаМНН.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьГруппируемоеПолеТабличнойЧасти(ТаблицаТовары, ПоляТовары.ФормаВыпуска.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьГруппируемоеПолеТабличнойЧасти(ТаблицаТовары, ПоляТовары.ЕдиницаИзмерения.Имя);
	
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьПолеРесурсаТабличнойЧасти(ТаблицаТовары, ПоляТовары.КоличествоВЕдиницахИзмерения.Имя);
	
	Возврат ОписаниеКлючевыхПолей;
	
КонецФункции

#КонецОбласти // ЭлектроннаяПодпись

////////////////////////////////////////////////////////////////////////////////
// Печать
#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандыПечати(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыПечати);
	
КонецПроцедуры

// Возвращает список доступных печатных форм документа
//
Функция ДоступныеПечатныеФормы() Экспорт
	
	ПечатныеФормы = УправлениеПечатьюБольничнаяАптека.СоздатьКоллекциюДоступныхПечатныхФорм();
	
	Обработки.ПечатьЗаказНаПеремещение.ДобавитьПечатнуюФорму(ПечатныеФормы);
	
	ПечатнаяФорма = Обработки.ПечатьТребованиеНакладная0504204.ДобавитьПечатнуюФорму(ПечатныеФормы);
	
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	КомандаПечати = УправлениеПечатьюБольничнаяАптека.ДобавитьКомандуПечати(ПечатнаяФорма);
	КомандаПечати.Представление = КомандаПечати.Представление + " " + НСтр("ru = 'на лат.'");
	КомандаПечати.ДополнительныеПараметры.ПредставлениеИзДействующегоВещества = Истина;
	КомандаПечати.ДополнительныеПараметры.ПредставлениеИзТорговогоНаименования = Ложь;
	
	КомандаПечати = УправлениеПечатьюБольничнаяАптека.ДобавитьКомандуПечати(ПечатнаяФорма);
	КомандаПечати.Представление = КомандаПечати.Представление + " " + НСтр("ru = 'на англ.'");
	КомандаПечати.ДополнительныеПараметры.ПредставлениеИзДействующегоВещества = Ложь;
	КомандаПечати.ДополнительныеПараметры.ПредставлениеИзТорговогоНаименования = Истина;
	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеДляПечати();
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	Запрос.УстановитьПараметр("ИспользоватьИсточникиФинансирования", ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования"));
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("РезультатПоШапке"          , РезультатыЗапросов[РезультатыЗапросов.ВГраница() - 1]);
	ДанныеДляПечати.Вставить("РезультатПоТабличнойЧасти" , РезультатыЗапросов[РезультатыЗапросов.ВГраница()]);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ТекстЗапросаДанныеДляПечати()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Документ.Ссылка                                  КАК Ссылка,
	|	Документ.Номер                                   КАК НомерДокумента,
	|	Документ.Дата                                    КАК ДатаДокумента,
	|	Документ.Организация                             КАК Организация,
	|	Документ.ОрганизацияПолучатель                   КАК ОрганизацияПолучатель,
	|	Документ.СкладОтправитель                        КАК СкладОтправитель,
	|	Документ.СкладОтправитель                        КАК Отправитель,
	|	Документ.СкладОтправитель.Представление          КАК ОтправительПредставление,
	|	Документ.СкладПолучатель                         КАК СкладПолучатель,
	|	Документ.СкладПолучатель                         КАК Получатель,
	|	ВЫБОР
	|		КОГДА Документ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами)
	|			ТОГДА Документ.ОрганизацияПолучатель.НаименованиеСокращенное + "" ("" + Документ.СкладПолучатель.Наименование + "")""
	|		ИНАЧЕ Документ.СкладПолучатель.Представление
	|	КОНЕЦ                                            КАК ПолучательПредставление,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК Затребовал,
	|	""""                                             КАК ЗатребовалДолжность,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК Разрешил,
	|	""""                                             КАК РазрешилДолжность,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьИсточникиФинансирования
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ИсточникиФинансирования.ПустаяСсылка)
	|		ИНАЧЕ Документ.ИсточникФинансирования
	|	КОНЕЦ                                            КАК ИсточникФинансирования,
	|	Документ.Ответственный                           КАК Менеджер
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК Документ
	|ГДЕ
	|	Документ.Ссылка В (&ТекущийДокумент)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка                                        КАК Документ,
	|	Товары.НомерСтроки                                   КАК НомерСтроки,
	|	КлючиАналитики.КлючАналитики                         КАК ОтборНоменклатуры,
	|	Товары.ДействующиеВеществаМНН                        КАК ДействующиеВеществаМНН,
	|	Товары.ТорговоеНаименование                          КАК ТорговоеНаименование,
	|	Товары.ФормаВыпуска                                  КАК ФормаВыпуска,
	|	Товары.Номенклатура                                  КАК Номенклатура,
	|	Товары.Номенклатура.НаименованиеПолное               КАК ТоварНаименование,
	|	Товары.Номенклатура.Код                              КАК ТоварКод,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)  КАК СерияНоменклатуры,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
	|	Товары.ЕдиницаИзмерения                              КАК ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмерения.Наименование                 КАК ЕдиницаИзмеренияНаименование,
	|	Товары.ЕдиницаИзмерения.ТипЕдиницы                   КАК ТипЕдиницы,
	|	Товары.ЕдиницаИзмерения.КодОКЕИ                      КАК КодПоОКЕИ,
	|	Товары.КоличествоВЕдиницахИзмерения                  КАК Затребовано,
	|	Товары.Отменено                                      КАК Отменено
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаОписанийОтборовНоменклатуры КАК КлючиАналитики
	|		ПО
	|			Товары.Номенклатура = КлючиАналитики.Номенклатура
	|			И Товары.ТорговоеНаименование = КлючиАналитики.ТорговоеНаименование
	|			И Товары.ДействующиеВеществаМНН = КлючиАналитики.ДействующиеВеществаМНН
	|			И Товары.ФормаВыпуска = КлючиАналитики.ФормаВыпуска
	|ГДЕ
	|	Товары.Ссылка В (&ТекущийДокумент)
	|	И НЕ Товары.Отменено
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Документ
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // Печать

////////////////////////////////////////////////////////////////////////////////
// Формирование отчетов
#Область ФормированиеОтчетов

// Возвращает данные для заполнения отчета Состояние выполнения документов.
//
// Параметры:
//  ВходящиеДокументы - СписокЗначений - ссылки документов Требование отделения,
//                                       для которых получается состояние выполнения.
//
// Возвращаемое значение:
//  ДанныеОтчета - Структура - структурированные данные для заполнения отчета.
//
Функция ПолучитьДанныеОтчетаСостоянияВыполненияДокументов(ВходящиеДокументы) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаСостоянияВыполненияДокументов());
	Запрос.УстановитьПараметр("ЗаказНаПеремещение", ВходящиеДокументы);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ЗаказаноБезСумм"     , РезультатыЗапросов[4].Выгрузить());
	ДанныеОтчета.Вставить("ВПроцессеОтгрузки"   , РезультатыЗапросов[5].Выгрузить());
	ДанныеОтчета.Вставить("ВПроцессеПоступления", РезультатыЗапросов[6].Выгрузить());
	ДанныеОтчета.Вставить("ПоступилоБезСумм"    , РезультатыЗапросов[7].Выгрузить());
	ДанныеОтчета.Вставить("ОтмененоБезСумм"     , РезультатыЗапросов[8].Выгрузить());
	
	Возврат ДанныеОтчета;
	
КонецФункции

Функция ТекстЗапросаСостоянияВыполненияДокументов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документы.Ссылка КАК Документ
	|ПОМЕСТИТЬ Документы
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК Документы
	|ГДЕ
	|	Документы.Ссылка В (&ЗаказНаПеремещение)
	|	И Документы.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОборотыЗаказовНаПеремещение.Регистратор         КАК Регистратор,
	|	ОборотыЗаказовНаПеремещение.ЗаказНаПеремещение  КАК ЗаказНаПеремещение,
	|	ОборотыЗаказовНаПеремещение.ОтборНоменклатуры   КАК ОтборНоменклатуры,
	|	ОборотыЗаказовНаПеремещение.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|	ОборотыЗаказовНаПеремещение.КодСтроки           КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА ОборотыЗаказовНаПеремещение.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ОборотыЗаказовНаПеремещение.Заказано
	|		ИНАЧЕ 0
	|	КОНЕЦ                                           КАК Заказано,
	|	ВЫБОР
	|		КОГДА ОборотыЗаказовНаПеремещение.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ОборотыЗаказовНаПеремещение.КОформлению
	|		ИНАЧЕ 0
	|	КОНЕЦ                                           КАК КОтгрузке,
	|	ВЫБОР
	|		КОГДА ОборотыЗаказовНаПеремещение.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ОборотыЗаказовНаПеремещение.КОформлению
	|		ИНАЧЕ 0
	|	КОНЕЦ                                           КАК Отгружено,
	|	ВЫБОР
	|		КОГДА ОборотыЗаказовНаПеремещение.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ОборотыЗаказовНаПеремещение.КОформлению
	|		ИНАЧЕ 0
	|	КОНЕЦ                                           КАК Принято,
	|	ОборотыЗаказовНаПеремещение.ПричинаОтмены       КАК ПричинаОтмены
	|ПОМЕСТИТЬ ОборотыЗаказовНаПеремещение
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПеремещение КАК ОборотыЗаказовНаПеремещение
	|ГДЕ
	|	ОборотыЗаказовНаПеремещение.ЗаказНаПеремещение В (ВЫБРАТЬ Документ ИЗ Документы)
	|	И ОборотыЗаказовНаПеремещение.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыЗаказовНаПеремещение.ЗаказНаПеремещение  КАК ЗаказНаПеремещение,
	|	ОборотыЗаказовНаПеремещение.ОтборНоменклатуры   КАК ОтборНоменклатуры,
	|	ОборотыЗаказовНаПеремещение.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|	ОборотыЗаказовНаПеремещение.Заказано            КАК Заказано,
	|	ОборотыЗаказовНаПеремещение.КОтгрузке           КАК КОтгрузке,
	|	ОборотыЗаказовНаПеремещение.КОтгрузке           КАК ОсталосьОтгрузить,
	|	0                                               КАК Отгружено,
	|	0                                               КАК КПоступлению,
	|	0                                               КАК ОсталосьПринять,
	|	0                                               КАК Принято
	|ПОМЕСТИТЬ ЗаказыНаПеремещение
	|ИЗ
	|	ОборотыЗаказовНаПеремещение КАК ОборотыЗаказовНаПеремещение
	|ГДЕ
	|	ОборотыЗаказовНаПеремещение.Регистратор = ОборотыЗаказовНаПеремещение.ЗаказНаПеремещение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОборотыЗаказовНаПеремещение.ЗаказНаПеремещение  КАК ЗаказНаПеремещение,
	|	ОборотыЗаказовНаПеремещение.ОтборНоменклатуры   КАК ОтборНоменклатуры,
	|	ОборотыЗаказовНаПеремещение.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|	0                                               КАК Заказано,
	|	0                                               КАК КОтгрузке,
	|	-ОборотыЗаказовНаПеремещение.Отгружено          КАК ОсталосьОтгрузить,
	|	ОборотыЗаказовНаПеремещение.Отгружено           КАК Отгружено,
	|	ОборотыЗаказовНаПеремещение.Отгружено           КАК КПоступлению,
	|	ОборотыЗаказовНаПеремещение.Отгружено           КАК ОсталосьПринять,
	|	0                                               КАК Принято
	|ИЗ
	|	ОборотыЗаказовНаПеремещение КАК ОборотыЗаказовНаПеремещение
	|ГДЕ
	|	ОборотыЗаказовНаПеремещение.Регистратор <> ОборотыЗаказовНаПеремещение.ЗаказНаПеремещение
	|	И ОборотыЗаказовНаПеремещение.Регистратор.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.КОтгрузке)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОборотыЗаказовНаПеремещение.ЗаказНаПеремещение  КАК ЗаказНаПеремещение,
	|	ОборотыЗаказовНаПеремещение.ОтборНоменклатуры   КАК ОтборНоменклатуры,
	|	ОборотыЗаказовНаПеремещение.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|	0                                               КАК Заказано,
	|	0                                               КАК КОтгрузке,
	|	0                                               КАК ОсталосьОтгрузить,
	|	0                                               КАК Отгружено,
	|	0                                               КАК КПоступлению,
	|	-ОборотыЗаказовНаПеремещение.Принято            КАК ОсталосьПринять,
	|	ОборотыЗаказовНаПеремещение.Принято             КАК Принято
	|ИЗ
	|	ОборотыЗаказовНаПеремещение КАК ОборотыЗаказовНаПеремещение
	|ГДЕ
	|	ОборотыЗаказовНаПеремещение.Регистратор <> ОборотыЗаказовНаПеремещение.ЗаказНаПеремещение
	|	И ОборотыЗаказовНаПеремещение.Регистратор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СводныеДанныеПоЗаказам.ЗаказНаПеремещение        КАК ЗаказНаПеремещение,
	|	СводныеДанныеПоЗаказам.ОтборНоменклатуры         КАК ОтборНоменклатуры,
	|	СводныеДанныеПоЗаказам.ЕдиницаИзмерения          КАК ЕдиницаИзмерения,
	|	СУММА(СводныеДанныеПоЗаказам.Заказано)           КАК Заказано,
	|	СУММА(СводныеДанныеПоЗаказам.КОтгрузке)          КАК КОтгрузке,
	|	СУММА(СводныеДанныеПоЗаказам.ОсталосьОтгрузить)  КАК ОсталосьОтгрузить,
	|	СУММА(СводныеДанныеПоЗаказам.Отгружено)          КАК Отгружено,
	|	СУММА(СводныеДанныеПоЗаказам.КПоступлению)       КАК КПоступлению,
	|	СУММА(СводныеДанныеПоЗаказам.ОсталосьПринять)    КАК ОсталосьПринять,
	|	СУММА(СводныеДанныеПоЗаказам.Принято)            КАК Принято
	|ПОМЕСТИТЬ СводныеДанныеПоЗаказам
	|ИЗ
	|	ЗаказыНаПеремещение КАК СводныеДанныеПоЗаказам
	|
	|СГРУППИРОВАТЬ ПО
	|	СводныеДанныеПоЗаказам.ЗаказНаПеремещение,
	|	СводныеДанныеПоЗаказам.ОтборНоменклатуры,
	|	СводныеДанныеПоЗаказам.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	
	// Заказано
	
	|ВЫБРАТЬ
	|	СводныеДанныеПоЗаказам.ЗаказНаПеремещение  КАК Документ,
	|	СводныеДанныеПоЗаказам.ОтборНоменклатуры   КАК Номенклатура,
	|	СводныеДанныеПоЗаказам.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|	СводныеДанныеПоЗаказам.Заказано            КАК Заказано
	|ИЗ
	|	СводныеДанныеПоЗаказам КАК СводныеДанныеПоЗаказам
	|ГДЕ
	|	СводныеДанныеПоЗаказам.Заказано > 0
	|	И СводныеДанныеПоЗаказам.Отгружено = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	
	//В процессе отгрузки
	
	|ВЫБРАТЬ
	|	СводныеДанныеПоЗаказам.ЗаказНаПеремещение  КАК Документ,
	|	СводныеДанныеПоЗаказам.ОтборНоменклатуры   КАК Номенклатура,
	|	СводныеДанныеПоЗаказам.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|	СводныеДанныеПоЗаказам.КОтгрузке           КАК КОтгрузке,
	|	СводныеДанныеПоЗаказам.ОсталосьОтгрузить   КАК ОсталосьОтгрузить,
	|	СводныеДанныеПоЗаказам.Отгружено           КАК Отгружено
	|ИЗ
	|	СводныеДанныеПоЗаказам КАК СводныеДанныеПоЗаказам
	|ГДЕ
	|	СводныеДанныеПоЗаказам.ОсталосьОтгрузить > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	
	// В процессе поступления
	
	|ВЫБРАТЬ
	|	СводныеДанныеПоЗаказам.ЗаказНаПеремещение  КАК Документ,
	|	СводныеДанныеПоЗаказам.ОтборНоменклатуры   КАК Номенклатура,
	|	СводныеДанныеПоЗаказам.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|	СводныеДанныеПоЗаказам.КПоступлению        КАК КПоступлению,
	|	СводныеДанныеПоЗаказам.ОсталосьПринять     КАК ОсталосьПринять,
	|	СводныеДанныеПоЗаказам.Принято             КАК Принято
	|ИЗ
	|	СводныеДанныеПоЗаказам КАК СводныеДанныеПоЗаказам
	|ГДЕ
	|	СводныеДанныеПоЗаказам.ОсталосьПринять > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	
	// Поступило полностью
	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтпускаемыеТовары.Ссылка.ЗаказНаПеремещение                 КАК Документ,
	|	ОтпускаемыеТовары.Номенклатура                              КАК Номенклатура,
	|	ОтпускаемыеТовары.Номенклатура.ОсновнаяЕдиницаУчета         КАК ЕдиницаИзмерения,
	|	СУММА(ОтпускаемыеТовары.Количество / Упаковки.Коэффициент)  КАК Принято
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ОтпускаемыеТовары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Упаковки
	|		ПО
	|			ОтпускаемыеТовары.Номенклатура = Упаковки.Номенклатура
	|			И ОтпускаемыеТовары.Номенклатура.ОсновнаяЕдиницаУчета = Упаковки.ЕдиницаИзмерения
	|ГДЕ
	|	ОтпускаемыеТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.Принято)
	|	И ОтпускаемыеТовары.Ссылка В (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ОборотыЗаказовНаПеремещение.Регистратор КАК Регистратор
	|		ИЗ
	|			ОборотыЗаказовНаПеремещение КАК ОборотыЗаказовНаПеремещение)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтпускаемыеТовары.Ссылка,
	|	ОтпускаемыеТовары.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	
	// Отменено
	
	|ВЫБРАТЬ
	|	ОтмененныеЗаказы.ЗаказНаПеремещение  КАК Документ,
	|	ОтмененныеЗаказы.ОтборНоменклатуры   КАК Номенклатура,
	|	ОтмененныеЗаказы.ЕдиницаИзмерения    КАК ЕдиницаИзмерения,
	|	ОтмененныеЗаказы.КодСтроки           КАК КодСтроки,
	|	ОтмененныеЗаказы.ПричинаОтмены       КАК ПричинаОтмены,
	|	-ОтмененныеЗаказы.Заказано           КАК Отменено
	|ИЗ
	|	ОборотыЗаказовНаПеремещение КАК ОтмененныеЗаказы
	|ГДЕ
	|	ОтмененныеЗаказы.Заказано < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // ФормированиеОтчетов

////////////////////////////////////////////////////////////////////////////////
// Команды формы
#Область КомандыФормы

// Заполняет список команд ввода на основании.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииБольничнаяАптека.ДобавитьКомандыСозданияНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	Команда = БизнесПроцессы.ОбработкаВнутреннегоДокумента.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы);
	Команда.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьБизнесПроцессыВнутреннихЗаказов.Имя;
	Команда.Представление = НСтр("ru = 'Согласовать и исполнить'");
	Команда.Порядок = "10";
	Команда.ПараметрыФормы.ЗакрытьФормуВладельцаПоИмени = МетаданныеДокумента.Формы.ФормаДокумента.ПолноеИмя();
	
	Команда = БизнесПроцессы.Согласование.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы);
	Команда.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьБизнесПроцессыВнутреннихЗаказов.Имя;
	Команда.Порядок = "20";
	Команда.ПараметрыФормы.ЗакрытьФормуВладельцаПоИмени = МетаданныеДокумента.Формы.ФормаДокумента.ПолноеИмя();
	
	Команда = БизнесПроцессы.Исполнение.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы);
	Команда.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьБизнесПроцессыВнутреннихЗаказов.Имя;
	Команда.Порядок = "30";
	Команда.ПараметрыФормы.ЗакрытьФормуВладельцаПоИмени = МетаданныеДокумента.Формы.ФормаДокумента.ПолноеИмя();
	
КонецПроцедуры

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	МенюОтчетыБольничнаяАптека.ДобавитьОбщиеКоманды(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыОтчетов, НастройкиФормы);
	
	Отчеты.СостояниеВыполненияДокументов.ДобавитьКомандуОтчета(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти // КомандыФормы

////////////////////////////////////////////////////////////////////////////////
// Бизнес-процессы и задачи
#Область БизнесПроцессыИЗадачи

// Обработчик события заполнения бизнес-процесса Исполнение
//
Процедура ПриЗаполненииБизнесПроцессаИсполнение(БизнесПроцесс, Предмет, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Предмет.Ссылка           КАК Предмет,
	|	Предмет.Статус           КАК Статус,
	|	ВЫБОР
	|		КОГДА Предмет.Статус В (&ДопустимыеСтатусы)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                    КАК ЕстьОшибкиСтатус,
	|	НЕ Предмет.Проведен      КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК Предмет
	|ГДЕ
	|	Предмет.Ссылка = &Предмет
	|");
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	ДопустимыеСтатусы = Новый Массив;
	ДопустимыеСтатусы.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению);
	Запрос.УстановитьПараметр("ДопустимыеСтатусы", ДопустимыеСтатусы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ИспользоватьСтатусы = ОбщегоНазначенияБольничнаяАптека.ИспользоватьСтатусы(Предмет);
	
	ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(
		Выборка.Предмет,
		Выборка.ЕстьОшибкиПроведен,
		Выборка.Статус,
		ИспользоватьСтатусы И Выборка.ЕстьОшибкиСтатус,
		ДопустимыеСтатусы);
	
	ЗаполнитьЗначенияСвойств(БизнесПроцесс, Выборка);
	
КонецПроцедуры

// Обработчик события изменения статуса предмета при прохождении бизнес-процесса
//
Процедура ПриИзмененииСтатусаПредмета(Предмет, НовыйСтатус, ДополнительныеПараметры, СтандартнаяОбработка) Экспорт
	
	Если НовыйСтатус = "Закрыт" Тогда
		Если ОбщегоНазначенияБольничнаяАптека.ИспользоватьСтатусы(Предмет) Тогда
			Если ДополнительныеПараметры = Неопределено Тогда
				ДополнительныеПараметры = Новый Структура("КонтрольВыполненияЗаказа");
			КонецЕсли;
		Иначе
			СтандартнаяОбработка = Ложь;
			Если Не Документы.ЗаказНаПеремещение.ПолучитьРезультатЗапросаПоОстаткам(Предмет).Пустой() Тогда
				
				Заказ = Предмет.ПолучитьОбъект();
				ЗаблокироватьДанныеДляРедактирования(Заказ.Ссылка);
				Заказ.ОтменитьНепоставленныеСтроки(Истина);
				Если Заказ.ПроверитьЗаполнение() Тогда
					Заказ.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ВызватьИсключение СтрЗаменить(НСтр("ru = 'При закрытии %Заказ% возникли ошибки.'"), "%Заказ%", Предмет);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли НовыйСтатус = "НаСогласовании" Или НовыйСтатус = "Исполнен" Тогда
		СтандартнаяОбработка = Ложь; // Статус не меняется.
	ИначеЕсли НовыйСтатус = "Согласован" Тогда
		НовыйСтатус = "КОбеспечению";
	ИначеЕсли НовыйСтатус = "НеСогласован" Или НовыйСтатус = "КВыполнению" Тогда
		ТекущийСтатус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Статус");
		Если ОбщегоНазначения.ИмяЗначенияПеречисления(ТекущийСтатус) = НовыйСтатус Тогда
			СтандартнаяОбработка = Ложь; // Статус не меняется.
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // БизнесПроцессыИЗадачи

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСервер.ОбщиеПараметрыЗапросов();
	
	Доступность =
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение")
		И (ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Редактирование", ПустаяСсылка().Метаданные()));
	
	Если Не Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументЗаказ.Ссылка) КАК ЗаказыВсегоВРаботе,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА СостоянияВнутреннихЗаказов.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаАктуальности >= СостоянияВнутреннихЗаказов.ДатаСобытия ТОГДА
	|			СостоянияВнутреннихЗаказов.Заказ
	|		КОНЕЦ) КАК ЗаказыНаСегодня,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА СостоянияВнутреннихЗаказов.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаАктуальности > СостоянияВнутреннихЗаказов.ДатаСобытия
	|				И СостоянияВнутреннихЗаказов.Состояние В (
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ОжидаетсяСогласование),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ГотовКОтгрузке),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ВПроцессеОтгрузки)) ТОГДА
	|			СостоянияВнутреннихЗаказов.Заказ
	|		КОНЕЦ) КАК ЗаказыПросроченоИсполнение
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ДокументЗаказ
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВнутреннихЗаказов КАК СостоянияВнутреннихЗаказов
	|		ПО (СостоянияВнутреннихЗаказов.Заказ = ДокументЗаказ.Ссылка)}
	|ГДЕ
	|	(НЕ (СостоянияВнутреннихЗаказов.Заказ ЕСТЬ NULL) ИЛИ НЕ ДокументЗаказ.Проведен)
	|	И ДокументЗаказ.Ответственный = &Пользователь
	|	И ЕСТЬNULL(СостоянияВнутреннихЗаказов.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.Закрыт)
	|	И (НЕ ДокументЗаказ.ПометкаУдаления)
	|";
	
	
	ИмяФормы = Метаданные.Документы.ЗаказНаПеремещение.Формы.ФормаСписка.ПолноеИмя();
	
	Результат = ТекущиеДелаСервер.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ЗаказыПоставщикам
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "ЗаказыНаПеремещение";
	ДелоРодитель.Представление  = НСтр("ru = 'Заказы на перемещение'");
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.УправлениеЗапасами;
	
	// ЗаказыПоставщикамВсегоВРаботе
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние"    , "ВсеОткрытые");
	ПараметрыОтбора.Вставить("Актуальность" , "");
	ПараметрыОтбора.Вставить("ДатаСобытия"  , ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Ответственный", ОбщиеПараметрыЗапросов.Пользователь);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаказыНаПеремещениеВсегоВРаботе";
	Дело.ЕстьДела       = Результат.ЗаказыВсегоВРаботе > 0;
	Дело.Представление  = НСтр("ru = 'Всего заказов в работе'");
	Дело.Количество     = Результат.ЗаказыВсегоВРаботе;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаказыНаПеремещение";
	
	// ЗаказыПоставщикамНаСегодня
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние"    , "ВсеОткрытые");
	ПараметрыОтбора.Вставить("Актуальность" , "Сегодня");
	ПараметрыОтбора.Вставить("ДатаСобытия"  , ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Ответственный", ОбщиеПараметрыЗапросов.Пользователь);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаказыНаПеремещениеНаСегодня";
	Дело.ЕстьДела       = Результат.ЗаказыНаСегодня > 0;
	Дело.Представление  = НСтр("ru = 'На сегодня'");
	Дело.Количество     = Результат.ЗаказыНаСегодня;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаказыНаПеремещение";
	
	// ЗаказыПоставщикамПросроченоИсполнение
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние"    , "ВсеОжидающиеИсполнения");
	ПараметрыОтбора.Вставить("Актуальность" , "Просрочен");
	ПараметрыОтбора.Вставить("ДатаСобытия"  , ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Ответственный", ОбщиеПараметрыЗапросов.Пользователь);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаказыНаПеремещениеПросроченоИсполнение";
	Дело.ЕстьДела       = Результат.ЗаказыПросроченоИсполнение > 0;
	Дело.Представление  = НСтр("ru = 'Просрочено исполнение заказов'");
	Дело.Количество     = Результат.ЗаказыПросроченоИсполнение;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаказыНаПеремещение";
	
	Если Результат.ЗаказыВсегоВРаботе > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ТекущиеДела

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти // СтандартныеПодсистемы

#КонецЕсли