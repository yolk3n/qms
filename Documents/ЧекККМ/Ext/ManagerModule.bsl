
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
			
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаДокумента";
			
		Иначе
			
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаДокументаМастер";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Имена реквизитов, от значений которых зависят параметры учета номенклатуры
//
// Возвращаемое значение:
//   Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУчетаНоменклатуры() Экспорт
	
	Возврат "Склад";
	
КонецФункции

// Возвращает параметры учета для номенклатуры, указанной в документе
//
// Параметры
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
// Возвращаемое значение
//   Структура - Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУчетаНоменклатуры
//
Функция ПараметрыУчетаНоменклатуры(Объект) Экспорт
	
	ПараметрыУчета = ЗапасыСервер.ПараметрыУчетаНоменклатуры();
	ПараметрыУчета.ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ПараметрыУчетаНаСкладе = СкладыСервер.ПараметрыУчетаНоменклатуры(Объект.Склад);
	ПараметрыУчета.ИспользоватьСерии = ПараметрыУчетаНаСкладе.ИспользоватьСерииНоменклатуры;
	ПараметрыУчета.ИспользоватьПартии = ПараметрыУчетаНаСкладе.ИспользоватьПартии;
	ПараметрыУчета.Склад = Объект.Склад;
	
	Возврат ПараметрыУчета;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания параметров учета номенклатуры
//
// Параметры
//   ПараметрыУчетаНоменклатуры - Структура - состав полей задается в функции ЗапасыСервер.ПараметрыУчетаНоменклатуры
//
// Возвращаемое значение
//   Строка - текст запроса
//
Функция ТекстЗапросаРасчетаСтатусовУчетаНоменклатуры(ПараметрыУчетаНоменклатуры) Экспорт
	
	Возврат ЗапасыСервер.ТекстЗапросаРасчетаСтатусовУчетаНоменклатуры(ПараметрыУчетаНоменклатуры);
	
КонецФункции

// Получить основные данные по таблице товаров для чека о розничной продаже
//
// Параметры:
//  Документ - ДокументСсылка.ЧекККМ, ДокументОбъект.ЧекККМ.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Данные по товарам.
//
Функция ДанныеПоТоварам(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Товары.НомерСтроки                                    КАК НомерСтроки,
		|	Товары.Номенклатура                                   КАК Номенклатура,
		|	Товары.ЕдиницаИзмерения                               КАК ЕдиницаИзмерения,
		|	Товары.СерияНоменклатуры                              КАК СерияНоменклатуры,
		|	Товары.СерияПромаркированаДляЦелейМДЛП                КАК СерияПромаркированаДляЦелейМДЛП,
		|	Товары.КоличествоВЕдиницахИзмерения                   КАК КоличествоВЕдиницахИзмерения,
		|	Товары.Цена                                           КАК Цена,
		|	Товары.СуммаЛьготы                                    КАК СуммаЛьготы,
		|	Товары.Сумма                                          КАК Сумма,
		|	Товары.СуммаСНДС                                      КАК СуммаСНДС,
		|	Товары.СтавкаНДС                                      КАК СтавкаНДС,
		|	Товары.СуммаНДС                                       КАК СуммаНДС,
		|	Товары.Штрихкод                                       КАК Штрихкод,
		|	Товары.НомерКиЗ                                       КАК НомерКиЗ,
		|	Товары.ШтрихкодBase64                                 КАК ШтрихкодBase64,
		|	Товары.ПроцентЛьготы                                  КАК ПроцентЛьготы,
		|	Товары.НомерСерииЛьготногоРецепта                     КАК НомерСерииЛьготногоРецепта,
		|	Товары.НомерЛьготногоРецепта                          КАК НомерЛьготногоРецепта,
		|	Товары.ДатаРегистрацииЛьготногоРецепта                КАК ДатаРегистрацииЛьготногоРецепта,
		|	Товары.НомерСерииРецепта                              КАК НомерСерииРецепта,
		|	Товары.НомерРецепта                                   КАК НомерРецепта,
		|	Товары.ДатаРегистрацииРецепта                         КАК ДатаРегистрацииРецепта
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		Запрос.УстановитьПараметр("Ссылка", Документ);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументОбъект.ЧекККМ")
		  Или ТипЗнч(Документ) = Тип("ДанныеФормыСтруктура") Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Товары.НомерСтроки                     КАК НомерСтроки,
		|	Товары.Номенклатура                    КАК Номенклатура,
		|	Товары.ЕдиницаИзмерения                КАК ЕдиницаИзмерения,
		|	Товары.СерияНоменклатуры               КАК СерияНоменклатуры,
		|	Товары.СерияПромаркированаДляЦелейМДЛП КАК СерияПромаркированаДляЦелейМДЛП,
		|	Товары.КоличествоВЕдиницахИзмерения    КАК КоличествоВЕдиницахИзмерения,
		|	Товары.Цена                            КАК Цена,
		|	Товары.СуммаЛьготы                     КАК СуммаЛьготы,
		|	Товары.Сумма                           КАК Сумма,
		|	Товары.СуммаСНДС                       КАК СуммаСНДС,
		|	Товары.СтавкаНДС                       КАК СтавкаНДС,
		|	Товары.СуммаНДС                        КАК СуммаНДС,
		|	Товары.Штрихкод                        КАК Штрихкод,
		|	Товары.НомерКиЗ                        КАК НомерКиЗ,
		|	Товары.ШтрихкодBase64                  КАК ШтрихкодBase64,
		|	Товары.ПроцентЛьготы                   КАК ПроцентЛьготы,
		|	Товары.НомерСерииЛьготногоРецепта      КАК НомерСерииЛьготногоРецепта,
		|	Товары.НомерЛьготногоРецепта           КАК НомерЛьготногоРецепта,
		|	Товары.ДатаРегистрацииЛьготногоРецепта КАК ДатаРегистрацииЛьготногоРецепта,
		|	Товары.НомерСерииРецепта               КАК НомерСерииРецепта,
		|	Товары.НомерРецепта                    КАК НомерРецепта,
		|	Товары.ДатаРегистрацииРецепта          КАК ДатаРегистрацииРецепта
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		Запрос.УстановитьПараметр("Товары", Документ.Товары.Выгрузить());
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                                                        КАК НомерСтроки,
	|	Товары.Номенклатура                                                       КАК Номенклатура,
	|	Товары.СерияНоменклатуры                                                  КАК СерияНоменклатуры,
	|	Товары.СерияПромаркированаДляЦелейМДЛП                                    КАК СерияПромаркированаДляЦелейМДЛП,
	
	|	ЕСТЬNULL(Товары.Номенклатура.Упаковка,
	|		ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))                   КАК ПотребительскаяУпаковка,
	|	ЕСТЬNULL(КоэффициентыПотребительскихУпаковок.Коэффициент, 0)              КАК КоэфициентПотребительскойУпаковки,
	|	Товары.ЕдиницаИзмерения                                                   КАК ЕдиницаИзмеренияВДокументе,
	|	ЕСТЬNULL(КоэффициентыЕдиницИзмеренияВДокументе.Коэффициент, 0)            КАК КоэфициентЕдиницыИзмеренияВДокументе,
	
	|	ВЫБОР
	|		КОГДА НЕ Товары.ЕдиницаИзмерения.СостоитИзДругихУпаковок
	|			ТОГДА Товары.ЕдиницаИзмерения
	|		КОГДА НЕ Товары.ЕдиницаИзмерения.Родитель.СостоитИзДругихУпаковок
	|			ТОГДА Товары.ЕдиницаИзмерения.Родитель
	|		КОГДА НЕ Товары.ЕдиницаИзмерения.Родитель.Родитель.СостоитИзДругихУпаковок
	|			ТОГДА Товары.ЕдиницаИзмерения.Родитель.Родитель
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ                                                                     КАК ПервичнаяУпаковка,
	
	|	ЕСТЬNULL(КоэффициентыПервичнойУпаковки.Коэффициент, 0)                    КАК КоэффициентПервичнойУпаковки,
	
	|	Товары.Штрихкод                                                           КАК Штрихкод,
	|	Товары.НомерКиЗ                                                           КАК НомерКиЗ,
	|	Товары.ШтрихкодBase64                                                     КАК ШтрихкодBase64,
	|	Товары.КоличествоВЕдиницахИзмерения                                       КАК КоличествоВЕдиницахИзмерения,
	|	Товары.Цена                                                               КАК Цена,
	|	Товары.СуммаЛьготы                                                        КАК СуммаЛьготы,
	|	Товары.Сумма                                                              КАК Сумма,
	|	Товары.СуммаСНДС                                                          КАК СуммаСНДС,
	|	Товары.СтавкаНДС                                                          КАК СтавкаНДС,
	|	Товары.СуммаНДС                                                           КАК СуммаНДС,
	
	|	Товары.ПроцентЛьготы                                                      КАК ПроцентЛьготы,
	|	Товары.НомерСерииЛьготногоРецепта                                         КАК НомерСерииЛьготногоРецепта,
	|	Товары.НомерЛьготногоРецепта                                              КАК НомерЛьготногоРецепта,
	|	Товары.ДатаРегистрацииЛьготногоРецепта                                    КАК ДатаРегистрацииЛьготногоРецепта,
	|	Товары.НомерСерииРецепта                                                  КАК НомерСерииРецепта,
	|	Товары.НомерРецепта                                                       КАК НомерРецепта,
	|	Товары.ДатаРегистрацииРецепта                                             КАК ДатаРегистрацииРецепта
	|ИЗ
	|	Товары КАК Товары
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК КоэффициентыПотребительскихУпаковок
	|		ПО
	|			КоэффициентыПотребительскихУпаковок.Номенклатура = Товары.Номенклатура
	|			И КоэффициентыПотребительскихУпаковок.ЕдиницаИзмерения = Товары.Номенклатура.Упаковка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК КоэффициентыЕдиницИзмеренияВДокументе
	|		ПО
	|			КоэффициентыЕдиницИзмеренияВДокументе.Номенклатура = Товары.Номенклатура
	|			И КоэффициентыЕдиницИзмеренияВДокументе.ЕдиницаИзмерения = Товары.ЕдиницаИзмерения
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК КоэффициентыПервичнойУпаковки
	|		ПО
	|			КоэффициентыПервичнойУпаковки.Номенклатура = Товары.Номенклатура
	|			И ВЫБОР
	|				КОГДА НЕ Товары.ЕдиницаИзмерения.СостоитИзДругихУпаковок
	|					ТОГДА КоэффициентыПервичнойУпаковки.ЕдиницаИзмерения = Товары.ЕдиницаИзмерения
	|				КОГДА НЕ Товары.ЕдиницаИзмерения.Родитель.СостоитИзДругихУпаковок
	|					ТОГДА КоэффициентыПервичнойУпаковки.ЕдиницаИзмерения = Товары.ЕдиницаИзмерения.Родитель
	|				КОГДА НЕ Товары.ЕдиницаИзмерения.Родитель.Родитель.СостоитИзДругихУпаковок
	|					ТОГДА КоэффициентыПервичнойУпаковки.ЕдиницаИзмерения = Товары.ЕдиницаИзмерения.Родитель.Родитель
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПроверитьЗаполнениеМаркированнойПродукции(Документ, Отказ = Ложь) Экспорт
	
	ДанныеПоТоварам = ДанныеПоТоварам(Документ);
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеПоТоварам Цикл
		
		Если Не СтрокаТабличнойЧасти.СерияПромаркированаДляЦелейМДЛП Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерКиЗ) И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Штрихкод) Тогда
			Текст = НСтр("ru = 'Серия ""%1"" номенклатуры ""%2"" промаркирована для целей МДЛП и может быть добавлена в табличную часть только с помощью сканера штрихкода.'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаТабличнойЧасти.СерияНоменклатуры, СтрокаТабличнойЧасти.Номенклатура);
			Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", НСтр("ru = 'Номер упаковки'"), СтрокаТабличнойЧасти.НомерСтроки, "Товары", Текст);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТабличнойЧасти.НомерСтроки, "НомерКиЗ");
			ОбщегоНазначения.СообщитьПользователю(Текст,, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерКиЗ) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Штрихкод) Тогда
			Текст = НСтр("ru = 'Серия ""%1"" номенклатуры ""%2"" промаркирована для целей МДЛП, при этом штрихкод не является штрихкодом МДЛП.'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаТабличнойЧасти.СерияНоменклатуры, СтрокаТабличнойЧасти.Номенклатура);
			Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", НСтр("ru = 'Номер упаковки'"), СтрокаТабличнойЧасти.НомерСтроки, "Товары", Текст);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТабличнойЧасти.НомерСтроки, "НомерКиЗ");
			ОбщегоНазначения.СообщитьПользователю(Текст,, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Цел(СтрокаТабличнойЧасти.КоличествоВЕдиницахИзмерения) <> СтрокаТабличнойЧасти.КоличествоВЕдиницахИзмерения Тогда
			Текст = НСтр("ru = 'Количество маркированного товара, в строке табличной части, должно быть целым числом.'");
			Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", НСтр("ru = 'Количество'"), СтрокаТабличнойЧасти.НомерСтроки, "Товары", Текст);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТабличнойЧасти.НомерСтроки, "КоличествоВЕдиницахИзмерения");
			ОбщегоНазначения.СообщитьПользователю(Текст,, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.КоличествоВЕдиницахИзмерения * СтрокаТабличнойЧасти.КоэфициентЕдиницыИзмеренияВДокументе > СтрокаТабличнойЧасти.КоэфициентПотребительскойУпаковки Тогда
			Текст = НСтр("ru = 'Количество маркированного товара, в строке табличной части, не может быть больше одной потребительской упаковки.'");
			Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", НСтр("ru = 'Количество'"), СтрокаТабличнойЧасти.НомерСтроки, "Товары", Текст);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТабличнойЧасти.НомерСтроки, "КоличествоВЕдиницахИзмерения");
			ОбщегоНазначения.СообщитьПользователю(Текст,, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаличиеСопоставленияСкладаИМестаДеятельности(Документ, Отказ = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Ссылка.Организация  КАК Организация,
		|	Товары.Ссылка.Склад        КАК Склад
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.СерияПромаркированаДляЦелейМДЛП
		|");
		
		Запрос.УстановитьПараметр("Ссылка", Документ);
		
		Результат = Запрос.Выполнить();
		ЕстьМаркированнаяПродукция = Не Результат.Пустой();
		Если ЕстьМаркированнаяПродукция Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Организация = Выборка.Организация;
			Склад       = Выборка.Склад;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументОбъект.ЧекККМ")
		  Или ТипЗнч(Документ) = Тип("ДанныеФормыСтруктура") Тогда
		
		ЕстьМаркированнаяПродукция = Ложь;
		Для Каждого Товар Из Документ.Товары Цикл
			Если Товар.СерияПромаркированаДляЦелейМДЛП Тогда
				ЕстьМаркированнаяПродукция = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьМаркированнаяПродукция Тогда
			Организация = Документ.Организация;
			Склад       = Документ.Склад;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьМаркированнаяПродукция Тогда
		ДанныеОрганизации = ИнтеграцияМДЛПБольничнаяАптека.ОрганизацияМестоДеятельностиОбъекта(Организация, Склад);
		МестоДеятельности = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОрганизации, "МестоДеятельности");
		Если Не ЗначениеЗаполнено(МестоДеятельности) Тогда
			Текст = НСтр("ru = 'Невозможно выполнить операцию. Не установлены настройки соответствия субъектов обращения ИС ""Маркировка.МДЛП"" объектам информационной базы.'");
			ОбщегоНазначения.СообщитьПользователю(Текст,,,, Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(КассаККМ)
	|	И ЗначениеРазрешено(Склад)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// ИнтеграцияМДЛП

Процедура ПровестиДокументПоРегиструУпаковок(Ссылка, Отказ) Экспорт
	
	Если Константы.ИспользоватьРеестрВыбытияУпаковокМДЛП.Получить() Тогда
		// При использовании реестра выбытия упаковок, запись в реестр выбытия выполняется при получении уведомления о розничной продаже
		// (см. обработчик проведения документа УведомлениеОРозничнойПродажеМДЛП).
		// При этом, запись в регистр УпаковкиМДЛП выполняется обработкой РеестрВыбытияМДЛП.
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Статус, Дата, Организация, Склад");
	
	Если ДанныеДокумента.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован
	 Или ДанныеДокумента.Статус = Перечисления.СтатусыЧековККМ.Пробит Тогда
		
		ДанныеПоТоварам = ДанныеПоТоварам(Ссылка);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	НомераУпаковокДокумента.НомерСтроки           КАК НомерСтроки,
		|	НомераУпаковокДокумента.НомерКиЗ              КАК НомерУпаковки,
		|	ВЫБОР
		|		КОГДА НомераУпаковокДокумента.КоэфициентЕдиницыИзмеренияВДокументе <> НомераУпаковокДокумента.КоэфициентПотребительскойУпаковки
		|			ТОГДА НомераУпаковокДокумента.КоэфициентЕдиницыИзмеренияВДокументе * НомераУпаковокДокумента.КоличествоВЕдиницахИзмерения / НомераУпаковокДокумента.КоэфициентПотребительскойУпаковки
		|		ИНАЧЕ 1
		|	КОНЕЦ                                         КАК ДоляУпаковки,
		|	ЛОЖЬ                                          КАК ГрупповаяУпаковка,
		|	""Товары""                                    КАК ИмяТабличнойЧасти,
		|	""Номенклатура""                              КАК ИмяПоля
		|ПОМЕСТИТЬ НомераУпаковокДокумента
		|ИЗ
		|	&ДанныеПоТоварам КАК НомераУпаковокДокумента
		|ГДЕ
		|	НомераУпаковокДокумента.СерияПромаркированаДляЦелейМДЛП
		|");
		
		Запрос.УстановитьПараметр("ДанныеПоТоварам", ДанныеПоТоварам);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
		ИнтеграцияМДЛП.ДобавитьКлючиУпаковок(Запрос.МенеджерВременныхТаблиц, "НомераУпаковокДокумента");
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	МИНИМУМ(НомераУпаковокДокумента.НомерСтроки)  КАК НомерСтроки,
		|	НомераУпаковокДокумента.НомерУпаковки         КАК НомерУпаковки,
		|	НомераУпаковокДокумента.КлючУпаковки          КАК КлючУпаковки,
		|	СУММА(НомераУпаковокДокумента.ДоляУпаковки)   КАК ДоляУпаковки,
		|	НомераУпаковокДокумента.ГрупповаяУпаковка     КАК ГрупповаяУпаковка,
		|	НомераУпаковокДокумента.ИмяТабличнойЧасти     КАК ИмяТабличнойЧасти,
		|	НомераУпаковокДокумента.ИмяПоля               КАК ИмяПоля
		|ПОМЕСТИТЬ НомераУпаковок
		|ИЗ
		|	НомераУпаковокДокумента КАК НомераУпаковокДокумента
		|СГРУППИРОВАТЬ ПО
		|	НомераУпаковокДокумента.НомерУпаковки,
		|	НомераУпаковокДокумента.КлючУпаковки,
		|	НомераУпаковокДокумента.ГрупповаяУпаковка,
		|	НомераУпаковокДокумента.ИмяТабличнойЧасти,
		|	НомераУпаковокДокумента.ИмяПоля
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НомераУпаковокДокумента
		|";
		
		Запрос.Выполнить();
		
		Если Не Запрос.МенеджерВременныхТаблиц.Таблицы[0].ПолучитьДанные().Пустой() Тогда
			
			ДанныеОрганизации = ИнтеграцияМДЛПБольничнаяАптека.ОрганизацияМестоДеятельностиОбъекта(ДанныеДокумента.Организация, ДанныеДокумента.Склад);
			МестоДеятельности = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОрганизации, "МестоДеятельности");
			
			ПараметрыОперации = ИнтеграцияМДЛП.ПараметрыОперацииИзмененияСтатусаУпаковок();
			ПараметрыОперации.Владелец          = Справочники.ОрганизацииМДЛП.ПустаяСсылка();
			ПараметрыОперации.ДатаОперации      = ДанныеДокумента.Дата;
			ПараметрыОперации.ДокументРезерва   = Ссылка;
			ПараметрыОперации.МестоДеятельности = МестоДеятельности;
			
			Если ДанныеДокумента.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован Тогда
				ПроверкаПройдена = ИнтеграцияМДЛП.ПроверитьДоступностьУпаковок(Запрос.МенеджерВременныхТаблиц, ПараметрыОперации, Отказ);
				Если ПроверкаПройдена Тогда
					ИнтеграцияМДЛП.ЗарезервироватьУпаковки(Запрос.МенеджерВременныхТаблиц, ПараметрыОперации);
				КонецЕсли;
			Иначе // ДанныеДокумента.Статус = Перечисления.СтатусыЧековККМ.Пробит
				ПараметрыОперации.НовыйСтатус = Перечисления.СтатусыУпаковокМДЛП.ВыбылаИзОборота;
				ИнтеграцияМДЛП.УстановитьНовыйСтатус(Запрос.МенеджерВременныхТаблиц, ПараметрыОперации);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // ДанныеДокумента.Статус = Перечисления.СтатусыЧековККМ.Отложен Тогда
		
		ИнтеграцияМДЛП.ОтменитьРезерв(Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДокументИзРегистраУпаковок(Ссылка, Отказ) Экспорт
	
	Если Константы.ИспользоватьРеестрВыбытияУпаковокМДЛП.Получить() Тогда
		// При использовании реестра выбытия упаковок, запись в реестр выбытия выполняется при получении уведомления о розничной продаже
		// (см. обработчик проведения документа УведомлениеОРозничнойПродажеМДЛП).
		// При этом, запись в регистр УпаковкиМДЛП выполняется обработкой РеестрВыбытияМДЛП.
		Возврат;
	КонецЕсли;
	
	ИнтеграцияМДЛП.ОтменитьРезерв(Ссылка);
	
КонецПроцедуры

// Конец ИнтеграцияМДЛП

#КонецОбласти

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение
#Область Проведение

// Инициализирует таблицы значений, содержащие данные для проведения документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицыДвиженийДляПроведения(ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	ОсновныеДанныеДокумента = ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства);
	
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтТаблицаТовары());
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаТоварыНаСкладах(), Метаданные.РегистрыНакопления.ТоварыНаСкладах);
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаСвободныеОстатки(), Метаданные.РегистрыНакопления.СвободныеОстатки);
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтСуммаПлатежнымиКартами());
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаДенежныеСредстваВКассахККМ(), Метаданные.РегистрыНакопления.ДенежныеСредстваВКассахККМ);
	
	Запрос = Новый Запрос(ПроведениеБольничнаяАптека.ПолучитьТекстЗапросаДвижений(ДополнительныеСвойства, Регистры));
	
	Для Каждого ДанныеДокумента Из ОсновныеДанныеДокумента Цикл
		Запрос.УстановитьПараметр(ДанныеДокумента.Ключ, ДанныеДокумента.Значение);
	КонецЦикла;
	
	ПроведениеБольничнаяАптека.ЗаполнитьТаблицыДвижений(ДополнительныеСвойства, Запрос.ВыполнитьПакет(), Регистры);
	
КонецПроцедуры

Функция ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства)
	
	ЗапрашиваемыеДанные = Новый Структура;
	ЗапрашиваемыеДанные.Вставить("Ссылка");
	ЗапрашиваемыеДанные.Вставить("Период", "Дата");
	ЗапрашиваемыеДанные.Вставить("Организация");
	ЗапрашиваемыеДанные.Вставить("Склад");
	ЗапрашиваемыеДанные.Вставить("Валюта");
	ЗапрашиваемыеДанные.Вставить("Архивный");
	ЗапрашиваемыеДанные.Вставить("Статус");
	
	ОсновныеДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроведениеБольничнаяАптека.ПолучитьСсылкуНаДокументДляПроведения(ДополнительныеСвойства),
		ЗапрашиваемыеДанные);
	
	ОсновныеДанныеДокумента.Вставить("ВестиУчетПоИсточникамФинансирования", ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования"));
	ОсновныеДанныеДокумента.Вставить("ИспользоватьМестаХранения", ПолучитьФункциональнуюОпцию("ИспользоватьМестаХранения", Новый Структура("Склад", ОсновныеДанныеДокумента.Склад)));
	ОсновныеДанныеДокумента.Вставить("ЧекПробит", ОсновныеДанныеДокумента.Статус = Перечисления.СтатусыЧековККМ.Пробит);
	ОсновныеДанныеДокумента.Вставить("ТоварЗарезервирован", ОсновныеДанныеДокумента.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован);
	
	ЗапасыСервер.ПриПодготовкеОсновныхДанныхДляПроведения(ДополнительныеСвойства, ОсновныеДанныеДокумента);
	
	Возврат ОсновныеДанныеДокумента;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаТовары()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                               КАК НомерСтроки,
	|	ТаблицаТовары.Ссылка                                    КАК Ссылка,
	|	&Организация                                            КАК Организация,
	|	&Склад                                                  КАК Склад,
	|	ТаблицаТовары.Номенклатура                              КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (&СтатусУчетПоСериям, &СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                   КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартий В (&СтатусУчетПоПартиям, &СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                   КАК Партия,
	|	ВЫБОР 
	|		КОГДА &ВестиУчетПоИсточникамФинансирования
	|			ТОГДА ТаблицаТовары.ИсточникФинансирования
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ИсточникиФинансирования.ПустаяСсылка)
	|	КОНЕЦ                                                   КАК ИсточникФинансирования,
	|	ТаблицаТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ВтТаблицаТовары
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (НЕ &Архивный)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыНаСкладах()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Организация               КАК Организация,
	|	ТаблицаТовары.Склад                     КАК Склад,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры         КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия                    КАК Партия,
	|	ТаблицаТовары.ИсточникФинансирования    КАК ИсточникФинансирования,
	|	ТаблицаТовары.Количество                КАК Количество
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	(&ЧекПробит ИЛИ &ТоварЗарезервирован)
	|	И (НЕ &Архивный)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСвободныеОстатки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Организация               КАК Организация,
	|	ТаблицаТовары.Склад                     КАК Склад,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры         КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия                    КАК Партия,
	|	ТаблицаТовары.ИсточникФинансирования    КАК ИсточникФинансирования,
	|	ТаблицаТовары.Количество                КАК ВНаличии
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	(&ЧекПробит ИЛИ &ТоварЗарезервирован)
	|	И (НЕ &Архивный)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтСуммаПлатежнымиКартами()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СУММА(ТабличнаяЧасть.Сумма)  КАК Сумма
	|ПОМЕСТИТЬ ТаблицаСуммаПлатежнымиКартами
	|ИЗ
	|	Документ.ЧекККМ.ОплатаПлатежнымиКартами КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|;
	|
	|/////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДенежныеСредстваВКассахККМ()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.КассаККМ.Владелец КАК Организация,
	|	ДанныеДокумента.КассаККМ КАК КассаККМ,
	|	ДанныеДокумента.СуммаДокумента - ЕСТЬNULL(ТаблицаСуммаПлатежнымиКартами.Сумма, 0) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСуммаПлатежнымиКартами КАК ТаблицаСуммаПлатежнымиКартами
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ДанныеДокумента.СуммаДокумента - ЕСТЬNULL(ТаблицаСуммаПлатежнымиКартами.Сумма, 0) <> 0
	|	И ДанныеДокумента.Ссылка = &Ссылка
	|	И &ЧекПробит
	|	И (НЕ &Архивный)
	|;
	|
	|/////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // Проведение

////////////////////////////////////////////////////////////////////////////////
// Печать
#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандыПечати(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыПечати);
	
КонецПроцедуры

// Возвращает список доступных печатных форм документа
//
Функция ДоступныеПечатныеФормы() Экспорт
	
	ПечатныеФормы = УправлениеПечатьюБольничнаяАптека.СоздатьКоллекциюДоступныхПечатныхФорм();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЖурналыДокументов.ЧекиККМ.ДоступныеПечатныеФормы(), ПечатныеФормы);
	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеДляПечати();
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("РезультатПоШапке"         , РезультатыЗапросов[РезультатыЗапросов.ВГраница() - 1]);
	ДанныеДляПечати.Вставить("РезультатПоТабличнойЧасти", РезультатыЗапросов[РезультатыЗапросов.ВГраница()]);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ТекстЗапросаДанныеДляПечати()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДокЧек.Ссылка                         КАК Ссылка,
	|	ДокЧек.Номер                          КАК НомерДокумента,
	|	ДокЧек.Дата                           КАК ДатаДокумента,
	|	ДокЧек.Кассир.ФизическоеЛицо          КАК КассирККМ,
	|	ДокЧек.Валюта                         КАК Валюта,
	|	ДокЧек.Организация                    КАК Организация,
	|	ДокЧек.Организация                    КАК Отправитель,
	|	ДокЧек.Склад                          КАК Склад,
	|	ДокЧек.Склад.Наименование             КАК СкладПредставление,
	|	ДокЧек.ЦенаВключаетНДС                КАК ЦенаВключаетНДС,
	|	ДокЧек.СуммаДокумента                 КАК СуммаДокумента,
	|	ДокЧек.КассаККМ                       КАК КассаККМ,
	|	ДокЧек.КассаККМ.ТипКассы              КАК ТипКассы,
	|	ДокЧек.КассаККМ.СерийныйНомер         КАК СерийныйНомерККМ,
	|	ДокЧек.КассаККМ.РегистрационныйНомер  КАК РегистрационныйНомерККМ,
	|	ДокЧек.КассаККМ.Наименование          КАК ПредставлениеККМ
	|ИЗ
	|	Документ.ЧекККМ КАК ДокЧек
	|ГДЕ
	|	ДокЧек.Ссылка В(&ТекущийДокумент)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка                            КАК Документ,
	|	Товары.НомерСтроки                       КАК НомерСтроки,
	|	Товары.Номенклатура                      КАК Номенклатура,
	|	Товары.Номенклатура.НаименованиеПолное   КАК ТоварНаименование,
	|	Товары.Номенклатура.Код                  КАК Код,
	|	Товары.Номенклатура.Артикул              КАК Артикул,
	|	Товары.СерияНоменклатуры                 КАК СерияНоменклатуры,
	|	Товары.Партия                            КАК Партия,
	|	Товары.ЕдиницаИзмерения.Наименование     КАК НаименованиеУпаковки,
	|	Товары.КоличествоВЕдиницахИзмерения      КАК Количество,
	|	Товары.ЕдиницаИзмерения                  КАК ЕдиницаИзмерения,
	|	Товары.Цена                              КАК Цена,
	|	Товары.КоличествоВЕдиницахИзмерения
	|		* Товары.Цена
	|		- Товары.Сумма                       КАК Скидка,
	|	Товары.Сумма                             КАК Сумма,
	|	Товары.СуммаНДС                          КАК СуммаНДС,
	|	Товары.СуммаСНДС                         КАК СуммаСНДС
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&ТекущийДокумент)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Документ
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // Печать

////////////////////////////////////////////////////////////////////////////////
// Команды формы
#Область КомандыФормы

// Заполняет список команд ввода на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииБольничнаяАптека.ДобавитьКомандыСозданияНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
КонецПроцедуры

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	МенюОтчетыБольничнаяАптека.ДобавитьОбщиеКоманды(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыОтчетов, НастройкиФормы);
	
КонецПроцедуры

#КонецОбласти // КомандыФормы

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли