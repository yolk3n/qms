
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИнтеграцияМДЛППереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.ТоварыХарактеристика.Имя);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.ТоварыСерия.Имя);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.ТоварыУпаковка.Имя);
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Элементы.СоставТранспортныхУпаковокНоменклатура.Имя);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.СоставТранспортныхУпаковокХарактеристика.Имя, "Элементы.СоставТранспортныхУпаковок.ТекущиеДанные.Номенклатура");
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.СоставТранспортныхУпаковокСерия.Имя, "Элементы.СоставТранспортныхУпаковок.ТекущиеДанные.Номенклатура");
	
	ИспользоватьХарактеристики = ИнтеграцияМДЛП.ИспользоватьХарактеристикиНоменклатуры();
	Элементы.ТоварыХарактеристика.Видимость = ИспользоватьХарактеристики;
	Элементы.СоставТранспортныхУпаковокХарактеристика.Видимость = ИспользоватьХарактеристики;
	
	ИспользоватьСерии = ИнтеграцияМДЛП.ИспользоватьСерииНоменклатуры();
	Если Не ИспользоватьСерии Тогда
		Элементы.ТоварыСерия.Видимость = Ложь;
		Элементы.СоставТранспортныхУпаковокСерия.Видимость = Ложь;
		Элементы.СгенерироватьСерии.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыУпаковка.Видимость = ИнтеграцияМДЛП.ИспользоватьУпаковкиНоменклатуры();
	
	СобытияФормМДЛППереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФормМДЛППереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ТоварыОтображатьВсеНомераУпаковок.Пометка = Не ПоказыватьВсеНомераУпаковок;
	
	// ПодключаемоеОборудование.СканерыШтрихкода
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.УстройстваВвода") Тогда
		ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	КонецЕсли;
	// Конец ПодключаемоеОборудование.СканерыШтрихкода
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСостоянияМДЛП"
	   И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменМДЛП" Тогда
		
		ОбновитьСтатусУведомления();
		
	КонецЕсли;
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() И Не ТолькоПросмотр Тогда
		Если ИмяСобытия = "ScanData" Тогда
			
			ОбработатьШтрихкоды(ИнтеграцияМДЛПКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
			
		КонецЕсли;
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
			МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
			МодульОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Документ.УведомлениеОПеремещенииМДЛП.Форма.ФормаДокумента.Провести");
		КонецЕсли;
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ОбновитьСтатусУведомления();
	ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект);
	
	СобытияФормМДЛППереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Основание", Объект.Основание);
	Оповестить("Запись_УведомлениеОПеремещенииМДЛП", ПараметрыЗаписи, Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование") Тогда
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ОперацииПеремещенияМДЛП.ПриходныйОрдер") Тогда
		НавигационнаяСсылкаФорматированнойСтроки = "";
	КонецЕсли;
	
	ИнтеграцияМДЛПКлиент.ОбработатьНавигационнуюСсылкуСтатуса(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ОперацииПеремещенияМДЛП.ПриходныйОрдер") Тогда
		Объект.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ПринятоГИСМ");
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
			Объект.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче");
		Иначе
			ОбновитьСтатус();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриходныйОрдерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьДокументПоступления();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоДеятельностиПолучателяПриИзменении(Элемент)
	
	ОбработатьИзменениеМестаДейтельностиПолучатель();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	УстановитьОтборНомеровУпаковок(?(ТекущиеДанные <> Неопределено, ТекущиеДанные.ИдентификаторСтроки, "ВсеСкрыть"));
	СобытияФормМДЛПКлиентСервер.ОбновитьЗаголовокКоличествоНомеровУпаковок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		УстановитьОтборНомеровУпаковок(ТекущиеДанные.ИдентификаторСтроки);
		СобытияФормМДЛПКлиентСервер.ОбновитьЗаголовокКоличествоНомеровУпаковок(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	СобытияФормМДЛПКлиент.ТоварыПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораНоменклатуры(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц  = Истина;
	ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
	ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораХарактеристики(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц  = Истина;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораСерии(ЭтотОбъект, ТекущаяСтрока, ПараметрыУказанияСерий, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииСерии(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораУпаковки(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц  = Истина;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииУпаковки(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц  = Истина;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиНомераУпаковок

&НаКлиенте
Процедура НомераУпаковокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана строка с товаром.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
	СтрокиУпаковок = Объект.НомераУпаковок.НайтиСтроки(ПараметрыОтбора);
	
	Если ТекущиеДанные.Количество <= СтрокиУпаковок.Количество() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если Копирование Тогда
			ТекущиеДанные.НомерКиЗ = "";
		Иначе
			ТекущиеДанные.ИдентификаторСтроки = Элементы.Товары.ТекущиеДанные.ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		ОбновитьСтатусЗаполненияУпаковокВСтроке(Элементы.Товары.ТекущиеДанные);
		СобытияФормМДЛПКлиентСервер.ОбновитьЗаголовокКоличествоНомеровУпаковок(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокПослеУдаления(Элемент)
	
	СобытияФормМДЛПКлиентСервер.ОбновитьЗаголовокКоличествоНомеровУпаковок(ЭтотОбъект);
	ПодключитьОбработчикОжидания("ОбновитьСтатусыЗаполненияНомеровУпаковокОтложено", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТранспортныеУпаковки

&НаКлиенте
Процедура ТранспортныеУпаковкиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ИнтеграцияМДЛПКлиент.УстановитьОтборСтрок(
			Элементы.СоставТранспортныхУпаковок.ОтборСтрок,
			Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеУпаковкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		ТекущиеДанные.НомерУпаковки = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиСоставТранспортныхУпаковок

&НаКлиенте
Процедура СоставТранспортныхУпаковокНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.СоставТранспортныхУпаковок.ТекущиеДанные;
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораНоменклатуры(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставТранспортныхУпаковокНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СоставТранспортныхУпаковок.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ОбработатьУпаковки = Ложь;
	ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
	ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставТранспортныхУпаковокХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.СоставТранспортныхУпаковок.ТекущиеДанные;
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораХарактеристики(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставТранспортныхУпаковокСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.СоставТранспортныхУпаковок.ТекущиеДанные;
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораСерии(ЭтотОбъект, ТекущаяСтрока, ПараметрыУказанияСерий, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗапроситьИнформациюОбУпаковкахКоманда(Команда)
	
	ЗапроситьИнформациюОбУпаковках();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьИнформациюОВыделенныхПотребительскихУпаковках(Команда)
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый Структура("Поле, Значение", "Организация", Объект.Организация));
	Отбор.Добавить(Новый Структура("Поле, Значение", "МестоДеятельности", Объект.МестоДеятельностиПолучатель));
	
	ДоступныйТранспорт = ТранспортМДЛПВызовСервера.ДоступныеТранспортныеМодули(Отбор);
	Если ДоступныйТранспорт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = Элементы.НомераУпаковок;
	Если Элемент.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет строк для получения информации.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДанныеВыделенныхСтрок = Новый Массив;
	Для Каждого ТекущаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		ТекущиеДанные = Элемент.ДанныеСтроки(ТекущаяСтрока);
		ДанныеВыделенныхСтрок.Добавить(ТекущиеДанные);
	КонецЦикла;
	
	ЗапроситьИнформациюОПотребительскихУпаковках(ДоступныйТранспорт[0].ПараметрыПодключения, ДанныеВыделенныхСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьИнформациюОВыделенныхТранспортныхУпаковках(Команда)
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый Структура("Поле, Значение", "Организация", Объект.Организация));
	Отбор.Добавить(Новый Структура("Поле, Значение", "МестоДеятельности", Объект.МестоДеятельностиПолучатель));
	
	ДоступныйТранспорт = ТранспортМДЛПВызовСервера.ДоступныеТранспортныеМодули(Отбор);
	Если ДоступныйТранспорт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = Элементы.ТранспортныеУпаковки;
	Если Элемент.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет строк для получения информации.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДанныеВыделенныхСтрок = Новый Массив;
	Для Каждого ТекущаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		ТекущиеДанные = Элемент.ДанныеСтроки(ТекущаяСтрока);
		ДанныеВыделенныхСтрок.Добавить(ТекущиеДанные);
	КонецЦикла;
	
	ЗапроситьИнформациюОТранспортныхУпаковках(ДоступныйТранспорт[0].ПараметрыПодключения, ДанныеВыделенныхСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗапросИнформацииОбУпаковкахКоманда(Команда)
	
	ОтменитьЗапросИнформацииОбУпаковках();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВсеНомераУпаковок(Команда)
	
	ПоказыватьВсеНомераУпаковок = Не ПоказыватьВсеНомераУпаковок;
	Элементы.ТоварыОтображатьВсеНомераУпаковок.Пометка = Не ПоказыватьВсеНомераУпаковок;
	
	УстановитьОтборНомеровУпаковок(ИдентификаторТекущейСтроки);
	СобытияФормМДЛПКлиентСервер.ОбновитьЗаголовокКоличествоНомеровУпаковок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ТерминалыСбораДанных") Тогда
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(
			Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
			УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьСерии(Команда)
	
	Результат = СгенерироватьСерииНаСервере();
	
	СобытияФормМДЛПКлиент.ОповеститьОбОкончанииЗаполненияСерийВДокументе(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРеестрРешенийОВводеЛПВГражданскийОборот(Команда)
	
	ИнтеграцияМДЛПКлиент.ОткрытьРеестрРешенийОВводеЛПВГражданскийОборот(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормМДЛПКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(Объект, ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка));
	
	ОбновитьСтатусУведомления();
	ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект);
	
	НастроитьФормуПоОперации();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект,
		Элементы.СоставТранспортныхУпаковокХарактеристика.Имя, "Объект.СоставТранспортныхУпаковок.ХарактеристикиИспользуются");
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект,
		Элементы.СоставТранспортныхУпаковокСерия.Имя, "Объект.СоставТранспортныхУпаковок.СтатусУказанияСерий", "Объект.СоставТранспортныхУпаковок.ТипНоменклатуры");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НомераУпаковок.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.НомераУпаковок.ИдентификаторСтроки", Новый ПолеКомпоновкиДанных("ИдентификаторТекущейСтроки"), ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
	ИнтеграцияМДЛП.УстановитьУсловноеОформлениеОтклоненнойСтроки(ЭтотОбъект);
	
#Область СостояниеПолученияИнформации

#Область НомераУпаковок
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НомераУпаковокСтатус.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.НомераУпаковок.СостояниеПолученияИнформации", Перечисления.СостоянияПодтвержденияМДЛП.ПустаяСсылка());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<данные не запрашивались>'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НомераУпаковокСтатус.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.НомераУпаковок.СостояниеПолученияИнформации", Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияМДЛП);
	
#КонецОбласти
	
#Область ТранспортныеУпаковки
	
	// 
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТранспортныеУпаковкиСтатус.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.ТранспортныеУпаковки.СостояниеПолученияИнформации", Перечисления.СостоянияПодтвержденияМДЛП.ПустаяСсылка());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<данные не запрашивались>'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТранспортныеУпаковкиСтатус.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.ТранспортныеУпаковки.СостояниеПолученияИнформации", Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияМДЛП);
	
#КонецОбласти
	
#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОперации()
	
	ЭтоПриходныйОрдер = Объект.Операция = Перечисления.ОперацииПеремещенияМДЛП.ПриходныйОрдер;
	ДоступноОснованиеУведомления = ИнтеграцияМДЛП.ДоступноОснованиеУведомления(Объект.Ссылка);
	Элементы.Основание.Видимость = ДоступноОснованиеУведомления И Не ЭтоПриходныйОрдер;
	Элементы.ОснованиеПриходныйОрдер.Видимость = ДоступноОснованиеУведомления И ЭтоПриходныйОрдер;
	
	Элементы.ЗапроситьИнформациюОбУпаковках.Видимость = Объект.СостояниеПодтверждения <> Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ;
	Элементы.ОткрытьРеестрРешенийОВводеЛПВГражданскийОборот.Видимость = ЭтоПриходныйОрдер И Объект.СостояниеПодтверждения <> Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ;
	Элементы.СгенерироватьСерии.Видимость = ЭтоПриходныйОрдер И ИнтеграцияМДЛП.ИспользоватьСерииНоменклатуры();
	
	Элементы.Товары.ИзменятьСоставСтрок = Не ЭтоПриходныйОрдер;
	Элементы.НомераУпаковок.ТолькоПросмотр = ЭтоПриходныйОрдер;
	Элементы.ТранспортныеУпаковки.ТолькоПросмотр = ЭтоПриходныйОрдер;
	Элементы.Организация.ТолькоПросмотр = ЭтоПриходныйОрдер;
	Элементы.МестоДеятельности.ТолькоПросмотр = ЭтоПриходныйОрдер;
	Элементы.МестоДеятельностиПолучателя.ТолькоПросмотр = ЭтоПриходныйОрдер;
	Элементы.НомерДокумента.ТолькоПросмотр = ЭтоПриходныйОрдер;
	Элементы.ДатаДокумента.ТолькоПросмотр = ЭтоПриходныйОрдер;
	
	Элементы.Владелец.Видимость = ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Производство") И ЭтоПриходныйОрдер;
	Элементы.Владелец.ТолькоПросмотр = Объект.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусУведомления()
	
	ТекущийСтатус = ИнтеграцияМДЛП.ТекущийСтатусУведомления(Объект.Ссылка);
	СтатусПредставление = ИнтеграцияМДЛП.ПредставлениеСтатусаУведомления(ТекущийСтатус);
	
	Если ЗначениеЗаполнено(ТекущийСтатус.ДальнейшееДействие)
	   И ТекущийСтатус.ДальнейшееДействие.Найти(ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ДальнейшееДействиеПоУмолчанию()) <> Неопределено Тогда
		РедактированиеФормыНедоступно = Ложь;
	ИначеЕсли Объект.Операция = Перечисления.ОперацииПеремещенияМДЛП.ПриходныйОрдер И ЗначениеЗаполнено(ТекущийСтатус.ДальнейшееДействие) Тогда
		РедактированиеФормыНедоступно = Ложь;
	Иначе
		РедактированиеФормыНедоступно = Не ОбщегоНазначенияКлиентСервер.РежимОтладки();
	КонецЕсли;
	
	ТолькоПросмотр = РедактированиеФормыНедоступно;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатус()
	
	Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
	Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.Закрыто;
	
	ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусы(
		Объект.Ссылка, Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято, Статусы);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(Объект.Ссылка, ПараметрыОбновления);
	
	ОбновитьСтатусУведомления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыЗаполненияНомеровУпаковокОтложено()
	
	ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект)
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки);
		СтрокиНомеров = Объект.НомераУпаковок.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиНомеров.Количество() = СтрокаТЧ.Количество Тогда
			СтрокаТЧ.СтатусЗаполненияУпаковок = 1;
		Иначе
			СтрокаТЧ.СтатусЗаполненияУпаковок = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
	СтрокиНомеров = Объект.НомераУпаковок.НайтиСтроки(ПараметрыОтбора);
	
	Если СтрокиНомеров.Количество() = ТекущиеДанные.Количество Тогда
		ТекущиеДанные.СтатусЗаполненияУпаковок = 1;
	Иначе
		ТекущиеДанные.СтатусЗаполненияУпаковок = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНомеровУпаковок(ИдентификаторСтроки)
	
	Если ИдентификаторТекущейСтроки <> ИдентификаторСтроки Тогда
		ИдентификаторТекущейСтроки = ИдентификаторСтроки;
	КонецЕсли;
	
	Если Не ПоказыватьВсеНомераУпаковок Тогда
		ИнтеграцияМДЛПКлиент.УстановитьОтборСтрок(
			Элементы.НомераУпаковок.ОтборСтрок,
			Новый Структура("ИдентификаторСтроки", ИдентификаторТекущейСтроки));
	Иначе
		ИнтеграцияМДЛПКлиент.СнятьОтборСтрок(Элементы.НомераУпаковок.ОтборСтрок, "ИдентификаторСтроки");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМестаДейтельностиПолучатель()
	
	Если ЗначениеЗаполнено(Объект.МестоДеятельностиПолучатель) Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МестоДеятельностиПолучатель, "ВестиУчетВЭтойИБ") Тогда
			Объект.Операция = Перечисления.ОперацииПеремещенияМДЛП.Перемещение;
		Иначе
			Объект.Операция = Перечисления.ОперацииПеремещенияМДЛП.РасходныйОрдер;
		КонецЕсли;
	Иначе
		Объект.Операция = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СгенерироватьСерииНаСервере()
	
	Результат = ИнтеграцияМДЛП.ПустойРезультатЗаполненияСерий();
	
	Если Объект.Товары.Количество() <> 0 Тогда 
		ИнтеграцияМДЛППереопределяемый.ЗаполнитьСгенерироватьСерии(Объект, "Товары",, ПараметрыУказанияСерий, Результат);
	КонецЕсли;
	Если Объект.СоставТранспортныхУпаковок.Количество() <> 0 Тогда
		ИнтеграцияМДЛППереопределяемый.ЗаполнитьСгенерироватьСерии(Объект, "СоставТранспортныхУпаковок",, ПараметрыУказанияСерий, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьДокументПоступления()
	
	СобытияФормМДЛПКлиентПереопределяемый.ОткрытьФормуВыбораДокументаПоступлениеТоваров(
		ЭтотОбъект, Объект, Новый ОписаниеОповещения("ПослеВыбораДокументаПоступления", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДокументаПоступления(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		
		Если ИнтеграцияМДЛПВызовСервера.ЕстьРасхожденияМеждуУведомлениемИОснованием(Объект.Ссылка, ВыбранныйДокумент) Тогда
			
			ДополнительныеПараметрыВопроса = Новый Структура;
			ДополнительныеПараметрыВопроса.Вставить("ДокументПоступления", ВыбранныйДокумент);
			
			Обработчик = Новый ОписаниеОповещения("ОбработатьОтветОРасхождениях", ЭтотОбъект, ДополнительныеПараметрыВопроса);
			ТекстВопроса = НСтр("ru='В уведомлении есть товары которых нет в выбранном документе. Продолжить выбор?'");
			ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОбработатьВыборДокументаПоступления(ВыбранныйДокумент);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветОРасхождениях(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыборДокументаПоступления(ДополнительныеПараметры.ДокументПоступления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДокументаПоступления(ДокументПоступления)
	
	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		
		Объект.Основание = ДокументПоступления;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если РедактированиеФормыНедоступно Или Элементы.НомераУпаковок.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкодовПоТипам = ИнтеграцияМДЛПКлиентСервер.РазобратьШтрихкодыПоТипам(ДанныеШтрихкодов);
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц = Истина;
	
	ДанныеДляОбработки = СобытияФормМДЛПКлиентПереопределяемый.ПодготовитьДанныеДляОбработкиШтрихкодов(
		ЭтотОбъект, ДанныеШтрихкодовПоТипам, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ИнтеграцияМДЛПСлужебныйКлиент.ЗаполнитьДокументПоШтрихкодам(ЭтотОбъект, Объект, КэшированныеЗначения, ДанныеШтрихкодовПоТипам.НомераКиЗ, ДанныеШтрихкодовПоТипам.НомераТранспортныхУпаковок);
	
	ОбработатьПолученныеШтрихкодыСервер(ДанныеДляОбработки, КэшированныеЗначения);
	
	СобытияФормМДЛПКлиентСервер.ОбновитьЗаголовокКоличествоНомеровУпаковок(ЭтотОбъект);
	
	СобытияФормМДЛПКлиентПереопределяемый.ПослеОбработкиШтрихкодов(
		ЭтотОбъект,
		ДанныеДляОбработки,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныеШтрихкодыСервер(ДанныеДляОбработки, КэшированныеЗначения)
	
	СобытияФормМДЛППереопределяемый.ОбработатьШтрихкоды(ЭтотОбъект, ДанныеДляОбработки, КэшированныеЗначения);
	
	ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект);
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
КонецПроцедуры

#КонецОбласти

#Область ЗапросИнформацииОбУпаковках

&НаКлиенте
Процедура ЗапроситьИнформациюОбУпаковках()
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый Структура("Поле, Значение", "Организация", Объект.Организация));
	Отбор.Добавить(Новый Структура("Поле, Значение", "МестоДеятельности", Объект.МестоДеятельностиПолучатель));
	
	ДоступныйТранспорт = ТранспортМДЛПВызовСервера.ДоступныеТранспортныеМодули(Отбор);
	Если ДоступныйТранспорт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗапроситьИнформациюОбУпаковках_ПослеПопыткиАвторизации", ЭтотОбъект);
	ТранспортМДЛПАПИКлиент.ПолучитьТекущийКлючСессии(ДоступныйТранспорт[0].ПараметрыПодключения, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьИнформациюОбУпаковках_ПослеПопыткиАвторизации(РезультатАвторизации, Контекст) Экспорт
	
	Если РезультатАвторизации.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатАвторизации.ОписаниеОшибки;
	КонецЕсли;
	
	ЗапроситьИнформациюОПотребительскихУпаковках(РезультатАвторизации.ТранспортныйМодуль, Объект.НомераУпаковок);
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ОперацииПеремещенияМДЛП.ПриходныйОрдер") Тогда
		// Параллельно запускать получение информации о транспортных упаковках есть смысл только в приходном ордере,
		// когда точно известно, что количество и состав транспортных упаковок не изменится.
		ЗапроситьИнформациюОТранспортныхУпаковках(РезультатАвторизации.ТранспортныйМодуль, Объект.ТранспортныеУпаковки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьЗапросИнформацииОбУпаковках()
	
	ОтменитьПолучениеИнформациюОПотребительскихУпаковках();
	ОтменитьПолучениеИнформациюОТранспортныхУпаковках();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВыполнениеПолученияИнформацииОбУпаковках(Состояние)
	
	Если Состояние = "Начало" Тогда
		
		Элементы.ОтменитьЗапросИнформацииОбУпаковках.Видимость = Истина;
		
		Элементы.СтатусПредставление.Доступность = Ложь;
		Элементы.СгенерироватьСерии.Доступность = Ложь;
		Элементы.Товары.Доступность = Ложь;
		Элементы.НомераУпаковок.Доступность = Ложь;
		Элементы.ТранспортныеУпаковки.Доступность = Ложь;
		Элементы.СоставТранспортныхУпаковок.Доступность = Ложь;
		
		ТекстОповещения = НСтр("ru = 'Получение информации'");
		ПояснениеОповещения = НСтр("ru = 'Получение информации об упаковках запущено'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ПояснениеОповещения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗаданияПолученияИнформацииОКИЗ)
		   И Не ЗначениеЗаполнено(ИдентификаторЗаданияПолученияИнформацииОТранспортныхУпаковках) Тогда
			
			Элементы.ОтменитьЗапросИнформацииОбУпаковках.Видимость = Ложь;
			
			Элементы.СтатусПредставление.Доступность = Истина;
			Элементы.СгенерироватьСерии.Доступность = Истина;
			Элементы.Товары.Доступность = Истина;
			Элементы.НомераУпаковок.Доступность = Истина;
			Элементы.ТранспортныеУпаковки.Доступность = Истина;
			Элементы.СоставТранспортныхУпаковок.Доступность = Истина;
			
			ТекстОповещения = НСтр("ru = 'Получение информации'");
			ПояснениеОповещения = НСтр("ru = 'Получение информации об упаковках завершено'");
			ПоказатьОповещениеПользователя(ТекстОповещения,, ПояснениеОповещения, БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

#Область ЗапросИнформацииОПотребительскихУпаковках

&НаКлиенте
Процедура ЗапроситьИнформациюОПотребительскихУпаковках(ПараметрыПодключения, НомераУпаковок)
	
	СтандартнаяОбработка = Истина;
	СобытияФормМДЛПКлиентПереопределяемый.ЗапроситьИнформациюОПотребительскихУпаковках(ЭтотОбъект, ПараметрыПодключения, НомераУпаковок, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьПолучениеИнформациюОПотребительскихУпаковках();
	
	ОтобразитьВыполнениеПолученияИнформацииОбУпаковках("Начало");
	
	Контекст = Новый Структура;
	Контекст.Вставить("ПараметрыПодключения", ПараметрыПодключения);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьПолучениеИнформацииОПотребительскихУпаковках", ЭтотОбъект, Контекст);
	
	НомераКИЗ = Новый Массив;
	Для Каждого Строка Из Объект.Товары Цикл
		Для Каждого СтрокаУпаковки Из НомераУпаковок Цикл
			Если Строка.ИдентификаторСтроки = СтрокаУпаковки.ИдентификаторСтроки И ЗначениеЗаполнено(СтрокаУпаковки.НомерКИЗ) Тогда
				НомераКИЗ.Добавить(СтрокаУпаковки.НомерКИЗ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если НомераКИЗ.Количество() = 0 Тогда
		ТекстОповещения = НСтр("ru = 'Получение информации'");
		ПояснениеОповещения = НСтр("ru = 'Нет данных потребительских упаковок для обработки'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ПояснениеОповещения, БиблиотекаКартинок.Информация32);
		ВыполнитьОбработкуОповещения(Оповещение, ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации());
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = ТранспортМДЛПАПИКлиентСервер.ПараметрыПолученияИнформацииОПотребительскихУпаковках(Строка(УникальныйИдентификатор));
	ПараметрыМетода.НомераУпаковок = НомераКИЗ;
	ПараметрыМетода.ТипИсточникаИнформацииОбУпаковках = ПредопределенноеЗначение("Перечисление.ТипыИсточниковИнформацииОбУпаковкахМДЛП.Публичный");
	ПараметрыМетода.ПолучатьВерхнеуровневыеУпаковки = Истина;
	
	ПараметрыЗапуска = ТранспортМДЛПАПИКлиент.ПараметрыЗапускаМетодовАПИВДлительнойОперации(ЭтотОбъект);
	ПараметрыЗапуска.ОповещениеПередОжиданиемДлительнойОперации = Новый ОписаниеОповещения("ПередОжиданиемПолученияИнформацииОПотребительскихУпаковках", ЭтотОбъект);
	
	ТранспортМДЛПАПИКлиент.НачатьПолучениеИнформацииОКИЗ(ПараметрыПодключения, Оповещение, ПараметрыМетода, ПараметрыЗапуска);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеИнформацииОПотребительскихУпаковках(Результат, Контекст) Экспорт
	
	СтандартнаяОбработка = Истина;
	СобытияФормМДЛПКлиентПереопределяемый.ОбработатьПолучениеИнформацииОПотребительскихУпаковках(ЭтотОбъект, Результат, Контекст, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗаданияПолученияИнформацииОКИЗ = Неопределено;
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьВыполнениеПолученияИнформацииОбУпаковках("Конец");
	
	АдресРезультатаМетодаАПИ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "АдресРезультатаМетодаАПИ");
	Если АдресРезультатаМетодаАПИ <> Неопределено Тогда
		ОбработатьПолучениеИнформацииОПотребительскихУпаковкахНаСервере(АдресРезультатаМетодаАПИ);
		СобытияФормМДЛПКлиентСервер.ОбновитьЗаголовокКоличествоНомеровУпаковок(ЭтотОбъект);
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Если Объект.Операция <> ПредопределенноеЗначение("Перечисление.ОперацииПеремещенияМДЛП.ПриходныйОрдер") Тогда
		// При создании исходящего уведомления о перемещении, запрос информации о транспортных упаковках
		// есть смылс запускать только после получения информации о потребительских упаковках,
		// т.к. введенные пользователем номера потребительских упаковок, могут находится, по данным ИС МДЛП, внутри транспортной упаковки.
		// Эти данные мы получаем из ответа на запрос информации о потребительских упаковках,
		// после чего можем получать информацию о тех транспортных упаковках, которые ввел пользователь
		// и тех, которые мы получили в ответе на запрос информцаии о потребительских упаковках.
		ЗапроситьИнформациюОТранспортныхУпаковках(Контекст.ПараметрыПодключения, Объект.ТранспортныеУпаковки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолучениеИнформацииОПотребительскихУпаковкахНаСервере(Знач АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Данные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Данные");
	Если ЗначениеЗаполнено(Данные) Тогда
		
		СтандартнаяОбработка = Истина;
		СобытияФормМДЛППереопределяемый.ОбработатьПолучениеИнформацииОПотребительскихУпаковках(ЭтотОбъект, Данные, СтандартнаяОбработка);
		Если Не СтандартнаяОбработка Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДанныеКИЗ(Данные);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКИЗ(Данные)
	
	Документ = Объект;
	Для Каждого КлючЗначение Из Данные Цикл
		
		НайденныйСтроки = Документ.НомераУпаковок.НайтиСтроки(Новый Структура("НомерКиЗ", КлючЗначение.Ключ));
		Если НайденныйСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаУпаковки = НайденныйСтроки[0];
		
		ДанныеУпаковки = КлючЗначение.Значение;
		ЕстьИнформация = ДанныеУпаковки["error_code"] = Неопределено;
		Если ЕстьИнформация Тогда
			
			Если ДанныеУпаковки["gtin"] = Неопределено Тогда
				GTIN = Лев(14, КлючЗначение.Ключ);
				Статус = НСтр("ru = 'Не известен'");
			Иначе
				GTIN = ДанныеУпаковки["gtin"];
				Статус = ДанныеУпаковки["status"];
			КонецЕсли;
			
			СтрокаУпаковки.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
			СтрокаУпаковки.Статус = Статус;
			
			ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
			ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок = Истина;
			
			СтрокаТовараСтарая = Документ.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки))[0];
			
			НомерВерхнеуровневойТранспортнойУпаковки = ДанныеУпаковки["parent_sscc"];
			Если ЗначениеЗаполнено(НомерВерхнеуровневойТранспортнойУпаковки) Тогда
				
				// При осоздании исходящего уведомления о перемещении может быть случай, когда потребительская упаковка, введенная розсыпью,
				// на самом деле находится в транспортной упаковке.
				// В этом случае нужно получить полный состав транспортной упаковки
				// и при необходимости соединить с составом транспортной упаковки вместо товара розсыпью (см. ЗаполнитьДанныеТранспортныхУпаковок).
				// В случае, если в ИС МДЛП выполняется авторазагрегирование или автоизъятие, тогда данный механизм может быть неактуальным.
				// Для включения/отключения механизма необходимо установить параметр ПолучатьВерхнеуровневыеУпаковки = Истина/Ложь.
				
				Отбор = Новый Структура;
				Отбор.Вставить("НомерУпаковки", НомерВерхнеуровневойТранспортнойУпаковки);
				
				НайденныеСтроки = Документ.ТранспортныеУпаковки.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрокаТранспортнойУпаковки = Документ.ТранспортныеУпаковки.Добавить();
					НоваяСтрокаТранспортнойУпаковки.НомерУпаковки       = НомерВерхнеуровневойТранспортнойУпаковки;
					НоваяСтрокаТранспортнойУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
					НоваяСтрокаТранспортнойУпаковки.ДобавляемаяПерераспределением = Истина;
				КонецЕсли;
				
				СтрокаУпаковки.Статус = СтрШаблон("(%1) %2", 0, НСтр("ru = 'В транспортной упаковке'"));
				СтрокаУпаковки.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
				СтрокаУпаковки.Перераспределяемая = Истина;
				
			КонецЕсли;
			
			Отбор = Новый Структура;
			Отбор.Вставить("GTIN"      , GTIN);
			Отбор.Вставить("НомерСерии", Строка(ДанныеУпаковки["batch"]));
			Отбор.Вставить("ГоденДо"   , ТранспортМДЛПАПИКлиентСервер.СтрокаВДату(ДанныеУпаковки["expiration_date"]));
			
			НайденныеСтроки = Документ.Товары.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если НайденныеСтроки.Найти(СтрокаТовараСтарая) = Неопределено Тогда
				
					СтрокаТовараСтарая.Количество = СтрокаТовараСтарая.Количество - 1;
					Если СтрокаТовараСтарая.Количество = 0 Тогда
						Документ.Товары.Удалить(СтрокаТовараСтарая);
					Иначе
						ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, СтрокаТовараСтарая, ПараметрыЗаполнения);
					КонецЕсли;
					
					НоваяСтрокаТовара = НайденныеСтроки[0];
					СтрокаУпаковки.ИдентификаторСтроки = НоваяСтрокаТовара.ИдентификаторСтроки;
					НоваяСтрокаТовара.Количество = НоваяСтрокаТовара.Количество + 1;
					ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, НоваяСтрокаТовара, ПараметрыЗаполнения);
					
				КонецЕсли;
				
			Иначе
				
				ОтборПоИдентификатору = Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки);
				НайденныеСтроки = Документ.НомераУпаковок.НайтиСтроки(ОтборПоИдентификатору);
				Если НайденныеСтроки.Количество() > 1 Тогда
					СтрокаТовараСтарая.Количество = СтрокаТовараСтарая.Количество - 1;
					ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, СтрокаТовараСтарая, ПараметрыЗаполнения);
					
					НоваяСтрокаТовара = Документ.Товары.Вставить(СтрокаТовараСтарая.НомерСтроки);
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовара, СтрокаТовараСтарая,, "Серия, Количество, КоличествоУпаковок, ИдентификаторСтроки");
					НоваяСтрокаТовара.Количество = 1;
					НоваяСтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
					СтрокаУпаковки.ИдентификаторСтроки = НоваяСтрокаТовара.ИдентификаторСтроки;
					
					ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, НоваяСтрокаТовара, ПараметрыЗаполнения);
				Иначе
					НоваяСтрокаТовара = СтрокаТовараСтарая;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовара, Отбор);
				
				ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
				ПараметрыЗаполнения.ОбработатьУпаковки = Ложь;
				ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
				ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
				ИнтеграцияМДЛППереопределяемый.ПриИзмененииПараметровНоменклатуры(Документ, НоваяСтрокаТовара, ПараметрыЗаполнения);
				
			КонецЕсли;
			
		Иначе
			ОписаниеОшибки = ДанныеУпаковки["error_desc"];
			Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ОписаниеОшибки = ДанныеУпаковки["error_description"];
			КонецЕсли;
			СтрокаУпаковки.Статус = СтрШаблон("(%1) %2", ДанныеУпаковки["error_code"], ОписаниеОшибки);
			СтрокаУпаковки.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередОжиданиемПолученияИнформацииОПотребительскихУпаковках(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	ИдентификаторЗаданияПолученияИнформацииОКИЗ = ДлительнаяОперация.ИдентификаторЗадания;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПолучениеИнформациюОПотребительскихУпаковках()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияПолученияИнформацииОКИЗ) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияПолученияИнформацииОКИЗ);
		ИдентификаторЗаданияПолученияИнформацииОКИЗ = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗапросИнформацииОТранспортныхУпаковках

&НаКлиенте
Процедура ЗапроситьИнформациюОТранспортныхУпаковках(ПараметрыПодключения, НомераУпаковок)
	
	СтандартнаяОбработка = Истина;
	СобытияФормМДЛПКлиентПереопределяемый.ЗапроситьИнформациюОТранспортныхУпаковках(ЭтотОбъект, ПараметрыПодключения, НомераУпаковок, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьПолучениеИнформациюОТранспортныхУпаковках();
	
	ЕстьДобавленныеПерераспределением = Ложь;
	Для Каждого СтрокаУпаковки Из НомераУпаковок Цикл
		Если ЗначениеЗаполнено(СтрокаУпаковки.НомерУпаковки)
		   И СтрокаУпаковки.ДобавляемаяПерераспределением Тогда
			ЕстьДобавленныеПерераспределением = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ПараметрыПодключения", ПараметрыПодключения);
	Контекст.Вставить("НомераУпаковок", НомераУпаковок);
	
	Оповещение = Новый ОписаниеОповещения("ЗапроситьИнформациюОТранспортныхУпаковках_ПослеВопросаПользователю", ЭтотОбъект, Контекст);
	Если ЕстьДобавленныеПерераспределением Тогда
		ЗаголовокВопроса = НСтр("ru = 'Обнаружены несоответствия'");
		ТекстВопроса     = НСтр("ru = 'Обнаружены введенные россыпью потребительские упаковки, которые по данным ИС МДЛП находятся в составе транспортной упаковки.'");
		ТекстВопроса     = ТекстВопроса + Символы.ПС + НСтр("ru = 'Перераспределить или показать несоответствия без перераспределения?'");
		КнопкиВопроса    = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.ОК    , НСтр("ru = 'Перераспределить'"));
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Показать несоответствия'"));
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, КодВозвратаДиалога.Отмена, ЗаголовокВопроса);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Отмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьИнформациюОТранспортныхУпаковках_ПослеВопросаПользователю(Ответ, Контекст) Экспорт
	
	ПараметрыПодключения = Контекст.ПараметрыПодключения;
	НомераУпаковок       = Контекст.НомераУпаковок;
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		// Если не нужно перераспределять, тогда удаляем транспортные упаковки,
		// которые были добавлены по данным запроса информации об упаковках.
		Граница = НомераУпаковок.Количество() - 1;
		Для Индекс = 0 По Граница Цикл
			СтрокаУпаковки = НомераУпаковок[Граница - Индекс];
			Если СтрокаУпаковки.ДобавляемаяПерераспределением Тогда
				НомераУпаковок.Удалить(Граница - Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Удаляем временные признаки перераспределения.
	Для Каждого СтрокаУпаковки Из Объект.НомераУпаковок Цикл
		СтрокаУпаковки.Перераспределяемая = Неопределено;
	КонецЦикла;
	Для Каждого СтрокаУпаковки Из Объект.ТранспортныеУпаковки Цикл
		СтрокаУпаковки.ДобавляемаяПерераспределением = Неопределено;
	КонецЦикла;
	
	// Продолжаем выполнение запроса информации о транспортных упаковках.
	ОтобразитьВыполнениеПолученияИнформацииОбУпаковках("Начало");
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьПолучениеИнформацииОТранспортныхУпаковках", ЭтотОбъект);
	
	НомераТранспортныхУпаковок = Новый Массив;
	Для Каждого СтрокаУпаковки Из НомераУпаковок Цикл
		Если ЗначениеЗаполнено(СтрокаУпаковки.НомерУпаковки) Тогда
			НомераТранспортныхУпаковок.Добавить(СтрокаУпаковки.НомерУпаковки);
		КонецЕсли;
	КонецЦикла;
	
	Если НомераТранспортныхУпаковок.Количество() = 0 Тогда
		ТекстОповещения = НСтр("ru = 'Получение информации'");
		ПояснениеОповещения = НСтр("ru = 'Нет данных транспортных упаковок для обработки'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ПояснениеОповещения, БиблиотекаКартинок.Информация32);
		ВыполнитьОбработкуОповещения(Оповещение, ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации());
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = ТранспортМДЛПАПИКлиентСервер.ПараметрыПолученияИнформацииОТранспортныхУпаковках(Строка(УникальныйИдентификатор));
	ПараметрыМетода.НомераУпаковок = НомераТранспортныхУпаковок;
	
	ПараметрыЗапуска = ТранспортМДЛПАПИКлиент.ПараметрыЗапускаМетодовАПИВДлительнойОперации(ЭтотОбъект);
	ПараметрыЗапуска.ОповещениеПередОжиданиемДлительнойОперации = Новый ОписаниеОповещения("ПередОжиданиемПолученияИнформацииОТранспортныхУпаковках", ЭтотОбъект);
	
	ТранспортМДЛПАПИКлиент.НачатьПолучениеИнформацииОТранспортныхУпаковках(ПараметрыПодключения, Оповещение, ПараметрыМетода, ПараметрыЗапуска);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеИнформацииОТранспортныхУпаковках(Результат, Контекст) Экспорт
	
	СтандартнаяОбработка = Истина;
	СобытияФормМДЛПКлиентПереопределяемый.ОбработатьПолучениеИнформацииОТранспортныхУпаковках(ЭтотОбъект, Результат, Контекст, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗаданияПолученияИнформацииОТранспортныхУпаковках = Неопределено;
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьВыполнениеПолученияИнформацииОбУпаковках("Конец");
	
	АдресРезультатаМетодаАПИ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "АдресРезультатаМетодаАПИ");
	Если АдресРезультатаМетодаАПИ <> Неопределено Тогда
		ОбработатьПолучениеИнформацииОТранспортныхУпаковкахНаСервере(АдресРезультатаМетодаАПИ);
		СобытияФормМДЛПКлиентСервер.ОбновитьЗаголовокКоличествоНомеровУпаковок(ЭтотОбъект);
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолучениеИнформацииОТранспортныхУпаковкахНаСервере(Знач АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Данные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Данные");
	Если ЗначениеЗаполнено(Данные) Тогда
		
		СтандартнаяОбработка = Истина;
		СобытияФормМДЛППереопределяемый.ОбработатьПолучениеИнформацииОТранспортныхУпаковках(ЭтотОбъект, Данные, СтандартнаяОбработка);
		Если Не СтандартнаяОбработка Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДанныеТранспортныхУпаковок(Данные);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТранспортныхУпаковок(Данные)
	
	Для Каждого КлючЗначение Из Данные Цикл
		НайденныйСтроки = Объект.ТранспортныеУпаковки.НайтиСтроки(Новый Структура("НомерУпаковки", КлючЗначение.Ключ));
		Если НайденныйСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаУпаковки = НайденныйСтроки[0];
		
		ДанныеУпаковки = КлючЗначение.Значение;
		ЕстьИнформация = ДанныеУпаковки["error_code"] = Неопределено;
		Если ЕстьИнформация Тогда
			СтрокаУпаковки.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
			
			ТекущийСостав = Объект.СоставТранспортныхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
			Для Каждого СтрокаСостава Из ТекущийСостав Цикл
				СтрокаСостава.Количество = 0;
				УпаковкиВСоставе = Объект.НомераУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтрокиУпаковки));
				Для Каждого УдаляемаяСтрока Из УпаковкиВСоставе Цикл
					Объект.НомераУпаковок.Удалить(УдаляемаяСтрока);
				КонецЦикла;
			КонецЦикла;
			ГрупповыеУпаковкиВСоставе = Объект.ИерархияГрупповыхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
			Для Каждого УдаляемаяСтрока Из ГрупповыеУпаковкиВСоставе Цикл
				Объект.ИерархияГрупповыхУпаковок.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			
			ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
			ПараметрыЗаполнения.ОбработатьУпаковки = Ложь;
			ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
			ПараметрыЗаполнения.ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(Объект, ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка));
			
			СтекУпаковок = Новый Массив;
			СтекУпаковок.Добавить(ДанныеУпаковки["down"]);
			
			Пока СтекУпаковок.Количество() > 0 Цикл
				ТекущаяУпаковка = СтекУпаковок[0];
				СтекУпаковок.Удалить(0);
				
				Состав = ТекущаяУпаковка["childs"];
				Для Каждого ЭлементСостава Из Состав Цикл
					ЭтоКИЗ = ЭлементСостава["sgtin"] <> Неопределено;
					Если ЭтоКИЗ Тогда
						
						НомерКиЗ = ЭлементСостава["sgtin"];
						Отбор = Новый Структура;
						Отбор.Вставить("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки);
						Отбор.Вставить("GTIN"      , ЭлементСостава["gtin"]);
						Отбор.Вставить("НомерСерии", Строка(ЭлементСостава["batch"]));
						
						ИзменилисьДанныеВСтроке = Ложь;
						
						НайденныеСтроки = Объект.СоставТранспортныхУпаковок.НайтиСтроки(Отбор);
						Если НайденныеСтроки.Количество() > 0 Тогда
							СтрокаТовара = НайденныеСтроки[0];
						Иначе
							СтрокаТовара = Объект.СоставТранспортныхУпаковок.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТовара, Отбор);
							ИзменилисьДанныеВСтроке = Истина;
						КонецЕсли;
						
						Если ПустаяСтрока(СтрокаТовара.ИдентификаторСтрокиУпаковки) Тогда
							СтрокаТовара.ИдентификаторСтрокиУпаковки = Строка(Новый УникальныйИдентификатор);
						КонецЕсли;
						Если Не ЗначениеЗаполнено(СтрокаТовара.ГоденДо) Тогда
							СтрокаТовара.ГоденДо = ТранспортМДЛПАПИКлиентСервер.СтрокаВДату(ЭлементСостава["expiration_date"]);
							ИзменилисьДанныеВСтроке = Истина;
						КонецЕсли;
						
						СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
						
						Если ИзменилисьДанныеВСтроке Тогда
							ИнтеграцияМДЛППереопределяемый.ПриИзмененииПараметровНоменклатуры(Объект, СтрокаТовара, ПараметрыЗаполнения);
						КонецЕсли;
						
						НайденныйСтрокиУпаковок = Объект.НомераУпаковок.НайтиСтроки(Новый Структура("НомерКиЗ", НомерКиЗ));
						Если НайденныйСтрокиУпаковок.Количество() > 0 Тогда
							
							НоваяСтрока = НайденныйСтрокиУпаковок[0];
							
							// Перемещение потребительской упаковки в состав транспортной упаковки
							// средством смены идентификаторов строк и пересчетом количественных показателей.
							ПараметрыЗаполненияСтаройСтрокиТовара = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
							ПараметрыЗаполненияСтаройСтрокиТовара.ПересчитатьКоличествоУпаковок = Истина;
							
							СтрокиТовараСтарые = Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", НоваяСтрока.ИдентификаторСтроки));
							Если ЗначениеЗаполнено(СтрокиТовараСтарые) Тогда
								
								СтрокаТовараСтарая = СтрокиТовараСтарые[0];
								
								СтрокаТовараСтарая.Количество = СтрокаТовараСтарая.Количество - 1;
								Если СтрокаТовараСтарая.Количество = 0 Тогда
									Объект.Товары.Удалить(СтрокаТовараСтарая);
								Иначе
									ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Объект, СтрокаТовараСтарая, ПараметрыЗаполненияСтаройСтрокиТовара);
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе
							НоваяСтрока = Объект.НомераУпаковок.Добавить();
						КонецЕсли;
						
						НоваяСтрока.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтрокиУпаковки;
						НоваяСтрока.НомерКИЗ = НомерКиЗ;
						НоваяСтрока.Статус    = ЭлементСостава["status"];
						НоваяСтрока.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
						СтрокаУпаковки.Статус = ЭлементСостава["status"];
						
					Иначе
						НоваяСтрока = Объект.ИерархияГрупповыхУпаковок.Добавить();
						НоваяСтрока.НомерУпаковки = ЭлементСостава["sscc"];
						НоваяСтрока.ИдентификаторСтроки = СтрокаУпаковки.ИдентификаторСтроки;
						СтекУпаковок.Добавить(ЭлементСостава);
					КонецЕсли;
					НоваяСтрока.НомерРодительскойУпаковки = ТекущаяУпаковка["sscc"];
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			ОписаниеОшибки = ДанныеУпаковки["error_desc"];
			Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ОписаниеОшибки = ДанныеУпаковки["error_description"];
			КонецЕсли;
			СтрокаУпаковки.Статус = СтрШаблон("(%1) %2", ДанныеУпаковки["error_code"], ОписаниеОшибки);
			СтрокаУпаковки.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередОжиданиемПолученияИнформацииОТранспортныхУпаковках(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	ИдентификаторЗаданияПолученияИнформацииОТранспортныхУпаковках = ДлительнаяОперация.ИдентификаторЗадания;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПолучениеИнформациюОТранспортныхУпаковках()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияПолученияИнформацииОТранспортныхУпаковках) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияПолученияИнформацииОТранспортныхУпаковках);
		ИдентификаторЗаданияПолученияИнформацииОТранспортныхУпаковках = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // ЗапросИнформацииОбУпаковках

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
