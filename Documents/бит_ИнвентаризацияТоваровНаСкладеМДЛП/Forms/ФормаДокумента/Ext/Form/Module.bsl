   
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ВыполняетсяЗапись;

&НаКлиенте
Перем ПервоеПодключение,СоответствиеСтатусов,ПараметрыПодключения,ПараметрыМетода,ПараметрыЗапуска;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ПодключаемоеОборудованиеСервер.НастроитьФормуДляИспользованияПодключаемогоОборудования(ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриСозданииНаСервере(ЭтотОбъект);
	
	// БуферОбменаТоварами
	ДоступностьБуфераОбмена = Не ОбработкаТабличнойЧастиСервер.БуферОбменаПустой()
		И (Не Объект.Проведен Или Объект.Статус = Перечисления.СтатусыИнвентаризацииТоваров.ВРаботе);
	УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, ДоступностьБуфераОбмена);
	// Конец БуферОбменаТоварами
	
	// ИнтеграцияСМобильнымПриложением
	ИнтеграцияСМобильнымПриложением.СоздатьКомандуЗагрузкиДанныхИзМобильногоПриложенияНаФорме(ЭтотОбъект, "Товары", Элементы.ТоварыГруппаЗаполнить.Имя);
	// Конец ИнтеграцияСМобильнымПриложением
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
	ЗаполнитьСсылкуУведомление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// БуферОбменаТоварами
	Если ОбработкаТабличнойЧастиКлиент.НужноОбработатьВставкуИзБуфераОбмена(ЭтотОбъект, ИсточникВыбора) Тогда
		ВставитьТоварыИзБуфераОбмена(ВыбранноеЗначение);
	КонецЕсли;
	// Конец БуферОбменаТоварами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если ПодключаемоеОборудованиеКлиент.ОбрабатыватьОповещение(ЭтотОбъект, Источник) Тогда
		Если ПодключаемоеОборудованиеКлиент.ОбработатьПолучениеДанныхОтСканераШтрихкода(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбработатьШтрихкоды(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ВведенШтрихкод" И Источник = УникальныйИдентификатор Тогда
		ОбработатьШтрихкоды(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
	КонецЕсли;
	
	Если Источник = "РегистрацияШтрихкодов"
	   И ИмяСобытия = "ЗарегистрированыШтрихкоды"
	   И Параметр.КлючВладельца = УникальныйИдентификатор Тогда
		Если Параметр.ЗарегистрированныеШтрихкоды.Количество() > 0 Тогда
			ОбновитьСтрокиНенайденныхШтрихКодов(Параметр.ЗарегистрированныеШтрихкоды);
		КонецЕсли;
	КонецЕсли;
	
	// БуферОбменаТоварами
	Если ОбработкаТабличнойЧастиКлиент.ОбрабатыватьОповещениеОтБуфераОбмена(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ДоступностьБуфераОбмена = ОбработкаТабличнойЧастиКлиент.ОпределитьДоступностьВставкиИзБуфераОбменаПоСобытию(ИмяСобытия)
			И (Не Объект.Проведен Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыИнвентаризацииТоваров.ВРаботе"));
		УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, ДоступностьБуфераОбмена);
	КонецЕсли;
	// Конец БуферОбменаТоварами
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
	   И Не Объект.УчетныеДанныеЗаполнены
	   И Объект.Товары.Количество() > 0
	   И ВыполняетсяЗапись <> Истина Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='При проведении будет перезаполнено учетное количество во всех строках табличной части. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса,РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК);
		Отказ = Истина;
		
	КонецЕсли;
	
	ОценкаПроизводительностиБольничнаяАптекаКлиент.НачатьЗамерПроведенияДокумента(Объект.Ссылка, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ВыполняетсяЗапись = Истина;
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	ВыполняетсяЗапись = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ОтборИнвентаризации = Новый ХранилищеЗначения(ОтборИнвентаризации.Настройки, Новый СжатиеДанных(9));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ЗаполнитьСлужебныеРеквизиты();
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборКомиссии(Команда)
	
	ВзаимодействиеСПользователемКлиент.ОткрытьПодборЧленовКомиссии(Элементы.ИнвентаризационнаяКомиссия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзПостоянноДействующихКомиссий(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборКомиссии", ЭтотОбъект);
	ВзаимодействиеСПользователемКлиент.ВыбратьПостоянноДействующуюКомиссию(ЭтотОбъект, Объект.Организация, Оповещение);
	
КонецПроцедуры

#Область Товары

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("ПослеРазбиенияСтроки", ЭтотОбъект, ТекущаяСтрока);
	ОбработкаТабличнойЧастиКлиент.РазбитьСтрокуТЧ(Объект.Товары, ТекущаяСтрока, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОтбору(Команда)
	
	Если Не КлючевыеПараметрыЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоОтборуЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед заполнением список товаров будет очищен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьПоОтборуСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОтборуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		ЗаполнитьПоОтборуСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПоУчету(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьФактПоУчетуЗавершение", ЭтотОбъект);
	Если КоличествоФактЗаполнено() Тогда
		ТекстВопроса = НСтр("ru='В табличной части уже есть строки с заполненным фактическим количеством.
		                        |При заполнении эта информация будет утеряна. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПоУчетуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Действия = ОбработкаТабличнойЧастиКлиентСервер;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьРасхождения());
		
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.КоличествоВЕдиницахИзмерения = СтрокаТовара.КоличествоВЕдиницахИзмеренияПоДаннымУчета;
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(СтрокаТовара, СтруктураДействий, КэшированныеЗначения);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить()
	
	ОбработкаТабличнойЧастиКлиент.ПоказатьВводШтрихкода(УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПараметрыФормы = Новый Структура("ВариантЗаполнения, Инвентаризация", "ПоТоварамИнвентаризации", Объект.Ссылка);
	ОткрытьФорму("Обработка.ВыгрузкаБазыТоваровВТСД.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗагрузкуДанныхИзТСД", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(Оповещение, УникальныйИдентификатор, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Необходимо выбрать строку, для которой необходимо получить вес.'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьПолучениеВеса", ЭтотОбъект, ТекущаяСтрока);
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(Оповещение, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьНенайденныеШтрихкоды(Команда)
	
	ОбновитьСтрокиНенайденныхШтрихКодов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНенайденныеШтрихкоды(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьНенайденныеШтрихкоды(Объект.Товары, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатусОбъекта(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"СтатусОбъекта",
		НСтр("ru='Статус объекта'"),
		"Справочник.СтатусыОбъектовДляИнвентаризации.ФормаВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦелевуюФункциюАктива(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"ЦелеваяФункцияАктива",
		НСтр("ru='Целевая функция актива'"),
		"Справочник.ЦелевыеФункцииАктивовДляИнвентаризации.ФормаВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	// ИнтеграцияСМобильнымПриложением
	Оповестить = Новый ОписаниеОповещения("ОбработатьЗагрузкуДанныхИзТСД", ЭтотОбъект);
	ИнтеграцияСМобильнымПриложениемКлиент.ВыполнитьКомандуЗагрузкиДанныхИзМобильногоПриложения(ЭтотОбъект, Команда, Оповестить);
	// Конец ИнтеграцияСМобильнымПриложением
	
	ОбщегоНазначенияБольничнаяАптекаКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти // Товары

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Шапка
#Область Шапка

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Склад <> Объект.Склад Тогда
		ОбработатьИзменениеСклада();
		Объект.УчетныеДанныеЗаполнены = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникИнформацииОЦенахДляПечатиПриИзменении(Элемент)
	
	ОбработатьИзменениеИсточникаИнформацииОЦенахДляПечати();
	
КонецПроцедуры

#КонецОбласти // Шапка

////////////////////////////////////////////////////////////////////////////////
// Список "Товары"
#Область Товары

&НаКлиенте
Процедура ТолькоРасхожденияПриИзменении(Элемент)
	
	Если ТолькоРасхождения Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьРасхождения", Истина);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если Копирование Тогда
		ТекущаяСтрока.Количество = 0;
		ТекущаяСтрока.КоличествоВЕдиницахИзмерения = 0;
		ТекущаяСтрока.КоличествоПоДаннымУчета = 0;
		ТекущаяСтрока.КоличествоВЕдиницахИзмеренияПоДаннымУчета = 0;
		ТекущаяСтрока.ЕстьРасхождения = Ложь; 
		ТекущаяСтрока.СтатусОшибки = 0;
		ТекущаяСтрока.ЕстьОшибки =  Ложь;
		ТекущаяСтрока.ИдентификаторСтроки  = Новый УникальныйИдентификатор;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИдентификаторСтроки) тогда
		ТекущаяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор
	КонецЕсли;

	
КонецПроцедуры
 
&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования И НоваяСтрока Тогда
		Объект.УчетныеДанныеЗаполнены = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), ТекущаяСтрока.СерияНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьПартиюПоВладельцу(), ТекущаяСтрока.Партия);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоПоДаннымУчета());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИдентификаторСтроки) тогда
		ТекущаяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор
	КонецЕсли;
	
	ДобавитьКИЗыТовара(ТекущаяСтрока.ПолучитьИдентификатор());
	УстановитьОтборНомеровУпаковок(ТекущаяСтрока.ИдентификаторСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ДобавитьКИЗыТовара(ТекущаяСтрока.ПолучитьИдентификатор());
	
   	УстановитьОтборНомеровУпаковок(Элементы.Товары.ТекущиеДанные.ИдентификаторСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	КоэффициентСтарый = ТекущаяСтрока.Коэффициент;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоПоДаннымУчета());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КоэффициентНовый = ТекущаяСтрока.Коэффициент;
	
	Если Не (КоэффициентНовый = КоэффициентСтарый Или КоэффициентНовый = 0) Тогда
		ТекущаяСтрока.КоличествоВЕдиницахИзмеренияПоДаннымУчета = ТекущаяСтрока.КоличествоПоДаннымУчета / КоэффициентНовый;
	КонецЕсли;
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элемент.Родитель.ТекущиеДанные;
	ОтборПартий = Новый Структура;
	ОтборПартий.Вставить("Документ"     , Объект.Ссылка);
	ОтборПартий.Вставить("Организация"  , Объект.Организация);
	ОтборПартий.Вставить("Склад"        , Объект.Склад);
	
	ПараметрыВыбораПартии = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыВыбораПартии(ОтборПартий, ТекущаяСтрока);
	ПараметрыВыбораПартии.МожноСоздаватьПартию = Истина;
	
	ОбработкаТабличнойЧастиКлиент.ВыбратьПартиюНоменклатуры(ЭтотОбъект, Элемент, ПараметрыВыбораПартии, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияПриИзменении(Элемент)
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	
	ДобавитьКИЗыТовара(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	
	УстановитьОтборНомеровУпаковок(Элементы.Товары.ТекущиеДанные.ИдентификаторСтроки);
  	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИсточникФинансированияПриИзменении(Элемент)
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	
КонецПроцедуры

#КонецОбласти // Товары

////////////////////////////////////////////////////////////////////////////////
// Список "Инвентаризационная комиссия"
#Область ИнвентаризационнаяКомиссия

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВзаимодействиеСПользователемКлиент.ОбработатьПодборЧленовКомиссии(
		Объект.ИнвентаризационнаяКомиссия, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ВзаимодействиеСПользователемКлиент.ОбработатьНачалоРедактированияСоставаКомиссии(
		Объект.ИнвентаризационнаяКомиссия, Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПослеУдаления(Элемент)
	
	ВзаимодействиеСПользователемКлиент.ОбработатьУдалениеЧленаКомиссии(Объект.ИнвентаризационнаяКомиссия);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияПредседательПриИзменении(Элемент)
	
	ВзаимодействиеСПользователемКлиент.ОбработатьИзменениеПредседателяКомиссии(Объект.ИнвентаризационнаяКомиссия, Элемент.Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризационнаяКомиссияЧленКомиссииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВзаимодействиеСПользователемКлиент.ОбработатьВыборЧленаКомиссии(
		Объект.ИнвентаризационнаяКомиссия, Элемент.Родитель, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // ИнвентаризационнаяКомиссия

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	ИнициализироватьОтборИнвентаризации();
	
	Склад = Объект.Склад;
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	
	ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
	УстановитьДоступностьЭлементовПоТипуСклада();
	УстановитьДоступностьВидаЦены();
	
	ЗаполнитьСлужебныеРеквизиты();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОтборИнвентаризации()
	
	СхемаКомпоновкиДанных = Документы.ИнвентаризацияТоваровНаСкладе.ПолучитьМакет("ОтборИнвентаризации");
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	ОтборИнвентаризации.Инициализировать(ИсточникНастроек);
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекНастройки = ТекОбъект.ОтборИнвентаризации.Получить();
	Если ТекНастройки = Неопределено Тогда
		ОтборИнвентаризации.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Иначе
		ОтборИнвентаризации.ЗагрузитьНастройки(ТекНастройки);
	КонецЕсли;
	
	ОтборИнвентаризации.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	УстановитьЗначениеПараметраНастроек(ОтборИнвентаризации.Настройки, "Склад", Объект.Склад);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьРасхождения());
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТабличнуюЧасть(Объект.Товары, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	ПолноеРедактирование = Ложь;
	ОграниченноеРедактирование = Ложь;
	
	Если Объект.Проведен Тогда
		
		Если Объект.Статус = Перечисления.СтатусыИнвентаризацииТоваров.Выполнено Тогда
			
			Элементы.СоздатьУведомление.Видимость = Истина;
	
		ИначеЕсли Объект.Статус = Перечисления.СтатусыИнвентаризацииТоваров.ВРаботе Тогда
			ОграниченноеРедактирование = Истина;
		КонецЕсли;
		
	Иначе
		ПолноеРедактирование = Истина;
	КонецЕсли;
	
	Элементы.Дата.ТолькоПросмотр        = Не ПолноеРедактирование;
	Элементы.Организация.ТолькоПросмотр = Не ПолноеРедактирование;
	Элементы.Склад.ТолькоПросмотр       = Не ПолноеРедактирование;
	
	Элементы.ТоварыЗаполнитьПоДаннымУчета.Доступность        = ПолноеРедактирование Или ОграниченноеРедактирование;
	Элементы.ТоварыЗаполнитьФактПоУчету.Доступность          = ПолноеРедактирование Или ОграниченноеРедактирование;
	Элементы.ТоварыЗаполнитьСтатусОбъекта.Доступность        = ПолноеРедактирование Или ОграниченноеРедактирование;
	Элементы.ТоварыЗаполнитьЦелевуюФункциюАктива.Доступность = ПолноеРедактирование Или ОграниченноеРедактирование;
	
	Элементы.ТоварыРазбитьСтроку.Доступность = ПолноеРедактирование Или ОграниченноеРедактирование;
	
	Элементы.ТоварыЗагрузитьДанныеИзТСД.Доступность = ПолноеРедактирование Или ОграниченноеРедактирование;
	Элементы.ТоварыПолучитьВес.Доступность          = ПолноеРедактирование Или ОграниченноеРедактирование;
	
	Элементы.Товары.ИзменятьСоставСтрок  = ПолноеРедактирование Или ОграниченноеРедактирование;
	Элементы.Товары.ИзменятьПорядокСтрок = ПолноеРедактирование Или ОграниченноеРедактирование;
	
	// БуферОбменаТоварами
	Элементы.ТоварыБуферОбменаВставить.Доступность                = ПолноеРедактирование Или ОграниченноеРедактирование;
	Элементы.ТоварыКонтекстноеМенюБуферОбменаВставить.Доступность = ПолноеРедактирование Или ОграниченноеРедактирование;
	Элементы.ТоварыБуферОбмена.Доступность                        = ПолноеРедактирование Или ОграниченноеРедактирование;
	// Конец БуферОбменаТоварами  
	
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоТипуСклада()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	
	ЭлементыФормы = Новый Массив;
	ЭлементыФормы.Добавить("ИсточникФинансирования");
	ЭлементыФормы.Добавить("ТоварыИсточникФинансирования");
	
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		ЭлементыФормы,
		"ТолькоПросмотр",
		ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьВидаЦены()
	
	Элементы.ВидЦены.Доступность = (Объект.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен);
	
КонецПроцедуры

&НаКлиенте
Функция КоличествоФактЗаполнено()
	
	НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("КоличествоВЕдиницахИзмерения", 0));
	Возврат НайденныеСтроки.Количество() <> Объект.Товары.Количество();
	
КонецФункции

&НаКлиенте
Функция КлючевыеПараметрыЗаполнены()
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Организация",, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Склад"" не заполнено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Склад",, Отказ);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Объект.МестоДеятельности) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Место деятельности"" не заполнено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.МестоДеятельности",, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ИсточникФинансирования) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Источник финансирования"" не заполнено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.ИсточникФинансирования",, Отказ);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Объект.ОрганизацияМДЛП) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация МДЛП"" не заполнено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.ОрганизацияМДЛП",, Отказ);
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитВВыделенныхСтроках(ИмяРеквизита, ПредставлениеРеквизита, ИмяФормыВыборка, ПараметрыФормы = Неопределено)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	ЗаполнениеВозможно = ОбработкаТабличнойЧастиКлиент.ПроверитьВозможностьЗаполненияРеквизитаВТабличнойЧасти(
		Объект.Товары, ВыделенныеСтроки, НСтр("ru='Товары'"), ПредставлениеРеквизита);
	Если ЗаполнениеВозможно Тогда
		
		ПараметрыЗаполнения = Новый Структура("ИмяРеквизита, ПредставлениеРеквизита", ИмяРеквизита, ПредставлениеРеквизита);
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьРеквизитВВыделенныхСтрокахЗавершение", ЭтотОбъект, ПараметрыЗаполнения);
		ОткрытьФорму(ИмяФормыВыборка, ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитВВыделенныхСтрокахЗавершение(Значение, ПараметрыЗаполнения) Экспорт
	
	Если Значение <> Неопределено Тогда
		ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
		ЗаполненоСтрок = ОбработкаТабличнойЧастиКлиент.ЗаполнитьРеквизитВВыделенныхСтроках(
			Объект.Товары, ВыделенныеСтроки, ПараметрыЗаполнения.ИмяРеквизита, Значение);
		ОбработкаТабличнойЧастиКлиент.ПоказатьОповещениеОЗаполненииРеквизитаВВыделенныхСтроках(
			Значение, ЗаполненоСтрок, ВыделенныеСтроки.Количество(), ПараметрыЗаполнения.ПредставлениеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКомиссии(ВыбранноеЗначение, НеИспользуется) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыборКомиссииСервер(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборКомиссииСервер(Комиссия)
	
	ОбработкаТабличнойЧастиСервер.ЗаполнитьДанныеКомиссииИзПостоянноДействующейКомиссии(Комиссия, Объект, Объект.ИнвентаризационнаяКомиссия);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение по отбору
#Область ЗаполнениеПоОтбору

&НаСервере
Процедура ЗаполнитьПоОтборуСервер()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	УстановитьЗначениеПараметраНастроек(ОтборИнвентаризации.Настройки, "Организация", Объект.Организация);
	УстановитьЗначениеПараметраНастроек(ОтборИнвентаризации.Настройки, "Склад", Объект.Склад);
	УстановитьЗначениеПараметраНастроек(ОтборИнвентаризации.Настройки, "ДатаОстатков", ПолучитьДатуОстатков());
	
	ВестиУчетПоИсточникамФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования");
	ИсточникФинансирования = ?(
		ВестиУчетПоИсточникамФинансирования,
		?(ЗначениеЗаполнено(Объект.ИсточникФинансирования), Объект.ИсточникФинансирования, Неопределено),
		Неопределено);
	УстановитьЗначениеПараметраНастроек(ОтборИнвентаризации.Настройки, "ИсточникФинансирования", ИсточникФинансирования);
	
	СхемаКомпоновкиДанных = Документы.ИнвентаризацияТоваровНаСкладе.ПолучитьМакет("ОтборИнвентаризации");
	Если ЭтотОбъект.Маркируемые Тогда
		СхемаКомпоновкиДанных = Документы.бит_ИнвентаризацияТоваровНаСкладеМДЛП.ПолучитьМакет("бит_ОтборИнвентаризацииКИЗ");	
	КонецЕсли;
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		ОтборИнвентаризации.ПолучитьНастройки(),
		,
		,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Объект.Товары.Загрузить(ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных));
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоУпаковокПоДаннымУчета());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьРасхождения());
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТабличнуюЧасть(Объект.Товары, СтруктураДействий, Неопределено);
	
	Для Каждого Строка из Объект.Товары Цикл		
		Строка.ИдентификаторСтроки = Новый УникальныйИдентификатор();		
	КонецЦикла;	
	
	Объект.УчетныеДанныеЗаполнены = Истина; 
	
	ЗагрузитьДанныеПоКИЗам();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуОстатков()
	
	ДатаОстатков = ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(Объект.Дата) И НачалоДня(Объект.Дата) <> НачалоДня(ДатаОстатков) Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			ДатаОстатков = КонецДня(Объект.Дата);
		Иначе
			ДатаОстатков = Объект.Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДатаОстатков;
	
КонецФункции

&НаСервере
Процедура УстановитьЗначениеПараметраНастроек(Настройки, ИмяПараметра, Значение)
	
	Параметр = Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Значение;
		Параметр.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ЗаполнениеПоОтбору

////////////////////////////////////////////////////////////////////////////////
// Обработка штрихкодов
#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	
	
	//{
	ОбработатьДанныеШтрихкодов(ДанныеШтрихкодов);	
	Возврат;
	//}
	
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияСДобавленнымиСтроками = Новый Структура;
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьРасхождения());
	
	ДействияСИзмененнымиСтроками = Новый Структура;
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьРасхождения());
	
	ИзменятьКоличество =
		Не ТолькоПросмотр
		И (Не Объект.Проведен
			Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыИнвентаризацииТоваров.ВРаботе"));
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиШтрихкодов(ДанныеШтрихкодов, ДействияСДобавленнымиСтроками, ДействияСИзмененнымиСтроками);
	ПараметрыДействия.ИзменятьКоличество = ИзменятьКоличество;
	ПараметрыДействия.ЭмуляторШК.epfПараметрыУчетаНоменклатуры = ПараметрыУчетаНоменклатуры;
	
	ОбработатьШтрихкодыНаСервере(ПараметрыДействия, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиКлиент.СообщитьОНеизвестныхШтрихкодах(ПараметрыДействия);
	
	Если ПараметрыДействия.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = ПараметрыДействия.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыНаСервере(ПараметрыДействия, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиСервер.ОбработатьШтрихкоды(ЭтотОбъект, Объект, ПараметрыДействия, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокиНенайденныхШтрихКодов(ЗарегистрированныеШтрихкоды = Неопределено)
	
	Если Не ОбработкаТабличнойЧастиКлиент.ЕстьНенайденныеШтрихкоды(Объект.Товары) Тогда
		Возврат;
	КонецЕсли;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияСИзмененнымиСтроками = Новый Структура;
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоПоДаннымУчета());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьРасхождения());
	
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиНенайденныхШтрихкодов();
	ПараметрыДействия.ДействияСИзмененнымиСтроками = ДействияСИзмененнымиСтроками;
	Если ЗарегистрированныеШтрихкоды <> Неопределено Тогда
		ПараметрыДействия.ЗарегистрированныеШтрихкоды = ЗарегистрированныеШтрихкоды;
	КонецЕсли;
	
	ОбновитьДанныеНенайденныхШтрихКодовНаСервере(ПараметрыДействия, КэшированныеЗначения);
	
	Если ПараметрыДействия.Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.СообщитьОНеизвестныхШтрихкодах(ПараметрыДействия);
	ОбработкаТабличнойЧастиКлиент.СообщитьОРезультатеОбновленияДанныхПоШтрихкодам(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНенайденныхШтрихКодовНаСервере(ПараметрыДействия, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиСервер.ОбновитьДанныеНенайденныхШтрихКодов(Объект, ПараметрыДействия, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти // ОбработкаШтрихкодов

////////////////////////////////////////////////////////////////////////////////
// Обработка изменения реквизитов
#Область ОбработкаИзмененияРеквизитов

&НаСервере
Процедура ОбработатьИзменениеСклада()
	
	Если Склад = Объект.Склад Тогда
		Возврат;
	КонецЕсли;
	
	Склад = Объект.Склад;
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(Объект, ПараметрыУчетаНоменклатуры);
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	
	РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад, "ТипСклада, ИсточникФинансирования, ИсточникИнформацииОЦенахДляПечати");
	ТипСклада = РеквизитыСклада.ТипСклада;
	
	Если ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
		
		Объект.ИсточникФинансирования = РеквизитыСклада.ИсточникФинансирования;
		Для каждого Товар Из Объект.Товары Цикл
			Товар.ИсточникФинансирования = Объект.ИсточникФинансирования;
		КонецЦикла;
		
	КонецЕсли;
	
	Объект.ИсточникИнформацииОЦенахДляПечати = РеквизитыСклада.ИсточникИнформацииОЦенахДляПечати;
	ОбработатьИзменениеИсточникаИнформацииОЦенахДляПечати();
	
	УстановитьДоступностьЭлементовПоТипуСклада();
	
	УстановитьЗначениеПараметраНастроек(ОтборИнвентаризации.Настройки, "Склад", Объект.Склад);
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ОтборИнвентаризации.Настройки.Отбор, "МестоХранения");
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеИсточникаИнформацииОЦенахДляПечати()
	
	Если Объект.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен Тогда
		Объект.ВидЦены = Справочники.Склады.УчетныйВидЦены(Объект.Склад);
	Иначе
		Объект.ВидЦены = Неопределено;
	КонецЕсли;
	
	УстановитьДоступностьВидаЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗагрузкуДанныхИзТСД(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеВеса(РезультатВыполнения, ТекущаяСтрока) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекущаяСтрока.КоличествоВЕдиницахИзмерения = РезультатВыполнения.Вес;
		ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьРасхождения());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРазбиенияСтроки(НоваяСтрока, ТекущаяСтрока) Экспорт
	
	НоваяСтрока.КоличествоВЕдиницахИзмеренияПоДаннымУчета = 0;
	НоваяСтрока.КоличествоПоДаннымУчета = 0;
	
	ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	ПриИзмененииКоличестваВСтрокеСпискаТовары(НоваяСтрока);
	
	Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

#КонецОбласти // ОбработкаИзмененияРеквизитов

////////////////////////////////////////////////////////////////////////////////
// Условное оформление
#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеЗабракованнойСерии(ЭтотОбъект);
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСерийНоменклатуры(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПартий(ЭтотОбъект);
	
	УстановитьОформлениеИнвентаризацияВыполнена();
	УстановитьОформлениеЕстьРасхождения();
	УстановитьОформлениеИсточникФинансирования();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеИнвентаризацияВыполнена()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ДобавитьПоляВКоллекциюОформляемыхПолей(Элемент, Элементы.Товары.ПодчиненныеЭлементы);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Проведен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыИнвентаризацииТоваров.Выполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаФормы);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоляВКоллекциюОформляемыхПолей(ЭлементУсловногоОформления, ЭлементыФормы)
	
	Для Каждого ЭлементФормы Из ЭлементыФормы Цикл
		
		Если ТипЗнч(ЭлементФормы) <> Тип("ГруппаФормы") Тогда
			ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормы.Имя);
		Иначе
			ПодчиненныеЭлементыГруппы = ЭлементФормы.ПодчиненныеЭлементы;
			ДобавитьПоляВКоллекциюОформляемыхПолей(ЭлементУсловногоОформления, ПодчиненныеЭлементыГруппы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеЕстьРасхождения()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ТоварыКоличествоВЕдиницахИзмерения"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЕстьРасхождения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеИсточникФинансирования()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы["ТоварыИсточникФинансирования"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсточникФинансирования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

#КонецОбласти // УсловноеОформление

////////////////////////////////////////////////////////////////////////////////
// Буфер обмена товарами
#Область БуферОбменаТоварами

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ТаблицаТовары = Элементы.Товары;
	Если ОбработкаТабличнойЧастиКлиент.ВозможноКопированиеСтрок(ТаблицаТовары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиВБуферОбмена(ТаблицаТовары.Имя);
		ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(ТаблицаТовары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ВставитьТоварыИзБуфераОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБуфераОбмена(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ОткрытьБуферОбмена(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиВБуферОбмена(Знач ИмяТабличнойЧасти)
	
	ОбработкаТабличнойЧастиСервер.СкопироватьВыделенныеСтрокиВБуферОбмена(Объект, Объект[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары = Неопределено)
	
	ТаблицаТовары = Объект.Товары;
	КоличествоТоваровДоВставки = ТаблицаТовары.Количество();
	
	ВставитьТоварыИзБуфераОбменаСервер(ВыбранныеТовары);
	
	КоличествоВставленных = ТаблицаТовары.Количество() - КоличествоТоваровДоВставки;
	ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьТоварыИзБуфераОбменаСервер(Знач ВыбранныеТовары = Неопределено)
	
	ТабличнаяЧасть = Объект.Товары;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьРасхождения());
	
	ДанныеВставлены = ОбработкаТабличнойЧастиСервер.ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары, ТабличнаяЧасть, СтруктураДействий);
	Если ДанныеВставлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ЕстьДанныеВБуфереОбмена)
	
	Элементы = Форма.Элементы;
	Элементы.ТоварыБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыКонтекстноеМенюБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыБуферОбмена.Доступность = ЕстьДанныеВБуфереОбмена;
	
КонецПроцедуры

#КонецОбласти // БуферОбменаТоварами

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	МодульИнтеграцияС1СДокументооборотКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияС1СДокументооборотКлиент");
	МодульИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры


// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти // СтандартныеПодсистемы

&НаСервере
Процедура ЗагрузитьДанныеПоКИЗам();
	
	Объект.НомераУпаковок.Очистить();

	ТаблицаСерий = Объект.Товары.Выгрузить(,"СерияНоменклатуры,ИдентификаторСтроки,Партия");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСерий", ТаблицаСерий);
	Запрос.УстановитьПараметр("МестоДеятельности", Объект.МестоДеятельности);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСерий.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ТаблицаСерий.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаСерий.Партия КАК Партия
	|ПОМЕСТИТЬ ВТ_СерииНоменклатуры
	|ИЗ
	|	&ТаблицаСерий КАК ТаблицаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиМаркируемогоТовара.НомерУпаковки КАК НомерКИЗ,
	|	ВТ_СерииНоменклатуры.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.бит_СтатусыСканирования.Неотсканирован) КАК СтатусСканирования,
	|	0 КАК Количество,
	|	0 КАК ШтрихкодBase64,
	|	УпаковкиМДЛП.Статус КАК СтатусМДЛП
	|ИЗ
	|	ВТ_СерииНоменклатуры КАК ВТ_СерииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиМаркируемогоТовара КАК УпаковкиМаркируемогоТовара
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УпаковкиМДЛП КАК УпаковкиМДЛП
	|			ПО (УпаковкиМДЛП.НомерУпаковки = УпаковкиМаркируемогоТовара.НомерУпаковки)
	|				И (УпаковкиМДЛП.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ВОбороте))
	|				И (УпаковкиМДЛП.МестоДеятельности = &МестоДеятельности)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрВыбытияУпаковокМДЛП КАК РеестрВыбытияУпаковокМДЛП
	|			ПО УпаковкиМаркируемогоТовара.НомерУпаковки = РеестрВыбытияУпаковокМДЛП.НомерУпаковки
	|		ПО (УпаковкиМаркируемогоТовара.СерияНоменклатуры = ВТ_СерииНоменклатуры.СерияНоменклатуры)
	|			И ВТ_СерииНоменклатуры.Партия = УпаковкиМаркируемогоТовара.Партия
	|ГДЕ
	|	РеестрВыбытияУпаковокМДЛП.НомерУпаковки ЕСТЬ NULL"; 	
	
	Объект.НомераУпаковок.Загрузить(Запрос.Выполнить().Выгрузить()); 
	
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект.Товары.Выгрузить(,"НомерСтроки,ИдентификаторСтроки"));
    Запрос.УстановитьПараметр("ТаблицаУпаковок", Объект.НомераУпаковок.Выгрузить(,"ИдентификаторСтроки"));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТоваров.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаУпаковок.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТ_Упаковки
		|ИЗ
		|	&ТаблицаУпаковок КАК ТаблицаУпаковок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВЫБОР
		|		КОГДА ВТ_Упаковки.ИдентификаторСтроки ЕСТЬ NULL
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтатусОшибки,
		|	ВЫБОР
		|		КОГДА ВТ_Упаковки.ИдентификаторСтроки ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибки
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Упаковки КАК ВТ_Упаковки
		|		ПО ВТ_Товары.ИдентификаторСтроки = ВТ_Упаковки.ИдентификаторСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Товары.ИдентификаторСтроки,
		|	ВТ_Товары.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ВТ_Упаковки.ИдентификаторСтроки ЕСТЬ NULL
		|			ТОГДА 2
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВТ_Упаковки.ИдентификаторСтроки ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Товары.НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаТоваров = Объект.Товары.Выгрузить();
	ТаблицаТоваров.ЗагрузитьКолонку(РезультатЗапроса.ВыгрузитьКолонку("СтатусОшибки"),"СтатусОшибки");  
	ТаблицаТоваров.ЗагрузитьКолонку(РезультатЗапроса.ВыгрузитьКолонку("ЕстьОшибки"),"ЕстьОшибки");
	
	Объект.Товары.Загрузить(ТаблицаТоваров);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьОтборНомеровУпаковок(ТекущиеДанные.ИдентификаторСтроки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНомеровУпаковок(ИдентификаторСтроки)
	
	Если ИдентификаторТекущейСтроки <> ИдентификаторСтроки Тогда
		ИдентификаторТекущейСтроки = ИдентификаторСтроки;
	КонецЕсли;
	
	ИнтеграцияМДЛПКлиент.УстановитьОтборСтрок(Элементы.НомераУпаковок.ОтборСтрок,Новый Структура("ИдентификаторСтроки", ИдентификаторТекущейСтроки));
    	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеШтрихкодов(ДанныеШтрихКодов)   
	
	Если Не КлючевыеПараметрыЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	
	МассивШК = Новый Массив;
	МассивШК.Добавить(ДанныеШтрихКодов);
	ДанныеШтрихкодовПоТипам = ИнтеграцияМДЛПКлиентСервер.РазобратьШтрихкодыПоТипам(МассивШК);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПродолжитьОбработкуШтрихкодов", ЭтотОбъект, ДанныеШтрихкодовПоТипам);
	КонтрольКодовМаркировкиМДЛПКлиент.НачатьПроверкуКМНаФорме(ЭтотОбъект, Объект, ДанныеШтрихкодовПоТипам, ОповещениеОЗавершении, Ложь); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОбработкуШтрихкодов(Результат, ДанныеШтрихкодовПоТипам) Экспорт
	
	Доступность = Истина;	
	Идентификатор = ЗаполнитьДокументПоПолученнымШтрихкодам(ДанныеШтрихкодовПоТипам);	

	Если Идентификатор <> Неопределено тогда 	
		Элементы.Товары.ТекущаяСтрока = Идентификатор; 
		
		Действия = ОбработкаТабличнойЧастиКлиентСервер; 	
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьРасхождения()); 	
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(Элементы.Товары.ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		
		ЭтотОбъект.Модифицированность = Истина;

	КонецЕсли;
		
КонецПроцедуры 

&НаСервере 
Функция ЗаполнитьДокументПоПолученнымШтрихкодам(ДанныеШтрихкодовПоТипам) 
	
	Для Каждого КИЗ из  ДанныеШтрихкодовПоТипам.НомераКиЗ Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("НомерКИЗ",КИЗ.SGTIN);
		МассивСтрок = Объект.НомераУпаковок.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() тогда
			Строка = МассивСтрок[0];	
			Если НЕ Строка.СтатусСканирования = Перечисления.бит_СтатусыСканирования.Неотсканирован тогда
				ОбщегоНазначения.СообщитьПользователю("Упаковка уже обработана!");
				Продолжить;
			КонецЕсли;
			Строка.СтатусСканирования = Перечисления.бит_СтатусыСканирования.Отсканирован;
			Строка.Количество = 1;
			Строка.ШтрихкодBase64 = КИЗ.ШтрихкодBase64;			
			СтрокаТовары = Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки",Строка.ИдентификаторСтроки))[0];
			СтрокаТовары.КоличествоВЕдиницахИзмерения = СтрокаТовары.КоличествоВЕдиницахИзмерения + 1;
			НомерСтроки = СтрокаТовары.ПолучитьИдентификатор();
		Иначе
			НомерСтроки = ОбработатьОтсутствующийКИЗ(КИЗ);			
		КонецЕсли;
	КонецЦикла;
	
	Возврат НомерСтроки;	
	
КонецФункции

&НаСервере 
Функция ОбработатьОтсутствующийКИЗ(КИЗ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерУпаковки", КИЗ.SGTIN);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УпаковкиМаркируемогоТовара.Номенклатура КАК Номенклатура,
	|	УпаковкиМаркируемогоТовара.СерияНоменклатуры КАК СерияНоменклатуры,
	|	УпаковкиМаркируемогоТовара.Партия КАК Партия,
	|	УпаковкиМаркируемогоТовара.НомерУпаковки КАК НомерКИЗ,
	|	УпаковкиМДЛП.Статус КАК Статус,
	|	1 КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.бит_СтатусыСканирования.Отсутствует) КАК СтатусСканирования
	|ИЗ
	|	Справочник.УпаковкиМаркируемогоТовара КАК УпаковкиМаркируемогоТовара
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УпаковкиМДЛП КАК УпаковкиМДЛП
	|		ПО (УпаковкиМаркируемогоТовара.НомерУпаковки = УпаковкиМДЛП.НомерУпаковки)
	|ГДЕ
	|	УпаковкиМаркируемогоТовара.НомерУпаковки = &НомерУпаковки";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		ОбщегоНазначения.СообщитьПользователю("Нет данных по упаковке!");
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда

			ПараметрыОтбора = Новый Структура("Номенклатура,СерияНоменклатуры,Партия");
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора,Выборка);
			МассивСтрокТовары = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
			Если МассивСтрокТовары.Количество() Тогда
				НоваяСтрокаУпаковка = Объект.НомераУпаковок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаУпаковка,Выборка);
				НоваяСтрокаУпаковка.ИдентификаторСтроки	= МассивСтрокТовары[0].ИдентификаторСтроки;
				ОбщегоНазначения.СообщитьПользователю("Для номенклатуры: " + Выборка.Номенклатура + " добавлен отсутствующий КИЗ");
				МассивСтрокТовары[0].КоличествоВЕдиницахИзмерения = МассивСтрокТовары[0].КоличествоВЕдиницахИзмерения + 1;
				ОбработатьИзменениеНоменклатуры(МассивСтрокТовары[0]);
				МассивСтрокТовары[0].СтатусОшибки = 1;
				МассивСтрокТовары[0].ЕстьОшибки = Истина;
				Возврат МассивСтрокТовары[0].ПолучитьИдентификатор();
			Иначе
				НоваяСтрокаТовары = Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары,Выборка);
				НоваяСтрокаТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор();		
				ОбработатьИзменениеНоменклатуры(НоваяСтрокаТовары);				
				ДобавитьКИЗыТовара(НоваяСтрокаТовары.ПолучитьИдентификатор(),КИЗ);
				НоваяСтрокаТовары.КоличествоВЕдиницахИзмерения = 1;
				Возврат НоваяСтрокаТовары.ПолучитьИдентификатор();
			КонецЕсли;
			
	КонецЕсли;	
	
КонецФункции

&НаСервере 
Процедура ОбработатьИзменениеНоменклатуры(ТекущаяСтрока)
	
	КэшированныеЗначения = Неопределено;
	 
	Действия = ОбработкаТабличнойЧастиКлиентСервер;  
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), ТекущаяСтрока.СерияНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьПартиюПоВладельцу(), ТекущаяСтрока.Партия);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоПоДаннымУчета()); 
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	Объект.УчетныеДанныеЗаполнены = Ложь;

КонецПроцедуры    

&НаСервере
Процедура ДобавитьКИЗыТовара(Идентификатор,КИЗ = Неопределено)
	
	СтрокаТовар = Объект.Товары.НайтиПоИдентификатору(Идентификатор);                                   
	СтрокаТовар.КоличествоВЕдиницахИзмерения = 0;
	
	УдалитьУпаковки(СтрокаТовар.ИдентификаторСтроки);


	ТаблицаСерий = Объект.Товары.Выгрузить(,"СерияНоменклатуры,ИдентификаторСтроки,Партия");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МестоДеятельности", Объект.МестоДеятельности); 
	Запрос.УстановитьПараметр("СерияНоменклатуры", СтрокаТовар.СерияНоменклатуры);
	Запрос.УстановитьПараметр("Партия", СтрокаТовар.Партия);  
	Запрос.УстановитьПараметр("ИдентификаторСтроки", СтрокаТовар.ИдентификаторСтроки);
	Запрос.УстановитьПараметр("ШтрихкодBase64",?(КИЗ = Неопределено,"0",КИЗ.ШтрихкодBase64));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УпаковкиМаркируемогоТовара.НомерУпаковки КАК НомерКИЗ,
	|	&ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.бит_СтатусыСканирования.Неотсканирован) КАК СтатусСканирования,
	|	0 КАК Количество,
	|	&ШтрихкодBase64 КАК ШтрихкодBase64,
	|	УпаковкиМДЛП.Статус КАК СтатусМДЛП
	|ИЗ
	|	Справочник.УпаковкиМаркируемогоТовара КАК УпаковкиМаркируемогоТовара
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УпаковкиМДЛП КАК УпаковкиМДЛП
	|		ПО (УпаковкиМДЛП.НомерУпаковки = УпаковкиМаркируемогоТовара.НомерУпаковки)
	|			И (УпаковкиМДЛП.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ВОбороте))
	|			И (УпаковкиМДЛП.МестоДеятельности = &МестоДеятельности)
	|			И (УпаковкиМаркируемогоТовара.СерияНоменклатуры = &СерияНоменклатуры)
	|			И (УпаковкиМаркируемогоТовара.Партия = &Партия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрВыбытияУпаковокМДЛП КАК РеестрВыбытияУпаковокМДЛП
	|		ПО УпаковкиМаркируемогоТовара.НомерУпаковки = РеестрВыбытияУпаковокМДЛП.НомерУпаковки
	|ГДЕ
	|	РеестрВыбытияУпаковокМДЛП.НомерУпаковки ЕСТЬ NULL"; 	
	
    Выборка = Запрос.Выполнить().Выбрать();
	КИЗНайден = Ложь;
	Пока Выборка.Следующий() Цикл
		НоваяСтрокаУпаковка = Объект.НомераУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУпаковка,Выборка);
		Если КИЗ <> Неопределено тогда
			Если Выборка.НомерКИЗ = КИЗ.SGTIN Тогда
				НоваяСтрокаУпаковка.Количество = 1; 
				НоваяСтрокаУпаковка.СтатусСканирования = Перечисления.бит_СтатусыСканирования.Отсканирован;
				НоваяСтрокаУпаковка.ШтрихкодBase64 = КИЗ.ШтрихкодBase64;
				КИЗНайден = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ КИЗНайден И КИЗ <> Неопределено Тогда
		НоваяСтрокаУпаковка = Объект.НомераУпаковок.Добавить();
		НоваяСтрокаУпаковка.НомерКИЗ = КИЗ.SGTIN;
		НоваяСтрокаУпаковка.ИдентификаторСтроки = СтрокаТовар.ИдентификаторСтроки;	
		НоваяСтрокаУпаковка.ШтрихкодBase64 = КИЗ.ШтрихкодBase64;
		НоваяСтрокаУпаковка.Количество = 1; 
		НоваяСтрокаУпаковка.СтатусСканирования = Перечисления.бит_СтатусыСканирования.Отсканирован;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокПередНачаломИзменения(Элемент, Отказ)

	КоличествоДоИзменения = Элемент.ТекущиеДанные.Количество;
КонецПроцедуры

&НаСервере
Процедура НомераУпаковокКоличествоПриИзмененииНаСервере(Идентификатор)
	
	СтрокаУпаковки = Объект.НомераУпаковок.НайтиПоИдентификатору(Идентификатор);
	СтрокаТовары = Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки",СтрокаУпаковки.ИдентификаторСтроки))[0];
	СтрокаТовары.КоличествоВЕдиницахИзмерения = СтрокаТовары.КоличествоВЕдиницахИзмерения - КоличествоДоИзменения + СтрокаУпаковки.Количество; 

	КоличествоДоИзменения = 0;
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокКоличествоПриИзменении(Элемент)
	
	НомераУпаковокКоличествоПриИзмененииНаСервере(Элементы.НомераУпаковок.ТекущиеДанные.ПолучитьИдентификатор());
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер; 	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьРасхождения()); 	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(Элементы.Товары.ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Для каждого Элемент из Элементы.Товары.ВыделенныеСтроки Цикл
		УдалитьУпаковки(Объект.Товары.НайтиПоИдентификатору(Элемент).ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьУпаковки(ИдентификаторСтроки)
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки",ИдентификаторСтроки);
	МассивУпаковок = Объект.НомераУпаковок.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаУпаковка из МассивУпаковок Цикл
		Объект.НомераУпаковок.Удалить(СтрокаУпаковка);
	КонецЦикла;  
	
КонецПроцедуры
 
&НаКлиенте
Процедура СоздатьУведомление(Команда)

	Если ЗначениеЗаполнено(ЭтотОбъект.Уведомение) тогда
		ОткрытьЗначение(Этотобъект.Уведомение);
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПоИнвентаризации",Истина);
	ПараметрыЗаполнения.Вставить("Организация",Объект.ОрганизацияМДЛП);
	ПараметрыЗаполнения.Вставить("МестоДеятельности",Объект.МестоДеятельности);
	ПараметрыЗаполнения.Вставить("Комментарий", "Создан на основании " + Объект.Ссылка + " uuid#" + Объект.Ссылка.УникальныйИдентификатор()); 
	ПараметрыЗаполнения.Вставить("ПередачаСведенийЧерезСКЗКМ", Ложь);
	ДополнитьПараметрыЗаполнения(ПараметрыЗаполнения); 	
	ОткрытьФорму("Документ.УведомлениеОВыдачеВОтделенияМДЛП.Форма.ФормаДокумента",ПараметрыЗаполнения);
	
КонецПроцедуры  

&НаСервере
Процедура ДополнитьПараметрыЗаполнения(ПараметрыЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаТовары",Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Упаковки",Объект.НомераУпаковок.Выгрузить());	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК Упаковка,
	|	ТаблицаТовары.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Упаковки.НомерКИЗ КАК НомерКИЗ,
	|	Упаковки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПОДСТРОКА(Упаковки.НомерКИЗ, 0, 14) КАК GTIN
	|ПОМЕСТИТЬ ВТ_Упаковки
	|ИЗ
	|	&Упаковки КАК Упаковки
	|ГДЕ
	|	Упаковки.СтатусМДЛП = ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ВОбороте) 
	|	И Упаковки.СтатусСканирования = Значение(Перечисление.бит_СтатусыСканирования.НеОтсканирован)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Упаковки.НомерКИЗ КАК НомерКИЗ,
	|	ВТ_Упаковки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВТ_Упаковки.GTIN КАК GTIN
	|ПОМЕСТИТЬ ВТ_УпаковкиКон
	|ИЗ
	|	ВТ_Упаковки КАК ВТ_Упаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрВыбытияУпаковокМДЛП КАК РеестрВыбытияУпаковокМДЛП
	|		ПО ВТ_Упаковки.НомерКИЗ = РеестрВыбытияУпаковокМДЛП.НомерУпаковки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УпаковкиМДЛП КАК УпаковкиМДЛП
	|		ПО (ВТ_Упаковки.НомерКИЗ = УпаковкиМДЛП.НомерУпаковки
	|				И УпаковкиМДЛП.НомерГрупповойУпаковки = """")
	|ГДЕ
	|	РеестрВыбытияУпаковокМДЛП.НомерУпаковки ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.СерияНоменклатуры КАК Серия,
	|	ВТ_Товары.Упаковка КАК Упаковка,
	|	ВТ_Товары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_УпаковкиКон.НомерКИЗ) КАК КоличествоУпаковок,
	|	ВТ_УпаковкиКон.GTIN КАК GTIN,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_УпаковкиКон.НомерКИЗ) * ЕдиницыИзмерения.КоличествоВПотребительскойУпаковке КАК КоличествоПервичныхУпаковокВоВторичной,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_УпаковкиКон.НомерКИЗ) КАК Количество,
	|	1 КАК СтатусЗаполненияУпаковок
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УпаковкиКон КАК ВТ_УпаковкиКон
	|		ПО ВТ_Товары.ИдентификаторСтроки = ВТ_УпаковкиКон.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО ВТ_Товары.Упаковка = ЕдиницыИзмерения.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Товары.ИдентификаторСтроки,
	|	ВТ_Товары.Упаковка,
	|	ВТ_Товары.Номенклатура,
	|	ВТ_Товары.СерияНоменклатуры,
	|	ВТ_УпаковкиКон.GTIN,
	|	ЕдиницыИзмерения.Коэффициент,
	|	ЕдиницыИзмерения.КоличествоВПотребительскойУпаковке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_УпаковкиКон.НомерКИЗ КАК НомерКИЗ,
	|	ВТ_УпаковкиКон.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче) КАК СостояниеПодтверждения
	|ИЗ
	|	ВТ_УпаковкиКон КАК ВТ_УпаковкиКон
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_УпаковкиКон.ИдентификаторСтроки,
	|	ВТ_УпаковкиКон.НомерКИЗ";
	
	МассивПакетов = Запрос.ВыполнитьПакет();
	ТаблицаУпаковок = МассивПакетов[4].Выгрузить();
	ТаблицаТовары =  МассивПакетов[3].Выгрузить();
	АдресХранилища = ПоместитьВоВременноеХранилище(Новый Структура("НомераУпаковок,Товары",ТаблицаУпаковок,ТаблицаТовары),Новый УникальныйИдентификатор());
	ПараметрыЗаполнения.Вставить("АдресХранилища",АдресХранилища);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкуУведомление();
	
	Если Объект.Проведен тогда
		СтрПоиска = "%uuid#"+Строка(Объект.Ссылка.УникальныйИдентификатор());
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УведомлениеОВыдачеВОтделенияМДЛП.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УведомлениеОВыдачеВОтделенияМДЛП КАК УведомлениеОВыдачеВОтделенияМДЛП
		|ГДЕ
		|	УведомлениеОВыдачеВОтделенияМДЛП.Комментарий ПОДОБНО &Комментарий";
		
		Запрос.УстановитьПараметр("Комментарий", СтрПоиска);		
		РезультатЗапроса = Запрос.Выполнить();		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			  ЭтотОбъект.Уведомение = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Уведомение) тогда
		Элементы.СоздатьУведомление.Заголовок = Строка(ЭтотОбъект.Уведомение);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ИдентификаторМестаДеятельности()

	Возврат Объект.МестоДеятельности.Идентификатор;
	
КонецФункции
 
//////////////////////
&НаКлиенте
Процедура ПроверитьОтсутствующиеКИЗЫ(Команда)	
	
	Если ПервоеПодключение = Неопределено тогда
		
		ПараметрыПодключения = ТранспортМДЛПАПИВызовСервера.ПараметрыПодключения(Объект.ОрганизацияМДЛП, Объект.МестоДеятельности); 
		
		ПараметрыМетода = ТранспортМДЛПАПИКлиентСервер.ПараметрыПолученияСпискаПотребительскихУпаковокПоОтбору();
		ПараметрыМетода.НачальныйИндекс = 0;
		ПараметрыМетода.РазмерПорции    = 1;
		ПараметрыМетода.Отбор           = Новый Структура;
		ПараметрыМетода.Отбор.Вставить("sys_id", ИдентификаторМестаДеятельности());
		
		ПараметрыЗапуска = ТранспортМДЛПАПИКлиент.ПараметрыЗапускаМетодовАПИВДлительнойОперации(ЭтотОбъект);	
		СоответствиеСтатусов = СоответствиеСтатусов();	
		ПервоеПодключение = Ложь;
		
	КонецЕсли;	
	
	ОтборКИЗ = СледующийКИЗ(); 

	Если ЗначениеЗаполнено(ОтборКИЗ) Тогда
		ПараметрыМетода.Отбор.Вставить("sgtin",СокрЛП(ОтборКИЗ));
		Оповещение = Новый ОписаниеОповещения("НачатьОбработкуРезультата", ЭтотОбъект);
		ТранспортМДЛПАПИКлиент.НачатьПолучениеСпискаПотребительскихУпаковокПоОтбору(ПараметрыПодключения, Оповещение, ПараметрыМетода, ПараметрыЗапуска);		
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте
Процедура НачатьОбработкуРезультата(Результат, Контекст) Экспорт
	
	АдресРезультатаМетодаАПИ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "АдресРезультатаМетодаАПИ");
	Если АдресРезультатаМетодаАПИ = Неопределено Тогда
	//	ОтобразитьВыполнениеПолученияИнформацииОбУпаковках("Конец");
		Возврат;
	КонецЕсли;
	
	РезультатПотребительскиеУпаковки = ПолучитьИзВременногоХранилища(АдресРезультатаМетодаАПИ); 
	Если РезультатПотребительскиеУпаковки.Статус = "Успешно" тогда
		ДанныеПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПотребительскиеУпаковки, "Данные", Новый Соответствие);
		Для Каждого КлючИЗначение из ДанныеПотребительскихУпаковок Цикл 
			СтруктураПоиска = Новый Структура("НомерКИЗ",КлючИЗначение.Ключ);
			МассивСтрок = Объект.НомераУпаковок.НайтиСтроки(СтруктураПоиска);	
			МассивСтрок[0].СтатусМДЛП = СоответствиеСтатусов.Получить(КлючИЗначение.Значение["status"]);
		КонецЦикла;		
		
		ОтборКИЗ = СледующийКИЗ(); 
		Если ЗначениеЗаполнено(ОтборКИЗ) Тогда		
			ПараметрыМетода.Отбор.Вставить("sgtin",СокрЛП(ОтборКИЗ));
			Оповещение = Новый ОписаниеОповещения("НачатьОбработкуРезультата", ЭтотОбъект);
			ТранспортМДЛПАПИКлиент.НачатьПолучениеСпискаПотребительскихУпаковокПоОтбору(ПараметрыПодключения, Оповещение, ПараметрыМетода, ПараметрыЗапуска);
		КонецЕсли;		
	Иначе
		Сообщить(РезультатПотребительскиеУпаковки.ОписаниеОшибки);
	КонецЕсли;
	

КонецПроцедуры 

&НаСервере
Функция СледующийКИЗ()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаКизов.НомерКИЗ КАК НомерУпаковки
		|ПОМЕСТИТЬ ВТ_Кизы
		|ИЗ
		|	&ТаблицаКизов КАК ТаблицаКизов
		|ГДЕ
		|	ТаблицаКизов.СтатусСканирования = ЗНАЧЕНИЕ(Перечисление.бит_СтатусыСканирования.Неотсканирован)
		|	И ТаблицаКизов.СтатусМДЛП = ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Кизы.НомерУпаковки КАК НомерУпаковки
		|ИЗ
		|	ВТ_Кизы КАК ВТ_Кизы";
	
	Запрос.УстановитьПараметр("ТаблицаКизов",Объект.НомераУпаковок.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() тогда
		Возврат  Выборка.НомерУпаковки
	КонецЕсли;
	
	Возврат Неопределено;
	
	
КонецФункции 


&НаКлиентеНаСервереБезКонтекста
Функция СоответствиеСтатусов()
	
	Связь = Новый Соответствие;
	Связь.Вставить("eliminated"                           , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.НеИспользована"));
	Связь.Вставить("marked"                               , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОжидаетВыпуска"));
	Связь.Вставить("lp_sampled"                           , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("moved_for_disposal"                   , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ПереданаНаУничтожение"));
	Связь.Вставить("disposed"                             , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Уничтожена"));
	Связь.Вставить("out_of_circulation"                   , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("transfered_to_owner"                  , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВРезерве")); // ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"), Владелец
	Связь.Вставить("shipped"                              , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОтгруженВРФ"));
	Связь.Вставить("arrived"                              , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВвезенНаТерриториюРФ"));
	Связь.Вставить("declared"                             , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Задекларирована"));
	Связь.Вставить("in_circulation"                       , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("in_realization"                       , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВРезерве")); // ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте")
	Связь.Вставить("paused_circulation"                   , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОборотПриостановлен"));
	Связь.Вставить("in_sale"                              , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("in_discount_prescription_sale"        , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("in_medical_use"                       , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("relabeled"                            , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Перемаркирована"));
	Связь.Вставить("reexported"                           , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Реэкспорт"));
	Связь.Вставить("released_contract"                    , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОжидаетВыпуска")); // Владелец
	Связь.Вставить("released_foreign"                     , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОжидаетОтгрузкиВРФ")); // ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.МаркированаВЗТК")
	Связь.Вставить("moved_to_unregistered"                , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка"));
	Связь.Вставить("expired"                              , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("change_owner"                         , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОжидаетПодтвержденияСменыСобственника"));
	Связь.Вставить("change_owner_state_gov"               , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВРезерве")); // ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте")
	Связь.Вставить("confirm_return_paused"                , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВРезерве")); // ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте")
	Связь.Вставить("experiment_outbound"                  , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("in_partial_medical_use"               , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("in_partial_sale"                      , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("in_partial_discount_prescription_sale", ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("moved_to_eeu"                         , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка"));
	Связь.Вставить("moved_to_warehouse"                   , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("emission"                             , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Эмитирована"));
	Связь.Вставить("ofd_retail_error"                     , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой"));
	Связь.Вставить("ofd_discount_prescription_error"      , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой"));
	Связь.Вставить("med_care_error"                       , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("discount_prescription_error"          , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой"));
	Связь.Вставить("transferred_for_release"              , Неопределено);
	Связь.Вставить("waiting_for_release"                  , Неопределено);
	Связь.Вставить("emitted"                              , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.Эмитирована"));
	Связь.Вставить("marked_not_paid"                      , Неопределено);
	Связь.Вставить("released_foreign_not_paid"            , Неопределено);
	Связь.Вставить("expired_not_paid"                     , Неопределено);
	Связь.Вставить("emitted_paid"                         , Неопределено);
	Связь.Вставить("transferred_to_customs"               , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ПереданаДляМаркировкиВЗТК"));
	Связь.Вставить("transferred_to_importer"              , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ОжидаетПодтвержденияИмпортером"));
	Связь.Вставить("declared_warehouse"                   , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ПринятаНаСкладИзЗТК"));
	Связь.Вставить("awaiting_return_confirmation"         , Неопределено);
	Связь.Вставить("dispensing_by_document"               , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("in_partial_dispensing_by_document"    , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("in_arbitration"                       , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("transfer_to_production"               , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("transferred_to_agent"                 , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("waiting_change_property"              , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("waiting_confirmation"                 , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	Связь.Вставить("ooc_part_sale"                        , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("ooc_part_prescription_sale"           , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("ooc_рart_medical_use"                 , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("ooc_part_dispensing_by_doc"           , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВыбылаИзОборота"));
	Связь.Вставить("in_partial_ooc"                       , ПредопределенноеЗначение("Перечисление.СтатусыУпаковокМДЛП.ВОбороте"));
	
	Возврат Связь;
	
КонецФункции


&НаСервере
Процедура ТолькоСошибкамиПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ТолькоСошибкамиПриИзменении(Элемент)
	
	Если ТолькоСошибками Тогда 
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьОшибки", Истина);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ТоварыПослеУдаленияНаСервере()
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)

КонецПроцедуры

