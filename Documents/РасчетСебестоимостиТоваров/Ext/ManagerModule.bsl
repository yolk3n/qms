#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

Процедура ПредварительныйРасчетСебестоимости() Экспорт
	
	РассчитатьЗаПериодСОбработкойОшибок(ТекущаяДатаСеанса(), Истина);
	
КонецПроцедуры

// Обертка для запуска расчета - выполняет расчет в Попытке - Исключении
// Параметры аналогичны процедуре РассчитатьВсе()
//
// Возвращаемое значение - Булево - признак успешного выполнения расчета.
//
Функция РассчитатьЗаПериодСОбработкойОшибок(Дата, ПредварительныйРасчет, Организация = Неопределено, ПереопределениеПараметровРасчета = Неопределено, БылиОшибки = Ложь) Экспорт
	
	Попытка
		
		РассчитатьЗаПериод(Дата, ПредварительныйРасчет, Организация, ПереопределениеПараметровРасчета, БылиОшибки);
		
	Исключение
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Не СтрНайти(ТекстОшибки, ТекстОшибкаОбработана()) Тогда
			ЗаписьЖурналаРегистрации(
				ИмяСобытияОшибкиДляЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстОшибки);
		КонецЕсли;
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Выполняет полный расчет себестоимости по ОкончаниеПериодаРасчета
//
Процедура РассчитатьВсе(ОкончаниеПериодаРасчета, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ();
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Комментарий = НСтр("ru = 'Выполняется расчет по %ОкончаниеПериода%'", КодЯзыка);
	Комментарий = СтрЗаменить(Комментарий, "%ОкончаниеПериода%", Формат(ОкончаниеПериодаРасчета, "ДЛФ=D"));
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(НСтр("ru = 'Начало расчета'", КодЯзыка)),
		УровеньЖурналаРегистрации.Информация,
		,
		ОкончаниеПериодаРасчета,
		Комментарий);
	
	СхемаРасчета = СхемаРасчета(ОкончаниеПериодаРасчета, Организация);
	Если СхемаРасчета.Количество() = 0 Тогда
		
		// Расчет не требуется
		Комментарий = НСтр("ru = 'Расчет себестоимости по %ОкончаниеПериода% не требуется - себестоимость уже рассчитана'", КодЯзыка);
		Комментарий = СтрЗаменить(Комментарий, "%ОкончаниеПериода%", Формат(ОкончаниеПериодаРасчета, "ДЛФ=D"));
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(НСтр("ru = 'Расчет не требуется'", КодЯзыка)),
			УровеньЖурналаРегистрации.Информация,
			,
			ОкончаниеПериодаРасчета,
			Комментарий);
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийНомерЗадания = РегистрыСведений.ГраницыРасчетаСебестоимостиТоваров.УстановитьСледующийНомерЗадания();
	
	БылиОшибки = Ложь;
	Для Каждого ПериодРасчета Из СхемаРасчета Цикл
		
		Прогресс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Расчет себестоимости за %1 г.'"), НРег(Формат(ПериодРасчета.Дата, "ДФ='ММММ гггг'")));
		ДлительныеОперации.СообщитьПрогресс(, Прогресс);
		
		НачалоПериода     = НачалоМесяца(ПериодРасчета.Дата);
		ОкончаниеПериода  = КонецМесяца(ПериодРасчета.Дата);
		СписокОрганизаций = ПериодРасчета.Организации;
		
		СебестоимостьРассчитана = РассчитатьЗаПериодСОбработкойОшибок(ОкончаниеПериода, Ложь, СписокОрганизаций, Новый Структура, БылиОшибки);
		
		Если Не СебестоимостьРассчитана Тогда
			ВызватьИсключение
				НСтр("ru='При расчете себестоимости возникла ошибка.
						 |Подробности см. в Журнале регистрации.'");
		КонецЕсли;
		
		Если Не БылиОшибки Тогда
			РегистрыСведений.ГраницыРасчетаСебестоимостиТоваров.УстановитьНовыеГраницыРасчетаСебестоимости(НачалоПериода, ОкончаниеПериода, СписокОрганизаций, ТекущийНомерЗадания);
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(НСтр("ru = 'Рассчитан период'", КодЯзыка)),
			УровеньЖурналаРегистрации.Информация,
			,
			Формат(НачалоПериода, "ДЛФ=D"));
		
	КонецЦикла;
	
	Комментарий = НСтр("ru = 'Выполнен расчет с %НачалоПериода% по %ОкончаниеПериода%'", КодЯзыка);
	Комментарий = СтрЗаменить(Комментарий, "%НачалоПериода%", Формат(СхемаРасчета[0].Дата, "ДЛФ=D"));
	Комментарий = СтрЗаменить(Комментарий, "%ОкончаниеПериода%", Формат(ОкончаниеПериодаРасчета, "ДЛФ=D"));
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Комментарий = Комментарий + Символы.ПС + НСтр("ru='Организация: %Организация%'");
		Комментарий = СтрЗаменить(Комментарий, "%Организация%", СокрЛП(Организация));
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(НСтр("ru = 'Окончание расчета'", КодЯзыка)),
		УровеньЖурналаРегистрации.Информация,
		,
		ОкончаниеПериодаРасчета,
		Комментарий);
	
КонецПроцедуры

// При получении из периферийного узла данных, требующих перерасчета себестоимости, добавляет запись в регистр ЗаданияКРасчетуСебестоимости.
//
// Параметры:
//  ПолученныеДанные - Произвольный - это параметр ЭлементДанных одноименного события плана обмена
//
Процедура ПриПолученииДанныхОтПодчиненного(ПолученныеДанные) Экспорт
	
	МетаданныеДанных = ПолученныеДанные.Метаданные();
	
	ВходящиеДанные = ВходящиеДанныеМеханизма(Истина);
	Если ВходящиеДанные.Найти(МетаданныеДанных) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МетаданныеДанных.Измерения.Найти("Организация") <> Неопределено Тогда
		ИмяПоляОрганизации = "Организация";
		ИмяКонтейнераОрганизации = ""; // организация хранится в реквизите набора
	ИначеЕсли МетаданныеДанных.Измерения.Найти("АналитикаВидаУчета") <> Неопределено Тогда
		ИмяПоляОрганизации = "АналитикаВидаУчета";
		ИмяКонтейнераОрганизации = "РегистрСведений.АналитикаВидаУчета"; // организация хранится "вне набора"
		ИмяПоляСвязиВКонтейнере = "КлючАналитики";
		ИмяПоляОрганизацииВКонтейнере = "Организация";
	Иначе
		Возврат;
	КонецЕсли;
	
	ТаблицаНабора = ПолученныеДанные.Выгрузить(, "Период," + ИмяПоляОрганизации);
	ТаблицаНабора.Свернуть("Период," + ИмяПоляОрганизации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ПолученныеДанные.Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("ТаблицаНабора", ТаблицаНабора);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаНабора.Период, МЕСЯЦ) КАК Период,
	|	&ИмяПоляОрганизации                        КАК Организация
	|ПОМЕСТИТЬ ВТПолученныеДанные
	|ИЗ
	|	&ТаблицаНабора КАК ТаблицаНабора
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПоляОрганизации", "ТаблицаНабора." + ИмяПоляОрганизации);
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПолученныеДанные.Период       КАК Период,
	|	ПолученныеДанные.Организация  КАК Организация
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	ВТПолученныеДанные КАК ПолученныеДанные
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(СуществующиеДанные.Период, МЕСЯЦ) КАК Период,
	|	&ИмяПоляОрганизации                             КАК Организация
	|ИЗ
	|	#ИмяПолученныхДанных КАК СуществующиеДанные
	|ГДЕ
	|	СуществующиеДанные.Регистратор = &Ссылка
	|";
	
	Если ЗначениеЗаполнено(ИмяКонтейнераОрганизации) Тогда
		
		// Организация хранится не в поле объекта, а в каком-то другом месте - с ним надо сделать соединение
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Период КАК Период,
		|	&ИмяПоляОрганизацииВКонтейнере КАК Организация
		|ПОМЕСТИТЬ ВТПериоды
		|ИЗ
		|	(" + СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВТПериоды", "") + ") КАК Т
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		#ИмяКонтейнераОрганизации КАК Контейнер
		|	ПО
		|		Т.Организация = &ИмяПоляСвязиВКонтейнере
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаданияКРасчету.Период       КАК Месяц,
	|	ЗаданияКРасчету.Организация  КАК Организация,
	|	&Ссылка                      КАК Документ
	|ИЗ
	|	ВТПериоды КАК ЗаданияКРасчету
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ГраницыРасчетаСебестоимостиТоваров КАК Границы
	|	ПО
	|		ЗаданияКРасчету.Период = Границы.Месяц
	|		И ЗаданияКРасчету.Организация = Границы.Организация
	|		И Границы.Документ = &Ссылка
	|ГДЕ
	|	Границы.НомерЗадания ЕСТЬ NULL
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяПолученныхДанных"          , МетаданныеДанных.ПолноеИмя());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяКонтейнераОрганизации"     , ИмяКонтейнераОрганизации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПоляСвязиВКонтейнере"      , "Контейнер." + ИмяПоляСвязиВКонтейнере);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПоляОрганизацииВКонтейнере", "Контейнер." + ИмяПоляОрганизацииВКонтейнере);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПоляОрганизации"           , "СуществующиеДанные." + ИмяПоляОрганизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ГраницыРасчетаСебестоимостиТоваров.СоздатьЗаданиеКРасчетуСебестоимости(Выборка.Организация, Выборка.Месяц, Выборка.Документ);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак записи движений по регистру механизмом расчета себестоимости.
//
// Параметры:
//	НаборЗаписей - набор записей регистра
//
// Возвращаемое значение:
//	Булево - Истина, если движения записываются регламентной операцией закрытия месяца
//
Функция ДвиженияЗаписываютсяРасчетомСебестоимости(НаборЗаписей) Экспорт
	
	Возврат НаборЗаписей.ДополнительныеСвойства.Свойство(ИмяСлужебногоДополнительногоСвойстваОбъекта());
	
КонецФункции

// Вызывается ПередЗаписью набора записей регистра - сохраняет движения документа, сформированные расчетом себестоимости.
// Такие движения формируются механизмом расчета себестоимости и имеют реквизит РасчетСебестоимости = Истина.
// При перепроведении документа эти движения добавляются к набору движений, сформированному самим документом.
//
// Параметры:
//  НаборЗаписей - НаборЗаписейРегистраНакопления - свойство ЭтотОбъект модуля набора записей
//  Замещение - Булево - режим записи набора (параметр события ПередЗаписью)
//
Процедура СохранитьДвиженияСформированныеРасчетомСебестоимости(НаборЗаписей, Замещение) Экспорт
	
	Если Не Замещение Тогда
		Возврат; // движения, сформированные расчетом себестоимости, не затираются
	КонецЕсли;
	
	Если НаборЗаписей.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Возврат; // движения, сформированные расчетом себестоимости, надо удалить
	КонецЕсли;
	
	// Готовим вспомогательные данные
	ОписаниеРегистра = СформироватьОписаниеРегистра(НаборЗаписей.Метаданные());
	
	ТекстПоляОсновнойТаблицыРегистра = СтрШаблон(ОписаниеРегистра.ПоляРегистра, Символы.ПС + "НаборЗаписей.");
	
	// Готовим запрос для выборки движений, сформированных расчетом себестоимости
	Запрос = Новый Запрос("
	|ВЫБРАТЬ %1
	|ИЗ
	|	%2 КАК НаборЗаписей
	|ГДЕ
	|	НаборЗаписей.РасчетСебестоимости
	|	И НаборЗаписей.Регистратор = &Регистратор
	|");
	
	Запрос.Текст = СтрШаблон(Запрос.Текст, ТекстПоляОсновнойТаблицыРегистра, ОписаниеРегистра.ПолноеИмяРегистра);
	
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	
	// Дополним набор записей документа движениями, сформированных расчетом себестоимости
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет состояние набора перед записью для контроля изменений
//
Процедура СохранитьТекущееСостояниеНабора(НаборЗаписей) Экспорт
	
	ОписаниеРегистра = СформироватьОписаниеРегистра(НаборЗаписей.Метаданные());
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ [ПоляРегистра]
	|ПОМЕСТИТЬ [ИмяРегистра]ДляПроверкиИзмененийПередЗаписью
	|ИЗ
	|	[ПолноеИмяРегистра] КАК НаборЗаписей
	|ГДЕ
	|	НаборЗаписей.Регистратор = &Регистратор
	|");
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИмяРегистра"      , ОписаниеРегистра.ИмяРегистра);
	ПараметрыЗапроса.Вставить("ПолноеИмяРегистра", ОписаниеРегистра.ПолноеИмяРегистра);
	ПараметрыЗапроса.Вставить("ПоляРегистра"     , СтрШаблон(ОписаниеРегистра.ПоляРегистра, Символы.ПС + "НаборЗаписей."));
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Запрос.Текст, ПараметрыЗапроса);
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	Запрос.МенеджерВременныхТаблиц = ПроведениеБольничнаяАптека.ПолучитьМенеджерВременныхТаблицДляКонтроляПроведения(НаборЗаписей.ДополнительныеСвойства);
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает задания к расчету себестоимости при наличии изменений в наборе
//
Процедура СоздатьЗаданиеКРасчетуСебестоимости(НаборЗаписей) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ)  КАК Период,
	|	Т.Регистратор                   КАК Регистратор,
	|	[Измерения],
	|	[Ресурсы]
	|ПОМЕСТИТЬ ТаблицаИзменений[ИмяРегистра]
	|ИЗ
	|	[ИмяРегистра]ДляПроверкиИзмененийПередЗаписью КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ)  КАК Период,
	|	Т.Регистратор                   КАК Регистратор,
	|	[Измерения],
	|	[РесурсыСМинусом]
	|ИЗ
	|	[ПолноеИмяРегистра] КАК Т
	|ГДЕ
	|	Т.Регистратор = &Регистратор
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Период                  КАК Месяц,
	|	[ПолеОрганизация]         КАК Организация,
	|	Т.Регистратор             КАК Документ
	|ИЗ
	|	ТаблицаИзменений[ИмяРегистра] КАК Т
	|	[СоединениеАналитикаВидаУчета]
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Период,
	|	[ПолеОрганизация],
	|	Т.Регистратор,
	|	[Измерения]
	|ИМЕЮЩИЕ
	|	[РесурсыРегистраУсловия]
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ [ИмяРегистра]ДляПроверкиИзмененийПередЗаписью
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаИзменений[ИмяРегистра]
	|");
	
	ОписаниеРегистра = СформироватьОписаниеРегистра(НаборЗаписей.Метаданные());
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИмяРегистра"      , ОписаниеРегистра.ИмяРегистра);
	ПараметрыЗапроса.Вставить("ПолноеИмяРегистра", ОписаниеРегистра.ПолноеИмяРегистра);
	
	ПараметрыЗапроса.Вставить("Измерения"        , СтрШаблон(ОписаниеРегистра.ИзмеренияРегистра, Символы.ПС + "	Т."));
	Если Не ПустаяСтрока(ОписаниеРегистра.РеквизитыРегистра) Тогда
		ПараметрыЗапроса.Измерения = ПараметрыЗапроса.Измерения + "," + СтрШаблон(ОписаниеРегистра.РеквизитыРегистра, Символы.ПС + "	Т.");
	КонецЕсли;
	ПараметрыЗапроса.Вставить("Ресурсы"          , СтрШаблон(ОписаниеРегистра.РесурсыРегистра, Символы.ПС + "	Т."));
	ПараметрыЗапроса.Вставить("РесурсыСМинусом"  , СтрШаблон(ОписаниеРегистра.РесурсыРегистра, Символы.ПС + "	-Т."));
	
	СписокРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрШаблон(ОписаниеРегистра.РесурсыРегистра, "Т."),
		",",
		Истина,
		Истина);
	РесурсыРегистраУсловия = "";
	Для Каждого ТекущееПоле Из СписокРесурсов Цикл
		РесурсыРегистраУсловия = РесурсыРегистраУсловия + "
		|	ИЛИ СУММА(" + ТекущееПоле + ") <> 0";
	КонецЦикла;
	РесурсыРегистраУсловия = Сред(РесурсыРегистраУсловия, 7);
	ПараметрыЗапроса.Вставить("РесурсыРегистраУсловия"  , РесурсыРегистраУсловия);
	
	Если ОписаниеРегистра.ЕстьОрганизация Тогда
		
		ПараметрыЗапроса.Вставить("ПолеОрганизация"             , "Т.Организация");
		ПараметрыЗапроса.Вставить("СоединениеАналитикаВидаУчета", "");
		
	ИначеЕсли ОписаниеРегистра.ЕстьАналитикаВидаУчета Тогда
		ПараметрыЗапроса.Вставить("ПолеОрганизация"             , "Аналитика.Организация");
		ПараметрыЗапроса.Вставить("СоединениеАналитикаВидаУчета", "
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрСведений.АналитикаВидаУчета КАК Аналитика
			|	ПО
			|		Аналитика.КлючАналитики = Т.АналитикаВидаУчета
			|");
	КонецЕсли;
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Запрос.Текст, ПараметрыЗапроса);
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	Запрос.МенеджерВременныхТаблиц = ПроведениеБольничнаяАптека.ПолучитьМенеджерВременныхТаблицДляКонтроляПроведения(НаборЗаписей.ДополнительныеСвойства);
	
	Выборка = Запрос.ВыполнитьПакет()[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ГраницыРасчетаСебестоимостиТоваров.СоздатьЗаданиеКРасчетуСебестоимости(Выборка.Организация, Выборка.Месяц, Выборка.Документ);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает информацию о наличии фактического или предварительного расчета себестоимости.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой проверяется наличие расчета.
//  Дата        - Дата - дата в месяце, в котором проверяется наличие расчета.
//
// Возвращаемое значение:
//  Результат - Структура - информацией о наличии фактического или предварительного расчета себестоимости.
//    * ФактическийРасчет     - Булево - признак наличия фактического расчета себестоимости.
//    * ПредварительныйРасчет - Булево - признак наличия предварительного расчета себестоимости.
//
Функция РасчетВыполнен(Организация, Дата) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИСТИНА КАК ПредварительныйРасчет
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка.Проведен
	|	И Документ.Организация = &Организация
	|	И Документ.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Документ.ПредварительныйРасчет
	|");
	
	Запрос.УстановитьПараметр("ДатаНачала"   , НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация"  , Организация);
	
	Результат = Новый Структура("ФактическийРасчет, ПредварительныйРасчет", Ложь, Ложь);
	Если Не Запрос.Выполнить().Пустой() Тогда
		Результат.ПредварительныйРасчет = Истина;
	Иначе
		ДатаАктуальностиРасчета = ДатаАктуальностиФактическогоРасчетаСебестоимости(Организация);
		Если ДатаАктуальностиРасчета >= Дата Тогда
			Результат.ФактическийРасчет = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает дату, после которой фактический расчет себестоимости не выполнялся или является неактуальным.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой нужно проверить актуальность расчета.
//              - Массив - связанные организации, по которым нужно проверить общую актуальность расчета.
//
// Возвращаемое значение:
//  Дата - конец общего, по всем переданным (связанным) организациям, месяца,
//         после которого фактический расчет себестоимости не рассчитывался или стал неактуальным.
//
Функция ДатаАктуальностиФактическогоРасчетаСебестоимости(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(МИНИМУМ(Границы.Месяц), СЕКУНДА, -1), ДАТАВРЕМЯ(1,1,1)) КАК ДатаАктуальностиРасчета
	|ИЗ
	|	РегистрСведений.ГраницыРасчетаСебестоимостиТоваров КАК Границы
	|ГДЕ
	|	&ОтборПоОрганизации
	|");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "Границы.Организация В (&Организация)");
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "ИСТИНА");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	// Т.к. данные агрегируются без указания группировочного поля,
	// выборка всегда вернет одну запись, даже если в исходной таблице нет записей.
	Возврат Выборка.ДатаАктуальностиРасчета;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Печать
#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандыПечати(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыПечати);
	
КонецПроцедуры

// Возвращает список доступных печатных форм документа
//
Функция ДоступныеПечатныеФормы() Экспорт
	
	ПечатныеФормы = УправлениеПечатьюБольничнаяАптека.СоздатьКоллекциюДоступныхПечатныхФорм();
	
	Возврат ПечатныеФормы;
	
КонецФункции

#КонецОбласти // Печать

////////////////////////////////////////////////////////////////////////////////
// Команды формы
#Область КомандыФормы

// Заполняет список команд ввода на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииБольничнаяАптека.ДобавитьКомандыСозданияНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
КонецПроцедуры

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	МенюОтчетыБольничнаяАптека.ДобавитьОбщиеКоманды(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыОтчетов, НастройкиФормы);
	
КонецПроцедуры

#КонецОбласти // КомандыФормы

////////////////////////////////////////////////////////////////////////////////
// Расчет себестоимости
#Область РасчетСебестоимости

Функция СхемаРасчета(Знач Дата = Неопределено, ОтборОрганизации = Неопределено) Экспорт
	
	Дата = КонецМесяца(?(Не ЗначениеЗаполнено(Дата), ТекущаяДатаСеанса(), Дата));
	ПолныйСписокОрганизаций = СвязанныеОрганизацииВПериодеСписком(Дата, ОтборОрганизации);
	
	СхемаРасчета = Новый ТаблицаЗначений; // результат выполнения этой функции
	СхемаРасчета.Колонки.Добавить("Дата"); // период пересчета
	СхемаРасчета.Колонки.Добавить("Организации"); // массив организаций, которые надо пересчитать в этом периоде
	СхемаРасчета.Индексы.Добавить("Дата");
	
	ДатыПересчетаПоОрганизациям = Новый Соответствие; // Организация - Дата, с которой по ней необходим пересчет
	СамаяРанняяДатаПересчета    = КонецМесяца(КонецМесяца(Дата) + 1);
	
	ТребуетсяПересчетПоИсходнымОрганизациям = Ложь;
	
	// Запомним даты начала пересчета по каждой организации
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Границы.Организация КАК Организация,
	|	МИНИМУМ(КОНЕЦПЕРИОДА(Границы.Месяц, МЕСЯЦ)) КАК Месяц
	|ИЗ
	|	РегистрСведений.ГраницыРасчетаСебестоимостиТоваров КАК Границы
	|ГДЕ
	|	Границы.Месяц <= &Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	Границы.Организация
	|";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ПолныйСписокОрганизаций.Найти(Выборка.Организация) <> Неопределено Тогда
			ТребуетсяПересчетПоИсходнымОрганизациям = Истина;
		КонецЕсли;
		
		ДатыПересчетаПоОрганизациям.Вставить(Выборка.Организация, Выборка.Месяц);
		СамаяРанняяДатаПересчета = Мин(СамаяРанняяДатаПересчета, Выборка.Месяц);
		
	КонецЦикла;
	
	// Добавим в схему расчета строки для каждого периода, начиная с самого раннего и до рассчитываемого периода
	ОбрабатываемаяДата = СамаяРанняяДатаПересчета;
	
	Пока ОбрабатываемаяДата <= Дата Цикл
		
		НоваяСтрока = СхемаРасчета.Добавить();
		НоваяСтрока.Дата        = ОбрабатываемаяДата;
		НоваяСтрока.Организации = ?(ОбрабатываемаяДата = Дата, ПолныйСписокОрганизаций, Новый Массив);
		
		ОбрабатываемаяДата = КонецМесяца(КонецМесяца(ОбрабатываемаяДата) + 1);
		
	КонецЦикла;
	
	// Заполним итеративно организации для перерасчета
	ОбрабатываемаяДата = Макс(СамаяРанняяДатаПересчета, Дата);
	
	Пока ОбрабатываемаяДата <= Дата Цикл
		
		ТекущаяСтрока    = СхемаРасчета.Найти(ОбрабатываемаяДата, "Дата");
		ПредыдущаяСтрока = СхемаРасчета.Найти(НачалоМесяца(ОбрабатываемаяДата) - 1, "Дата");
		
		Если ПредыдущаяСтрока <> Неопределено Тогда
			
			ПоявилисьИзмененияВМассивеОрганизаций = Ложь;
			
			// Организации, которые пересчитывались в прошлом периоде, надо пересчитать и в текущем
			Для Каждого ПредыдущаяОрганизация Из ПредыдущаяСтрока.Организации Цикл
				Если ТекущаяСтрока.Организации.Найти(ПредыдущаяОрганизация) = Неопределено Тогда
					ТекущаяСтрока.Организации.Добавить(ПредыдущаяОрганизация);
					ПоявилисьИзмененияВМассивеОрганизаций = Истина;
				КонецЕсли;
			КонецЦикла;
			
			// Дополним массив рассчитываемых организаций связанными с ними организациями
			Если ПоявилисьИзмененияВМассивеОрганизаций Тогда
				ТекущаяСтрока.Организации = СвязанныеОрганизацииВПериодеСписком(ТекущаяСтрока.Дата, ТекущаяСтрока.Организации);
			КонецЕсли;
			
		КонецЕсли;
		
		ИзмененнаяОбрабатываемаяДата = ОбрабатываемаяДата;
		
		// Проверим необходимость пересчета организаций текущего периода в более ранних периодах
		Для Каждого ТекущаяОрганизация Из ТекущаяСтрока.Организации Цикл
			
			ДатаПересчетаПоОрганизации = ДатыПересчетаПоОрганизациям[ТекущаяОрганизация];
			
			Если ЗначениеЗаполнено(ДатаПересчетаПоОрганизации) И ДатаПересчетаПоОрганизации < ОбрабатываемаяДата Тогда
				
				СтрокаПоДатеОрганизации = СхемаРасчета.Найти(ДатаПересчетаПоОрганизации, "Дата");
				
				Если СтрокаПоДатеОрганизации.Организации.Найти(ТекущаяОрганизация) = Неопределено Тогда
					// Такая организация в том периоде еще не была отобрана для пересчета
					СтрокаПоДатеОрганизации.Организации.Добавить(ТекущаяОрганизация);
					ИзмененнаяОбрабатываемаяДата = Мин(ИзмененнаяОбрабатываемаяДата, ДатаПересчетаПоОрганизации);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИзмененнаяОбрабатываемаяДата < ОбрабатываемаяДата Тогда
			
			// Следующий цикл начнем с самого раннего измененного прошлого периода
			ОбрабатываемаяДата = ИзмененнаяОбрабатываемаяДата;
			
			// Дополним в нем массив рассчитываемых организаций связанными с ними организациями
			ТекущаяСтрока = СхемаРасчета.Найти(ОбрабатываемаяДата, "Дата");
			ТекущаяСтрока.Организации = СвязанныеОрганизацииВПериодеСписком(ТекущаяСтрока.Дата, ТекущаяСтрока.Организации);
			
		Иначе
			
			// В прошлых периодах ничего не поменялось - переходим к следующему периоду
			ОбрабатываемаяДата = КонецМесяца(КонецМесяца(ОбрабатываемаяДата) + 1);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Пока СхемаРасчета.Количество() > 0 И СхемаРасчета[0].Организации.Количество() = 0 Цикл
		// Удалим строки ранних периодов, в которых нет организаций для пересчета
		СхемаРасчета.Удалить(0);
	КонецЦикла;
	
	Если Не ТребуетсяПересчетПоИсходнымОрганизациям
	   И СхемаРасчета.Количество() > 0
	   И ЗначениеЗаполнено(ОтборОрганизации) Тогда
		
		ИтоговыйСписокОрганизаций = СхемаРасчета[СхемаРасчета.Количество() - 1].Организации;
		Если ИтоговыйСписокОрганизаций.Количество() = ПолныйСписокОрганизаций.Количество() Тогда
			СхемаРасчета.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СхемаРасчета;
	
КонецФункции

Функция СвязанныеОрганизацииВПериодеСписком(Дата, Организации = Неопределено)
	
	Если Не ЗначениеЗаполнено(Организации) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления
		|");
		
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Иначе
		
		ГруппыОрганизаций = СвязанныеОрганизацииВПериоде(Дата, Организации);
		Результат = Новый Массив;
		Для Каждого Группа Из ГруппыОрганизаций Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Группа);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СвязанныеОрганизацииВПериоде(Дата, Организации)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода" , КонецМесяца(Дата));
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналитикиВидаУчета.Организация     КАК Организация,
	|	КорАналитикиВидаУчета.Организация  КАК КорОрганизация
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК АналитикиВидаУчета
	|	ПО
	|		АналитикиВидаУчета.КлючАналитики = СебестоимостьТоваров.АналитикаВидаУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК КорАналитикиВидаУчета
	|	ПО
	|		КорАналитикиВидаУчета.КлючАналитики = СебестоимостьТоваров.КорАналитикаВидаУчета
	|ГДЕ
	|	СебестоимостьТоваров.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СебестоимостьТоваров.Активность
	|	И АналитикиВидаУчета.Организация <> КорАналитикиВидаУчета.Организация
	|	И АналитикиВидаУчета.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И КорАналитикиВидаУчета.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|";
	
	ГруппыОрганизаций = Новый Массив;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ИндексГруппыОрганизации    = НайтиВСпискеГруппОрганизаций(ГруппыОрганизаций, Выборка.Организация);
			ИндексГруппыКорОрганизации = НайтиВСпискеГруппОрганизаций(ГруппыОрганизаций, Выборка.КорОрганизация);
			
			Если ИндексГруппыОрганизации = Неопределено И ИндексГруппыКорОрганизации = Неопределено Тогда
				
				Группа = Новый Массив;
				Группа.Добавить(Выборка.Организация);
				Группа.Добавить(Выборка.КорОрганизация);
				ГруппыОрганизаций.Добавить(Группа);
				
			ИначеЕсли ИндексГруппыОрганизации <> Неопределено И ИндексГруппыКорОрганизации <> Неопределено Тогда
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ГруппыОрганизаций[ИндексГруппыОрганизации], ГруппыОрганизаций[ИндексГруппыКорОрганизации], Истина);
				ГруппыОрганизаций.Удалить(ИндексГруппыКорОрганизации);
				
			ИначеЕсли ИндексГруппыОрганизации <> Неопределено Тогда
				
				ГруппыОрганизаций[ИндексГруппыОрганизации].Добавить(Выборка.КорОрганизация);
				
			Иначе
				
				ГруппыОрганизаций[ИндексГруппыКорОрганизации].Добавить(Выборка.Организация);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	УчтенныеОрганизации = Новый Массив;
	Для Каждого Группа Из ГруппыОрганизаций Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УчтенныеОрганизации, Группа);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчтенныеОрганизации", УчтенныеОрганизации);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И НЕ Организации.Ссылка В (&УчтенныеОрганизации)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ГруппыОрганизаций.Добавить(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Организация));
	КонецЦикла;
	
	Если ТипЗнч(Организации) = Тип("Массив") Тогда
		ОтборПоОрганизациям = ОбщегоНазначения.СкопироватьРекурсивно(Организации);
	Иначе // ссылка на организацию
		ОтборПоОрганизациям = Новый Массив;
		ОтборПоОрганизациям.Добавить(Организации);
	КонецЕсли;
	
	Результат = Новый Массив;
	Для Каждого Группа Из ГруппыОрганизаций Цикл
		Для Каждого Организация Из Группа Цикл
			
			Если ОтборПоОрганизациям.Найти(Организация) <> Неопределено Тогда
				Результат.Добавить(ОбщегоНазначения.СкопироватьРекурсивно(Группа));
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиВСпискеГруппОрганизаций(ГруппыОрганизаций, Организация)
	
	Для Индекс = 0 По ГруппыОрганизаций.ВГраница() Цикл
		Если ГруппыОрганизаций[Индекс].Найти(Организация) <> Неопределено Тогда
			Возврат Индекс;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура РассчитатьЗаПериод(Дата, ПредварительныйРасчет, Организация = Неопределено, ПереопределениеПараметровРасчета = Неопределено, БылиОшибки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПереопределениеПараметровРасчета = Неопределено Или ПереопределениеПараметровРасчета.Свойство("ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ") Тогда
		ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ();
	КонецЕсли;
	
	Если ТипЗнч(Организация) = Тип("Массив") Тогда
		// Расчет по переданному массиву организаций
		ОтборОрганизации = Организация;
	ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
		// Расчет по одной организации
		ОтборОрганизации = Новый Массив;
		ОтборОрганизации.Добавить(Организация);
	Иначе
		// Расчет по всем организациям
		ОтборОрганизации = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Дата));
	
	// Оставим только те организации, по которым в указанном периоде были движения по себестоимости
	СписокОрганизаций = ОрганизацииСДвижениямиПоСебестоимости(Дата, ОтборОрганизации);
	Если СписокОрганизаций.Количество() = 0 Тогда
		
		// Нет организаций для расчета - удалим ранее сформированные документы расчета себестоимости за период
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	РасчетСебестоимости.Ссылка,
		|	ИСТИНА КАК Удалять
		|ИЗ
		|	Документ.РасчетСебестоимостиТоваров КАК РасчетСебестоимости
		|ГДЕ
		|	РасчетСебестоимости.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И НЕ РасчетСебестоимости.ПометкаУдаления
		|";
		
		Если ЗначениеЗаполнено(ОтборОрганизации) Тогда
			Запрос.УстановитьПараметр("Организации", ОтборОрганизации);
			Запрос.Текст = Запрос.Текст + "
			|	И РасчетСебестоимости.Организация В (&Организации)
			|"
		КонецЕсли;
		
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		
		УдалитьДокументыРасчетаСебестоимости(
			ТаблицаДокументов,
			Новый Структура("Удалять", Истина));
		
		Возврат;
		
	КонецЕсли;
	
	// Получим массив групп организаций, связанных по движениям
	ГруппыОрганизаций = СвязанныеОрганизацииВПериоде(Дата, СписокОрганизаций);
	
	// Выберем все не удаленные документы расчета себестоимости за расчетный период.
	// Если по организации уже существует подходящий документ расчета себестоимости, то новый документ создаваться не будет.
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РасчетСебестоимости.Ссылка                 КАК Ссылка,
	|	РасчетСебестоимости.Проведен               КАК Проведен,
	|	РасчетСебестоимости.Организация            КАК Организация,
	|	РасчетСебестоимости.ПредварительныйРасчет  КАК ПредварительныйРасчет
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров КАК РасчетСебестоимости
	|ГДЕ
	|	РасчетСебестоимости.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ РасчетСебестоимости.ПометкаУдаления
	|	И РасчетСебестоимости.Организация В (&ОтборОрганизации)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Проведен УБЫВ,
	|	ПредварительныйРасчет,
	|	Дата УБЫВ
	|";
	
	// Выполним расчет себестоимости по каждой из групп связанных организаций.
	Для Каждого ГруппаДляРасчета Из ГруппыОрганизаций Цикл
		
		// Получим таблицу существующих документов расчета себестоимости для группы связанных организаций.
		Запрос.УстановитьПараметр("ОтборОрганизации", ГруппаДляРасчета);
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		
		ВозможенРасчет = Истина;
		
		// Сохраним связь Организация - Документ расчета себестоимости, который будем пересчитывать.
		ДокументыОрганизаций = Новый Соответствие;
		
		// По организации за период может оказаться несколько документов расчета себестоимости - оставим только один.
		Для Каждого ТекущаяОрганизация Из ГруппаДляРасчета Цикл
			
			СтрокиФакт = ТаблицаДокументов.НайтиСтроки(
				Новый Структура("Организация, ПредварительныйРасчет", ТекущаяОрганизация, Ложь));
			
			Если СтрокиФакт.Количество() > 0 Тогда
				// Документы предварительного расчета больше не нужны.
				УдалитьДокументыРасчетаСебестоимости(
					ТаблицаДокументов,
					Новый Структура("Организация, ПредварительныйРасчет", ТекущаяОрганизация, Истина));
			КонецЕсли;
			
			Если ПредварительныйРасчет Тогда
				
				Если СтрокиФакт.Количество() > 0 Тогда // уже был выполнен расчет фактической себестоимости
					
					// Т.к. уже есть документы фактического расчета,
					// то предварительный расчет регламентным заданием больше не выполняем.
					ВозможенРасчет = Ложь;
					
					// Предварительная себестоимость не рассчитывалась
					ЗаписьЖурналаРегистрации(
						ИмяСобытияЖурналаРегистрации(НСтр("ru='Отказ'", ОбщегоНазначения.КодОсновногоЯзыка())),
						УровеньЖурналаРегистрации.Информация,
						Метаданные.Справочники.Организации,
						ТекущаяОрганизация,
						НСтр("ru = 'Предварительная себестоимость не обновлена, т.к. выполнен расчет фактической себестоимости.'"));
						
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Оставим только один документ для расчета, самый поздний по дате (если почему-то документов осталось несколько).
			ДокументРасчета = УдалитьДокументыРасчетаСебестоимости(
				ТаблицаДокументов,
				Новый Структура("Организация", ТекущаяОрганизация),
				Истина);
			
			ДокументыОрганизаций.Вставить(ТекущаяОрганизация, ДокументРасчета);
			
		КонецЦикла;
		
		Если Не ВозможенРасчет Тогда
			// По данной группе организаций предварительный расчет себестоимости выполнить нельзя.
			Продолжить;
		КонецЕсли;
		
		Если Не ПредварительныйРасчет Тогда
			// Определим метод оценки для группы организаций - он должен быть одинаковым у всех организаций.
			МетодОценки = ОпределитьМетодОценкиСтоимости(ГруппаДляРасчета, Дата);
		Иначе
			МетодОценки = Перечисления.МетодыОценкиСтоимостиТоваров.ПустаяСсылка();
		КонецЕсли;
		
		// Подготовим документы расчета себестоимости.
		ДокументыРасчетаСебестоимости = Новый Массив;
		
		Для Каждого КлючИЗначение Из ДокументыОрганизаций Цикл
			
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ДокументОбъект = КлючИЗначение.Значение.ПолучитьОбъект();
			Иначе
				ДокументОбъект = Документы.РасчетСебестоимостиТоваров.СоздатьДокумент();
			КонецЕсли;
			
			//ДокументОбъект.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
			
			Если Не ПредварительныйРасчет Тогда
				ДокументОбъект.ДополнительныеСвойства.Вставить("ИзменитьВерсиюДокумента");
			КонецЕсли;
			
			ДанныеЗаполненияДокумента = Новый Структура;
			ДанныеЗаполненияДокумента.Вставить("Дата"                 , Дата);
			ДанныеЗаполненияДокумента.Вставить("Организация"          , КлючИЗначение.Ключ);
			ДанныеЗаполненияДокумента.Вставить("ПредварительныйРасчет", ПредварительныйРасчет);
			ДанныеЗаполненияДокумента.Вставить("МетодОценки"          , МетодОценки);
			
			ДокументОбъект.Заполнить(ДанныеЗаполненияДокумента);
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ДокументыРасчетаСебестоимости.Добавить(ДокументОбъект.Ссылка);
			
		КонецЦикла;
		
		РассчитатьСебестоимостьПоГруппеОрганизаций(
			Дата,
			ГруппаДляРасчета,
			ДокументыРасчетаСебестоимости,
			ПредварительныйРасчет,
			МетодОценки,
			ПереопределениеПараметровРасчета,
			БылиОшибки);
			
	КонецЦикла;
	
КонецПроцедуры


Процедура РассчитатьСебестоимостьПоГруппеОрганизаций(Дата, СписокОрганизаций, ДокументыРасчетаСебестоимости, ПредварительныйРасчет, МетодОценки, ПереопределениеПараметровРасчета, БылиОшибки)
	
	ПараметрыРасчета = ИнициализироватьПараметрыРасчета(
		Дата,
		СписокОрганизаций,
		ДокументыРасчетаСебестоимости,
		ПредварительныйРасчет,
		МетодОценки,
		ПереопределениеПараметровРасчета);
	
	ПроверитьКорректностьИсходныхДанныхДоРасчета(ПараметрыРасчета);
	
	РаспределитьРасходыНаСебестоимость(ПараметрыРасчета);
	
	СкорректироватьСтоимостьВозвратовПрошлыхПериодов(ПараметрыРасчета);
	
	КоличествоУзлов = СформироватьУзлыКорректировкиСтоимостиСписания(ПараметрыРасчета);
	Если КоличествоУзлов > 0 Тогда
		
		РассчитатьСтоимостьЗапасов(ПараметрыРасчета);
		
		ЗарегистрироватьСтоимостьТоваров(ПараметрыРасчета);
		
	КонецЕсли;
	
	Если Не ПараметрыРасчета.ПредварительныйРасчет Тогда
		
		СкорректироватьСтоимостьСписанияЗапасов(ПараметрыРасчета);
		
		Если ПараметрыРасчета.ЗначениеПогрешности > 0 Тогда
			СписатьОшибкиОкругленияРасчетаСебестоимости(ПараметрыРасчета);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьСформированныеДвижения(ПараметрыРасчета);
	
	Если Не ПараметрыРасчета.ПредварительныйРасчет Тогда
		ПроверитьКорректностьОстатковВРегистреСебестоимостьТоваровПослеРасчета(ПараметрыРасчета);
	КонецЕсли;
	
	// Ошибки о некорректных регистраторах нельзя пропускать.
	Если ПараметрыРасчета.БылиОшибки И ПараметрыРасчета.ОшибкиДвижений.Количество() > 0 Тогда
		ВызватьИсключение
			НСтр("ru='При расчете себестоимости возникла ошибка.
				|Подробности см. в Журнале регистрации.'");
	КонецЕсли;
	
	// Ошибки о некорректных остатках позволяют продолжить расчет.
	БылиОшибки = БылиОшибки Или ПараметрыРасчета.БылиОшибки;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Инициализация параметров расчета себестоимости
#Область ИнициализацияПараметровРасчета

Функция ИнициализироватьПараметрыРасчета(Дата, СписокОрганизаций, ДокументыРасчетаСебестоимости, ПредварительныйРасчет, МетодОценки, ПереопределениеПараметровРасчета)
	
	ПараметрыРасчета = Новый Структура; // контейнер всех общих параметров, используемых механизмом расчета себестоимости
	
	// Общие параметры расчета
	ПараметрыРасчета.Вставить("СписокОрганизаций"            , СписокОрганизаций);
	ПараметрыРасчета.Вставить("ДокументыРасчетаСебестоимости", ДокументыРасчетаСебестоимости);
	ПараметрыРасчета.Вставить("ПредварительныйРасчет"        , ПредварительныйРасчет);
	ПараметрыРасчета.Вставить("МетодОценки"                  , МетодОценки);
	
	// Периода расчета и границы периода
	РасчетныйПериод = Новый Структура;
	РасчетныйПериод.Вставить("НачалоПериода"       , НачалоМесяца(Дата));
	РасчетныйПериод.Вставить("КонецПериода"        , ?(ПредварительныйРасчет, КонецДня(Дата), КонецМесяца(Дата)));
	РасчетныйПериод.Вставить("ГраницаНачалоПериода", Новый Граница(РасчетныйПериод.НачалоПериода, ВидГраницы.Исключая));
	РасчетныйПериод.Вставить("ГраницаКонецПериода" , Новый Граница(РасчетныйПериод.КонецПериода,  ВидГраницы.Включая));
	
	ПараметрыРасчета.Вставить("РасчетныйПериод", РасчетныйПериод);
	
	// Общий менеджер временных таблиц для всех этапов расчета
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	
	// Параметры решения СЛУ
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформыНеНиже8_3_14 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.14.0") > 0;
	ПараметрыРасчета.Вставить("ИспользоватьПлатформенныйМетодДляРешенияСЛАУ", ВерсияПлатформыНеНиже8_3_14);
	ПараметрыРасчета.Вставить("ТребуемаяТочность"     , 0.000001); // точность решения СЛУ
	ПараметрыРасчета.Вставить("МаксКоличествоИтераций", 200); // циклов решения СЛУ
	ПараметрыРасчета.Вставить("ЗначениеПогрешности"   , 5); // какую сумму считать ошибкой округления
	
	// Ограничения на размер таблиц значений и наборов записей регистров:
	ПараметрыРасчета.Вставить("КоличествоСтрокТЗ"  , 100000); // макс. количество строк в таблице значений
	ПараметрыРасчета.Вставить("РазмерНабораЗаписей", 10000); // макс. количество строк в наборе записей; 0 - запись данных в ИБ не выполняется
	
	ПараметрыРасчета.Вставить("БылиОшибки"    , Ложь); // были ли выявлены какие-то ошибки в расчете
	ПараметрыРасчета.Вставить("ОшибкиДвижений", Новый Массив); // тексты ошибок о некорректных регистраторах
	
	// Формирует общие временные таблицы для отбора данных в запросах
	ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета);
	
	// Формирует временную таблицу ВТДокументыРасчетаСебестоимости и свойство ДокументыРасчетаПоОрганизациям
	ИнициализироватьДокументыРасчетаСебестоимости(ПараметрыРасчета);
	
	// Формирует описания движений по регистрам, поддерживаемых данным механизмом
	ИнициализироватьРегистры(ПараметрыРасчета);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Процедура ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	АналитикаВидаУчета.КлючАналитики             КАК КлючАналитики,
	|	АналитикаВидаУчета.Организация               КАК Организация,
	|	АналитикаВидаУчета.Склад                     КАК Склад,
	|	АналитикаВидаУчета.ИсточникФинансирования    КАК ИсточникФинансирования
	|ПОМЕСТИТЬ ВТОтборАналитикаВидаУчета
	|ИЗ
	|	РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчета
	|ГДЕ
	|	АналитикаВидаУчета.Организация В (&СписокОрганизаций)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаВидаУчета.КлючАналитики             КАК КлючАналитики,
	|	АналитикаВидаУчета.Организация               КАК Организация
	|ИЗ
	|	ВТОтборАналитикаВидаУчета КАК АналитикаВидаУчета
	|";
	
	ОрганизацииПоАналитикеВидаУчета = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОрганизацииПоАналитикеВидаУчета.Вставить(Выборка.КлючАналитики, Выборка.Организация);
	КонецЦикла;
	
	ПараметрыРасчета.Вставить("ОрганизацияПоАналитикеВидаУчета", ОрганизацииПоАналитикеВидаУчета);
	
КонецПроцедуры

Процедура ИнициализироватьДокументыРасчетаСебестоимости(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетСебестоимостиТоваров.Ссылка       КАК Ссылка,
	|	РасчетСебестоимостиТоваров.Организация  КАК Организация
	|ПОМЕСТИТЬ ВТДокументыРасчетаСебестоимости
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров КАК РасчетСебестоимостиТоваров
	|ГДЕ
	|	РасчетСебестоимостиТоваров.Ссылка В(&ДокументыРасчетаСебестоимости)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыРасчетаСебестоимости.Ссылка       КАК Ссылка,
	|	ДокументыРасчетаСебестоимости.Организация  КАК Организация
	|ИЗ
	|	ВТДокументыРасчетаСебестоимости КАК ДокументыРасчетаСебестоимости
	|";
	
	Запрос.УстановитьПараметр("ДокументыРасчетаСебестоимости", ПараметрыРасчета.ДокументыРасчетаСебестоимости);
	
	ДокументыРасчетаПоОрганизациям = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументыРасчетаПоОрганизациям.Вставить(Выборка.Организация, Выборка.Ссылка);
	КонецЦикла;
	
	ПараметрыРасчета.Вставить("ДокументыРасчетаПоОрганизациям", ДокументыРасчетаПоОрганизациям);
	
КонецПроцедуры

Процедура ИнициализироватьРегистры(ПараметрыРасчета)
	
	ПараметрыРасчета.Вставить("Движения", Новый Структура);
	
	ПараметрыРасчета.Вставить("РегистрыСРасчетнымиОборотами", Новый Структура); // ВТКэшРасчетныеОбороты...
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя, Истина);
	
	ПараметрыРасчета.Вставить("РегистрыСРасчетнымиОстатками", Новый Структура); // ВТКэшРасчетныеОстатки...
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.РасходыКРаспределениюНаСебестоимость.Имя, Истина);
	
	Для Каждого МетаданныеРегистра Из ИсходящиеДанныеМеханизма() Цикл
		
		ОписаниеРегистра = СформироватьОписаниеРегистра(МетаданныеРегистра);
		ПараметрыРасчета.Движения.Вставить(ОписаниеРегистра.ИмяРегистра, ОписаниеРегистра);
		
		ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
			ПараметрыРасчета.МенеджерВременныхТаблиц,
			"ВТКэш" + ОписаниеРегистра.ИмяРегистра,
			ОписаниеРегистра.Таблица,
			ОписаниеРегистра.ПоляРегистра);
		
		Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
			ОбновитьРасчетныеЗаписиРегистра(ПараметрыРасчета, ОписаниеРегистра, Истина);
		КонецЕсли;
		
		Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
			ИнициализироватьКэшОстатковРегистра(ПараметрыРасчета, ОписаниеРегистра);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыРасчета.Вставить("ОборотныеРегистрыУчета", ПодготовитьНаборыОборотныхРегистров(ПараметрыРасчета.Движения));
	
КонецПроцедуры

Функция СформироватьОписаниеРегистра(МетаданныеРегистра)
	
	ОписаниеРегистра = Новый Структура;
	ОписаниеРегистра.Вставить("МетаданныеРегистра"      , МетаданныеРегистра);
	ОписаниеРегистра.Вставить("ИмяРегистра"             , МетаданныеРегистра.Имя);
	ОписаниеРегистра.Вставить("ПолноеИмяРегистра"       , МетаданныеРегистра.ПолноеИмя());
	ОписаниеРегистра.Вставить("ЭтоРегистрНакопления"    , Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра));
	
	ОписаниеРегистра.Вставить("ЕстьОрганизация"         , МетаданныеРегистра.Измерения.Найти("Организация") <> Неопределено);
	ОписаниеРегистра.Вставить("ЕстьАналитикаВидаУчета"  , МетаданныеРегистра.Измерения.Найти("АналитикаВидаУчета") <> Неопределено);
	ОписаниеРегистра.Вставить("НадоОбновитьРасчетныйКэш", Ложь); // были сформированы движения, еще не учтенные в расчетных остатках/записях
	
	МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОписаниеРегистра.ПолноеИмяРегистра);
	ОписаниеРегистра.Вставить("МенеджерРегистра"        , МенеджерРегистра);
	
	ОписаниеРегистра.Вставить("Таблица", МенеджерРегистра.СоздатьНаборЗаписей().ВыгрузитьКолонки());
	
	ПоляРегистра = "";
	ИгнорируемыеПоля = Новый Структура("НомерСтроки, Активность, МоментВремени");
	
	Для Каждого Колонка Из ОписаниеРегистра.Таблица.Колонки Цикл
		Если Не ИгнорируемыеПоля.Свойство(Колонка.Имя) Тогда
			ПоляРегистра = ПоляРегистра + ", " + "%1" + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	ПоляРегистра = Сред(ПоляРегистра, 3);
	
	ОписаниеРегистра.Вставить("ПоляРегистра", ПоляРегистра);
	
	ИзмеренияРегистра = "";
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		ИзмеренияРегистра = ИзмеренияРегистра + ", " + "%1" + Измерение.Имя;
	КонецЦикла;
	ИзмеренияРегистра = Сред(ИзмеренияРегистра, 3);
	
	ОписаниеРегистра.Вставить("ИзмеренияРегистра", ИзмеренияРегистра);
	
	РесурсыРегистра = "";
	РесурсыРегистраССуффиксом = "";
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		РесурсыРегистра = РесурсыРегистра + ", " + "%1" + Ресурс.Имя;
		РесурсыРегистраССуффиксом = РесурсыРегистраССуффиксом + ", " + "%1" + Ресурс.Имя + "%2 КАК " + Ресурс.Имя;
	КонецЦикла;
	РесурсыРегистра = Сред(РесурсыРегистра, 3);
	РесурсыРегистраССуффиксом = Сред(РесурсыРегистраССуффиксом, 3);
	
	ОписаниеРегистра.Вставить("РесурсыРегистра", РесурсыРегистра);
	ОписаниеРегистра.Вставить("РесурсыРегистраССуффиксом", РесурсыРегистраССуффиксом);
	
	РеквизитыРегистра = "";
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		РеквизитыРегистра = РеквизитыРегистра + ", " + "%1" + Реквизит.Имя;
	КонецЦикла;
	РеквизитыРегистра = Сред(РеквизитыРегистра, 3);
	ОписаниеРегистра.Вставить("РеквизитыРегистра", РеквизитыРегистра);
	
	Возврат ОписаниеРегистра;
	
КонецФункции

Функция ПодготовитьНаборыОборотныхРегистров(Движения)
	
	ПодготавливаемыеРегистры = Новый Массив;
	ПодготавливаемыеРегистры.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж);
	ПодготавливаемыеРегистры.Добавить(Метаданные.РегистрыНакопления.Закупки);
	ПодготавливаемыеРегистры.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы);
	ПодготавливаемыеРегистры.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура);
	ПодготавливаемыеРегистры.Добавить(Метаданные.РегистрыНакопления.ТоварыОтпущенныеВОтделения);
	ПодготавливаемыеРегистры.Добавить(Метаданные.РегистрыНакопления.ТоварыСписанныеПоНазначениямВрачей);
	
	НаборыРегистров = Новый Массив;
	
	Для Каждого МетаданныеРегистра Из ПодготавливаемыеРегистры Цикл
		
		ИмяРегистра = МетаданныеРегистра.Имя;
		ОписаниеРегистра = Движения[ИмяРегистра];
		
		ОписаниеНабора = Новый Структура;
		ОписаниеНабора.Вставить("ИмяРегистра", ИмяРегистра);
		ОписаниеНабора.Вставить("ХозяйственныеОперации", ОписаниеРегистра.МенеджерРегистра.ХозяйственныеОперацииКорректировки());
		
		НаборыРегистров.Добавить(ОписаниеНабора);
		
	КонецЦикла;
	
	Возврат НаборыРегистров;
	
КонецФункции

// Функция формирует массив хоз. операций поступления
//
Функция ХозОперацииВнешнееПоступление()
	
	ХозОперации = Новый Массив;
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеПоВозврату);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеТоваров);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеВнутриведомственное);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеМежбюджетное);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеПрочее);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.СторноСписанияНаРасходы);
	
	Возврат ХозОперации;
	
КонецФункции

// Функция формирует массив хоз. операций поступления для ФИФО
//
Функция ХозОперацииВнешнееПоступлениеФИФО()
	
	ХозОперации = Новый Массив;
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеПоВозврату);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеТоваров);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеВнутриведомственное);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеМежбюджетное);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.БезвозмездноеПоступлениеПрочее);
	
	Возврат ХозОперации;
	
КонецФункции

Функция ХозОперацииВозвратыПрошлыхПериодов()
	
	ХозОперации = Новый Массив;
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов);
	ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.СторноСписанияНаРасходы);
	
	Возврат ХозОперации;
	
КонецФункции

#КонецОбласти // ИнициализацияПараметровРасчета

///////////////////////////////////////////////////////////////////////////////
// Проверка корректности данных
#Область ПроверкаКорректностиДанных

Процедура ПроверитьКорректностьИсходныхДанныхДоРасчета(ПараметрыРасчета)

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПроверкаКорректностиИсходныхДанныхДоРасчета();
	Запрос.УстановитьПараметр("Организации", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("Граница", ПараметрыРасчета.РасчетныйПериод.ГраницаКонецПериода);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Товар = ОбщегоНазначенияБольничнаяАптека.ПолучитьПредставлениеНоменклатуры(
			Выборка.Номенклатура,
			Выборка.Серия,
			Выборка.Партия);
		ПредставлениеТовара = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 склад: %2,%3 организация: %4'"),
			Товар,
			Выборка.Склад,
			?(ЗначениеЗаполнено(Выборка.ИсточникФинансирования),
				" " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru ='источник финансирования: %1,'"),Выборка.ИсточникФинансирования),
				""),
			Выборка.Организация);
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Номенклатура: %1 обнаружен отрицательный остаток: %2 (%3)'"),
			ПредставлениеТовара,
			- Выборка.Количество,
			Выборка.Упаковка);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияОшибкиДляЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстОшибки);
		
	КонецЦикла;
	
	ПараметрыРасчета.БылиОшибки = ПараметрыРасчета.БылиОшибки Или (Выборка.Количество() > 0);
	
КонецПроцедуры

Функция ТекстЗапросаПроверкаКорректностиИсходныхДанныхДоРасчета()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Себестоимость.РазделУчета                                       КАК РазделУчета,
	|	Себестоимость.АналитикаВидаУчета                                КАК АналитикаВидаУчета,
	|	Себестоимость.АналитикаУчетаНоменклатуры                        КАК АналитикаУчетаНоменклатуры,
	|	АналитикиВидаУчета.Организация                                  КАК Организация,
	|	АналитикиВидаУчета.Склад                                        КАК Склад,
	|	АналитикиВидаУчета.ИсточникФинансирования                       КАК ИсточникФинансирования,
	|	АналитикаНоменклатуры.Номенклатура                              КАК Номенклатура,
	|	АналитикаНоменклатуры.Номенклатура.ОсновнаяЕдиницаУчета         КАК Упаковка,
	|	АналитикаНоменклатуры.СерияНоменклатуры                         КАК Серия,
	|	АналитикаНоменклатуры.Партия                                    КАК Партия,
	|	Себестоимость.КоличествоОстаток / ЕдиницыИзмерения.Коэффициент  КАК Количество
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(&Граница) КАК Себестоимость
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК АналитикиВидаУчета
	|	ПО
	|		Себестоимость.АналитикаВидаУчета = АналитикиВидаУчета.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|	ПО
	|		Себестоимость.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК ЕдиницыИзмерения
	|	ПО
	|		АналитикаНоменклатуры.Номенклатура = ЕдиницыИзмерения.Номенклатура
	|		И АналитикаНоменклатуры.Номенклатура.ОсновнаяЕдиницаУчета = ЕдиницыИзмерения.ЕдиницаИзмерения
	|ГДЕ
	|	АналитикиВидаУчета.Организация В (&Организации)
	|	И Себестоимость.КоличествоОстаток < 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ПроверитьКорректностьОстатковВРегистреСебестоимостьТоваровПослеРасчета(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПроверкаКорректностиОстатковВРегистреСебестоимостьТоваровПослеРасчета();
	
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГраницаКонецПериода", ПараметрыРасчета.РасчетныйПериод.ГраницаКонецПериода);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		ПредставлениеТовара = ОбщегоНазначенияБольничнаяАптека.ПолучитьПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Серия, Выборка.Партия);
		ПредставлениеТовара = ПредставлениеТовара + ", " + НСтр("ru = 'склад'") + ": " + Выборка.Склад;
		Если ЗначениеЗаполнено(Выборка.ИсточникФинансирования) Тогда
			ПредставлениеТовара = ПредставлениеТовара + ", " + НСтр("ru = 'источник Финансирования'") + ": " + Выборка.ИсточникФинансирования;
		КонецЕсли;
		ПредставлениеТовара = ПредставлениеТовара + ", " + НСтр("ru = 'организация'")  + ": " + Выборка.Организация;
		ПредставлениеТовара = ПредставлениеТовара + ", " + НСтр("ru = 'раздел учета'") + ": " + Выборка.РазделУчета;
		
		ПредставлениеНекорректногоОстатка = НСтр("ru = 'Количество = 0'");
		Если Выборка.Стоимость <> 0 Тогда
			ПредставлениеНекорректногоОстатка = ПредставлениеНекорректногоОстатка + ", " + НСтр("ru = 'Стоимость'") + " = " + Выборка.Стоимость;
		КонецЕсли;
		Если Выборка.СтоимостьБезНДС <> 0 Тогда
			ПредставлениеНекорректногоОстатка = ПредставлениеНекорректногоОстатка + ", " + НСтр("ru = 'Стоимость без НДС'") + " = " + Выборка.СтоимостьБезНДС;
		КонецЕсли;
		Если Выборка.СуммаДопРасходов <> 0 Тогда
			ПредставлениеНекорректногоОстатка = ПредставлениеНекорректногоОстатка + ", " + НСтр("ru = 'Сумма доп. расходов'") + " = " + Выборка.СуммаДопРасходов;
		КонецЕсли;
		Если Выборка.СуммаДопРасходовБезНДС <> 0 Тогда
			ПредставлениеНекорректногоОстатка = ПредставлениеНекорректногоОстатка + ", " + НСтр("ru = 'Сумма доп. расходов без НДС'") + " = " + Выборка.СуммаДопРасходовБезНДС;
		КонецЕсли;
		Если Выборка.СтоимостьРегл <> 0 Тогда
			ПредставлениеНекорректногоОстатка = ПредставлениеНекорректногоОстатка + ", " + НСтр("ru = 'Стоимость (регл.)'") + " = " + Выборка.СтоимостьРегл;
		КонецЕсли;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'По номенклатуре %1 обнаружен некорректный остаток на %2 в регистре ""Себестоимость товаров"": %3'"),
			ПредставлениеТовара,
			Формат(ПараметрыРасчета.РасчетныйПериод.КонецПериода, "ДЛФ=D"),
			ПредставлениеНекорректногоОстатка);
			
		ЗаписьЖурналаРегистрации(
			ИмяСобытияОшибкиДляЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстОшибки);
		
	КонецЦикла;
	
	ПараметрыРасчета.БылиОшибки = ПараметрыРасчета.БылиОшибки Или (Выборка.Количество() > 0);
	
КонецПроцедуры

Функция ТекстЗапросаПроверкаКорректностиОстатковВРегистреСебестоимостьТоваровПослеРасчета()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Себестоимость.РазделУчета                   КАК РазделУчета,
	|	АналитикаУчета.Организация                  КАК Организация,
	|	АналитикаУчета.Склад                        КАК Склад,
	|	АналитикаУчета.ИсточникФинансирования       КАК ИсточникФинансирования,
	|	АналитикаНоменклатуры.Номенклатура          КАК Номенклатура,
	|	АналитикаНоменклатуры.СерияНоменклатуры     КАК Серия,
	|	АналитикаНоменклатуры.Партия                КАК Партия,
	|	Себестоимость.КоличествоОстаток             КАК Количество,
	|	Себестоимость.СтоимостьОстаток              КАК Стоимость,
	|	Себестоимость.СтоимостьБезНДСОстаток        КАК СтоимостьБезНДС,
	|	Себестоимость.СуммаДопРасходовОстаток       КАК СуммаДопРасходов,
	|	Себестоимость.СуммаДопРасходовБезНДСОстаток КАК СуммаДопРасходовБезНДС,
	|	Себестоимость.СтоимостьРеглОстаток          КАК СтоимостьРегл
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(
	|				&ГраницаКонецПериода,
	|				АналитикаВидаУчета В (ВЫБРАТЬ Т.КлючАналитики ИЗ ВТОтборАналитикаВидаУчета КАК Т)
	|			) КАК Себестоимость
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|	ПО
	|		Себестоимость.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК АналитикаУчета
	|	ПО
	|		Себестоимость.АналитикаВидаУчета = АналитикаУчета.КлючАналитики
	|
	|ГДЕ
	|	Себестоимость.КоличествоОстаток = 0
	|	И НЕ(Себестоимость.СтоимостьОстаток = 0
	|		И Себестоимость.СтоимостьБезНДСОстаток = 0
	|		И Себестоимость.СуммаДопРасходовОстаток = 0
	|		И Себестоимость.СуммаДопРасходовБезНДСОстаток = 0
	|		И Себестоимость.СтоимостьРеглОстаток = 0)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // ПроверкаКорректностиДанных

////////////////////////////////////////////////////////////////////////////////
// Распределение дополнительных расходов на себестоимость
#Область РаспределениеДополнительныхРасходовПоТоварам

Процедура РаспределитьРасходыНаСебестоимость(ПараметрыРасчета)
	
	ТаблицаДопРасходов = ТаблицаРаспределенияРасходовНаСебестоимостьТоваров(ПараметрыРасчета);
	
	Если ПараметрыРасчета.ПредварительныйРасчет Тогда
		
		ТаблицаДопРасходов.Колонки.Удалить("ДокументПоступленияРасходов");
		ТаблицаДопРасходов.Колонки.Удалить("АналитикаРасходов");
		ТаблицаДопРасходов.Колонки.Удалить("Регистратор");
		ТаблицаДопРасходов.Колонки.Удалить("ДокументДвижения");
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Таблица.АналитикаВидаУчета          КАК АналитикаВидаУчета,
		|	Таблица.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
		|	Таблица.РазделУчета                 КАК РазделУчета,
		|	Таблица.СуммаДопРасходов            КАК СуммаДопРасходов,
		|	Таблица.СуммаДопРасходовБезНДС      КАК СуммаДопРасходовБезНДС,
		|	Таблица.СтоимостьРегл               КАК СтоимостьРегл
		|
		|ПОМЕСТИТЬ ТаблицаДопРасходов
		|
		|ИЗ
		|	&ТаблицаДопРасходов КАК Таблица
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.АналитикаВидаУчета             КАК АналитикаВидаУчета,
		|	Таблица.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
		|	Таблица.РазделУчета                    КАК РазделУчета,
		|	СУММА(Таблица.СуммаДопРасходов)        КАК СуммаДопРасходов,
		|	СУММА(Таблица.СуммаДопРасходовБезНДС)  КАК СуммаДопРасходовБезНДС,
		|	СУММА(Таблица.СтоимостьРегл)           КАК СтоимостьРегл
		|
		|ПОМЕСТИТЬ ДопРасходы
		|
		|ИЗ
		|	ТаблицаДопРасходов КАК Таблица
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.АналитикаВидаУчета,
		|	Таблица.АналитикаУчетаНоменклатуры,
		|	Таблица.РазделУчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаВидаУчета,
		|	АналитикаУчетаНоменклатуры,
		|	РазделУчета
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаДопРасходов
		|");
		Запрос.УстановитьПараметр("ТаблицаДопРасходов", ТаблицаДопРасходов);
		Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиВидаУчета.ПустаяСсылка)               КАК АналитикаВидаУчета,
		|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)       КАК АналитикаУчетаНоменклатуры,
		|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
		|	0 КАК СуммаДопРасходов,
		|	0 КАК СуммаДопРасходовБезНДС,
		|	0 КАК СтоимостьРегл
		|
		|ПОМЕСТИТЬ ДопРасходы
		|ГДЕ
		|	ЛОЖЬ
		|");
		Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
		ОтразитьРаспределениеДопРасходовНаСебестоимостьТоваров(ПараметрыРасчета, ТаблицаДопРасходов);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует таблицу расходов, распределенных на себестоимость товаров
// по указанному в статьях расходов правилу распределения.
//
// Параметры:
//	Дата - Дата, на которую выполняется получение остатка расходов
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица распределения расходов на себестоимость
//
Функция ТаблицаРаспределенияРасходовНаСебестоимостьТоваров(ПараметрыРасчета)
	
	// Сформируем таблицу распределения расходов.
	ТаблицаРаспределенияРасходов = Новый ТаблицаЗначений;
	Колонки = ТаблицаРаспределенияРасходов.Колонки;
	Колонки.Добавить("Организация"                , Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Колонки.Добавить("СтатьяРасходов"             , Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
	Колонки.Добавить("Период"                     , ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Колонки.Добавить("Регистратор");
	Колонки.Добавить("ДокументДвижения");
	Колонки.Добавить("АналитикаРасходов");
	Колонки.Добавить("ДокументПоступленияРасходов");
	Колонки.Добавить("АналитикаУчетаНоменклатуры" , Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаНоменклатуры"));
	Колонки.Добавить("АналитикаВидаУчета"         , Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиВидаУчета"));
	Колонки.Добавить("РазделУчета"                , Новый ОписаниеТипов("ПеречислениеСсылка.РазделыУчетаСебестоимостиТоваров"));
	Колонки.Добавить("СуммаДопРасходов",           ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Колонки.Добавить("СуммаДопРасходовБезНДС",     ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Колонки.Добавить("СтоимостьРегл",              ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Расходы.Организация                  КАК Организация,
	|	Расходы.СтатьяРасходов               КАК СтатьяРасходов,
	|	Расходы.АналитикаРасходов            КАК АналитикаРасходов,
	|	Расходы.ДокументПоступленияРасходов  КАК ДокументПоступленияРасходов,
	|	Расходы.СтатьяРасходов.ПравилоРаспределенияНаСебестоимость КАК ПравилоРаспределения,
	|	Расходы.Стоимость                    КАК Сумма,
	|	Расходы.СтоимостьБезНДС              КАК СуммаБезНДС,
	|	Расходы.СтоимостьРегл                КАК СуммаРегл
	|ИЗ
	|	ВТКэшРасчетныеОстаткиРасходыКРаспределениюНаСебестоимость КАК Расходы
	|");
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГраницаКонецПериода", ПараметрыРасчета.РасчетныйПериод.ГраницаКонецПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций"  , ПараметрыРасчета.СписокОрганизаций);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТаблицаРаспределенияРасходов;
	КонецЕсли;
	
	ТаблицаРасходов = РезультатЗапроса.Выгрузить();
	ТаблицаРасходов.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаРасходов Цикл
		
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапросаВтТаблицаРасходовПоОстаткам()
		+ ТекстЗапросаТаблицаСпособовРаспределения()
		+ ТекстЗапросаТаблицаДокументов()
		+ ТекстЗапросаТаблицаПоступленияТоваров()
		+ ТекстЗапросаТаблицаБазыРаспределения()
		+ ТекстЗапросаТаблицаРасходов();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачалоПериода"       , ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"        , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	Запрос.УстановитьПараметр("ГраницаНачалоПериода", ПараметрыРасчета.РасчетныйПериод.ГраницаНачалоПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций"   , ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ТаблицаРасходов"     , ТаблицаРасходов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ПоследнийРезультат  = МассивРезультатов.ВГраница();
	РезультатЗапросаПоБазе = МассивРезультатов[ПоследнийРезультат - 1];
	ТаблицаРасходов = МассивРезультатов[ПоследнийРезультат].Выгрузить();
	
	СтруктураОтбора = Новый Структура("ИндексБазы");
	
	// Выборка строк базы распределения по индексу аналитики.
	ВыборкаПоИндексу = РезультатЗапросаПоБазе.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИндексу.Следующий() Цикл
		
		Если ВыборкаПоИндексу.База = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора.ИндексБазы = ВыборкаПоИндексу.ИндексБазы;
		
		// Получаем массив расходов, имеющих одинаковый индекс аналитики, соответствующий текущей выборки базы распределения.
		// Данные затраты будут распределены по одинаковой базе распределения.
		МассивРасходов = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
		Если МассивРасходов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаПоИндексу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Для Каждого СтрокаРасходов Из МассивРасходов Цикл
		
			СуммаКРаспределению        = СтрокаРасходов.Сумма;
			СуммаБезНДСКРаспределению  = СтрокаРасходов.СуммаБезНДС;
			СуммаРеглКРаспределению    = СтрокаРасходов.СуммаРегл;
			БазаВсего                  = ВыборкаПоИндексу.База;
		
			// Выборка строк базы распределения по индексу базы распределения
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
				
				Если БазаВсего <> 0 Тогда
					Стоимость        = Окр(СуммаКРаспределению * Выборка.База / БазаВсего, 2, 1);
					СтоимостьБезНДС  = Окр(СуммаБезНДСКРаспределению * Выборка.База / БазаВсего, 2, 1);
					СтоимостьРегл    = Окр(СуммаРеглКРаспределению * Выборка.База / БазаВсего, 2, 1);
				Иначе
					Стоимость        = 0;
					СтоимостьБезНДС  = 0;
					СтоимостьРегл    = 0;
				КонецЕсли;
				
				СуммаКРаспределению = СуммаКРаспределению - Стоимость;
				СуммаБезНДСКРаспределению = СуммаБезНДСКРаспределению - СтоимостьБезНДС;
				СуммаРеглКРаспределению = СуммаРеглКРаспределению - СтоимостьРегл;
				БазаВсего = БазаВсего - Выборка.База;
				
				НоваяСтрока = ТаблицаРаспределенияРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасходов);
				НоваяСтрока.АналитикаУчетаНоменклатуры = Выборка.АналитикаУчетаНоменклатуры;
				НоваяСтрока.АналитикаВидаУчета         = Выборка.АналитикаВидаУчета;
				НоваяСтрока.РазделУчета                = Выборка.РазделУчета;
				НоваяСтрока.ДокументДвижения           = Выборка.ДокументДвижения;
				НоваяСтрока.СуммаДопРасходов           = Стоимость;
				НоваяСтрока.СуммаДопРасходовБезНДС     = СтоимостьБезНДС;
				НоваяСтрока.СтоимостьРегл              = СтоимостьРегл;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаРаспределенияРасходов;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаРасходовПоОстаткам()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаРасходы.НомерСтроки                  КАК НомерСтроки,
	|	ТаблицаРасходы.Организация                  КАК Организация,
	|	ТаблицаРасходы.СтатьяРасходов               КАК СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов            КАК АналитикаРасходов,
	|	ТаблицаРасходы.ДокументПоступленияРасходов  КАК ДокументПоступленияРасходов,
	|	ТаблицаРасходы.ПравилоРаспределения         КАК ПравилоРаспределения,
	|	ТаблицаРасходы.Сумма                        КАК Сумма,
	|	ТаблицаРасходы.СуммаБезНДС                  КАК СуммаБезНДС,
	|	ТаблицаРасходы.СуммаРегл                    КАК СуммаРегл
	|ПОМЕСТИТЬ ВтТаблицаРасходов
	|ИЗ
	|	&ТаблицаРасходов КАК ТаблицаРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСпособовРаспределения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаРасходы.Организация КАК Организация,
	|	ТаблицаРасходы.ПравилоРаспределения КАК ПравилоРаспределения,
	|	ТаблицаРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫБОР КОГДА
	|		ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК АналитикаЗаполнена,
	|	МАКСИМУМ(ТаблицаРасходы.НомерСтроки) КАК ИндексБазы
	|
	|ПОМЕСТИТЬ ТаблицаСпособовРаспределения
	|ИЗ
	|	ВтТаблицаРасходов КАК ТаблицаРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРасходы.Организация,
	|	ТаблицаРасходы.ПравилоРаспределения,
	|	ТаблицаРасходы.АналитикаРасходов,
	|	ВЫБОР КОГДА
	|		ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаРасходов
	|;
	|
	|///////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументов()
	
	ТекстЗапроса = "
	|// Поступление товаров по конкретным документам закупки или по заказам поставщикам.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаЗаполнена
	|		И ДанныеДокумента.Ссылка = ТаблицаСпособовРаспределения.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Поступления товаров по любым документам закупки.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ДанныеДокумента.Организация = ТаблицаСпособовРаспределения.Организация
	|		И ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка)
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация В (&СписокОрганизаций)
	|	И ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Перемещения товаров по конкретным документам перемещения или по заказам на перемещение.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаЗаполнена
	|		И (ДанныеДокумента.Ссылка = ТаблицаСпособовРаспределения.АналитикаРасходов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Перемещения товаров по любым документам перемещения или по любым заказам на перемещение.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ДанныеДокумента.Организация = ТаблицаСпособовРаспределения.Организация
	|		И ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация В (&СписокОрганизаций)
	|	И ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Перемещения товаров по конкретным документам перемещения или по заказам на перемещение.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ОтпускТоваровВОтделение КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаЗаполнена
	|		И ДанныеДокумента.Ссылка = ТаблицаСпособовРаспределения.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Перемещения товаров по любым документам перемещения или по любым заказам на перемещение.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ОтпускТоваровВОтделение КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ДанныеДокумента.Организация = ТаблицаСпособовРаспределения.Организация
	|		И ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация В (&СписокОрганизаций)
	|	И ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Перемещения товаров по конкретным документам перемещения или по заказам на перемещение.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ВозвратТоваровИзОтделения КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаЗаполнена
	|		И ДанныеДокумента.Ссылка = ТаблицаСпособовРаспределения.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Перемещения товаров по любым документам перемещения или по любым заказам на перемещение.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ВозвратТоваровИзОтделения КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ДанныеДокумента.Организация = ТаблицаСпособовРаспределения.Организация
	|		И ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация В (&СписокОрганизаций)
	|	И ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПоступленияТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	УчетСебестоимости.АналитикаВидаУчета          КАК АналитикаВидаУчета,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.РазделУчета                 КАК РазделУчета,
	|	УчетСебестоимости.КоличествоОстаток           КАК Количество,
	|	УчетСебестоимости.СтоимостьОстаток            КАК Стоимость
	|
	|ПОМЕСТИТЬ ВтПоступленияТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаНачалоПериода,
	|		РазделУчета В (ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах), ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВОтделениях))
	|		И АналитикаВидаУчета В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаВидаУчета КАК Отбор)
	|	) КАК УчетСебестоимости
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетСебестоимости.АналитикаВидаУчета          КАК АналитикаВидаУчета,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.РазделУчета                 КАК РазделУчета,
	|	СУММА(
	|		ВЫБОР КОГДА УчетСебестоимости.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	|					ИЛИ УчетСебестоимости.Регистратор ССЫЛКА Документ.ОтпускТоваровВОтделение
	|					ИЛИ УчетСебестоимости.Регистратор ССЫЛКА Документ.ВозвратТоваровИзОтделения ТОГДА
	|			0
	|		ИНАЧЕ
	|			УчетСебестоимости.Количество
	|		КОНЕЦ
	|	)                                             КАК Количество,
	|	СУММА(
	|		ВЫБОР КОГДА УчетСебестоимости.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	|					ИЛИ УчетСебестоимости.Регистратор ССЫЛКА Документ.ОтпускТоваровВОтделение
	|					ИЛИ УчетСебестоимости.Регистратор ССЫЛКА Документ.ВозвратТоваровИзОтделения ТОГДА
	|			0
	|		ИНАЧЕ
	|			УчетСебестоимости.Стоимость
	|		КОНЕЦ
	|	)                                             КАК Стоимость
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК УчетСебестоимости
	|ГДЕ
	|	УчетСебестоимости.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И УчетСебестоимости.Активность
	|	И НЕ УчетСебестоимости.РасчетСебестоимости
	|	И УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И УчетСебестоимости.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах), ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВОтделениях))
	|	И УчетСебестоимости.АналитикаВидаУчета В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаВидаУчета КАК Отбор)
	|	И (УчетСебестоимости.Регистратор ССЫЛКА Документ.ПоступлениеТоваров
	|	ИЛИ УчетСебестоимости.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	|	ИЛИ УчетСебестоимости.Регистратор ССЫЛКА Документ.ОтпускТоваровВОтделение
	|	ИЛИ УчетСебестоимости.Регистратор ССЫЛКА Документ.ВозвратТоваровИзОтделения)
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетСебестоимости.АналитикаВидаУчета,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.РазделУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	АналитикаВидаУчета,
	|	РазделУчета
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ИндексБазы                  КАК ИндексБазы,
	|	УчетСебестоимости.Период                      КАК Период,
	|	УчетСебестоимости.Регистратор                 КАК Регистратор,
	|	УчетСебестоимости.АналитикаВидаУчета          КАК АналитикаВидаУчета,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.РазделУчета                 КАК РазделУчета,
	|	СУММА(УчетСебестоимости.Количество)           КАК Количество,
	|	СУММА(УчетСебестоимости.Стоимость)            КАК Стоимость
	|
	|ПОМЕСТИТЬ ТаблицаПоступленияТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК УчетСебестоимости
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		УчетСебестоимости.Регистратор = ТаблицаДокументов.Ссылка
	|	
	|ГДЕ
	|	УчетСебестоимости.Активность
	|	И НЕ УчетСебестоимости.РасчетСебестоимости
	|	И УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И (УчетСебестоимости.АналитикаУчетаНоменклатуры, УчетСебестоимости.АналитикаВидаУчета, УчетСебестоимости.РазделУчета) В (
	|		ВЫБРАТЬ
	|			ВтПоступленияТоваров.АналитикаУчетаНоменклатуры,
	|			ВтПоступленияТоваров.АналитикаВидаУчета,
	|			ВтПоступленияТоваров.РазделУчета
	|		ИЗ
	|			ВтПоступленияТоваров КАК ВтПоступленияТоваров
	|		)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.ИндексБазы,
	|	УчетСебестоимости.Период,
	|	УчетСебестоимости.Регистратор,
	|	УчетСебестоимости.АналитикаВидаУчета,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.РазделУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСпособовРаспределения.ИндексБазы          КАК ИндексБазы,
	|	&КонецПериода                                    КАК Период,
	|	ДокументыРасчетаСебестоимости.Ссылка             КАК Регистратор,
	|	ВтПоступленияТоваров.АналитикаВидаУчета          КАК АналитикаВидаУчета,
	|	ВтПоступленияТоваров.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|	ВтПоступленияТоваров.РазделУчета                 КАК РазделУчета,
	|	СУММА(ВтПоступленияТоваров.Количество)           КАК Количество,
	|	СУММА(ВтПоступленияТоваров.Стоимость)            КАК Стоимость
	|ИЗ
	|	ВтПоступленияТоваров КАК ВтПоступленияТоваров
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|	ПО
	|		ВтПоступленияТоваров.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК АналитикаВида
	|	ПО
	|		ВтПоступленияТоваров.АналитикаВидаУчета = АналитикаВида.КлючАналитики
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.Организация = АналитикаВида.Организация
	|		И (ТаблицаСпособовРаспределения.АналитикаРасходов = АналитикаВида.Склад
	|			ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = АналитикаНоменклатуры.Номенклатура
	|			ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВТДокументыРасчетаСебестоимости КАК ДокументыРасчетаСебестоимости
	|	ПО
	|		ДокументыРасчетаСебестоимости.Организация = АналитикаВида.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСпособовРаспределения.ИндексБазы,
	|	ДокументыРасчетаСебестоимости.Ссылка,
	|	ВтПоступленияТоваров.АналитикаВидаУчета,
	|	ВтПоступленияТоваров.АналитикаУчетаНоменклатуры,
	|	ВтПоступленияТоваров.РазделУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексБазы
	|;
	|///////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаБазыРаспределения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаСпособовРаспределения.ИндексБазы               КАК ИндексБазы,
	|	ТаблицаСпособовРаспределения.Организация              КАК Организация,
	|	ТаблицаСпособовРаспределения.ПравилоРаспределения     КАК ПравилоРаспределения,
	|	ТаблицаСпособовРаспределения.АналитикаРасходов        КАК АналитикаРасходов,
	|	ТаблицаПоступленияТоваров.Период                      КАК Период,
	|	ТаблицаПоступленияТоваров.Регистратор                 КАК Регистратор,
	|	ТаблицаПоступленияТоваров.Регистратор                 КАК ДокументДвижения,
	|	ТаблицаПоступленияТоваров.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаПоступленияТоваров.АналитикаВидаУчета          КАК АналитикаВидаУчета,
	|	ТаблицаПоступленияТоваров.РазделУчета                 КАК РазделУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаСпособовРаспределения.ПравилоРаспределения = ЗНАЧЕНИЕ(Перечисление.ПравилаРаспределенияНаСебестоимостьТоваров.ПропорциональноСумме)
	|			ТОГДА ЕСТЬNULL(ТаблицаПоступленияТоваров.Стоимость, 0)
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаПоступленияТоваров.Количество, 0)
	|	КОНЕЦ                                                 КАК База
	|
	|ИЗ
	|	ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПоступленияТоваров КАК ТаблицаПоступленияТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаВидаУчета КАК АналитикаВида
	|		ПО
	|			ТаблицаПоступленияТоваров.АналитикаВидаУчета = АналитикаВида.КлючАналитики
	|	ПО
	|		ТаблицаСпособовРаспределения.ИндексБазы = ТаблицаПоступленияТоваров.ИндексБазы
	|		И ТаблицаСпособовРаспределения.Организация = АналитикаВида.Организация
	|ИТОГИ
	|	СУММА(База)
	|ПО
	|	ИндексБазы
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасходов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаРасходы.НомерСтроки)           КАК НомерСтроки,
	|	&КонецПериода                                  КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)         КАК ВидДвижения,
	|	ТаблицаРасходы.Организация                     КАК Организация,
	|	ТаблицаРасходы.СтатьяРасходов                  КАК СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов               КАК АналитикаРасходов,
	|	ТаблицаРасходы.ДокументПоступленияРасходов     КАК ДокументПоступленияРасходов,
	|	ТаблицаСпособовРаспределения.ИндексБазы        КАК ИндексБазы,
	|	СУММА(ТаблицаРасходы.Сумма)                    КАК Сумма,
	|	СУММА(ТаблицаРасходы.СуммаБезНДС)              КАК СуммаБезНДС,
	|	СУММА(ТаблицаРасходы.СуммаРегл)                КАК СуммаРегл,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика) КАК ХозяйственнаяОперация
	|ИЗ
	|	ВтТаблицаРасходов КАК ТаблицаРасходы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаРасходы.ПравилоРаспределения = ТаблицаСпособовРаспределения.ПравилоРаспределения
	|		И ТаблицаРасходы.АналитикаРасходов = ТаблицаСпособовРаспределения.АналитикаРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРасходы.Организация,
	|	ТаблицаРасходы.СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов,
	|	ТаблицаРасходы.ДокументПоступленияРасходов,
	|	ТаблицаСпособовРаспределения.ИндексБазы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОтразитьРаспределениеДопРасходовНаСебестоимостьТоваров(ПараметрыРасчета, ТаблицаДопРасходов)
	
	Если ТаблицаДопРасходов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРегистраСебестоимость         = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя;
	ИмяРегистраРасходыКРаспределению = Метаданные.РегистрыНакопления.РасходыКРаспределениюНаСебестоимость.Имя;
	ИмяРегистраДвиженияНоменклатура  = Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.Имя;
	
	Для Каждого СтрокаРасхода Из ТаблицаДопРасходов Цикл
		
		Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистраРасходыКРаспределению, СтрокаРасхода);
		Запись.ВидДвижения     = ВидДвиженияНакопления.Расход;
		Запись.Стоимость       = СтрокаРасхода.СуммаДопРасходов;
		Запись.СтоимостьБезНДС = СтрокаРасхода.СуммаДопРасходовБезНДС;
		Запись.СтоимостьРегл   = СтрокаРасхода.СтоимостьРегл;
		
		Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистраСебестоимость, СтрокаРасхода);
		Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		Запись.ВидДвижения           = ВидДвиженияНакопления.Приход;
		
		Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистраДвиженияНоменклатура, СтрокаРасхода);
		Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РаспределениеРасходовНаСебестоимость;
		Запись.СтатьяДоходовРасходов = СтрокаРасхода.СтатьяРасходов;
		Запись.Стоимость             = СтрокаРасхода.СуммаДопРасходов;
		Запись.СтоимостьБезНДС       = СтрокаРасхода.СуммаДопРасходовБезНДС;
		Запись.СтоимостьРегл         = СтрокаРасхода.СтоимостьРегл;
		
	КонецЦикла;
	
	КэшироватьСформированныеДвижения(ПараметрыРасчета);
	
КонецПроцедуры

#КонецОбласти // РаспределениеДополнительныхРасходовПоТоварам

////////////////////////////////////////////////////////////////////////////////
// Возвраты прошлых периодов
#Область ВозвратПрошлыхПериодов

Процедура СкорректироватьСтоимостьВозвратовПрошлыхПериодов(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВозвратыПрошлыхПериодов();
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ХозОперацииВозвратыПрошлыхПериодов", ХозОперацииВозвратыПрошлыхПериодов());
	Запрос.УстановитьПараметр("НачалоПериода"         , ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"          , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОписаниеРегистраСебестоимость = ПараметрыРасчета.Движения[Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя];
	
	ПоляТаблицыВозвратов = "ВидДвижения, " + СтрШаблон(ОписаниеРегистраСебестоимость.ИзмеренияРегистра, "") + ", " + СтрШаблон(ОписаниеРегистраСебестоимость.РесурсыРегистра, "");
	ТаблицаВозвратов = ОписаниеРегистраСебестоимость.Таблица.СкопироватьКолонки(ПоляТаблицыВозвратов);
	
	Если Не ПараметрыРасчета.ПредварительныйРасчет Тогда
		
		Пока Выборка.Следующий() Цикл
			
			СформироватьДвижениеСебестоимостьТоваров(ПараметрыРасчета, Выборка, Выборка.ВидДвижения);
			
			СформироватьДвиженияПоОборотнымРегистрамУчета(ПараметрыРасчета, Выборка);
			
		КонецЦикла;
		
		КэшироватьСформированныеДвижения(ПараметрыРасчета);
		
	Иначе
		
		Пока Выборка.Следующий() Цикл
			СтрокаВозврата = ТаблицаВозвратов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВозврата, Выборка);
			СтрокаВозврата.Стоимость              = Выборка.СтоимостьКорректировка;
			СтрокаВозврата.СтоимостьБезНДС        = Выборка.СтоимостьБезНДСКорректировка;
			СтрокаВозврата.СуммаДопРасходов       = Выборка.СуммаДопРасходовКорректировка;
			СтрокаВозврата.СуммаДопРасходовБезНДС = Выборка.СуммаДопРасходовБезНДСКорректировка;
			СтрокаВозврата.СтоимостьРегл          = Выборка.СтоимостьРеглКорректировка;
		КонецЦикла;
		
		ТаблицаВозвратов.ЗаполнитьЗначения(0, "Количество"); // Количество уже есть в движениях
		
	КонецЕсли;
	
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ПараметрыРасчета.МенеджерВременныхТаблиц, "ВТВозвраты", ТаблицаВозвратов, ПоляТаблицыВозвратов);
	
КонецПроцедуры

Функция ТекстЗапросаВозвратыПрошлыхПериодов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Себестоимость.ДокументИсточник КАК Ссылка
	|ПОМЕСТИТЬ ВТРеализацииПрошлыхПериодов
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК Себестоимость
	|ГДЕ
	|	Себестоимость.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Себестоимость.ХозяйственнаяОперация В (&ХозОперацииВозвратыПрошлыхПериодов)
	|	И Себестоимость.ДокументИсточник <> НЕОПРЕДЕЛЕНО
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Себестоимость.ДокументДвижения                   КАК ДокументРеализации,
	|	Себестоимость.АналитикаУчетаНоменклатуры         КАК АналитикаУчетаНоменклатуры,
	|	Себестоимость.АналитикаВидаУчета                 КАК АналитикаВидаУчета,
	|	Себестоимость.РазделУчета                        КАК РазделУчета,
	|	СУММА(Себестоимость.Количество)                  КАК Количество,
	|	СУММА(Себестоимость.Стоимость)                   КАК Стоимость,
	|	СУММА(Себестоимость.СтоимостьБезНДС)             КАК СтоимостьБезНДС,
	|	СУММА(Себестоимость.СуммаДопРасходов)            КАК СуммаДопРасходов,
	|	СУММА(Себестоимость.СуммаДопРасходовБезНДС)      КАК СуммаДопРасходовБезНДС,
	|	СУММА(Себестоимость.СтоимостьРегл)               КАК СтоимостьРегл
	|ПОМЕСТИТЬ ВтСуммыРеализацийПрошлыхПериодов
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Себестоимость
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРеализацииПрошлыхПериодов КАК Продажи
	|		ПО Продажи.Ссылка = Себестоимость.ДокументДвижения
	|ГДЕ
	|	Себестоимость.Период < &НачалоПериода
	|	И Себестоимость.АналитикаВидаУчета В(ВЫБРАТЬ Т.КлючАналитики ИЗ ВТОтборАналитикаВидаУчета КАК Т)
	|	И Себестоимость.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Себестоимость.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	Себестоимость.ДокументДвижения,
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.АналитикаВидаУчета,
	|	Себестоимость.РазделУчета
	|
	|ИМЕЮЩИЕ
	|	СУММА(Себестоимость.Количество) <> 0
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Себестоимость.Период                              КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)            КАК ВидДвижения,
	|	Себестоимость.АналитикаУчетаНоменклатуры          КАК АналитикаУчетаНоменклатуры,
	|	Себестоимость.АналитикаВидаУчета                  КАК АналитикаВидаУчета,
	|	Себестоимость.РазделУчета                         КАК РазделУчета,
	|
	|	ВЫБОР КОГДА Себестоимость.КорАналитикаВидаУчета <> Значение(Справочник.КлючиАналитикиВидаУчета.ПустаяСсылка) ТОГДА
	|			Себестоимость.КорАналитикаВидаУчета
	|		ИНАЧЕ
	|			Себестоимость.АналитикаВидаУчета
	|	КОНЕЦ                                             КАК АналитикаВидаУчетаДляЦены,
	|	ВЫБОР КОГДА Себестоимость.КорАналитикаУчетаНоменклатуры <> Значение(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) ТОГДА
	|			Себестоимость.КорАналитикаУчетаНоменклатуры
	|		ИНАЧЕ
	|			Себестоимость.АналитикаУчетаНоменклатуры
	|	КОНЕЦ                                             КАК АналитикаУчетаНоменклатурыДляЦены,
	|	
	|	СУММА(Себестоимость.Количество)                   КАК Количество,
	|
	|	СУММА(Себестоимость.Стоимость)                    КАК Стоимость,
	|	СУММА(Себестоимость.СтоимостьБезНДС)              КАК СтоимостьБезНДС,
	|
	|	СУММА(Себестоимость.СуммаДопРасходов)             КАК СуммаДопРасходов,
	|	СУММА(Себестоимость.СуммаДопРасходовБезНДС)       КАК СуммаДопРасходовБезНДС,
	|
	|	СУММА(Себестоимость.СтоимостьРегл)                КАК СтоимостьРегл,
	|
	|	Себестоимость.ХозяйственнаяОперация               КАК ХозяйственнаяОперация,
	|	Себестоимость.ДокументДвижения                    КАК ДокументДвижения,
	|	Себестоимость.ДокументИсточник                    КАК ДокументИсточник,
	|	Себестоимость.ПериодПродажи                       КАК ПериодПродажи,
	|
	|	Себестоимость.КорАналитикаВидаУчета               КАК КорАналитикаВидаУчета,
	|	Себестоимость.КорАналитикаУчетаНоменклатуры       КАК КорАналитикаУчетаНоменклатуры,
	|	АналитикиВидаУчета.Организация                    КАК Организация,
	|	Себестоимость.ПодразделениеОрганизации            КАК ПодразделениеОрганизации,
	|	ЕСТЬNULL(КорАналитикиВидаУчета.ИсточникФинансирования, АналитикиВидаУчета.ИсточникФинансирования)  КАК ИсточникФинансирования,
	|	ЕСТЬNULL(КорАналитикиВидаУчета.Склад, АналитикиВидаУчета.Склад)  КАК Склад,
	|	Себестоимость.Контрагент                          КАК Контрагент,
	|	Себестоимость.ДоговорКонтрагента                  КАК ДоговорКонтрагента,
	|
	|	Себестоимость.СтатьяДоходов                       КАК СтатьяДоходов,
	|	Себестоимость.АналитикаДоходов                    КАК АналитикаДоходов,
	|	Себестоимость.СтатьяРасходов                      КАК СтатьяРасходов,
	|	Себестоимость.АналитикаРасходов                   КАК АналитикаРасходов,
	|
	|	НАЧАЛОПЕРИОДА(Себестоимость.ПериодПродажи, МЕСЯЦ) КАК ПериодРеализации,
	|	ВЫБОР
	|		КОГДА Себестоимость.ДокументИсточник <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                             КАК ПоЦенеПродажи
	|
	|ПОМЕСТИТЬ ВтВозвратыПрошлыхПериодов
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК Себестоимость
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК АналитикиВидаУчета
	|	ПО
	|		АналитикиВидаУчета.КлючАналитики = Себестоимость.АналитикаВидаУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК КорАналитикиВидаУчета
	|	ПО
	|		КорАналитикиВидаУчета.КлючАналитики = Себестоимость.КорАналитикаВидаУчета
	|ГДЕ
	|	Себестоимость.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Себестоимость.ХозяйственнаяОперация В (&ХозОперацииВозвратыПрошлыхПериодов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Себестоимость.АналитикаРасходов,
	|	Себестоимость.СтатьяРасходов,
	|	Себестоимость.АналитикаДоходов,
	|	Себестоимость.СтатьяДоходов,
	|	Себестоимость.ДокументДвижения,
	|	Себестоимость.АналитикаВидаУчета,
	|	ВЫБОР
	|		КОГДА Себестоимость.КорАналитикаВидаУчета <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиВидаУчета.ПустаяСсылка)
	|			ТОГДА Себестоимость.КорАналитикаВидаУчета
	|		ИНАЧЕ Себестоимость.АналитикаВидаУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Себестоимость.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|			ТОГДА Себестоимость.КорАналитикаУчетаНоменклатуры
	|		ИНАЧЕ Себестоимость.АналитикаУчетаНоменклатуры
	|	КОНЕЦ,
	|	Себестоимость.ПериодПродажи,
	|	Себестоимость.ДокументИсточник,
	|	Себестоимость.КорАналитикаУчетаНоменклатуры,
	|	Себестоимость.КорАналитикаВидаУчета,
	|	АналитикиВидаУчета.Организация,
	|	Себестоимость.ПодразделениеОрганизации,
	|	ЕСТЬNULL(КорАналитикиВидаУчета.ИсточникФинансирования, АналитикиВидаУчета.ИсточникФинансирования),
	|	ЕСТЬNULL(КорАналитикиВидаУчета.Склад, АналитикиВидаУчета.Склад),
	|	Себестоимость.Контрагент,
	|	Себестоимость.ДоговорКонтрагента,
	|	Себестоимость.ХозяйственнаяОперация,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.Период
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВозвратов.Период                                              КАК Период,
	|	ТаблицаВозвратов.ВидДвижения                                         КАК ВидДвижения,
	|	ТаблицаВозвратов.АналитикаУчетаНоменклатуры                          КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВозвратов.АналитикаВидаУчета                                  КАК АналитикаВидаУчета,
	|	ТаблицаВозвратов.РазделУчета                                         КАК РазделУчета,
	|
	|	ВЫРАЗИТЬ(СтоимостиПродаж.Стоимость / СтоимостиПродаж.Количество * ТаблицаВозвратов.Количество
	|		- ТаблицаВозвратов.Стоимость КАК ЧИСЛО(15, 2))                   КАК СтоимостьКорректировка,
	|	ВЫРАЗИТЬ(СтоимостиПродаж.СтоимостьБезНДС / СтоимостиПродаж.Количество * ТаблицаВозвратов.Количество
	|		- ТаблицаВозвратов.СтоимостьБезНДС КАК ЧИСЛО(15, 2))             КАК СтоимостьБезНДСКорректировка,
	|
	|	ВЫРАЗИТЬ(СтоимостиПродаж.СуммаДопРасходов / СтоимостиПродаж.Количество * ТаблицаВозвратов.Количество
	|		- ТаблицаВозвратов.СуммаДопРасходов КАК ЧИСЛО(15, 2))            КАК СуммаДопРасходовКорректировка,
	|	ВЫРАЗИТЬ(СтоимостиПродаж.СуммаДопРасходовБезНДС / СтоимостиПродаж.Количество * ТаблицаВозвратов.Количество
	|		- ТаблицаВозвратов.СуммаДопРасходовБезНДС КАК ЧИСЛО(15, 2))      КАК СуммаДопРасходовБезНДСКорректировка,
	|
	|	ВЫРАЗИТЬ(СтоимостиПродаж.СтоимостьРегл / СтоимостиПродаж.Количество * ТаблицаВозвратов.Количество
	|		- ТаблицаВозвратов.СтоимостьРегл КАК ЧИСЛО(15, 2))               КАК СтоимостьРеглКорректировка,
	|
	|	ТаблицаВозвратов.ХозяйственнаяОперация                               КАК ХозяйственнаяОперация,
	|	ТаблицаВозвратов.ДокументДвижения                                    КАК ДокументДвижения,
	|	ТаблицаВозвратов.ДокументИсточник                                    КАК ДокументИсточник,
	|	ТаблицаВозвратов.ПериодПродажи                                       КАК ПериодПродажи,
	|
	|	ТаблицаВозвратов.КорАналитикаВидаУчета                               КАК КорАналитикаВидаУчета,
	|	ТаблицаВозвратов.КорАналитикаУчетаНоменклатуры                       КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВозвратов.Организация                                         КАК Организация,
	|	ТаблицаВозвратов.ПодразделениеОрганизации                            КАК ПодразделениеОрганизации,
	|	ТаблицаВозвратов.ИсточникФинансирования                              КАК ИсточникФинансирования,
	|	ТаблицаВозвратов.Склад                                               КАК Склад,
	|	ТаблицаВозвратов.Контрагент                                          КАК Контрагент,
	|	ТаблицаВозвратов.ДоговорКонтрагента                                  КАК ДоговорКонтрагента,
	|
	|	ТаблицаВозвратов.СтатьяДоходов                                       КАК СтатьяДоходов,
	|	ТаблицаВозвратов.АналитикаДоходов                                    КАК АналитикаДоходов,
	|	ТаблицаВозвратов.СтатьяРасходов                                      КАК СтатьяРасходов,
	|	ТаблицаВозвратов.АналитикаРасходов                                   КАК АналитикаРасходов
	|
	|ИЗ
	|	ВтВозвратыПрошлыхПериодов КАК ТаблицаВозвратов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтСуммыРеализацийПрошлыхПериодов КАК СтоимостиПродаж
	|	ПО
	|		ТаблицаВозвратов.ДокументИсточник                    = СтоимостиПродаж.ДокументРеализации
	|		И ТаблицаВозвратов.АналитикаУчетаНоменклатурыДляЦены = СтоимостиПродаж.АналитикаУчетаНоменклатуры
	|		И ТаблицаВозвратов.АналитикаВидаУчетаДляЦены         = СтоимостиПродаж.АналитикаВидаУчета
	|		И ТаблицаВозвратов.РазделУчета                       = СтоимостиПродаж.РазделУчета
	|
	|ГДЕ
	|	ТаблицаВозвратов.ПоЦенеПродажи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВозвратов.Период                                              КАК Период,
	|	ТаблицаВозвратов.ВидДвижения                                         КАК ВидДвижения,
	|	ТаблицаВозвратов.АналитикаУчетаНоменклатуры                          КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВозвратов.АналитикаВидаУчета                                  КАК АналитикаВидаУчета,
	|	ТаблицаВозвратов.РазделУчета                                         КАК РазделУчета,
	|
	|	ВЫРАЗИТЬ(СтоимостьТоваров.Стоимость * ТаблицаВозвратов.Количество
	|		- ТаблицаВозвратов.Стоимость КАК ЧИСЛО(15, 2))                   КАК СтоимостьКорректировка,
	|	ВЫРАЗИТЬ(СтоимостьТоваров.СтоимостьБезНДС * ТаблицаВозвратов.Количество
	|		- ТаблицаВозвратов.СтоимостьБезНДС КАК ЧИСЛО(15, 2))             КАК СтоимостьБезНДСКорректировка,
	|
	|	ВЫРАЗИТЬ(СтоимостьТоваров.СтоимостьДопРасходы * ТаблицаВозвратов.Количество
	|		- ТаблицаВозвратов.СуммаДопРасходов КАК ЧИСЛО(15, 2))            КАК СуммаДопРасходовКорректировка,
	|	ВЫРАЗИТЬ(СтоимостьТоваров.СтоимостьДопРасходыБезНДС * ТаблицаВозвратов.Количество
	|		- ТаблицаВозвратов.СуммаДопРасходовБезНДС КАК ЧИСЛО(15, 2))      КАК СуммаДопРасходовБезНДСКорректировка,
	|
	|	ВЫРАЗИТЬ(СтоимостьТоваров.СтоимостьРегл * ТаблицаВозвратов.Количество
	|		- ТаблицаВозвратов.СтоимостьРегл КАК ЧИСЛО(15, 2))               КАК СтоимостьРеглКорректировка,
	|
	|	ТаблицаВозвратов.ХозяйственнаяОперация                               КАК ХозяйственнаяОперация,
	|	ТаблицаВозвратов.ДокументДвижения                                    КАК ДокументДвижения,
	|	ТаблицаВозвратов.ДокументИсточник                                    КАК ДокументИсточник,
	|	ТаблицаВозвратов.ПериодПродажи                                       КАК ПериодПродажи,
	|
	|	ТаблицаВозвратов.КорАналитикаВидаУчета                               КАК КорАналитикаВидаУчета,
	|	ТаблицаВозвратов.КорАналитикаУчетаНоменклатуры                       КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВозвратов.Организация                                         КАК Организация,
	|	ТаблицаВозвратов.ПодразделениеОрганизации                            КАК ПодразделениеОрганизации,
	|	ТаблицаВозвратов.ИсточникФинансирования                              КАК ИсточникФинансирования,
	|	ТаблицаВозвратов.Склад                                               КАК Склад,
	|	ТаблицаВозвратов.Контрагент                                          КАК Контрагент,
	|	ТаблицаВозвратов.ДоговорКонтрагента                                  КАК ДоговорКонтрагента,
	|
	|	ТаблицаВозвратов.СтатьяДоходов                                       КАК СтатьяДоходов,
	|	ТаблицаВозвратов.АналитикаДоходов                                    КАК АналитикаДоходов,
	|	ТаблицаВозвратов.СтатьяРасходов                                      КАК СтатьяРасходов,
	|	ТаблицаВозвратов.АналитикаРасходов                                   КАК АналитикаРасходов
	|
	|ИЗ
	|	ВтВозвратыПрошлыхПериодов КАК ТаблицаВозвратов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтоимостьТоваров КАК СтоимостьТоваров
	|	ПО
	|		ТаблицаВозвратов.ПериодРеализации                    = СтоимостьТоваров.Период
	|		И ТаблицаВозвратов.АналитикаУчетаНоменклатурыДляЦены = СтоимостьТоваров.АналитикаУчетаНоменклатуры
	|		И ТаблицаВозвратов.АналитикаВидаУчетаДляЦены         = СтоимостьТоваров.АналитикаВидаУчета
	|		И ТаблицаВозвратов.РазделУчета                       = СтоимостьТоваров.РазделУчета
	|
	|ГДЕ
	|	НЕ ТаблицаВозвратов.ПоЦенеПродажи
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // ВозвратПрошлыхПериодов

///////////////////////////////////////////////////////////////////////////////
// Процедуры расчета стоимости
#Область РасчетСтоимости

// Функция выполняет корректировку стоимости и количества внешних приходов в узлах при расчете стоимости по фифо.
//
// Параметры:
// Запрос - запрос по формированию узлов корректировки.
//
// Возвращаемое значение
// Таблица значений - узлы корректировки стоимости.
//
Функция ПодготовитьДанныеДляРасчетаПоФИФО(Запрос)
	
	// Формирование таблицы узлов.
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДляФИФО","");
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Себестоимость.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|	Себестоимость.АналитикаВидаУчета          КАК АналитикаВидаУчета,
	|	Себестоимость.РазделУчета                 КАК РазделУчета,
	|	ВЫБОР КОГДА Себестоимость.Количество > 0
	|			ТОГДА Себестоимость.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ                                     КАК КоличествоОстаток,
	|	ВЫБОР КОГДА Себестоимость.Количество > 0
	|			ТОГДА Себестоимость.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ                                     КАК КоличествоОстатокНаКонецПериода,
	|	0                                         КАК СтоимостьОстаток,
	|	0                                         КАК СтоимостьБезНДСОстаток,
	|	0                                         КАК СтоимостьРеглОстаток,
	|	ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, 1)  КАК Период
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	ВТКэшРасчетныеОстаткиСебестоимостьТоваров КАК Себестоимость
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтАналитикаНоменклатуры КАК Таблица
	|	ПО
	|		Себестоимость.АналитикаВидаУчета = Таблица.АналитикаВидаУчета
	|		И Себестоимость.АналитикаУчетаНоменклатуры = Таблица.АналитикаУчетаНоменклатуры
	|		И Себестоимость.РазделУчета = Таблица.РазделУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Себестоимость.АналитикаВидаУчета,
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 
	|ПОМЕСТИТЬ ТаблицаПериодыПартий
	|";
	Запрос.Выполнить();
	
	Запрос.Текст = "
	|УНИЧТОЖИТЬ ТаблицаПериодыПартий
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры             КАК АналитикаУчетаНоменклатуры,
	|	СебестоимостьТоваров.АналитикаВидаУчета                     КАК АналитикаВидаУчета,
	|	СебестоимостьТоваров.РазделУчета                            КАК РазделУчета,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(СебестоимостьТоваров.Период, ДЕНЬ))  КАК Период
	|
	|ПОМЕСТИТЬ ТаблицаПериодыПартий
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК СебестоимостьТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатков КАК ТаблицаОстатков
	|		ПО
	|			СебестоимостьТоваров.АналитикаУчетаНоменклатуры = ТаблицаОстатков.АналитикаУчетаНоменклатуры
	|			И СебестоимостьТоваров.АналитикаВидаУчета = ТаблицаОстатков.АналитикаВидаУчета
	|			И СебестоимостьТоваров.РазделУчета = ТаблицаОстатков.РазделУчета
	|			И ТаблицаОстатков.КоличествоОстаток <> 0
	|ГДЕ
	|	СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СебестоимостьТоваров.Период < ТаблицаОстатков.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры,
	|	СебестоимостьТоваров.АналитикаВидаУчета,
	|	СебестоимостьТоваров.РазделУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыПартий.АналитикаУчетаНоменклатуры           КАК АналитикаУчетаНоменклатуры,
	|	ПериодыПартий.АналитикаВидаУчета                   КАК АналитикаВидаУчета,
	|	ПериодыПартий.РазделУчета                          КАК РазделУчета,
	|	ПериодыПартий.Период                               КАК Период,
	|	СУММА(ЕСТЬNULL(Себестоимость.Количество, 0))       КАК Количество,
	|	СУММА(ЕСТЬNULL(Себестоимость.Стоимость, 0))        КАК Стоимость,
	|	СУММА(ЕСТЬNULL(Себестоимость.СтоимостьБезНДС, 0))  КАК СтоимостьБезНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(Себестоимость.Количество, 0) <> 0
	|				ТОГДА ЕСТЬNULL(Себестоимость.СтоимостьРегл, 0)
	|			ИНАЧЕ 0 // доп. расходы
	|		КОНЕЦ)                                         КАК СтоимостьРегл
	|ПОМЕСТИТЬ ТаблицаВнешнихПоступлений
	|ИЗ
	|	ТаблицаПериодыПартий КАК ПериодыПартий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКэшЗаписиСебестоимостьТоваров КАК Себестоимость
	|		ПО
	|			ПериодыПартий.АналитикаУчетаНоменклатуры = Себестоимость.АналитикаУчетаНоменклатуры
	|			И ПериодыПартий.АналитикаВидаУчета = Себестоимость.АналитикаВидаУчета
	|			И ПериодыПартий.РазделУчета = Себестоимость.РазделУчета
	|			И Себестоимость.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
				// Партии в течении дня усредняются
	|			И (НАЧАЛОПЕРИОДА(Себестоимость.Период, ДЕНЬ) = ПериодыПартий.Период)
	|			И (Себестоимость.ХозяйственнаяОперация В (&ХозОперацииПоступлениеВнешнее))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыПартий.АналитикаУчетаНоменклатуры,
	|	ПериодыПартий.АналитикаВидаУчета,
	|	ПериодыПартий.РазделУчета,
	|	ПериодыПартий.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.АналитикаУчетаНоменклатуры       КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаОстатков.АналитикаВидаУчета               КАК АналитикаВидаУчета,
	|	ТаблицаОстатков.РазделУчета                      КАК РазделУчета,
	|	ВЫБОР КОГДА ТаблицаОстатков.КоличествоОстаток > ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0)
	|			ТОГДА ТаблицаОстатков.КоличествоОстаток - ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ                                            КАК НовыйКоличествоОстаток,
	|	ТаблицаОстатков.КоличествоОстатокНаКонецПериода  КАК КоличествоОстатокНаКонецПериода,
	|	ТаблицаОстатков.СтоимостьОстаток
	|	+ ВЫБОР
	|		КОГДА ТаблицаОстатков.КоличествоОстаток >= ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0)
	|			ТОГДА ЕСТЬNULL(ТаблицаВнешнихПоступлений.Стоимость, 0)
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаВнешнихПоступлений.Стоимость, 0) * ТаблицаОстатков.КоличествоОстаток КАК ЧИСЛО(28, 10))
	|				/ ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 1)
	|	КОНЕЦ                                            КАК НоваяСтоимостьОстаток,
	|	ТаблицаОстатков.СтоимостьБезНДСОстаток
	|	+ ВЫБОР
	|		КОГДА ТаблицаОстатков.КоличествоОстаток >= ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0)
	|			ТОГДА ЕСТЬNULL(ТаблицаВнешнихПоступлений.СтоимостьБезНДС, 0)
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаВнешнихПоступлений.СтоимостьБезНДС, 0) * ТаблицаОстатков.КоличествоОстаток КАК ЧИСЛО(28, 10))
	|				/ ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 1)
	|	КОНЕЦ                                            КАК НоваяСтоимостьБезНДСОстаток,
	|	ТаблицаОстатков.СтоимостьРеглОстаток
	|	+ ВЫБОР
	|		КОГДА ТаблицаОстатков.КоличествоОстаток >= ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 0)
	|			ТОГДА ЕСТЬNULL(ТаблицаВнешнихПоступлений.СтоимостьРегл, 0)
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаВнешнихПоступлений.СтоимостьРегл, 0) * ТаблицаОстатков.КоличествоОстаток КАК ЧИСЛО(28, 10))
	|				/ ЕСТЬNULL(ТаблицаВнешнихПоступлений.Количество, 1)
	|	КОНЕЦ                                            КАК НоваяСтоимостьРеглОстаток,
	|	ТаблицаВнешнихПоступлений.Период                 КАК Период
	|ПОМЕСТИТЬ ТаблицаНовыхОстатков
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВнешнихПоступлений КАК ТаблицаВнешнихПоступлений
	|		ПО ТаблицаОстатков.АналитикаУчетаНоменклатуры = ТаблицаВнешнихПоступлений.АналитикаУчетаНоменклатуры
	|			И ТаблицаОстатков.АналитикаВидаУчета = ТаблицаВнешнихПоступлений.АналитикаВидаУчета
	|			И ТаблицаОстатков.РазделУчета = ТаблицаВнешнихПоступлений.РазделУчета
	|			И ТаблицаОстатков.КоличествоОстаток <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаВнешнихПоступлений
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНовыхОстатков.АналитикаУчетаНоменклатуры       КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаНовыхОстатков.АналитикаВидаУчета               КАК АналитикаВидаУчета,
	|	ТаблицаНовыхОстатков.РазделУчета                      КАК РазделУчета,
	|	ТаблицаНовыхОстатков.НовыйКоличествоОстаток           КАК КоличествоОстаток,
	|	ТаблицаНовыхОстатков.КоличествоОстатокНаКонецПериода  КАК КоличествоОстатокНаКонецПериода,
	|	ТаблицаНовыхОстатков.НоваяСтоимостьОстаток            КАК СтоимостьОстаток,
	|	ТаблицаНовыхОстатков.НоваяСтоимостьБезНДСОстаток      КАК СтоимостьБезНДСОстаток,
	|	ТаблицаНовыхОстатков.НоваяСтоимостьРеглОстаток        КАК СтоимостьРеглОстаток,
	|	ТаблицаНовыхОстатков.Период                           КАК Период
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	ТаблицаНовыхОстатков КАК ТаблицаНовыхОстатков
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНовыхОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	ТаблицаПериодыПартий КАК ТаблицаПериодыПартий
	|";
	Запрос.УстановитьПараметр("ХозОперацииПоступлениеВнешнее", ХозОперацииВнешнееПоступлениеФИФО());
	Пока Не Запрос.Выполнить().Пустой() Цикл 
		// Максимальное количество выполнений запроса - максимальному количеству поступлений товара на склад.
	КонецЦикла;
	
	// Выполняется корректировка количества и стоимости внешних приходов в узел.
	Запрос.Текст = "
	|УНИЧТОЖИТЬ ТаблицаПериодыПартий
	|;
	|///////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУзлыКорректировки.АналитикаУчетаНоменклатуры    КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаУзлыКорректировки.АналитикаВидаУчета            КАК АналитикаВидаУчета,
	|	ТаблицаУзлыКорректировки.РазделУчета                   КАК РазделУчета,
	|	ТаблицаУзлыКорректировки.Количество
	|		 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|		 + ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0)  КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|			 + ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ (ТаблицаУзлыКорректировки.Стоимость - ЕСТЬNULL(ТаблицаОстатков.СтоимостьОстаток, 0)) 
	|	КОНЕЦ                                                  КАК Стоимость,
	|	ВЫБОР
	|		КОГДА ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|			 + ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ (ТаблицаУзлыКорректировки.СтоимостьБезНДС - ЕСТЬNULL(ТаблицаОстатков.СтоимостьБезНДСОстаток, 0)) 
	|	КОНЕЦ                                                  КАК СтоимостьБезНДС,
	|	ТаблицаУзлыКорректировки.СтоимостьДопРасходы - ВЫБОР
	|		КОГДА ТаблицаУзлыКорректировки.Количество > 0 ТОГДА
	|			ВЫРАЗИТЬ(ТаблицаУзлыКорректировки.СтоимостьДопРасходы * ТаблицаОстатков.КоличествоОстатокНаКонецПериода КАК ЧИСЛО(28, 10)) / ТаблицаУзлыКорректировки.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ                                                  КАК СтоимостьДопРасходы,
	|	ТаблицаУзлыКорректировки.СтоимостьДопРасходыБезНДС - ВЫБОР
	|		КОГДА ТаблицаУзлыКорректировки.Количество > 0 ТОГДА
	|			ВЫРАЗИТЬ(ТаблицаУзлыКорректировки.СтоимостьДопРасходыБезНДС * ТаблицаОстатков.КоличествоОстатокНаКонецПериода КАК ЧИСЛО(28, 10)) / ТаблицаУзлыКорректировки.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ                                                  КАК СтоимостьДопРасходыБезНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаУзлыКорректировки.Количество
	|			 - ЕСТЬNULL(ТаблицаОстатков.КоличествоОстатокНаКонецПериода, 0)
	|			 + ЕСТЬNULL(ТаблицаОстатков.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ (ТаблицаУзлыКорректировки.СтоимостьРегл - ЕСТЬNULL(ТаблицаОстатков.СтоимостьРеглОстаток, 0)) +
	|			ТаблицаУзлыКорректировки.СтоимостьДопРасходовРегл - ВЫБОР
	|				КОГДА ТаблицаУзлыКорректировки.Количество > 0 ТОГДА
	|					ВЫРАЗИТЬ(ТаблицаУзлыКорректировки.СтоимостьДопРасходовРегл * ТаблицаОстатков.КоличествоОстатокНаКонецПериода КАК ЧИСЛО(28, 10)) / ТаблицаУзлыКорректировки.Количество
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ                                                  КАК СтоимостьРегл
	|ИЗ
	|	ТаблицаУзлыКорректировки КАК ТаблицаУзлыКорректировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатков КАК ТаблицаОстатков
	|		ПО
	|			ТаблицаУзлыКорректировки.АналитикаУчетаНоменклатуры = ТаблицаОстатков.АналитикаУчетаНоменклатуры
	|			И ТаблицаУзлыКорректировки.АналитикаВидаУчета = ТаблицаОстатков.АналитикаВидаУчета
	|			И ТаблицаУзлыКорректировки.РазделУчета = ТаблицаОстатков.РазделУчета
	|";
	Возврат Запрос.Выполнить();
	
КонецФункции

// Функция формирует временную таблицу узлов корректировки - ВтУзлыКорректировки.
//
// Параметры:
// НачалоПериода - дата, начало периода для сбора данных о движении товаров.
// КонецПериода - дата, окончание периода для сбора данных о движении товаров.
// МенеджерВременныхТаблиц - менеджер временных таблиц.
//
// Возвращаемое значение
// Количество узлов корректировки.
//
Функция СформироватьУзлыКорректировкиСтоимостиСписания(ПараметрыРасчета)
	
	ТекстЗапроса = "
	// Данные об аналитике для расчета.
	|//ПоВсемТоварам ВЫБРАТЬ РАЗЛИЧНЫЕ
	|//ПоВсемТоварам	УчетСебестоимости.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|//ПоВсемТоварам	УчетСебестоимости.АналитикаВидаУчета          КАК АналитикаВидаУчета,
	|//ПоВсемТоварам	УчетСебестоимости.РазделУчета                 КАК РазделУчета
	|//ПоВсемТоварам ПОМЕСТИТЬ ВтАналитикаНоменклатуры
	|//ПоВсемТоварам ИЗ
	|//ПоВсемТоварам	РегистрНакопления.СебестоимостьТоваров КАК УчетСебестоимости
	|//ПоВсемТоварам ГДЕ
	|//ПоВсемТоварам	УчетСебестоимости.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|//ПоВсемТоварам	И УчетСебестоимости.ВидДвижения = Значение(ВидДвиженияНакопления.Расход)
	|//ПоВсемТоварам	И УчетСебестоимости.Активность
	|//ПоВсемТоварам	И УчетСебестоимости.АналитикаВидаУчета В(ВЫБРАТЬ Т.КлючАналитики ИЗ ВТОтборАналитикаВидаУчета КАК Т)
	|//ПоВсемТоварам ;
	|////////////////////////////////////////////////////////////////////////////////
	|
	// Данные о движении товаров за период.
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.АналитикаУчетаНоменклатуры       КАК АналитикаУчетаНоменклатуры,
	|	ВложенныйЗапрос.АналитикаВидаУчета               КАК АналитикаВидаУчета,
	|	ВложенныйЗапрос.РазделУчета                      КАК РазделУчета,
	|	СУММА(ВложенныйЗапрос.Количество)                КАК Количество,
	|	СУММА(ВложенныйЗапрос.Стоимость)                 КАК Стоимость,
	|	СУММА(ВложенныйЗапрос.СтоимостьБезНДС)           КАК СтоимостьБезНДС,
	|	СУММА(ВложенныйЗапрос.СуммаДопРасходов)          КАК СтоимостьДопРасходы,
	|	СУММА(ВложенныйЗапрос.СуммаДопРасходовБезНДС)    КАК СтоимостьДопРасходыБезНДС,
	|	СУММА(ВложенныйЗапрос.СтоимостьРегл)             КАК СтоимостьРегл,
	|	СУММА(ВложенныйЗапрос.СтоимостьДопРасходовРегл)  КАК СтоимостьДопРасходовРегл
	|
	|//ДляФИФО ПОМЕСТИТЬ ТаблицаУзлыКорректировки
	|ИЗ
	|
	|	(ВЫБРАТЬ
	// Данные по всем движениям за период. По 'внешним' приходам собираются суммы и количество поступления.
	|		УчетСебестоимости.АналитикаУчетаНоменклатуры   КАК АналитикаУчетаНоменклатуры,
	|		УчетСебестоимости.АналитикаВидаУчета           КАК АналитикаВидаУчета,
	|		УчетСебестоимости.РазделУчета                  КАК РазделУчета,
	|		ВЫБОР КОГДА УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				УчетСебестоимости.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ                                          КАК Количество,
			// Данные о суммах внешних поступлений.
	|		ВЫБОР
	|			КОГДА УчетСебестоимости.ХозяйственнаяОперация В (&ХозОперацииПоступление)
	|					И УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				УчетСебестоимости.Стоимость
	|			ИНАЧЕ 0
	|		КОНЕЦ                                          КАК Стоимость,
	|		ВЫБОР
	|			КОГДА УчетСебестоимости.ХозяйственнаяОперация В (&ХозОперацииПоступление)
	|					И УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				УчетСебестоимости.СтоимостьБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ                                          КАК СтоимостьБезНДС,
	|		ВЫБОР КОГДА УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				УчетСебестоимости.СуммаДопРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ                                          КАК СуммаДопРасходов,
	|		ВЫБОР КОГДА УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				УчетСебестоимости.СуммаДопРасходовБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ                                          КАК СуммаДопРасходовБезНДС,
	|		ВЫБОР
	|			КОГДА УчетСебестоимости.ХозяйственнаяОперация В (&ХозОперацииПоступление)
	|					И УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				УчетСебестоимости.СтоимостьРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ                                          КАК СтоимостьРегл,
	|		ВЫБОР
	|			КОГДА УчетСебестоимости.ХозяйственнаяОперация В (&ХозОперацииПоступление)
	|					И УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					И УчетСебестоимости.Количество = 0 ТОГДА
	|				УчетСебестоимости.СтоимостьРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ                                          КАК СтоимостьДопРасходовРегл
	|	ИЗ
	|		ВТКэшЗаписиСебестоимостьТоваров КАК УчетСебестоимости
	|	//ПоВсемТоварам ГДЕ
	|		//ПоВсемТоварам (УчетСебестоимости.АналитикаУчетаНоменклатуры,
	|		//ПоВсемТоварам		УчетСебестоимости.АналитикаВидаУчета,
	|		//ПоВсемТоварам		УчетСебестоимости.РазделУчета)
	|		//ПоВсемТоварам		В
	|		//ПоВсемТоварам			(ВЫБРАТЬ
	|		//ПоВсемТоварам				АналитикаУчетаНоменклатуры,
	|		//ПоВсемТоварам				АналитикаВидаУчета,
	|		//ПоВсемТоварам				РазделУчета
	|		//ПоВсемТоварам			ИЗ ВтАналитикаНоменклатуры)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	// Данные по остаткам на начало расчетного периода.
	|	ВЫБРАТЬ
	|		УчетСебестоимости.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|		УчетСебестоимости.АналитикаВидаУчета             КАК АналитикаВидаУчета,
	|		УчетСебестоимости.РазделУчета                    КАК РазделУчета,
	|		УчетСебестоимости.КоличествоОстаток              КАК Количество,
	|		УчетСебестоимости.СтоимостьОстаток               КАК Стоимость,
	|		УчетСебестоимости.СтоимостьБезНДСОстаток         КАК СтоимостьБезНДС,
	|		УчетСебестоимости.СуммаДопРасходовОстаток        КАК СуммаДопРасходов,
	|		УчетСебестоимости.СуммаДопРасходовБезНДСОстаток  КАК СуммаДопРасходовБезНДС,
	|		УчетСебестоимости.СтоимостьРеглОстаток           КАК СтоимостьРегл,
	|		0                                                КАК СтоимостьДопРасходовРегл
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров.Остатки(
	|			&ГраницаНачалоПериода,
	|			АналитикаВидаУчета В(ВЫБРАТЬ Т.КлючАналитики ИЗ ВТОтборАналитикаВидаУчета КАК Т)
	|			//ПоВсемТоварам И (АналитикаУчетаНоменклатуры,
	|			//ПоВсемТоварам		АналитикаВидаУчета,
	|			//ПоВсемТоварам		РазделУчета)
	|			//ПоВсемТоварам		В
	|			//ПоВсемТоварам			(ВЫБРАТЬ
	|			//ПоВсемТоварам				АналитикаУчетаНоменклатуры,
	|			//ПоВсемТоварам				АналитикаВидаУчета,
	|			//ПоВсемТоварам				РазделУчета
	|			//ПоВсемТоварам			ИЗ ВтАналитикаНоменклатуры)
	|		) КАК УчетСебестоимости
	|
	|	ГДЕ
	|		УчетСебестоимости.КоличествоОстаток > 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
			// Данные о возвратах прошлых периодов.
	|		УчетСебестоимости.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|		УчетСебестоимости.АналитикаВидаУчета          КАК АналитикаВидаУчета,
	|		УчетСебестоимости.РазделУчета                 КАК РазделУчета,
	|
	|		ВЫБОР
	|			КОГДА УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				УчетСебестоимости.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК Количество,
			// Данные о суммах внешних поступлений.
	|		ВЫБОР
	|			КОГДА УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				УчетСебестоимости.Стоимость
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК Стоимость,
	|		ВЫБОР
	|			КОГДА УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				УчетСебестоимости.СтоимостьБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК СтоимостьБезНДС,
	|
	|		ВЫБОР
	|			КОГДА УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				УчетСебестоимости.СуммаДопРасходов
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК СуммаДопРасходов,
	|		ВЫБОР
	|			КОГДА УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				УчетСебестоимости.СуммаДопРасходовБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК СуммаДопРасходовБезНДС,
	|		ВЫБОР
	|			КОГДА УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				УчетСебестоимости.СтоимостьРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ                                        КАК СтоимостьРегл,
	|		0                                            КАК СтоимостьДопРасходовРегл
	|	ИЗ
	|		ВТВозвраты КАК УчетСебестоимости
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	// Данные по доп. расходам при предварительном расчете
	|	ВЫБРАТЬ // Допраходы
	|		Таблица.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|		Таблица.АналитикаВидаУчета          КАК АналитикаВидаУчета,
	|		Таблица.РазделУчета                 КАК РазделУчета,
	|		0                                   КАК Количество,
	|		0                                   КАК Стоимость,
	|		0                                   КАК СтоимостьБезНДС,
	|		Таблица.СуммаДопРасходов            КАК СуммаДопРасходов,
	|		Таблица.СуммаДопРасходовБезНДС      КАК СуммаДопРасходовБезНДС,
	|		0                                   КАК СтоимостьРегл,
	|		Таблица.СтоимостьРегл               КАК СтоимостьДопРасходовРегл
	|	ИЗ
	|		ДопРасходы КАК Таблица
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.АналитикаУчетаНоменклатуры,
	|	ВложенныйЗапрос.АналитикаВидаУчета,
	|	ВложенныйЗапрос.РазделУчета
	|";
	Если Не ПараметрыРасчета.ПредварительныйРасчет Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПоВсемТоварам", "");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ХозОперацииПоступление", ХозОперацииВнешнееПоступление());
	Запрос.УстановитьПараметр("НачалоПериода"         , ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"          , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	Запрос.УстановитьПараметр("ГраницаНачалоПериода"  , ПараметрыРасчета.РасчетныйПериод.ГраницаНачалоПериода);
	Запрос.УстановитьПараметр("ГраницаКонецПериода"   , ПараметрыРасчета.РасчетныйПериод.ГраницаКонецПериода);
	
	Если ПараметрыРасчета.ПредварительныйРасчет
	 Или ПараметрыРасчета.МетодОценки = Перечисления.МетодыОценкиСтоимостиТоваров.ПоСредней Тогда
		
		ТаблицаУзлов = Запрос.Выполнить().Выгрузить();
		
	Иначе// МетодОценкиЗапасов = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФО
		
		ТаблицаУзлов = ПодготовитьДанныеДляРасчетаПоФИФО(Запрос).Выгрузить();
		
	КонецЕсли;
	
	МассивУзлов = Новый Массив;
	Для СчетчикУзлов = 1 По ТаблицаУзлов.Количество() Цикл
		МассивУзлов.Добавить(СчетчикУзлов);
	КонецЦикла;
	
	ТаблицаУзлов.Колонки.Добавить("НомерУзла", ОбщегоНазначения.ОписаниеТипаЧисло(25, 0));
	ТаблицаУзлов.ЗагрузитьКолонку(МассивУзлов, "НомерУзла");
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВтУзлыКорректировки
	|
	|ИЗ
	|	&ТаблицаУзлов КАК ТаблицаУзлов
	|
	|ИНДЕКСИРОВАТЬ ПО НомерУзла
	|";
	Запрос.УстановитьПараметр("ТаблицаУзлов", ТаблицаУзлов);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

// Процедура выполняет расчет себестоимости аналитики номенклатуры в узлах корректировки стоимости списания.
// Результатом работы данной процедуры будет временная таблица "ТаблицаРешений", содержащая себестоимость
// в каждом узле корректировки.
//
// Параметры:
// НачалоПериода - дата, начало периода для сбора данных о движении товаров.
// КонецПериода - дата, окончание периода для сбора данных о движении товаров.
// МенеджерВременныхТаблиц - менеджер временных таблиц для сохранения результата.
//
Процедура РассчитатьСтоимостьЗапасов(ПараметрыРасчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода" , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УзлыКорректировки.НомерУзла                                             КАК НомерСтрокиУравнения,
	|	ВЫРАЗИТЬ(УзлыКорректировки.Стоимость КАК ЧИСЛО(28,10))                  КАК Стоимость,
	|	ВЫРАЗИТЬ(УзлыКорректировки.СтоимостьБезНДС КАК ЧИСЛО(28,10))            КАК СтоимостьБезНДС,
	|	ВЫРАЗИТЬ(УзлыКорректировки.СтоимостьДопРасходы КАК ЧИСЛО(28,10))        КАК СтоимостьДопРасходы,
	|	ВЫРАЗИТЬ(УзлыКорректировки.СтоимостьДопРасходыБезНДС КАК ЧИСЛО(28,10))  КАК СтоимостьДопРасходыБезНДС,
	|	ВЫРАЗИТЬ(УзлыКорректировки.СтоимостьРегл КАК ЧИСЛО(28,10))              КАК СтоимостьРегл
	|ПОМЕСТИТЬ МатрицаСвободныхКоэффициентов
	|ИЗ
	|	ВтУзлыКорректировки КАК УзлыКорректировки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтрокиУравнения
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	// Подготовим левую часть таблицы уравнений (коэффициенты уравнения)
	|ВЫБРАТЬ
	|	УзлыКорректировки.НомерУзла   КАК НомерСтрокиУравнения,
	|	УзлыКорректировки.НомерУзла   КАК НомерПеременной,
	|	УзлыКорректировки.Количество  КАК Коэффициент
	|ПОМЕСТИТЬ МатрицаКоэффициентов
	|ИЗ
	|	ВтУзлыКорректировки КАК УзлыКорректировки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	УчетСебестоимости.НомерУзлаПриемник    КАК НомерСтрокиУравнения,
	|	УчетСебестоимости.НомерУзлаИсточник    КАК НомерПеременной,
	|	- СУММА(УчетСебестоимости.Количество)  КАК Коэффициент
	|ИЗ
	|(ВЫБРАТЬ
	|	УзлыКорректировкиИсточник.НомерУзла  КАК НомерУзлаИсточник,
	|	УзлыКорректировкиПриемник.НомерУзла  КАК НомерУзлаПриемник,
	|	ВЫБОР
	|		КОГДА УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			УчетСебестоимости.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК УчетСебестоимости
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтУзлыКорректировки КАК УзлыКорректировкиИсточник
	|		ПО
	|		УчетСебестоимости.АналитикаУчетаНоменклатуры = УзлыКорректировкиИсточник.АналитикаУчетаНоменклатуры
	|		И УчетСебестоимости.АналитикаВидаУчета       = УзлыКорректировкиИсточник.АналитикаВидаУчета
	|		И УчетСебестоимости.РазделУчета              = УзлыКорректировкиИсточник.РазделУчета
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтУзлыКорректировки КАК УзлыКорректировкиПриемник
	|		ПО
	|		УчетСебестоимости.КорАналитикаУчетаНоменклатуры = УзлыКорректировкиПриемник.АналитикаУчетаНоменклатуры
	|		И УчетСебестоимости.КорАналитикаВидаУчета       = УзлыКорректировкиПриемник.АналитикаВидаУчета
	|		И УчетСебестоимости.КорРазделУчета              = УзлыКорректировкиПриемник.РазделУчета
	|
	|ГДЕ
	|	УчетСебестоимости.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И УчетСебестоимости.Активность  = ИСТИНА
	|	И НЕ УзлыКорректировкиИсточник.НомерУзла ЕСТЬ NULL
	|	И НЕ УзлыКорректировкиПриемник.НомерУзла ЕСТЬ NULL
	|
	|	) КАК УчетСебестоимости
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетСебестоимости.НомерУзлаИсточник,
	|	УчетСебестоимости.НомерУзлаПриемник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтрокиУравнения,
	|	НомерПеременной
	|";
	Запрос.Выполнить();
	
	Если ПараметрыРасчета.ИспользоватьПлатформенныйМетодДляРешенияСЛАУ Тогда
		РешитьСЛАУСредствамиПлатформы(ПараметрыРасчета.МенеджерВременныхТаблиц, ПараметрыРасчета.ТребуемаяТочность, ПараметрыРасчета.МаксКоличествоИтераций);
	Иначе
		// Метод простых итераций сходится, так как |a_ii| >= sum_j|a_ij|, i = 1, n
		// a_ii - остаток на начало периода + приход на склад
		// a_ij - перемещение со склада_j на склад_i
		РешитьСЛАУ(ПараметрыРасчета.МенеджерВременныхТаблиц, ПараметрыРасчета.ТребуемаяТочность, ПараметрыРасчета.МаксКоличествоИтераций);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // РасчетСтоимости

///////////////////////////////////////////////////////////////////////////////
// Регистрация стоимости

Процедура ЗарегистрироватьСтоимостьТоваров(ПараметрыРасчета)
	
	Запрос = Новый Запрос("
	|
	|УНИЧТОЖИТЬ ВТКэшСтоимостьТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыРасчетаСебестоимости.Ссылка          КАК Регистратор,
	|	&НачалоПериода                                КАК Период,
	|	ИСТИНА                                        КАК Активность,
	|	УзлыКорректировки.АналитикаВидаУчета          КАК АналитикаВидаУчета,
	|	УзлыКорректировки.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|	УзлыКорректировки.РазделУчета                 КАК РазделУчета,
	|	ТаблицаРешений.Стоимость                      КАК Стоимость,
	|	ТаблицаРешений.СтоимостьБезНДС                КАК СтоимостьБезНДС,
	|	ТаблицаРешений.СтоимостьДопРасходы            КАК СтоимостьДопРасходы,
	|	ТаблицаРешений.СтоимостьДопРасходыБезНДС      КАК СтоимостьДопРасходыБезНДС,
	|	ТаблицаРешений.СтоимостьРегл                  КАК СтоимостьРегл
	|ПОМЕСТИТЬ ВТКэшСтоимостьТоваров
	|ИЗ
	|	ТаблицаРешений КАК ТаблицаРешений
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтУзлыКорректировки КАК УзлыКорректировки
	|	ПО
	|		ТаблицаРешений.НомерПеременной = УзлыКорректировки.НомерУзла
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК Аналитика
	|	ПО
	|		УзлыКорректировки.АналитикаВидаУчета = Аналитика.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВТДокументыРасчетаСебестоимости КАК ДокументыРасчетаСебестоимости
	|	ПО
	|		ДокументыРасчетаСебестоимости.Организация = Аналитика.Организация
	|ГДЕ
	|	ТаблицаРешений.Стоимость <> 0
	|	ИЛИ ТаблицаРешений.СтоимостьБезНДС <> 0
	|	ИЛИ ТаблицаРешений.СтоимостьДопРасходы <> 0
	|	ИЛИ ТаблицаРешений.СтоимостьДопРасходыБезНДС <> 0
	|	ИЛИ ТаблицаРешений.СтоимостьРегл <> 0
	|");
	// Ноль в стоимости может быть если за текущий месяц оценка производится по ФИФО
	// но расхода товара со слада не было.
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	
	Выборка = Запрос.Выполнить();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Процедуры корректировки стоимости
#Область КорректировкаСтоимости

// Процедура рассчитывает отклонения в суммах движений по регистру СебестоимостьТоваров от рассчитанной себестоимости
// и производит корректировку движений регистров.
//
// Параметры:
//  НачалоПериода - дата, начало периода для сбора данных о движении товаров.
//  КонецПериода - дата, окончание периода для сбора данных о движении товаров.
//  МенеджерВременныхТаблиц - менеджер временных таблиц для получения данных о себестоимости.
//
Процедура СкорректироватьСтоимостьСписанияЗапасов(ПараметрыРасчета)
	
	ТекстЗапроса = ТекстЗапросаКорректировкиСписания();
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода" , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Корректировка списания товаров
		СформироватьДвижениеСебестоимостьТоваров(ПараметрыРасчета, Выборка, Выборка.ВидДвижения);
		
		// Если есть кор. раздел - необходимо скорректировать стоимость в кор. части.
		Если ЗначениеЗаполнено(Выборка.КорРазделУчета) Тогда
			
			СформироватьКорДвижениеСебестоимостьТоваров(ПараметрыРасчета, Выборка);
			
		КонецЕсли;
		
		СформироватьДвиженияПоОборотнымРегистрамУчета(ПараметрыРасчета, Выборка);
		
	КонецЦикла;
	
	КэшироватьСформированныеДвижения(ПараметрыРасчета);
	
КонецПроцедуры

Функция ТекстЗапросаКорректировкиСписания()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	УчетСебестоимости.Период                                 КАК Период,
	|	УчетСебестоимости.ВидДвижения                            КАК ВидДвижения,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры             КАК АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.АналитикаВидаУчета                     КАК АналитикаВидаУчета,
	|	УчетСебестоимости.РазделУчета                            КАК РазделУчета,
	|	СУММА(УчетСебестоимости.Количество)                      КАК Количество,
	|	СУММА(УчетСебестоимости.Стоимость)                       КАК Стоимость,
	|	СУММА(УчетСебестоимости.СтоимостьБезНДС)                 КАК СтоимостьБезНДС,
	|	СУММА(УчетСебестоимости.СтоимостьРегл)                   КАК СтоимостьРегл
	|ПОМЕСТИТЬ ВтТаблицаДвиженийСебестоимости
	|ИЗ
	|	ВТКэшЗаписиСебестоимостьТоваров КАК УчетСебестоимости
	|ГДЕ
	|	УчетСебестоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетСебестоимости.Период,
	|	УчетСебестоимости.ВидДвижения,
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.АналитикаВидаУчета,
	|	УчетСебестоимости.РазделУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры, АналитикаВидаУчета, РазделУчета
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетСебестоимости.Период                                 КАК Период,
	|	УчетСебестоимости.ВидДвижения                            КАК ВидДвижения,
	|
	|	УчетСебестоимости.АналитикаУчетаНоменклатуры             КАК АналитикаУчетаНоменклатуры,
	|	УчетСебестоимости.АналитикаВидаУчета                     КАК АналитикаВидаУчета,
	|	УчетСебестоимости.РазделУчета                            КАК РазделУчета,
	|	ВЫРАЗИТЬ(
	|		УчетСебестоимости.Количество
	|			* ЕСТЬNULL(СтоимостьТоваров.Стоимость, 0) КАК ЧИСЛО(15,2))
	|		 - УчетСебестоимости.Стоимость                       КАК СтоимостьКорректировка,
	|	ВЫРАЗИТЬ(
	|		УчетСебестоимости.Количество
	|			* ЕСТЬNULL(СтоимостьТоваров.СтоимостьБезНДС, 0) КАК ЧИСЛО(15,2))
	|	- УчетСебестоимости.СтоимостьБезНДС                  КАК СтоимостьБезНДСКорректировка,
	|	ВЫРАЗИТЬ(
	|		УчетСебестоимости.Количество
	|			* ЕСТЬNULL(СтоимостьТоваров.СтоимостьДопРасходы, 0)
	|		КАК ЧИСЛО(15,2))                                     КАК СуммаДопРасходовКорректировка,
	|	ВЫРАЗИТЬ(
	|		УчетСебестоимости.Количество
	|			* ЕСТЬNULL(СтоимостьТоваров.СтоимостьДопРасходыБезНДС, 0)
	|		КАК ЧИСЛО(15,2))                                     КАК СуммаДопРасходовБезНДСКорректировка,
	|	ВЫРАЗИТЬ(
	|		УчетСебестоимости.Количество
	|			* ЕСТЬNULL(СтоимостьТоваров.СтоимостьРегл, 0) КАК ЧИСЛО(15,2))
	|		 - УчетСебестоимости.СтоимостьРегл                   КАК СтоимостьРеглКорректировка,
	|	УчетСебестоимости.Стоимость                              КАК ИсходнаяСтоимость,
	|	УчетСебестоимости.СтоимостьБезНДС                        КАК ИсходнаяСтоимостьБезНДС,
	|	УчетСебестоимости.СтоимостьРегл                          КАК ИсходнаяСтоимостьРегл
	|ПОМЕСТИТЬ ДанныеРасчета
	|ИЗ
	|	ВтТаблицаДвиженийСебестоимости КАК УчетСебестоимости
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВТКэшСтоимостьТоваров КАК СтоимостьТоваров
	|	ПО
	|		СтоимостьТоваров.АналитикаВидаУчета           = УчетСебестоимости.АналитикаВидаУчета
	|		И СтоимостьТоваров.АналитикаУчетаНоменклатуры = УчетСебестоимости.АналитикаУчетаНоменклатуры
	|		И СтоимостьТоваров.РазделУчета                = УчетСебестоимости.РазделУчета
	|
	|ГДЕ
	|	(ВЫРАЗИТЬ(
	|		УчетСебестоимости.Количество
	|			* ЕСТЬNULL(СтоимостьТоваров.Стоимость,0) КАК ЧИСЛО(15,2))
	|		- УчетСебестоимости.Стоимость <> 0
	|	ИЛИ
	|	ВЫРАЗИТЬ(УчетСебестоимости.Количество
	|			* ЕСТЬNULL(СтоимостьТоваров.СтоимостьБезНДС,0) КАК ЧИСЛО(15,2))
	|		- УчетСебестоимости.СтоимостьБезНДС <> 0
	|	ИЛИ
	|	ВЫРАЗИТЬ(УчетСебестоимости.Количество
	|		* ЕСТЬNULL(СтоимостьТоваров.СтоимостьДопРасходы,0) КАК ЧИСЛО(15,2)) <> 0
	|	ИЛИ
	|	ВЫРАЗИТЬ(УчетСебестоимости.Количество
	|		* ЕСТЬNULL(СтоимостьТоваров.СтоимостьДопРасходыБезНДС,0) КАК ЧИСЛО(15,2)) <> 0
	|	)
	|	ИЛИ
	|	ВЫРАЗИТЬ(УчетСебестоимости.Количество
	|			* ЕСТЬNULL(СтоимостьТоваров.СтоимостьРегл,0) КАК ЧИСЛО(15,2))
	|		- УчетСебестоимости.СтоимостьРегл <> 0
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРасчета.Период                                 КАК Период,
	|	ДанныеРасчета.ВидДвижения                            КАК ВидДвижения,
	|	АналитикиВидаУчета.Организация                       КАК Организация,
	|	АналитикиВидаУчета.Склад                             КАК Склад,
	|	АналитикиВидаУчета.ИсточникФинансирования            КАК ИсточникФинансирования,
	|	ДанныеРасчета.АналитикаУчетаНоменклатуры             КАК АналитикаУчетаНоменклатуры,
	|	ДанныеРасчета.АналитикаВидаУчета                     КАК АналитикаВидаУчета,
	|	ДанныеРасчета.РазделУчета                            КАК РазделУчета,
	|	ДанныеРасчета.СтоимостьКорректировка                 КАК СтоимостьКорректировка,
	|	ДанныеРасчета.СтоимостьБезНДСКорректировка           КАК СтоимостьБезНДСКорректировка,
	|	ДанныеРасчета.СуммаДопРасходовКорректировка          КАК СуммаДопРасходовКорректировка,
	|	ДанныеРасчета.СуммаДопРасходовБезНДСКорректировка    КАК СуммаДопРасходовБезНДСКорректировка,
	|	ДанныеРасчета.СтоимостьРеглКорректировка             КАК СтоимостьРеглКорректировка,
	|	ДанныеРасчета.ИсходнаяСтоимость                      КАК ИсходнаяСтоимость,
	|	ДанныеРасчета.ИсходнаяСтоимостьБезНДС                КАК ИсходнаяСтоимостьБезНДС,
	|	ДанныеРасчета.ИсходнаяСтоимостьРегл                  КАК ИсходнаяСтоимостьРегл
	|ИЗ
	|	ДанныеРасчета КАК ДанныеРасчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК АналитикиВидаУчета
	|	ПО
	|		ДанныеРасчета.АналитикаВидаУчета = АналитикиВидаУчета.КлючАналитики
	|";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	РасходныеОперации = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ДанныеРасчета = СхемаЗапроса.ПакетЗапросов[1].Операторы[0];
	
	ИтоговыйЗапрос = СхемаЗапроса.ПакетЗапросов[2];
	ИтоговыйЗапросОператор = ИтоговыйЗапрос.Операторы[0];
	
	РеквизитыРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Реквизиты;
	Для Каждого Реквизит Из РеквизитыРегистра Цикл
		
		ИмяРеквизита = Реквизит.Имя;
		
		ИмяТаблицы = РасходныеОперации.Источники[0].Источник.Псевдоним;
		РасходныеОперации.Источники[0].Источник.ДоступныеПоля.Добавить(Реквизит.Имя);
		РасходныеОперации.ВыбираемыеПоля.Добавить(СтрШаблон("%1.%2", ИмяТаблицы, ИмяРеквизита));
		РасходныеОперации.Группировка.Добавить(СтрШаблон("%1.%2", ИмяТаблицы, ИмяРеквизита));
		
		ИмяТаблицы = ДанныеРасчета.Источники[0].Источник.Псевдоним;
		ДанныеРасчета.ВыбираемыеПоля.Добавить(СтрШаблон("%1.%2", ИмяТаблицы, ИмяРеквизита));
		
		ИмяТаблицы = ИтоговыйЗапросОператор.Источники[0].Источник.Псевдоним;
		ИтоговыйЗапросОператор.ВыбираемыеПоля.Добавить(СтрШаблон("%1.%2", ИмяТаблицы, ИмяРеквизита));
		
		ДобавленнаяКолонка = ИтоговыйЗапрос.Колонки[ИтоговыйЗапрос.Колонки.Количество() - 1];
		Если ДобавленнаяКолонка.Псевдоним <> ИмяРеквизита Тогда
			ДобавленнаяКолонка.Псевдоним = ИмяРеквизита + "Реквизит";
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СформироватьДвижениеСебестоимостьТоваров(ПараметрыРасчета, Выборка, ВидДвижения)
	
	ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя;
	ЗаписьРасход = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, Выборка);
	ЗаписьРасход.ВидДвижения            = ВидДвижения;
	ЗаписьРасход.Стоимость              = Выборка.СтоимостьКорректировка;
	ЗаписьРасход.СтоимостьБезНДС        = Выборка.СтоимостьБезНДСКорректировка;
	ЗаписьРасход.СуммаДопРасходов       = Выборка.СуммаДопРасходовКорректировка;
	ЗаписьРасход.СуммаДопРасходовБезНДС = Выборка.СуммаДопРасходовБезНДСКорректировка;
	ЗаписьРасход.СтоимостьРегл          = Выборка.СтоимостьРеглКорректировка;
	ЗаписьРасход.Количество             = 0;
	
КонецПроцедуры

Процедура СформироватьКорДвижениеСебестоимостьТоваров(ПараметрыРасчета, Выборка)
	
	КопируемыеПоля = "Период, ХозяйственнаяОперация";
	
	ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя;
	Запись = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, Выборка, КопируемыеПоля);
	Запись.ВидДвижения                  = ВидДвиженияНакопления.Приход;
	Запись.АналитикаУчетаНоменклатуры   = Выборка.КорАналитикаУчетаНоменклатуры;
	Запись.АналитикаВидаУчета           = Выборка.КорАналитикаВидаУчета;
	Запись.РазделУчета                  = Выборка.КорРазделУчета;
	Запись.Стоимость                    = Выборка.СтоимостьКорректировка;
	Запись.СтоимостьБезНДС              = Выборка.СтоимостьБезНДСКорректировка;
	Запись.СуммаДопРасходов             = Выборка.СуммаДопРасходовКорректировка;
	Запись.СуммаДопРасходовБезНДС       = Выборка.СуммаДопРасходовБезНДСКорректировка;
	Запись.СтоимостьРегл                = Выборка.СтоимостьРеглКорректировка;
	Запись.Количество                   = 0;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоОборотнымРегистрамУчета(ПараметрыРасчета, Выборка)
	
	Для Каждого ОписаниеНабора Из ПараметрыРасчета.ОборотныеРегистрыУчета Цикл
		Если ОписаниеНабора.ХозяйственныеОперации.Найти(Выборка.ХозяйственнаяОперация) <> Неопределено Тогда
			
			ОписаниеРегистра = ПараметрыРасчета.Движения[ОписаниеНабора.ИмяРегистра];
			ОписаниеРегистра.МенеджерРегистра.СформироватьДвижениеКорректировки(ПараметрыРасчета, Выборка);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // КорректировкаСтоимости

///////////////////////////////////////////////////////////////////////////////
// Списание ошибок округления

Процедура СписатьОшибкиОкругленияРасчетаСебестоимости(ПараметрыРасчета)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДокументыРасчетаСебестоимости.Ссылка      КАК ДокументДвижения,
	|	&КонецПериода                             КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)    КАК ВидДвижения,
	|	Себестоимость.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|	Себестоимость.АналитикаВидаУчета          КАК АналитикаВидаУчета,
	|	Себестоимость.РазделУчета                 КАК РазделУчета,
	|	ВЫБОР КОГДА Себестоимость.Стоимость МЕЖДУ -&ЗначениеПогрешности И &ЗначениеПогрешности ТОГДА
	|		Себестоимость.Стоимость
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                     КАК Стоимость,
	|	ВЫБОР КОГДА Себестоимость.СтоимостьБезНДС МЕЖДУ -&ЗначениеПогрешности И &ЗначениеПогрешности ТОГДА
	|		Себестоимость.СтоимостьБезНДС
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                     КАК СтоимостьБезНДС,
	|	ВЫБОР КОГДА Себестоимость.СуммаДопРасходов МЕЖДУ -&ЗначениеПогрешности И &ЗначениеПогрешности ТОГДА
	|		Себестоимость.СуммаДопРасходов
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                     КАК СуммаДопРасходов,
	|	ВЫБОР КОГДА Себестоимость.СуммаДопРасходовБезНДС МЕЖДУ -&ЗначениеПогрешности И &ЗначениеПогрешности ТОГДА
	|		Себестоимость.СуммаДопРасходовБезНДС
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                     КАК СуммаДопРасходовБезНДС,
	|	ВЫБОР КОГДА Себестоимость.СтоимостьРегл МЕЖДУ -&ЗначениеПогрешности И &ЗначениеПогрешности ТОГДА
	|		Себестоимость.СтоимостьРегл
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                     КАК СтоимостьРегл
	|ИЗ
	|	ВТКэшРасчетныеОстаткиСебестоимостьТоваров КАК Себестоимость
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК Аналитика
	|	ПО
	|		Себестоимость.АналитикаВидаУчета = Аналитика.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВТДокументыРасчетаСебестоимости КАК ДокументыРасчетаСебестоимости
	|	ПО
	|		Аналитика.Организация = ДокументыРасчетаСебестоимости.Организация
	|ГДЕ
	|	Себестоимость.Количество = 0
	|	И (
	|		Себестоимость.Стоимость МЕЖДУ -&ЗначениеПогрешности И &ЗначениеПогрешности
	|			И Себестоимость.Стоимость <> 0
	|		ИЛИ Себестоимость.СтоимостьБезНДС МЕЖДУ -&ЗначениеПогрешности И &ЗначениеПогрешности
	|			И Себестоимость.СтоимостьБезНДС <> 0
	|		ИЛИ Себестоимость.СуммаДопРасходов МЕЖДУ -&ЗначениеПогрешности И &ЗначениеПогрешности
	|			И Себестоимость.СуммаДопРасходов <> 0
	|		ИЛИ Себестоимость.СуммаДопРасходовБезНДС МЕЖДУ -&ЗначениеПогрешности И &ЗначениеПогрешности
	|			И Себестоимость.СуммаДопРасходовБезНДС <> 0
	|		ИЛИ Себестоимость.СтоимостьРегл МЕЖДУ -&ЗначениеПогрешности И &ЗначениеПогрешности
	|			И Себестоимость.СтоимостьРегл <> 0
	|	)
	|");
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КонецПериода"        , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	Запрос.УстановитьПараметр("ЗначениеПогрешности" , ПараметрыРасчета.ЗначениеПогрешности);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРегистраСебестоимость = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя;
	ИмяРегистраДоходыРасходы = Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.Имя;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаписьСебестоимость = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистраСебестоимость, Выборка);
		
		ЗаписьНоменклатураДоходыРасходы = ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистраДоходыРасходы, Выборка);
		ЗаписьНоменклатураДоходыРасходы.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаОшибокОкругления;
		ЗаписьНоменклатураДоходыРасходы.СтатьяДоходовРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости;
		ЗаписьНоменклатураДоходыРасходы.Стоимость = Выборка.Стоимость + Выборка.СуммаДопРасходов;
		ЗаписьНоменклатураДоходыРасходы.СтоимостьБезНДС = Выборка.СтоимостьБезНДС + Выборка.СуммаДопРасходовБезНДС;
		ЗаписьНоменклатураДоходыРасходы.СтоимостьРегл = Выборка.СтоимостьРегл;
		
	КонецЦикла;
	
	КэшироватьСформированныеДвижения(ПараметрыРасчета);
	
КонецПроцедуры

#Область РаботаСВременнымиТаблицами

Процедура ОбъединитьТаблицуЗначенийИВременнуюТаблицу(МенеджерВременныхТаблиц, ИмяПриемника, Таблица, ПоляТаблицы, РесурсыТаблицы)
	
	ИмяИсточника = "ВТВременноеХранилищеТаблицыЗначений";
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(МенеджерВременныхТаблиц, ИмяИсточника, Таблица, ПоляТаблицы);
	
	ОбъединитьВременныеТаблицы(МенеджерВременныхТаблиц, ИмяИсточника, ИмяПриемника, ПоляТаблицы, РесурсыТаблицы);
	
	Запрос = Новый Запрос(СтрШаблон("УНИЧТОЖИТЬ %1", ИмяИсточника));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПоместитьТаблицуЗначенийВоВременнуюТаблицу(МенеджерВременныхТаблиц, ИмяВременнойТаблицы, Таблица, ПоляТаблицы)
	
	Шаблон = "
	|ВЫБРАТЬ
	|	%1
	|ПОМЕСТИТЬ %2
	|ИЗ
	|	&Таблица КАК Т
	|";
	
	ТекстПоляТаблицы = СокрЛП(СтрЗаменить(ПоляТаблицы, "%1", Символы.ПС + "Т."));
	
	Запрос = Новый Запрос(СтрШаблон(Шаблон, ТекстПоляТаблицы, ИмяВременнойТаблицы));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Таблица", Таблица);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОбъединитьВременныеТаблицы(МенеджерВременныхТаблиц, ИмяИсточника, ИмяПриемника, ПоляТаблицы, РесурсыТаблицы)
	
	// Записи итоговой временной таблицы сворачиваются по всем измерениям и реквизитам регистра.
	// Записи со всеми пустыми ресурсами не помещаются в итоговую временную таблицу.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	%Поля
	|ПОМЕСТИТЬ ВТВременноеХранилищеОбъединяемыхТаблиц
	|ИЗ
	|	%ИмяИсточника КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	%Поля
	|ИЗ
	|	%ИмяПриемника КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ %ИмяПриемника
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	%СгруппированныеПоля
	|ПОМЕСТИТЬ %ИмяПриемника
	|ИЗ
	|	ВТВременноеХранилищеОбъединяемыхТаблиц КАК Т
	|
	|%ГруппировкаПолей
	|
	|%ОтборНепустыхРесурсов
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТВременноеХранилищеОбъединяемыхТаблиц
	|";
	
	// Заменим шаблоны в тексте запроса
	ТекстПоляТаблицы = СокрЛП(СтрШаблон(ПоляТаблицы, Символы.ПС + "Т."));
	
	ТекстСгруппированныеПоля   = "";
	ТекстОтборНепустыхРесурсов = "";
	ТекстГруппировкаПолей      = "";
	
	СписокПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрШаблон(ПоляТаблицы, "Т."), ",", Истина, Истина);
	СписокРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрШаблон(РесурсыТаблицы, "Т."), ",", Истина, Истина);
	
	Для Каждого ТекущееПоле Из СписокПолей Цикл
		
		Если СписокРесурсов.Найти(ТекущееПоле) <> Неопределено Тогда
			
			// Ресурс
			ТекстСгруппированныеПоля = ТекстСгруппированныеПоля + ",
			|	СУММА(" + ТекущееПоле + ")";
				
			ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов + "
			|	ИЛИ СУММА(" + ТекущееПоле + ") <> 0";
			
		Иначе
			
			// Измерение или реквизит
			ТекстСгруппированныеПоля = ТекстСгруппированныеПоля + ",
			|	" + ТекущееПоле;
			
			ТекстГруппировкаПолей = ТекстГруппировкаПолей + ",
			|	" + ТекущееПоле;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСгруппированныеПоля = Сред(ТекстСгруппированныеПоля, 4);
	
	Если Не ПустаяСтрока(ТекстГруппировкаПолей) Тогда
		ТекстГруппировкаПолей = "СГРУППИРОВАТЬ ПО
		|	" + Сред(ТекстГруппировкаПолей, 4);
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтборНепустыхРесурсов) Тогда
		ТекстОтборНепустыхРесурсов = "ИМЕЮЩИЕ
		|	" + Сред(ТекстОтборНепустыхРесурсов, 7);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Поля"                 , ТекстПоляТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяИсточника"         , ИмяИсточника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПриемника"         , ИмяПриемника);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СгруппированныеПоля"  , ТекстСгруппированныеПоля);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ГруппировкаПолей"     , ТекстГруппировкаПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборНепустыхРесурсов", ТекстОтборНепустыхРесурсов);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ИмяРегистра, ДанныеДвижения, КопируемыеПоля = "") Экспорт
	
	ОписаниеРегистра = ПараметрыРасчета.Движения[ИмяРегистра];
	
	Если ОписаниеРегистра.Таблица.Количество() >= ПараметрыРасчета.КоличествоСтрокТЗ Тогда
		КэшироватьСформированныеДвижения(ПараметрыРасчета, ИмяРегистра, Ложь);
	КонецЕсли;
	
	Запись = ОписаниеРегистра.Таблица.Добавить();
	
	Если ПустаяСтрока(КопируемыеПоля) Тогда
		ЗаполнитьЗначенияСвойств(Запись, ДанныеДвижения);
	Иначе
		ЗаполнитьЗначенияСвойств(Запись, ДанныеДвижения, КопируемыеПоля);
	КонецЕсли;
	
	Запись.Регистратор = ДанныеДвижения.ДокументДвижения;
	
	// Если регистратор не заполнен, то запомним информацию об ошибке
	Если Не ЗначениеЗаполнено(Запись.Регистратор) Тогда
		
		Если Не ЗначениеЗаполнено(ДанныеДвижения.ДокументДвижения) Тогда
			
			// Ошибка в запросах - не заполнено обязательное поле ДокументДвижения
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнено свойство ДокументДвижения для движения по регистру ""%1""'"),
				ОписаниеРегистра.ИмяРегистра);
			
		Иначе
			
			// Ошибка в метаданных - документ не является регистратором для данного регистра
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ ""%1"" не может иметь движений по регистру ""%2""'"),
				СокрЛП(ДанныеДвижения.ДокументДвижения),
				ОписаниеРегистра.ИмяРегистра);
			
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияОшибкиДляЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			ТекстОшибки);
		
		ПараметрыРасчета.БылиОшибки = Истина;
		ПараметрыРасчета.ОшибкиДвижений.Добавить(ТекстОшибки);
		
		
		Если ОписаниеРегистра.ЕстьОрганизация Тогда
			Запись.Регистратор = ПараметрыРасчета.ДокументыРасчетаПоОрганизациям.Получить(ДанныеДвижения.Организация);
		ИначеЕсли ОписаниеРегистра.ЕстьАналитикаВидаУчета Тогда
			Запись.Регистратор = ПараметрыРасчета.ДокументыРасчетаПоОрганизациям.Получить(
				ПараметрыРасчета.ОрганизацияПоАналитикеВидаУчета.Получить(ДанныеДвижения.АналитикаВидаУчета));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запись;
	
КонецФункции

Процедура ИнициализироватьКэшОстатковРегистра(ПараметрыРасчета, ОписаниеРегистра)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	[ИзмеренияРегистра],
	|	[РесурсыРегистраСумма]
	|ПОМЕСТИТЬ ВТКэшПервичныеОстатки[ИмяРегистра]
	|ИЗ
	|	(ВЫБРАТЬ
	|		[ИзмеренияРегистра],
	|		[РесурсыРегистраОстатки]
	|	ИЗ
	|		[ПолноеИмяРегистра].Остатки(
	|				&ГраницаНачалоПериода,
	|				[ОтборОрганизации]
	|		) КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		[ИзмеренияРегистра],
	|		[РесурсыРегистраОбороты]
	|	ИЗ
	|		[ПолноеИмяРегистра] КАК Т
	|	ГДЕ
	|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Т.Активность
	|		И НЕ Т.РасчетСебестоимости
	|		И [ОтборОрганизации]
	|	) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	[ИзмеренияРегистра]
	|";
	
	Если ОписаниеРегистра.ЕстьОрганизация Тогда
		ОтборПоОрганизации = "Организация В (&СписокОрганизаций)";
	ИначеЕсли ОписаниеРегистра.ЕстьАналитикаВидаУчета Тогда
		ОтборПоОрганизации = "АналитикаВидаУчета В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаВидаУчета КАК Отбор)";
	Иначе
		ОтборПоОрганизации = "ИСТИНА";
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИмяРегистра"           , ОписаниеРегистра.ИмяРегистра);
	ПараметрыЗапроса.Вставить("ПолноеИмяРегистра"     , ОписаниеРегистра.ПолноеИмяРегистра);
	ПараметрыЗапроса.Вставить("ИзмеренияРегистра"     , СтрШаблон(ОписаниеРегистра.ИзмеренияРегистра, "Т."));
	ПараметрыЗапроса.Вставить("РесурсыРегистраСумма"  , СтрШаблон(ОписаниеРегистра.РесурсыРегистраССуффиксом, "СУММА(Т.", ")"));
	ПараметрыЗапроса.Вставить("РесурсыРегистраОстатки", СтрШаблон(ОписаниеРегистра.РесурсыРегистраССуффиксом, "Т."      , "Остаток"));
	ПараметрыЗапроса.Вставить("РесурсыРегистраОбороты", СтрШаблон(ОписаниеРегистра.РесурсыРегистра, "ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Т."));
	ПараметрыЗапроса.Вставить("ОтборОрганизации"      , ОтборПоОрганизации);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстЗапроса, ПараметрыЗапроса);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода"       , ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"        , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	Запрос.УстановитьПараметр("ГраницаНачалоПериода", ПараметрыРасчета.РасчетныйПериод.ГраницаНачалоПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций"   , ПараметрыРасчета.СписокОрганизаций);
	
	Запрос.Выполнить();
	
	ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра, Истина);
	
КонецПроцедуры

Процедура ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра, Инициализация = Ложь)
	
	Запрос = Новый Запрос;
	Если Не Инициализация Тогда
		Запрос.Текст = "
		|УНИЧТОЖИТЬ ВТКэшРасчетныеОстатки[ИмяРегистра]
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ
	|	[ИзмеренияРегистра],
	|	[РесурсыРегистраСумма]
	|ПОМЕСТИТЬ ВТКэшРасчетныеОстатки[ИмяРегистра]
	|ИЗ
	|	(ВЫБРАТЬ
	|		[ИзмеренияРегистра],
	|		[РесурсыРегистра]
	|	ИЗ
	|		ВТКэшПервичныеОстатки[ИмяРегистра] КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		[ИзмеренияРегистра],
	|		[РесурсыРегистраОбороты]
	|	ИЗ
	|		ВТКэш[ИмяРегистра] КАК Т
	|	) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	[ИзмеренияРегистра]
	|";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИмяРегистра"           , ОписаниеРегистра.ИмяРегистра);
	ПараметрыЗапроса.Вставить("ИзмеренияРегистра"     , СтрШаблон(ОписаниеРегистра.ИзмеренияРегистра, "Т."));
	ПараметрыЗапроса.Вставить("РесурсыРегистра"       , СтрШаблон(ОписаниеРегистра.РесурсыРегистра, "Т."));
	ПараметрыЗапроса.Вставить("РесурсыРегистраСумма"  , СтрШаблон(ОписаниеРегистра.РесурсыРегистраССуффиксом, "СУММА(Т.", ")"));
	ПараметрыЗапроса.Вставить("РесурсыРегистраОбороты", СтрШаблон(ОписаниеРегистра.РесурсыРегистра, "ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Т."));
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Запрос.Текст, ПараметрыЗапроса);
	
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОбновитьРасчетныеЗаписиРегистра(ПараметрыРасчета, ОписаниеРегистра, Инициализация = Ложь)
	
	ТекстЗапроса = "";
	Если Не Инициализация Тогда
		ТекстЗапроса = "
		|УНИЧТОЖИТЬ ВТКэшЗаписи[ИмяРегистра]
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	[ПоляРегистра]
	|ПОМЕСТИТЬ ВТКэшЗаписи[ИмяРегистра]
	|ИЗ
	|	[ПолноеИмяРегистра] КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ Т.РасчетСебестоимости
	|	И Т.Активность
	|	[ОтборПоОрганизации]
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	[ПоляРегистра]
	|ИЗ
	|	ВТКэш[ИмяРегистра] КАК Т
	|";
	
	Если ОписаниеРегистра.ЕстьОрганизация Тогда
		ОтборПоОрганизации = "И Т.Организация В (&СписокОрганизаций)";
	ИначеЕсли ОписаниеРегистра.ЕстьАналитикаВидаУчета Тогда
		ОтборПоОрганизации = "И Т.АналитикаВидаУчета В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаВидаУчета КАК Отбор)";
	Иначе
		ОтборПоОрганизации = "";
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИмяРегистра"           , ОписаниеРегистра.ИмяРегистра);
	ПараметрыЗапроса.Вставить("ПолноеИмяРегистра"     , ОписаниеРегистра.ПолноеИмяРегистра);
	ПараметрыЗапроса.Вставить("ПоляРегистра"          , СтрШаблон(ОписаниеРегистра.ПоляРегистра, "Т."));
	ПараметрыЗапроса.Вставить("ОтборПоОрганизации"    , ОтборПоОрганизации);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстЗапроса, ПараметрыЗапроса);
	
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода"     , ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"      , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций" , ПараметрыРасчета.СписокОрганизаций);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура КэшироватьСформированныеДвижения(ПараметрыРасчета, ИмяРегистра = Неопределено, ОкончаниеЭтапа = Истина)
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		Если ИмяРегистра <> Неопределено И НРег(КлючИЗначение.Ключ) <> НРег(ИмяРегистра) Тогда
			Продолжить; // если явно задано имя регистра, то надо обработать только его
		КонецЕсли;
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		Если ОписаниеРегистра.Таблица.Количество() > 0 Тогда
			
			// Переместим сформированные движения из ОписаниеРегистра.Таблица во временную таблицу ВТКэш
			
			// Дозаполним поле РасчетСебестоимости
			Если ОписаниеРегистра.ЭтоРегистрНакопления Тогда
				ОписаниеРегистра.Таблица.ЗаполнитьЗначения(Истина, "РасчетСебестоимости");
			КонецЕсли;
			
			// Добавим данные из таблицы во временную таблицу
			ОбъединитьТаблицуЗначенийИВременнуюТаблицу(
				ПараметрыРасчета.МенеджерВременныхТаблиц,
				"ВТКэш" + КлючИЗначение.Ключ,
				ОписаниеРегистра.Таблица,
				ОписаниеРегистра.ПоляРегистра,
				ОписаниеРегистра.РесурсыРегистра);
				
			// Очистим накопленные в таблице значений записи - они перемещены во временную таблицу
			ОписаниеРегистра.Таблица.Очистить();
			
			// Были изменения в ВТКэш, еще не учтенные в ВТКэшРасчетныеОстатки и ВТКэшРасчетныеОбороты
			ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Истина;
			
		КонецЕсли;
		
		Если ОкончаниеЭтапа И ОписаниеРегистра.НадоОбновитьРасчетныйКэш Тогда
			
			// "Внутри" этапа расчета может выполняться многократное "порционное" кэширование сформированных записей,
			// но актуальные ВТКэшРасчетныеОстатки и ВТКэшРасчетныеОбороты нужны не "внутри" этапа,
			// а к его завершению (к началу следующего этапа).
			
			// Переформируем таблицу записей регистра
			Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(КлючИЗначение.Ключ)  // нужна таблица записей 
			   И ПараметрыРасчета.РегистрыСРасчетнымиОборотами[КлючИЗначение.Ключ] Тогда     // нужно автообновление таблицы записей
				ОбновитьРасчетныеЗаписиРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;
			
			// Пересчитаем остатки регистра на конец периода
			Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(КлючИЗначение.Ключ) // нужны расчетные остатки
			   И ПараметрыРасчета.РегистрыСРасчетнымиОстатками[КлючИЗначение.Ключ] Тогда    // нужно автообновление остатков
				ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;
			
			ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Ложь; // учли все движения в кэше остатков/оборотов
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСформированныеДвижения(ПараметрыРасчета)
	
	ОбработаноРегистров = 0;
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		Если ПараметрыРасчета.ПредварительныйРасчет
		 И КлючИЗначение.Ключ <> Метаданные.РегистрыСведений.СтоимостьТоваров.Имя Тогда
			// При предварительном расчете пересчитывается только стоимость товаров.
			// Движения по всем остальным регистрам остаются без изменений.
			Продолжить;
		КонецЕсли;
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		// Сформируем ВТКэшСтарыеДокументы
		СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра);
		
		// Сформируем ВТКэшИзмененныеДокументы
		КоличествоДокументов = СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета, ОписаниеРегистра);
		
		Если КоличествоДокументов > 0 Тогда
			
			РезультатЗапросаОчищаемыеДокументы = СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета, ОписаниеРегистра);
			Если Не РезультатЗапросаОчищаемыеДокументы.Пустой() Тогда
				ЗаписатьДвиженияПоРегистру(РезультатЗапросаОчищаемыеДокументы.Выбрать(), ОписаниеРегистра.МенеджерРегистра, ПараметрыРасчета.РазмерНабораЗаписей,, Истина);
			КонецЕсли;
			
			// Подготовка движений для тех регистраторов, по которым есть различия в старых/новых движениях - объединяем
			//  - "первичные" движения документа в периоде расчета
			//  - новые "расчетные" движения документа
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	[ПоляРегистра]
			|ИЗ
			|	[ПолноеИмяРегистра] КАК Т
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
			|	ПО
			|		Т.Регистратор = ИзмененныеДокументы.Регистратор
			|		И (НЕ [ОтборРасчетныеДвижения])
			|ГДЕ
			|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
			|	[ОтборПоОрганизации]
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	[ПоляРегистра]
			|ИЗ
			|	ВТКэш[ИмяРегистра] КАК Т
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
			|	ПО
			|		Т.Регистратор = ИзмененныеДокументы.Регистратор
			|
			|УПОРЯДОЧИТЬ ПО
			|	[Порядок]
			|";
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("ПоляРегистра", СтрШаблон(ОписаниеРегистра.ПоляРегистра, Символы.ПС + "Т."));
			ПараметрыЗапроса.Вставить("ПолноеИмяРегистра", ОписаниеРегистра.ПолноеИмяРегистра);
			ПараметрыЗапроса.Вставить("ИмяРегистра", ОписаниеРегистра.ИмяРегистра);
			ПараметрыЗапроса.Вставить("ОтборРасчетныеДвижения", ?(ОписаниеРегистра.ЭтоРегистрНакопления, "Т.РасчетСебестоимости", "ИСТИНА"));
			Если ОписаниеРегистра.ЕстьОрганизация Тогда
				ОтборПоОрганизации = "И Т.Организация В (&СписокОрганизаций)";
			ИначеЕсли ОписаниеРегистра.ЕстьАналитикаВидаУчета Тогда
				ОтборПоОрганизации = "И Т.АналитикаВидаУчета В (ВЫБРАТЬ Т.КлючАналитики ИЗ ВТОтборАналитикаВидаУчета КАК Т)";
			Иначе
				ОтборПоОрганизации = "";
			КонецЕсли;
			ПараметрыЗапроса.Вставить("ОтборПоОрганизации", ОтборПоОрганизации);
			ТекстПоляСортировки = "Т.Регистратор, Т.Период" + ", " + СтрШаблон(ОписаниеРегистра.ИзмеренияРегистра, "Т.");
			Если ОписаниеРегистра.ЭтоРегистрНакопления Тогда
				ТекстПоляСортировки = ТекстПоляСортировки + ", Т.РасчетСебестоимости";
			КонецЕсли;
			ПараметрыЗапроса.Вставить("Порядок", ТекстПоляСортировки);
			
			Запрос = Новый Запрос;
			Запрос.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстЗапроса, ПараметрыЗапроса);
			Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("НачалоПериода"    , ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
			Запрос.УстановитьПараметр("КонецПериода"     , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
			Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
			Выборка = Запрос.Выполнить().Выбрать();
			
			ЗаписатьДвиженияПоРегистру(Выборка, ОписаниеРегистра.МенеджерРегистра, ПараметрыРасчета.РазмерНабораЗаписей);
			
		КонецЕсли;
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета.МенеджерВременныхТаблиц, "ВТКэшСтарыеДокументы, ВТКэшИзмененныеДокументы");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра)
	
	// Выберем все старые регистраторы данного регистра (кроме док. КорректировкаРегистров)
	// Поле Активность не проверяем
	Если НЕ ОписаниеРегистра.ЭтоРегистрНакопления Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТКэшСтарыеДокументы
		|ИЗ
		|	%1 КАК Т
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Т.АналитикаВидаУчета В(ВЫБРАТЬ Т.КлючАналитики ИЗ ВТОтборАналитикаВидаУчета КАК Т)
		|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|";
		
	ИначеЕсли ОписаниеРегистра.ЕстьОрганизация Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТКэшСтарыеДокументы
		|ИЗ
		|	%1 КАК Т
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Т.РасчетСебестоимости
		|	И Т.Организация В(&СписокОрганизаций)
		|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|";
		
	Иначе // ЕстьАналитикаВидаУчета
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ПОМЕСТИТЬ ВТКэшСтарыеДокументы
		|ИЗ
		|	%1 КАК Т
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ВТОтборАналитикаВидаУчета КАК АналитикаВида
		|	ПО
		|		Т.АналитикаВидаУчета = АналитикаВида.КлючАналитики
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Т.РасчетСебестоимости
		|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрШаблон(ТекстЗапроса, ОписаниеРегистра.ПолноеИмяРегистра));
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода"    , ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода"     , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета, ОписаниеРегистра)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор КАК Регистратор,
	|	Т.Регистратор.МоментВремени КАК МоментВремени
	|ПОМЕСТИТЬ ВТКэшИзмененныеДокументы
	|ИЗ
	|	(ВЫБРАТЬ // новые движения, с плюсом
	|		[ПоляРегистра]
	|	ИЗ
	|		ВТКэш[ИмяРегистра] КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ // старые движения, с минусом
	|		[ПоляРегистраРесурсыСМинусом]
	|	ИЗ
	|		[ПолноеИмяРегистра] КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ВТКэшСтарыеДокументы КАК СтарыеДокументы
	|		ПО
	|			Т.Регистратор = СтарыеДокументы.Регистратор
	|		ГДЕ
	|			Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|			[ОтборРасчетныеДвижения]
	|	) КАК Т
	|
	|[ГруппировкаПолей]
	|
	|[ОтборНепустыхРесурсов]
	|";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ПолноеИмяРегистра"     , ОписаниеРегистра.ПолноеИмяРегистра);
	ПараметрыЗапроса.Вставить("ИмяРегистра"           , ОписаниеРегистра.ИмяРегистра);
	ПараметрыЗапроса.Вставить("ОтборРасчетныеДвижения", ?(ОписаниеРегистра.ЭтоРегистрНакопления, "И Т.РасчетСебестоимости", ""));
	
	ТекстОтборНепустыхРесурсов       = "";
	ТекстГруппировкаПолей            = "";
	ТекстПоляРегистраРесурсыСМинусом = "";
	ТекстПоляРегистра                = СокрЛП(СтрШаблон(ОписаниеРегистра.ПоляРегистра, Символы.ПС + "Т.")); // ресурсы с "плюсом
	
	СписокПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрШаблон(ОписаниеРегистра.ПоляРегистра, "Т."),
		",",
		Истина,
		Истина);
	СписокРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрШаблон(ОписаниеРегистра.РесурсыРегистра, "Т."),
		",",
		Истина,
		Истина);
	
	Для Каждого ТекущееПоле Из СписокПолей Цикл
		
		ЭтоРесурсРегистра = (СписокРесурсов.Найти(ТекущееПоле) <> Неопределено);
		Если ЭтоРесурсРегистра Тогда
			ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов + "
			|	ИЛИ СУММА(" + ТекущееПоле + ") <> 0";
		Иначе
			ТекстГруппировкаПолей = ТекстГруппировкаПолей + ",
			|	" + ТекущееПоле;
		КонецЕсли;
		
		ТекстПоляРегистраРесурсыСМинусом = ТекстПоляРегистраРесурсыСМинусом + ",
		|	" + ?(ЭтоРесурсРегистра, "-", "") + ТекущееПоле;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстГруппировкаПолей) Тогда
		ТекстГруппировкаПолей = "СГРУППИРОВАТЬ ПО
		|	" + Сред(ТекстГруппировкаПолей, 4);
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтборНепустыхРесурсов) Тогда
		ТекстОтборНепустыхРесурсов = "ИМЕЮЩИЕ
		|	" + Сред(ТекстОтборНепустыхРесурсов, 7);
	КонецЕсли;
	ТекстПоляРегистраРесурсыСМинусом = Сред(ТекстПоляРегистраРесурсыСМинусом, 3);
	
	ПараметрыЗапроса.Вставить("ПоляРегистра"               , ТекстПоляРегистра);
	ПараметрыЗапроса.Вставить("ПоляРегистраРесурсыСМинусом", ТекстПоляРегистраРесурсыСМинусом);
	ПараметрыЗапроса.Вставить("ГруппировкаПолей"           , ТекстГруппировкаПолей);
	ПараметрыЗапроса.Вставить("ОтборНепустыхРесурсов"      , ТекстОтборНепустыхРесурсов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстЗапроса, ПараметрыЗапроса);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода" , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

Функция СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета, ОписаниеРегистра)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.Регистратор
	|ИЗ
	|	[ПолноеИмяРегистра] КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
	|	ПО
	|		Т.Регистратор = ИзмененныеДокументы.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Т.Регистратор
	|		ИЗ
	|			ВТКэш[ИмяРегистра] КАК Т
	|		) КАК НеОчищаемыеДокументы
	|	ПО
	|		Т.Регистратор = НеОчищаемыеДокументы.Регистратор
	|
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НеОчищаемыеДокументы.Регистратор ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ([ОтборРасчетныеДвижения]) = ИСТИНА
	|";
	
	// Заменим шаблоны в тексте запроса
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ПолноеИмяРегистра"     , ОписаниеРегистра.ПолноеИмяРегистра);
	ПараметрыЗапроса.Вставить("ИмяРегистра"           , ОписаниеРегистра.ИмяРегистра);
	ПараметрыЗапроса.Вставить("ОтборРасчетныеДвижения", ?(ОписаниеРегистра.ЭтоРегистрНакопления, "Т.РасчетСебестоимости", "ИСТИНА"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстЗапроса, ПараметрыЗапроса);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода" , ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Уничтожает указанные временные таблицы
//
Процедура УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, ИменаТаблиц)
	
	СтруктураТаблиц = Новый Структура(ИменаТаблиц);
	ТекстЗапроса = "";
	
	Для Каждого КлючИЗначение Из СтруктураТаблиц Цикл
		
		ТекстЗапроса = ТекстЗапроса 
			+ ?(ТекстЗапроса = "", "", "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|") + "УНИЧТОЖИТЬ " + КлючИЗначение.Ключ;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти // РаботаСВременнымиТаблицами

////////////////////////////////////////////////////////////////////////////////
// Решение СЛАУ
#Область РешениеСЛАУ

// Решает СЛАУ (AX = b) методом простых итераций
// X = KX + g, где K = D^(-1)(D - A), g = D^(-1)b
// D[i, j] = 0 для i<>j и D[i, i] = A[i, i]
// Достаточное условие сходимости метода: q = ||K|| < 1
// Критерий остановки ||X(k+1) - X(k)||/ (1 - q) < eps
//
// Параметры
//  МенеджерВременныхТаблиц - должен содержать следующие таблицы
//      МатрицаКоэффициентов - таблица коэффициентов системы уравнений
//          - НомерСтрокиУравнения
//          - НомерПеременной
//          - Коэффициент
//      МатрицаСвободныхКоэффициентов - таблица с правыми частями уравнений
//          - НомерСтрокиУравнения
//          - ИмяПравойЧасти1
//            . . .
//          - ИмяПравойЧастиN
//
// Возвращаемое значение
//  В МенеджерВременныхТаблиц помещается таблица
//      ТаблицаРешений
//          - НомерПеременной
//          - ИмяПравойЧасти1
//            . . .
//          - ИмяПравойЧастиN
//
Процедура РешитьСЛАУ(МенеджерВременныхТаблиц, ТребуемаяТочность = 0.000001, МаксКоличествоИтераций = 200)
	
	ИменаСвободныхКоэффициентов = ОпределитьИменаСвободныхКоэффициентов(МенеджерВременныхТаблиц);
	
	ТекстЗапроса = "
	// Таблица коэффициентов без диагональных элементов (A - D)
	|ВЫБРАТЬ
	|	КоэффициентыУравнений.НомерСтрокиУравнения КАК НомерСтрокиУравнения,
	|	КоэффициентыУравнений.НомерПеременной КАК НомерПеременной,
	|	КоэффициентыУравнений.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ ВтТаблицаКоэффициентовБезДиагональных
	|ИЗ
	|	МатрицаКоэффициентов КАК КоэффициентыУравнений
	|ГДЕ
	|	КоэффициентыУравнений.НомерСтрокиУравнения <> КоэффициентыУравнений.НомерПеременной
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтрокиУравнения,
	|	НомерПеременной
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	// Таблица диагональных коэффициентов (D)
	|ВЫБРАТЬ
	|	КоэффициентыУравнений.НомерСтрокиУравнения КАК НомерСтрокиУравнения,
	|	КоэффициентыУравнений.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ ВтТаблицаДиагональныхКоэффициентов
	|ИЗ
	|	МатрицаКоэффициентов КАК КоэффициентыУравнений
	|ГДЕ
	|	КоэффициентыУравнений.НомерСтрокиУравнения = КоэффициентыУравнений.НомерПеременной
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтрокиУравнения
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	// В качестве вектора решений на первой итерации берутся свободные коэффициенты.
	|ВЫБРАТЬ
	|	СвободныеКоэффициенты.НомерСтрокиУравнения КАК НомерПеременной
	|";
	Для Каждого ИмяКоэффициента Из ИменаСвободныхКоэффициентов Цикл
		ТекстЗапроса = ТекстЗапроса + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(",
		|	ВЫРАЗИТЬ(СвободныеКоэффициенты.%1 КАК ЧИСЛО(28,10)) КАК %1
		|", ИмяКоэффициента);
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ ТаблицаРешений
	|ИЗ
	|	МатрицаСвободныхКоэффициентов КАК СвободныеКоэффициенты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерПеременной
	|";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстЗапросаОднойИтерации(ИменаСвободныхКоэффициентов);
	
	СчетчикИтераций = 1;
	ТекущееОтклонение = 1;
	Пока ТекущееОтклонение > ТребуемаяТочность И СчетчикИтераций < МаксКоличествоИтераций Цикл 
		
		Выборка = Запрос.ВыполнитьПакет()[1].Выбрать();
		Если Выборка.Следующий() Тогда
			ТекущееОтклонение = 0;
			Для Каждого ИмяКоэффициента Из ИменаСвободныхКоэффициентов Цикл
				ТекущееОтклонение = Макс(ТекущееОтклонение, Выборка["Отклонение" + ИмяКоэффициента]);
			КонецЦикла;
		Иначе
			ТекущееОтклонение = 0; //Отклонений нет
		КонецЕсли;
		
		СчетчикИтераций = СчетчикИтераций + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьИменаСвободныхКоэффициентов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 * ИЗ МатрицаСвободныхКоэффициентов");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	РезультатЗапроса = Запрос.Выполнить();
	
	ИменаКоэффициентов = Новый Массив;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Если ВРег(Колонка.Имя) = ВРег("НомерСтрокиУравнения") Тогда
			Продолжить;
		КонецЕсли;
		ИменаКоэффициентов.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Возврат ИменаКоэффициентов;
	
КонецФункции

Функция ТекстЗапросаОднойИтерации(ИменаСвободныхКоэффициентов)
	
	ТекстЗапроса = "
	// 0 Расчет коэффициентов (количество перехода из состояния в состояние) уравнения. D^(-1)(b - (A-D)X)
	|ВЫБРАТЬ
	|	СтрокиСистемыУравнений.НомерСтрокиУравнения КАК НомерПеременной
	|";
	Для Каждого ИмяКоэффициента Из ИменаСвободныхКоэффициентов Цикл
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(",
		|	ВЫРАЗИТЬ(
		|		(МАКСИМУМ(СтрокиСистемыУравнений.%1) - ЕСТЬNULL(СУММА(ТаблицаРешений.%1 * КоэффициентыУравнений.Коэффициент), 0)) КАК ЧИСЛО(28,10))
		|		/ МАКСИМУМ(КоэффициентыДиагонали.Коэффициент) КАК %1
		|", ИмяКоэффициента);
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ ВременнаяТаблицаРешений
	|ИЗ
	//	b
	|	МатрицаСвободныхКоэффициентов КАК СтрокиСистемыУравнений
	|
	//		(A - D)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаКоэффициентовБезДиагональных КАК КоэффициентыУравнений
	|		ПО
	|			СтрокиСистемыУравнений.НомерСтрокиУравнения = КоэффициентыУравнений.НомерСтрокиУравнения
	|
	//		D
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаДиагональныхКоэффициентов КАК КоэффициентыДиагонали
	|		ПО
	|			СтрокиСистемыУравнений.НомерСтрокиУравнения = КоэффициентыДиагонали.НомерСтрокиУравнения
	|
	//		X
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРешений КАК ТаблицаРешений
	|		ПО
	|			КоэффициентыУравнений.НомерПеременной = ТаблицаРешений.НомерПеременной
	|ГДЕ
	|	КоэффициентыДиагонали.Коэффициент <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиСистемыУравнений.НомерСтрокиУравнения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерПеременной
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	// 1 Расчет ошибки расчета.
	|ВЫБРАТЬ
	|	0 КАК Поле1
	|";
	Для Каждого ИмяКоэффициента Из ИменаСвободныхКоэффициентов Цикл
		ТекстЗапроса = ТекстЗапроса + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(",
		|	МАКСИМУМ(
		|		ВЫБОР КОГДА (ТаблицаРешений.%1 - ВременнаяТаблицаРешений.%1) > 0 ТОГДА
		|			ТаблицаРешений.%1 - ВременнаяТаблицаРешений.%1
		|		ИНАЧЕ
		|			-(ТаблицаРешений.%1 - ВременнаяТаблицаРешений.%1)
		|		КОНЕЦ
		|	) КАК Отклонение%1
		|", ИмяКоэффициента);
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	ВременнаяТаблицаРешений КАК ВременнаяТаблицаРешений
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРешений КАК ТаблицаРешений
	|		ПО
	|			ВременнаяТаблицаРешений.НомерПеременной = ТаблицаРешений.НомерПеременной
	|;
	|
	|//////////////////////////////////////////////////////////////
	// 2 Удаление старого решения.
	|УНИЧТОЖИТЬ ТаблицаРешений
	|;
	|
	|//////////////////////////////////////////////////////////////
	// 3 Заполнение нового решения.
	|ВЫБРАТЬ
	|	ВременнаяТаблицаРешений.НомерПеременной КАК НомерПеременной
	|";
	Для Каждого ИмяКоэффициента Из ИменаСвободныхКоэффициентов Цикл
		ТекстЗапроса = ТекстЗапроса + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(",
		|	ВЫРАЗИТЬ(ВременнаяТаблицаРешений.%1 КАК ЧИСЛО(28,10)) КАК %1
		|", ИмяКоэффициента);
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ ТаблицаРешений
	|ИЗ
	|	ВременнаяТаблицаРешений КАК ВременнаяТаблицаРешений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерПеременной
	|;
	|
	|//////////////////////////////////////////////////////////////
	// 4 Удаление таблицы.
	|	УНИЧТОЖИТЬ ВременнаяТаблицаРешений
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура РешитьСЛАУСредствамиПлатформы(МенеджерВременныхТаблиц, ТребуемаяТочность = 0.000001, МаксКоличествоИтераций = 200)
	
	ИменаСвободныхКоэффициентов = ОпределитьИменаСвободныхКоэффициентов(МенеджерВременныхТаблиц);
	
	ТекстЗапроса = "
	// Таблица коэффициентов
	|ВЫБРАТЬ
	|	КоэффициентыУравнений.НомерСтрокиУравнения КАК НомерСтрокиУравнения,
	|	КоэффициентыУравнений.НомерПеременной КАК НомерПеременной,
	|	КоэффициентыУравнений.Коэффициент КАК Коэффициент
	|ИЗ
	|	МатрицаКоэффициентов КАК КоэффициентыУравнений
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	// Свободные коэффициенты.
	|ВЫБРАТЬ
	|	СвободныеКоэффициенты.НомерСтрокиУравнения КАК НомерСтрокиУравнения
	|";
	Для Каждого ИмяКоэффициента Из ИменаСвободныхКоэффициентов Цикл
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(",
		|	ВЫРАЗИТЬ(СвободныеКоэффициенты.%1 КАК ЧИСЛО(28,10)) КАК %1
		|", ИмяКоэффициента);
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	МатрицаСвободныхКоэффициентов КАК СвободныеКоэффициенты
	|";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РасчетСистемЛинейныхУравнений = ОбщегоНазначения.ВычислитьВБезопасномРежиме("Новый РасчетСистемЛинейныхУравнений");
	
	РасчетСистемЛинейныхУравнений.КоличествоИтераций =МаксКоличествоИтераций;
	РасчетСистемЛинейныхУравнений.ТребуемаяТочность = ТребуемаяТочность;
	
	РасчетСистемЛинейныхУравнений.ИсточникДанныхУзлов = РезультатЗапроса[1];
	РасчетСистемЛинейныхУравнений.ИсточникДанныхСвязей = РезультатЗапроса[0];
	
	// описание ключевых колонок
	РасчетСистемЛинейныхУравнений.КолонкаУравненияВУзлах = "НомерСтрокиУравнения";
	РасчетСистемЛинейныхУравнений.КолонкаУравненияВСвязях = "НомерСтрокиУравнения";
	РасчетСистемЛинейныхУравнений.КолонкаПеременныеВСвязях = "НомерПеременной";
	
	Для Индекс = 0 По ИменаСвободныхКоэффициентов.ВГраница() Цикл
		ОписаниеСистемы = РасчетСистемЛинейныхУравнений.ОписанияСистем.Добавить();
		ОписаниеСистемы.КолонкаКоэффициентовВУзлах = ИменаСвободныхКоэффициентов[Индекс];
		ОписаниеСистемы.КолонкаКоэффициентовВСвязях = "Коэффициент";
	КонецЦикла;
	
	ТаблицаРешений = РасчетСистемЛинейныхУравнений.РассчитатьСистемыЛинейныхУравнений();
	
	Запрос.УстановитьПараметр("ТаблицаРешений", ТаблицаРешений);
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаРешений.НомерУзла КАК НомерПеременной
	|";
	Для Индекс = 0 По ИменаСвободныхКоэффициентов.ВГраница() Цикл
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(",
		|	ВЫРАЗИТЬ(ТаблицаРешений.Решение%1 КАК ЧИСЛО(28,10)) КАК %2
		|", Индекс + 1, ИменаСвободныхКоэффициентов[Индекс]);
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ ТаблицаРешений
	|
	|ИЗ
	|	&ТаблицаРешений КАК ТаблицаРешений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерПеременной
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти // РешениеСЛАУ

#Область Прочее

Функция ОрганизацииСДвижениямиПоСебестоимости(ПериодРасчета, ОтборОрганизации = Неопределено)
	
	Если ОтборОрганизации = Неопределено Тогда
		ОтборОрганизации = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Аналитика.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Данные
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК Аналитика
	|	ПО
	|		Аналитика.КлючАналитики = Данные.АналитикаВидаУчета
	|ГДЕ
	|	Данные.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Данные.Активность
	|	И (&ПоВсемОрганизациям ИЛИ Аналитика.Организация В (&ОтборОрганизации))
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода"     , НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода"      , КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("ОтборОрганизации"  , ОтборОрганизации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Не ЗначениеЗаполнено(ОтборОрганизации));
	
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат МассивОрганизаций;
	
КонецФункции

Функция ОпределитьМетодОценкиСтоимости(СписокОрганизаций, Дата)
	
	МетодОценкиСтоимости  = Неопределено;
	ОдинаковыйМетодОценки = Истина;
	ТекстОрганизации      = "";
	
	Для Каждого Организация Из СписокОрганизаций Цикл
		
		Результат = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьМетодОценкиСтоимостиТоваров(Организация, НачалоМесяца(Дата));
		
		Если Результат <> Неопределено Тогда
			
			Если МетодОценкиСтоимости <> Результат Тогда
				Если МетодОценкиСтоимости = Неопределено Тогда
					МетодОценкиСтоимости = Результат;
				Иначе
					ОдинаковыйМетодОценки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ТекстОрганизации = ТекстОрганизации
				+ ?(Не ПустаяСтрока(ТекстОрганизации), ", ", "")
				+ Строка(Организация);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОдинаковыйМетодОценки Тогда
		
		ТекстИсключения = НСтр("ru = 'Различается метод оценки стоимости запасов для организаций: %Организации%.
			|Настройку можно сделать в учетной политике организации'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Организации%", ТекстОрганизации);
		
		// Не совпадает метод оценки стоимости
		ЗаписьЖурналаРегистрации(
			ИмяСобытияОшибкиДляЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Организации,
			,
			ТекстИсключения,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МетодОценкиСтоимости) Тогда
		МетодОценкиСтоимости = Перечисления.МетодыОценкиСтоимостиТоваров.ПоСредней;
	КонецЕсли;
	
	Возврат МетодОценкиСтоимости;
	
КонецФункции

// Возвращает перечень объектов метаданных, на основании данных которых выполняется расчет себестоимости.
//
// Параметры:
//	ТолькоТребующиеПерерасчетаСебестоимости - Булево - если установлен, то будет возвращен перечень только тех данных,
//		изменение которых влечет за собой необходимость перерасчета себестоимости
//		При изменении этих данных должна создаваться запись в регистре сведений ЗаданияКРасчетуСебестоимости.
//
// Возвращаемое значение:
//  Массив - Значение - ОбъектМетаданных
//
Функция ВходящиеДанныеМеханизма(ТолькоТребующиеПерерасчетаСебестоимости = Ложь) Экспорт
	
	ВходящиеДанные = Новый Массив;
	
	ВходящиеДанные.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	ВходящиеДанные.Добавить(Метаданные.РегистрыНакопления.РасходыКРаспределениюНаСебестоимость);
	
	Если Не ТолькоТребующиеПерерасчетаСебестоимости Тогда
		
		ТипыДокументов = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Реквизиты.ДокументДвижения.Тип.Типы();
		Для Каждого ТипДокумента Из ТипыДокументов Цикл
			ВходящиеДанные.Добавить(Метаданные.НайтиПоТипу(ТипДокумента));
		КонецЦикла;
		
		ВходящиеДанные.Добавить(Метаданные.РегистрыСведений.АналитикаУчетаНоменклатуры);
		ВходящиеДанные.Добавить(Метаданные.РегистрыСведений.АналитикаВидаУчета);
		ВходящиеДанные.Добавить(Метаданные.РегистрыСведений.НастройкаМетодовОценкиСтоимостиТоваров);
		ВходящиеДанные.Добавить(Метаданные.РегистрыСведений.СтоимостьТоваров);
		
	КонецЕсли;
	
	Возврат ВходящиеДанные;
	
КонецФункции

// Возвращает перечень регистров, по которым формируются движения при расчете себестоимости.
//
// Возвращаемое значение:
//  Массив - Значение - ОбъектМетаданных
//
Функция ИсходящиеДанныеМеханизма()
	
	// Перечень метаданных регистров, по которым формируются движения при расчете себестоимости.
	ИсходящиеДанные = Новый Массив;
	
	ИсходящиеДанные.Добавить(Метаданные.РегистрыСведений.СтоимостьТоваров);
	
	ИсходящиеДанные.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж);
	ИсходящиеДанные.Добавить(Метаданные.РегистрыНакопления.Закупки);
	ИсходящиеДанные.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы);
	ИсходящиеДанные.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура);
	ИсходящиеДанные.Добавить(Метаданные.РегистрыНакопления.РасходыКРаспределениюНаСебестоимость);
	ИсходящиеДанные.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	ИсходящиеДанные.Добавить(Метаданные.РегистрыНакопления.ТоварыОтпущенныеВОтделения);
	ИсходящиеДанные.Добавить(Метаданные.РегистрыНакопления.ТоварыСписанныеПоНазначениямВрачей);
	
	Возврат ИсходящиеДанные;
	
КонецФункции

Процедура ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ()
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаблокированы = Ложь;
	
	ПредставлениеОперации = ИмяСобытияЖурналаРегистрации();
	
	ТекстОшибкиДляЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1: выполнение невозможно - не завершено обновление ИБ.
			|Корректное выполнение операции будет возможно после того,
			|когда будут успешно завершены все обработчики обновление исходных данных для этой операции.'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		ПредставлениеОперации);
	
	ДанныеСОтборомПоСсылкам = Новый Массив;
	
	ВходящиеДанные = ВходящиеДанныеМеханизма();
	Для Каждого ОписаниеДанных Из ВходящиеДанные Цикл
		
		Если ОбщегоНазначения.ЭтоРегистрСведений(ОписаниеДанных) И ОписаниеДанных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ОписаниеДанных) Тогда
				
				ДанныеЗаблокированы = Истина;
				
				ЗаписьЖурналаРегистрации(
					ИмяСобытияОшибкиДляЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					ОписаниеДанных,
					,
					ТекстОшибкиДляЖурнала);
				
			КонецЕсли;
		Иначе
			ДанныеСОтборомПоСсылкам.Добавить(ОписаниеДанных);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеСОтборомПоСсылкам.Количество() > 0 Тогда
		
		// Проверку всех объектов, для которых возможен отбор по ссылке/регистратору, выполним за один вызов.
		Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ДанныеСОтборомПоСсылкам) Тогда
			
			ДанныеЗаблокированы = Истина;
			
			ТекстОшибкиДляЖурнала = ТекстОшибкиДляЖурнала + "
				|
				|" + НСтр("ru='Необходимо дождаться завершения обработки всех данных следующих типов:'");
			
			Для Каждого ОписаниеДанных Из ДанныеСОтборомПоСсылкам Цикл
				// Перечислим имена объектов метаданных, среди которые есть еще не обработанные данные.
				ТекстОшибкиДляЖурнала = ТекстОшибкиДляЖурнала + "
					|- " + ОписаниеДанных.ПолноеИмя();
			КонецЦикла;
			
			ЗаписьЖурналаРегистрации(
				ПредставлениеОперации,
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстОшибкиДляЖурнала);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаблокированы Тогда
		// Нельзя выполнять операцию - не завершено обновление всех ее входящих данных.
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1: выполнение невозможно - не завершено обновление ИБ.
				|Подробнее см. в Журнале регистрации.'"),
			ПредставлениеОперации);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Функция УдалитьДокументыРасчетаСебестоимости(ТаблицаДокументов, Отбор, ОставитьПервый = Ложь)
	
	ОставленныйДокумент = Неопределено;
	
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		СтрокиТаблицы = ТаблицаДокументов.НайтиСтроки(Отбор);
	Иначе
		СтрокиТаблицы = Отбор;
	КонецЕсли;
	
	Индекс = 0;
	
	НаборЗаписей = РегистрыСведений.ГраницыРасчетаСебестоимостиТоваров.СоздатьНаборЗаписей();
	
	Для Каждого ТекущаяСтрока Из СтрокиТаблицы Цикл
		
		Индекс = Индекс + 1;
		Если ОставитьПервый И Индекс = 1 Тогда
			ОставленныйДокумент = ТекущаяСтрока.Ссылка;
			Продолжить;
		КонецЕсли;
		
		// Пометим документ на удаление
		ДокументОбъект = ТекущаяСтрока.Ссылка.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		
		// Очистим задание к расчету, которое запишется из события в модулях наборов записей распроведенного документа
		НаборЗаписей.Отбор.Документ.Установить(ТекущаяСтрока.Ссылка);
		НаборЗаписей.Записать(Истина);
		
		ТаблицаДокументов.Удалить(ТекущаяСтрока);
		
	КонецЦикла;
	
	Возврат ОставленныйДокумент;
	
КонецФункции

Процедура ЗаписатьДвиженияПоРегистру(Выборка, МенеджерРегистра, РазмерНабораЗаписей, Замещать = Истина, ТолькоОчищатьЗаписи = Ложь)
	
	НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
	НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	
	ТекущийРегистратор = Неопределено;
	НомерПорцииЗаписи = 1;
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущийРегистратор <> Выборка.Регистратор Тогда
			
			// Если изменился регистратор в движениях - запишем движения предыдущего регистратора
			Если ЗначениеЗаполнено(ТекущийРегистратор) Тогда
				НаборЗаписей.Записать(ТолькоОчищатьЗаписи Или Замещать И НомерПорцииЗаписи = 1);
				НаборЗаписей.Очистить();
			КонецЕсли;
			
			ТекущийРегистратор = Выборка.Регистратор;
			НомерПорцииЗаписи = 1;
			
			НаборЗаписей.Отбор.Регистратор.Установить(ТекущийРегистратор);
			
		ИначеЕсли Не ТолькоОчищатьЗаписи И НаборЗаписей.Количество() >= РазмерНабораЗаписей Тогда
			
			// Если в движениях документа много записей - будем записывать их порциями
			// Первая порция записывается с замещением старых записей, следующие - с добавлением к предыдущим порциям
			НаборЗаписей.Записать(Замещать И НомерПорцииЗаписи = 1);
			НаборЗаписей.Очистить();
			
			НомерПорцииЗаписи = НомерПорцииЗаписи + 1;
			
		КонецЕсли;
		
		Если Не ТолькоОчищатьЗаписи Тогда
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущийРегистратор) Тогда
		НаборЗаписей.Записать(ТолькоОчищатьЗаписи Или Замещать И НомерПорцииЗаписи = 1);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает общее для всех этапов расчета себестоимости имя события для журнала регистрации.
//
Функция ИмяСобытияЖурналаРегистрации(Уточнение = "")
	
	ИмяСобытия = НСтр("ru = 'Расчет себестоимости'", ОбщегоНазначения.КодОсновногоЯзыка());
	Если Не ПустаяСтрока(Уточнение) Тогда
		ИмяСобытия = ИмяСобытия + "." + Уточнение;
	КонецЕсли;
	
	Возврат ИмяСобытия;
	
КонецФункции

// Возвращает имя события журнала для записи ошибки расчета.
//
Функция ИмяСобытияОшибкиДляЖурналаРегистрации() Экспорт
	
	Возврат ИмяСобытияЖурналаРегистрации(НСтр("ru='Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ТекстОшибкаОбработана()
	
	Возврат "{ОшибкаОбработана}";
	
КонецФункции

// Возвращает имя служебного доп. свойства, устанавливаемого у всех объектов, записываемых этим механизмом.
//
Функция ИмяСлужебногоДополнительногоСвойстваОбъекта()
	Возврат "РасчетСебестоимости";
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // РасчетСебестоимости

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ
#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьПризнакРасчетаСебестоимостиДвиженийОтложенноДанныеДляОбновления(Параметры) Экспорт
	
	ТекстЗапроса = "";
	ИменаТаблиц = Новый Массив;
	Для Каждого Регистр Из ИсходящиеДанныеОбновления() Цикл
		
		ИменаТаблиц.Добавить(Регистр.ПолноеИмя());
		ТекстЗапросаРегистра = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаРегистра.Регистратор
		|ИЗ
		|	#ТаблицаРегистра КАК ТаблицаРегистра
		|ГДЕ
		|	ТаблицаРегистра.Регистратор ССЫЛКА Документ.РасчетСебестоимостиТоваров
		|	И НЕ ТаблицаРегистра.РасчетСебестоимости
		|";
		
		ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "#ТаблицаРегистра", Регистр.ПолноеИмя());
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРегистра;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Граница = ПакетРезультатов.ВГраница();
	
	Для Индекс = 0 По Граница Цикл
		
		ИмяРегистра = ИменаТаблиц[Индекс];
		Регистраторы = ПакетРезультатов[Индекс].Выгрузить().ВыгрузитьКолонку("Регистратор");
		ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ИмяРегистра);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакРасчетаСебестоимостиДвиженийОтложенно(Параметры) Экспорт
	
	ПолноеИмяДокумента = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТекстЗапроса = "";
	ИменаТаблиц = Новый Массив;
	Для Каждого Регистр Из ИсходящиеДанныеОбновления() Цикл
		
		ДополнительныеПараметры.ИмяВременнойТаблицы = Регистр.Имя;
		
		ПолноеИмяРегистра = Регистр.ПолноеИмя();
		
		ПараметрыДляОбработки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(
			Параметры.Очередь,
			ПолноеИмяДокумента,
			ПолноеИмяРегистра,
			МенеджерВременныхТаблиц,
			ДополнительныеПараметры);
		
		Если ПараметрыДляОбработки.ЕстьЗаписиВоВременнойТаблице Тогда
			
			ИменаТаблиц.Добавить(ПолноеИмяРегистра);
			ТекстЗапросаРегистра = "
			|ВЫБРАТЬ
			|	ДанныеКОбработке.Регистратор КАК Регистратор,
			|	МАКСИМУМ(ЕСТЬNULL(НЕ ТаблицаРегистра.РасчетСебестоимости, ЛОЖЬ)) КАК ТребуетсяОбработка
			|ИЗ
			|	#ВТТаблицаРегистра КАК ДанныеКОбработке
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		#ТаблицаРегистра КАК ТаблицаРегистра
			|	ПО
			|		ТаблицаРегистра.Регистратор = ДанныеКОбработке.Регистратор
			|СГРУППИРОВАТЬ ПО
			|	ДанныеКОбработке.Регистратор
			|";
			
			ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "#ТаблицаРегистра"   , ПолноеИмяРегистра);
			ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "#ВТТаблицаРегистра" , ДополнительныеПараметры.ИмяВременнойТаблицы);
			
			Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
				ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРегистра;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Граница = ПакетРезультатов.ВГраница();
	
	Параметры.ОбработкаЗавершена = Истина;
	
	Для ИндексПакета = 0 По Граница Цикл
		
		ИмяРегистра = ИменаТаблиц[ИндексПакета];
		МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяРегистра);
		
		РезультатЗапроса = ПакетРезультатов[ИндексПакета];
		Выборка = РезультатЗапроса.Выбрать();;
		Пока Выборка.Следующий() Цикл
			
			Набор = МенеджерРегистра.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Если Выборка.ТребуетсяОбработка Тогда
				Набор.Прочитать();
				
				ПризнакиРасчетаСебестоимости = Новый Массив;
				Для ИндексЗаписи = 1 По Набор.Количество() Цикл
					ПризнакиРасчетаСебестоимости.Добавить(Истина);
				КонецЦикла;
				Набор.ЗагрузитьКолонку(ПризнакиРасчетаСебестоимости, "РасчетСебестоимости");
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Параметры.ОбработкаЗавершена Тогда
			Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ИмяРегистра);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИсходящиеДанныеОбновления()
	
	// Перечень метаданных регистров, по которым формируются движения при расчете себестоимости.
	ИсходящиеДанные = Новый Массив;
	
	ИсходящиеДанные.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж);
	ИсходящиеДанные.Добавить(Метаданные.РегистрыНакопления.Закупки);
	ИсходящиеДанные.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы);
	ИсходящиеДанные.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура);
	ИсходящиеДанные.Добавить(Метаданные.РегистрыНакопления.РасходыКРаспределениюНаСебестоимость);
	ИсходящиеДанные.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	ИсходящиеДанные.Добавить(Метаданные.РегистрыНакопления.ТоварыОтпущенныеВОтделения);
	ИсходящиеДанные.Добавить(Метаданные.РегистрыНакопления.ТоварыСписанныеПоНазначениямВрачей);
	
	Возврат ИсходящиеДанные;
	
КонецФункции

#КонецОбласти // ОбновлениеИнформационнойБазы

#КонецЕсли