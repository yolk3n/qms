
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НазначениеПолученоИзМИС = (Объект.ЛС_Назначения.НайтиСтроки(Новый Структура("УИДНазначения", ПустойУИД)).Количество() <> Объект.ЛС_Назначения.Количество());
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Элементы.ТаблицаНазначенийСкрытьОтмененныеСтроки.Пометка = СкрытьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "" Тогда
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "" Тогда
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОценкаПроизводительностиБольничнаяАптекаКлиент.НачатьЗамерПроведенияДокумента(Объект.Ссылка, Отказ, ПараметрыЗаписи);
	
	Если Модифицированность Тогда
		
		Объект.РасписаниеНазначения.Очистить();
		КоличествоДней = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.РазностьДат(ТекущаяДатаНачала, ТекущаяДатаОкончания, "ДЕНЬ") + 1;
		
		КлючСтроки = 0;
		Для каждого СтрокаНазначения Из Объект.ЛС_Назначения Цикл
			
			Если СтрокаНазначения.КоличествоНазначено = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КлючСтроки = КлючСтроки + 1;
			СтрокаНазначения.КлючСтроки = КлючСтроки;
			
			ТекущийДень = ТекущаяДатаНачала;
			Для Сч = 1 По КоличествоДней Цикл
				
				ПрефиксКолонки = "Дата" + Формат(ТекущийДень, "ДФ=yyyyMMdd");
				
				Количество = СтрокаНазначения[ПрефиксКолонки + "Количество"];
				Если Количество Тогда
					
					НоваяСтрока = Объект.РасписаниеНазначения.Добавить();
					НоваяСтрока.КлючСтроки = КлючСтроки;
					НоваяСтрока.ДатаИсполнения = ТекущийДень;
					НоваяСтрока.Количество = Количество;
					НоваяСтрока.КоличествоИсполнено = СтрокаНазначения[ПрефиксКолонки + "КоличествоИсполнено"];
					НоваяСтрока.КоличествоОтменено = СтрокаНазначения[ПрефиксКолонки + "КоличествоОтменено"];
					НоваяСтрока.КоличествоДозИсполнено = СтрокаНазначения[ПрефиксКолонки + "КоличествоДозИсполнено"];
					
				КонецЕсли;
				
				ТекущийДень = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(ТекущийДень, "ДЕНЬ",  1);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьТаблицуНазначенийПоРасписанию(Объект.ЛС_Назначения, ТекущийОбъект.РасписаниеНазначения);
	ЗаполнитьПризнакЗагрузкиИзМИС();
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Изменить(Команда)
	
	ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Документ получен из МИС. При следующей загрузки данных из МИС изменения будут потеряны.'"), 10);
	РазрешитьРедактированиеДанныхМИС = Истина;
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтроки(Команда)
	
	Если Объект.ЛС_Назначения.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Таблица назначений не заполнена.'"));
		Возврат;
	ИначеЕсли Элементы.ТаблицаНазначений.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='В таблице назначений отсутствуют выделенные строки.'"));
		Возврат;
	КонецЕсли;
	
	КоличествоДней = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.РазностьДат(ТекущаяДатаНачала, ТекущаяДатаОкончания, "ДЕНЬ") + 1;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ТаблицаНазначений.ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = Объект.ЛС_Назначения.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ТекущаяСтрока <> Неопределено Тогда
			
			Если РедактированиеСтрокиЗапрещено(ТекущаяСтрока) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяСтрока.КоличествоНазначено = ТекущаяСтрока.КоличествоОтменено + ТекущаяСтрока.КоличествоИсполнено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекДень = ТекущаяДатаНачала;
			Для Сч = 1 По КоличествоДней Цикл
				
				ПрефиксКолонки = "Дата" + Формат(ТекДень, "ДФ=yyyyMMdd");
				
				Если Не ТекущаяСтрока[ПрефиксКолонки + "Количество"] = 0 Тогда
					Если ЗаполнитьОстатокВЯчейке(ТекущаяСтрока,ПрефиксКолонки, Ложь) Тогда
						ПересчитатьКоличество(ТекущаяСтрока, ТекущаяДатаНачала, ТекущаяДатаОкончания);
					КонецЕсли;
				КонецЕсли;
				
				ТекДень = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(ТекДень, "ДЕНЬ", 1);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выделенные строки отменены'"),
		,
		НСтр("ru='Выделенные строки назначения отменены.'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНеисполненныеСтроки(Команда)
	
	Если Объект.ЛС_Назначения.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Таблица назначений не заполнена.'"));
		Возврат;
	КонецЕсли;
	
	КоличествоДней = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.РазностьДат(ТекущаяДатаНачала, ТекущаяДатаОкончания, "ДЕНЬ") + 1;
	
	КоличествоСтрокОтменено = 0;
	Для Каждого ТекущаяСтрока Из Объект.ЛС_Назначения Цикл
		
		Если ТекущаяСтрока.КоличествоНазначено = ТекущаяСтрока.КоличествоОтменено + ТекущаяСтрока.КоличествоИсполнено Тогда
			Продолжить;
		КонецЕсли;
		
		Если РедактированиеСтрокиЗапрещено(ТекущаяСтрока) Тогда
			Продолжить;
		КонецЕсли;
		
		ЛокальноИзменено = Ложь;
		
		ТекДень = ТекущаяДатаНачала;
		Для Сч = 1 По КоличествоДней Цикл
			
			ПрефиксКолонки = "Дата" + Формат(ТекДень, "ДФ=yyyyMMdd");
			
			Если Не ТекущаяСтрока[ПрефиксКолонки + "Количество"] = 0 Тогда
				
				Если ЗаполнитьОстатокВЯчейке(ТекущаяСтрока,ПрефиксКолонки, Ложь) Тогда
					ЛокальноИзменено = Истина;
					ПересчитатьКоличество(ТекущаяСтрока, ТекущаяДатаНачала, ТекущаяДатаОкончания);
				КонецЕсли;
			КонецЕсли;
			
			ТекДень = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(ТекДень, "ДЕНЬ", 1);
			
		КонецЦикла;
		
		Если ЛокальноИзменено Тогда
			КоличествоСтрокОтменено = КоличествоСтрокОтменено + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоСтрокОтменено = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='В таблице назначений нет строк для отменены.'"));
	Иначе
		
		Модифицированность = Истина;
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки отменены'"),
			,
			НСтр("ru='Все не исполненные строки назначения отменены.'"),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьТекущееПоле(Команда)
	
	ТекущаяСтрока = Элементы.ТаблицаНазначений.ТекущиеДанные;
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		Если РедактированиеСтрокиЗапрещено(ТекущаяСтрока) Тогда
			Возврат;
		КонецЕсли;
		
		ИмяЭлемента = ЗаполнениеКолонкиРазрешено();
		Если Не ПустаяСтрока(ИмяЭлемента) Тогда
			
			// находимся в строке и колонки, которую можно редактировать
			// Элемент.Имя = "ТаблицаНазначенийДатаГГГГММДДИсполнено"
			ПрефиксКолонки = Сред(ИмяЭлемента, Найти(ИмяЭлемента, "Дата"), 12);
			
			Если ЗаполнитьОстатокВЯчейке(ТекущаяСтрока,ПрефиксКолонки, Ложь) Тогда
				Модифицированность = Истина;
				ПересчитатьКоличество(ТекущаяСтрока, ТекущаяДатаНачала, ТекущаяДатаОкончания);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОтмененныеСтроки(Команда)
	
	СкрытьОтмененныеСтроки = Не СкрытьОтмененныеСтроки;
	Элементы.ТаблицаНазначенийСкрытьОтмененныеСтроки.Пометка = СкрытьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИсполнениеДляВыделенныхСтрок(Команда)
	
	Если Объект.ЛС_Назначения.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Таблица назначений не заполнена.'"));
		Возврат;
	ИначеЕсли Элементы.ТаблицаНазначений.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='В таблице назначений отсутствуют выделенные строки.'"));
		Возврат;
	КонецЕсли;
	
	КоличествоДней = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.РазностьДат(ТекущаяДатаНачала, ТекущаяДатаОкончания, "ДЕНЬ") + 1;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ТаблицаНазначений.ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = Объект.ЛС_Назначения.НайтиПоИдентификатору(ВыделеннаяСтрока);
			
		Если ТекущаяСтрока <> Неопределено Тогда
			
			Если РедактированиеСтрокиЗапрещено(ТекущаяСтрока) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяСтрока.КоличествоНазначено = ТекущаяСтрока.КоличествоОтменено + ТекущаяСтрока.КоличествоИсполнено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекДень = ТекущаяДатаНачала;
			Для Сч = 1 По КоличествоДней Цикл
				
				ПрефиксКолонки = "Дата" + Формат(ТекДень, "ДФ=yyyyMMdd");
				
				Если Не ТекущаяСтрока[ПрефиксКолонки + "Количество"] = 0 Тогда
					Если ЗаполнитьОстатокВЯчейке(ТекущаяСтрока,ПрефиксКолонки, Истина) Тогда
						ПересчитатьКоличество(ТекущаяСтрока, ТекущаяДатаНачала, ТекущаяДатаОкончания);
					КонецЕсли;
				КонецЕсли;
				
				ТекДень = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(ТекДень, "ДЕНЬ", 1);
				
			КонецЦикла;
				
		КонецЕсли;
		
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Для выделенных строк установлено исполнение'"),
		,
		НСтр("ru='Для выделенных строк назначения установлено исполнение.'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИсполнениеДляНеотмененныхСтрок(Команда)
	
	Если Объект.ЛС_Назначения.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Таблица назначений не заполнена.'"));
		Возврат;
	КонецЕсли;
	
	КоличествоДней = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.РазностьДат(ТекущаяДатаНачала, ТекущаяДатаОкончания, "ДЕНЬ") + 1;
	
	КоличествоСтрокИсполнено = 0;
	
	Для Каждого ТекущаяСтрока Из Объект.ЛС_Назначения Цикл
		
		Если РедактированиеСтрокиЗапрещено(ТекущаяСтрока) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяСтрока.КоличествоНазначено = ТекущаяСтрока.КоличествоОтменено + ТекущаяСтрока.КоличествоИсполнено Тогда
			Продолжить;
		КонецЕсли;
		
		ЛокальноИзменено = Ложь;
		ТекДень = ТекущаяДатаНачала;
		Для Сч = 1 По КоличествоДней Цикл
			
			ПрефиксКолонки = "Дата" + Формат(ТекДень, "ДФ=yyyyMMdd");
			
			Если Не ТекущаяСтрока[ПрефиксКолонки + "Количество"] = 0 Тогда
				
				Если ЗаполнитьОстатокВЯчейке(ТекущаяСтрока,ПрефиксКолонки, Истина) Тогда
					ЛокальноИзменено = Истина;
					ПересчитатьКоличество(ТекущаяСтрока, ТекущаяДатаНачала, ТекущаяДатаОкончания);
				КонецЕсли;
			КонецЕсли;
			
			ТекДень = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(ТекДень, "ДЕНЬ",  1);
			
		КонецЦикла;
		
		Если ЛокальноИзменено Тогда
			КоличествоСтрокИсполнено = КоличествоСтрокИсполнено + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоСтрокИсполнено = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='В таблице назначений нет строк для исполнения.'"));
	Иначе
		
		Модифицированность = Истина;
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Для Строки установлено исполнение'"),
			,
			НСтр("ru='Для всех не отмененных строк назначения установлено исполнение.'"),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИсполнениеДляТекущейКолонки(Команда)
	
	Если Объект.ЛС_Назначения.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Таблица назначений не заполнена.'"));
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = ЗаполнениеКолонкиРазрешено();
	Если Не ПустаяСтрока(ИмяЭлемента) Тогда
		// находимся в строке и колонки, которую можно редактировать
		// Элемент.Имя = "ТаблицаНазначенийДатаГГГГММДДИсполнено"
		ПрефиксКолонки = Сред(ИмяЭлемента, Найти(ИмяЭлемента, "Дата"), 12);
		
		Для каждого ТекущаяСтрока Из Объект.ЛС_Назначения Цикл
			
			// проверка возможности редактирования
			Если РедактированиеСтрокиЗапрещено(ТекущаяСтрока) Тогда
				Возврат;
			КонецЕсли;
			
			Если ЗаполнитьОстатокВЯчейке(ТекущаяСтрока,ПрефиксКолонки, Истина) Тогда
				ПересчитатьКоличество(ТекущаяСтрока, ТекущаяДатаНачала, ТекущаяДатаОкончания);
			КонецЕсли;
			
		КонецЦикла;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Для текущей колонки установлено исполнение'"),
			,
			НСтр("ru='Для текущей колонки назначения установлено исполнение.'"),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИсполнениеДляТекущегоПоля(Команда)
	
	ТекущаяСтрока = Элементы.ТаблицаНазначений.ТекущиеДанные;
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		Если РедактированиеСтрокиЗапрещено(ТекущаяСтрока) Тогда
			Возврат;
		КонецЕсли;
		
		ИмяЭлемента = ЗаполнениеКолонкиРазрешено();
		Если Не ПустаяСтрока(ИмяЭлемента) Тогда
			
			// находимся в строке и колонки, которую можно редактировать
			// Элемент.Имя = "ТаблицаНазначенийДатаГГГГММДДИсполнено"
			ПрефиксКолонки = Сред(ИмяЭлемента, Найти(ИмяЭлемента, "Дата"), 12);
			
			Если ЗаполнитьОстатокВЯчейке(ТекущаяСтрока,ПрефиксКолонки, Истина) Тогда
				ПересчитатьКоличество(ТекущаяСтрока, ТекущаяДатаНачала, ТекущаяДатаОкончания);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФОЛСИзФормуляра(Команда)
	
	ПараметрыВыбораФОЛС = Новый Структура;
	ПараметрыВыбораФОЛС.Вставить("Отделение", Объект.Отделение);
	ПараметрыВыбораФОЛС.Вставить("ПериодФормуляра", Объект.Дата);
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьСтрокуНазначения", ЭтотОбъект);
	
	ОткрытьФорму("Документ.НазначениеВрача.Форма.ФормаВыбораИзФормуляра", ПараметрыВыбораФОЛС, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФОЛС(Команда)
	
	ПараметрыВыбораФОЛС = Новый Структура;
	ПараметрыВыбораФОЛС.Вставить("Отделение", Объект.Отделение);
	ПараметрыВыбораФОЛС.Вставить("ИспользоватьФормуляр", Ложь);
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьСтрокуНазначения", ЭтотОбъект);
	
	ОткрытьФорму("Документ.НазначениеВрача.Форма.ФормаВыбораФОЛС", ПараметрыВыбораФОЛС, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуру(Команда)
	
	ПараметрыВыбораНоменклатуры = Новый Структура;
	ПараметрыВыбораНоменклатуры.Вставить("Отделение", Объект.Отделение);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ТаблицаНазначенийНоменклатура.ПараметрыВыбора);
	ПараметрыВыбораНоменклатуры.Вставить("Отбор", Новый Структура("ТипНоменклатуры", Новый ФиксированныйМассив(ТипыНоменклатуры)));
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьСтрокуНазначения", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора", ПараметрыВыбораНоменклатуры, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	ОбщегоНазначенияБольничнаяАптекаКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Шапка
#Область Шапка

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтделениеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Отделение) Тогда
		ОбработатьИзменениеОтделения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНазначенияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбораПериода = Новый Структура;
	ПараметрыВыбораПериода.Вставить("ДатаНачала", ТекущаяДатаНачала);
	ПараметрыВыбораПериода.Вставить("ДатаОкончания", ТекущаяДатаОкончания);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборПериодаНазначения", ЭтотОбъект);
	
	ОткрытьФорму("Документ.НазначениеВрача.Форма.ФормаВыбораПериода", ПараметрыВыбораПериода, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

#КонецОбласти // Шапка

////////////////////////////////////////////////////////////////////////////////
// Список "Назначения"
#Область Назначения

&НаКлиенте
Процедура ТаблицаНазначенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаНазначенийНоменклатура"
	 Или Поле.Имя = "ТаблицаНазначенийТорговоеНаименование"
	 Или Поле.Имя = "ТаблицаНазначенийДействующиеВеществаМНН"
	 Или Поле.Имя = "ТаблицаНазначенийФормаВыпуска" Тогда
		
		ТекущаяСтрока = Элементы.ТаблицаНазначений.ТекущиеДанные;
		
		ПараметрыВыбораФОЛС = Новый Структура(
			"Номенклатура, ТорговоеНаименование, ДействующиеВеществаМНН, ФормаВыпуска, ЕдиницаИзмерения");
		ЗаполнитьЗначенияСвойств(ПараметрыВыбораФОЛС, ТекущаяСтрока);
		ПараметрыВыбораФОЛС.Вставить("ТолькоПросмотр", ТолькоПросмотр Или РедактированиеСтрокиЗапрещено(ТекущаяСтрока));
		
		ОткрытьФорму("Обработка.ПодборПоФормальнымОписаниямЛекарственныхСредств.Форма.ФормаВыбора", ПараметрыВыбораФОЛС, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНазначенийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ОбрабатываемыеПоля = "Номенклатура, ТорговоеНаименование, ДействующиеВеществаМНН, ФормаВыпуска, ЕдиницаИзмерения";
		ТекущаяСтрока = Элементы.ТаблицаНазначений.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыбранноеЗначение, ОбрабатываемыеПоля);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНазначенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаНазначенийКоличествоПриИзменении(Элемент)
	
	// Элемент.Имя = "ТаблицаНазначенийДатаГГГГММДДКоличество"
	ПрефиксКолонки = Сред(Элемент.Имя, Найти(Элемент.Имя, "Дата"), 12);
	
	ТекущаяСтрока = Элементы.ТаблицаНазначений.ТекущиеДанные;
	
	// отменить можно не больше назначенного
	ТекущийОстаток = ТекущаяСтрока[ПрефиксКолонки + "КоличествоОтменено"]
	               + ТекущаяСтрока[ПрефиксКолонки + "КоличествоИсполнено"];
	Если ТекущаяСтрока[ПрефиксКолонки + "Количество"] < ТекущийОстаток Тогда
		ТекущаяСтрока[ПрефиксКолонки + "Количество"] = ТекущийОстаток;
	КонецЕсли;
	
	ПересчитатьКоличествоВЯчейке(ТекущаяСтрока,ПрефиксКолонки, Истина);
	
	ПересчитатьКоличество(ТекущаяСтрока, ТекущаяДатаНачала, ТекущаяДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаНазначенийКоличествоИсполненоПриИзменении(Элемент)
	
	// Элемент.Имя = "ТаблицаНазначенийДатаГГГГММДДКоличество"
	ПрефиксКолонки = Сред(Элемент.Имя, Найти(Элемент.Имя, "Дата"), 12);
	
	ТекущаяСтрока = Элементы.ТаблицаНазначений.ТекущиеДанные;
	ПересчитатьКоличествоВЯчейке(ТекущаяСтрока,ПрефиксКолонки, Истина);
	ПересчитатьКоличество(ТекущаяСтрока, ТекущаяДатаНачала, ТекущаяДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаНазначенийКоличествоДозИсполненоПриИзменении(Элемент)
	
	// Элемент.Имя = "ТаблицаНазначенийДатаГГГГММДДКоличество"
	ПрефиксКолонки = Сред(Элемент.Имя, Найти(Элемент.Имя, "Дата"), 12);
	
	ТекущаяСтрока = Элементы.ТаблицаНазначений.ТекущиеДанные;
	ПересчитатьКоличествоВЯчейке(ТекущаяСтрока,ПрефиксКолонки, Истина);
	ПересчитатьКоличество(ТекущаяСтрока, ТекущаяДатаНачала, ТекущаяДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаНазначенийКоличествоОтмененоПриИзменении(Элемент)
	
	// Элемент.Имя = "ТаблицаНазначенийДатаГГГГММДДКоличество"
	ПрефиксКолонки = Сред(Элемент.Имя, Найти(Элемент.Имя, "Дата"), 12);
	
	ТекущаяСтрока = Элементы.ТаблицаНазначений.ТекущиеДанные;
	ПересчитатьКоличествоВЯчейке(ТекущаяСтрока,ПрефиксКолонки, Ложь);
	ПересчитатьКоличество(ТекущаяСтрока, ТекущаяДатаНачала, ТекущаяДатаОкончания);
	
КонецПроцедуры

#КонецОбласти // Назначения

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	СформироватьТаблицуНазначенийПоДокументу();
	ЗаполнитьПризнакЗагрузкиИзМИС();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	ЗаказыСервер.УстановитьОформлениеОтбораНоменклатуры(ЭтотОбъект, Элементы.ТаблицаНазначений.Имя);
	
	УстановитьОформлениеОтмененнойСтроки();
	УстановитьОформлениеДанныхИзМИС();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеОтмененнойСтроки()
	
	// Оформление отмененной строки
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНазначений.Имя);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНазначенийКоличествоНазначено.ПутьКДанным);
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНазначенийКоличествоОтменено.ПутьКДанным);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНазначенийКоличествоНазначено.ПутьКДанным);
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОТбор.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	// Скрыть отмененные строки
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНазначений.Имя);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНазначенийКоличествоНазначено.ПутьКДанным);
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНазначенийКоличествоОтменено.ПутьКДанным);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНазначенийКоличествоНазначено.ПутьКДанным);
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОТбор.ПравоеЗначение = 0;
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкрытьОтмененныеСтроки");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОТбор.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеДанныхИзМИС()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНазначений.Имя);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНазначений.ПутьКДанным + ".ЭтоСтрокаМИС");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Истина;
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазрешитьРедактированиеДанныхМИС");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОТбор.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаФормы);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуНазначенийПоДокументу()
	
	Если Объект.РасписаниеНазначения.Количество() Тогда
		
		ТаблицаДат = Объект.РасписаниеНазначения.Выгрузить(, "ДатаИсполнения");
		ТаблицаДат.Сортировать("ДатаИсполнения");
		ДатаНачала = ТаблицаДат[0].ДатаИсполнения;
		ДатаОкончания = ТаблицаДат[ТаблицаДат.Количество() - 1].ДатаИсполнения;
		
		ИзменитьПериодНазначенияНаСервере(ДатаНачала, ДатаОкончания);
		
	Иначе
		ИзменитьПериодНазначенияНаСервере(НачалоДня(Объект.Дата), НачалоДня(Объект.Дата));
	КонецЕсли;
	
	ЗаполнитьТаблицуНазначенийПоРасписанию(Объект.ЛС_Назначения, Объект.РасписаниеНазначения)
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНазначенийПоРасписанию(ТаблицаНазначений, ТаблицаРасписания)
	
	Отбор = Новый Структура("КлючСтроки");
	
	Для Каждого СтрокаНазначения Из ТаблицаНазначений Цикл
		
		Назначено    = 0;
		Исполнено    = 0;
		ДозИсполнено = 0;
		Отменено     = 0;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаНазначения, "КлючСтроки");
		НайденныеСтроки = ТаблицаРасписания.НайтиСтроки(Отбор);
		Для каждого СтрокаДокумента Из НайденныеСтроки Цикл
			
			ПрефиксКолонки = "Дата" + Формат(СтрокаДокумента.ДатаИсполнения, "ДФ=yyyyMMdd");
			СтрокаНазначения[ПрефиксКолонки + "Количество"]             = СтрокаНазначения[ПрефиксКолонки + "Количество"]
				+ СтрокаДокумента.Количество;
			СтрокаНазначения[ПрефиксКолонки + "КоличествоИсполнено"]    = СтрокаНазначения[ПрефиксКолонки + "КоличествоИсполнено"]
				+ СтрокаДокумента.КоличествоИсполнено;
			СтрокаНазначения[ПрефиксКолонки + "КоличествоДозИсполнено"] = СтрокаНазначения[ПрефиксКолонки + "КоличествоДозИсполнено"]
				+ СтрокаДокумента.КоличествоДозИсполнено;
			СтрокаНазначения[ПрефиксКолонки + "КоличествоОтменено"]     = СтрокаНазначения[ПрефиксКолонки + "КоличествоОтменено"]
				+ СтрокаДокумента.КоличествоОтменено;
			
			Назначено = Назначено + СтрокаДокумента.Количество;
			Исполнено = Исполнено + СтрокаДокумента.КоличествоИсполнено;
			Отменено = Отменено + СтрокаДокумента.КоличествоОтменено;
			ДозИсполнено = ДозИсполнено + СтрокаДокумента.КоличествоДозИсполнено;
			
		КонецЦикла;
		
		СтрокаНазначения.КоличествоНазначено    = Назначено;
		СтрокаНазначения.КоличествоИсполнено    = Исполнено;
		СтрокаНазначения.КоличествоДозИсполнено = ДозИсполнено;
		СтрокаНазначения.КоличествоОтменено     = Отменено;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПериодНазначенияНаСервере(Знач ДатаНачала, Знач ДатаОкончания)
	
	ДатаНачала = НачалоДня(ДатаНачала);
	ДатаОкончания = НачалоДня(ДатаОкончания);
	
	ИзменитьРеквизитыИЭлементыФормыДляТаблицыНазначений(ДатаНачала, ДатаОкончания, ТекущаяДатаНачала, ТекущаяДатаОкончания);
	
	ТекущаяДатаНачала = ДатаНачала;
	ТекущаяДатаОкончания = ДатаОкончания;
	
	ПериодНазначения = ПолучитьПредставлениеПериода(ТекущаяДатаНачала, ТекущаяДатаОкончания);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРеквизитыИЭлементыФормыДляТаблицыНазначений(ДатаНачала, ДатаОкончания, ПредДатаНачала, ПредДатаОкончания)
	
	Если ДатаНачала = ПредДатаНачала И ДатаОкончания = ПредДатаОкончания Тогда
		Возврат;
	КонецЕсли;
	
	МассивУдаляемыхРеквизитов = Новый Массив();
	
	Если ЗначениеЗаполнено(ПредДатаНачала) И ДатаНачала > ПредДатаНачала Тогда
		
		УдалитьДатаНачала = ПредДатаНачала;
		УдалитьДатаОкончания = ?(ПредДатаОкончания < ДатаНачала,
									ПредДатаОкончания,
									ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(ДатаНачала, "ДЕНЬ", -1));
		МассивУдаляемых = ПолучитьУдаляемыеРеквизитыФормыДляТаблицыНазначений(УдалитьДатаНачала, УдалитьДатаОкончания);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивУдаляемыхРеквизитов, МассивУдаляемых);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредДатаОкончания) И ДатаОкончания < ПредДатаОкончания Тогда
		
		УдалитьДатаОкончания = ПредДатаОкончания;
		УдалитьДатаНачала = ?(ПредДатаНачала > ДатаОкончания,
									ПредДатаНачала,
									ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(ДатаОкончания, "ДЕНЬ", 1));
		МассивУдаляемых = ПолучитьУдаляемыеРеквизитыФормыДляТаблицыНазначений(УдалитьДатаНачала, УдалитьДатаОкончания);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивУдаляемыхРеквизитов, МассивУдаляемых);
		
	КонецЕсли;
	
	МассивНовыхРеквизитов = Новый Массив();
	Если Не (ДатаНачала >= ПредДатаНачала И ДатаОкончания <= ПредДатаОкончания) Тогда
		МассивНовыхРеквизитов = ПолучитьНовыеРеквизитыФормыДляТаблицыНазначений(ДатаНачала, ДатаОкончания);
	КонецЕсли;
	
	ИзменитьРеквизиты(МассивНовыхРеквизитов, МассивУдаляемыхРеквизитов);
	
	ИзменитьЭлементыФормыДляТаблицыНазначений(МассивНовыхРеквизитов, МассивУдаляемыхРеквизитов);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьУдаляемыеРеквизитыФормыДляТаблицыНазначений(ДатаНачала, ДатаОкончания);
	
	КоличествоДней = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.РазностьДат(ДатаНачала, ДатаОкончания, "ДЕНЬ") + 1;
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	ТекДень = ДатаНачала;
	Для Сч = 1 По КоличествоДней Цикл
		
		ПрефиксКолонки = "Объект.ЛС_Назначения.Дата" + Формат(ТекДень, "ДФ=yyyyMMdd");
		
		МассивУдаляемыхРеквизитов.Добавить(ПрефиксКолонки + "Количество");
		МассивУдаляемыхРеквизитов.Добавить(ПрефиксКолонки + "КоличествоИсполнено");
		МассивУдаляемыхРеквизитов.Добавить(ПрефиксКолонки + "КоличествоДозИсполнено");
		МассивУдаляемыхРеквизитов.Добавить(ПрефиксКолонки + "КоличествоОтменено");
		
		ТекДень = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(ТекДень, "ДЕНЬ", 1);
		
	КонецЦикла;
	
	Возврат МассивУдаляемыхРеквизитов;
	
КонецФункции

&НаСервере
Функция ПолучитьНовыеРеквизитыФормыДляТаблицыНазначений(ДатаНачала, ДатаОкончания)
	
	КоличествоДней = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.РазностьДат(ДатаНачала, ДатаОкончания, "ДЕНЬ") + 1;
	
	ТекущиеКолонкиТаблицыНазначений = Объект.ЛС_Назначения.Выгрузить().Колонки;
	
	ТипЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный);
	ТипЧисло10 = ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный);;
	
	МассивНовыхРеквизитов = Новый Массив;
	
	ТекДень = ДатаНачала;
	Для Сч = 1 По КоличествоДней Цикл
		
		ПрефиксКолонки = "Дата" + Формат(ТекДень, "ДФ=yyyyMMdd");
		
		Если ТекущиеКолонкиТаблицыНазначений.Найти(ПрефиксКолонки + "Количество") = Неопределено Тогда
			
			МассивНовыхРеквизитов.Добавить(
				Новый РеквизитФормы(ПрефиксКолонки + "Количество", ТипЧисло, "Объект.ЛС_Назначения", "Назначено"));
			МассивНовыхРеквизитов.Добавить(
				Новый РеквизитФормы(ПрефиксКолонки + "КоличествоИсполнено", ТипЧисло, "Объект.ЛС_Назначения", "Исполнено"));
			МассивНовыхРеквизитов.Добавить(
				Новый РеквизитФормы(ПрефиксКолонки + "КоличествоДозИсполнено", ТипЧисло10, "Объект.ЛС_Назначения", "Исполнено, доз"));
			МассивНовыхРеквизитов.Добавить(
				Новый РеквизитФормы(ПрефиксКолонки + "КоличествоОтменено", ТипЧисло, "Объект.ЛС_Назначения", "Отменено"));
			
		КонецЕсли;
		
		ТекДень = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(ТекДень, "ДЕНЬ", 1);
		
	КонецЦикла;
	
	Возврат МассивНовыхРеквизитов;
	
КонецФункции

&НаСервере
Процедура ИзменитьЭлементыФормыДляТаблицыНазначений(НовыеРеквизиты, УдаляемыеРеквизиты)
	
	КоличествоПолейВДате = 4;
	
	Если УдаляемыеРеквизиты.Количество() Тогда
		
		КоличествоДней = УдаляемыеРеквизиты.Количество() / КоличествоПолейВДате;
		Для Сч = 0 По КоличествоДней - 1 Цикл
			Реквизит = УдаляемыеРеквизиты.Получить(Сч * КоличествоПолейВДате);
			ПрефиксКолонки = Сред(Реквизит, Найти(Реквизит, "Дата"), 12);
			Элементы.Удалить(Элементы["ТаблицаНазначений" + ПрефиксКолонки]);
		КонецЦикла;
		
	КонецЕсли;
	
	Если НовыеРеквизиты.Количество() Тогда
		
		КоличествоДней = НовыеРеквизиты.Количество() / КоличествоПолейВДате;
		Для Сч = 0 По КоличествоДней - 1 Цикл
			
			ИндексПоля = 0;
			Реквизит = НовыеРеквизиты.Получить(Сч * КоличествоПолейВДате + ИндексПоля);
			
			ТекДень = Дата(Сред(Реквизит.Имя, Найти(Реквизит.Имя, "Дата") + 4, 8));
			ПрефиксКолонки = "Дата" + Формат(ТекДень, "ДФ=yyyyMMdd");
			
			Элемент = Неопределено;
			Если ТекДень < ТекущаяДатаНачала Тогда
				// Добавляем перед текущей датой начала, если она присутствует
				Элемент = Элементы.Найти("ТаблицаНазначенийДата" + Формат(ТекущаяДатаНачала, "ДФ=yyyyMMdd"));
			КонецЕсли;
			
			Если Элемент <> Неопределено Тогда
				ЭлементГруппа = Элементы.Вставить("ТаблицаНазначений" + ПрефиксКолонки, Тип("ГруппаФормы"), Элементы.ТаблицаНазначенийПериодыНазначения, Элемент);
			Иначе
				ЭлементГруппа = Элементы.Добавить("ТаблицаНазначений" + ПрефиксКолонки, Тип("ГруппаФормы"), Элементы.ТаблицаНазначенийПериодыНазначения);
			КонецЕсли;
			
			ЭлементГруппа.Заголовок = Формат(ТекДень, "ДЛФ=D");
			ЭлементГруппа.Вид = ВидГруппыФормы.ГруппаКолонок;
			ЭлементГруппа.ОтображатьВШапке = Истина;
			ЭлементГруппа.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
			ЭлементГруппа.Группировка = ГруппировкаКолонок.Горизонтальная;
			
			ЭлементКоличество = Элементы.Добавить("ТаблицаНазначений" + Реквизит.Имя, Тип("ПолеФормы"), ЭлементГруппа);
			ЭлементКоличество.ПутьКДанным = Реквизит.Путь + "." + Реквизит.Имя;
			ЭлементКоличество.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементКоличество.АвтоМаксимальнаяШирина = Ложь;
			ЭлементКоличество.МаксимальнаяШирина = 6;
			ЭлементКоличество.КартинкаШапки = Элементы.ТаблицаНазначенийКоличествоНазначено.КартинкаШапки;
			ЭлементКоличество.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементКоличество.Подсказка = Реквизит.Заголовок;
			ЭлементКоличество.УстановитьДействие("ПриИзменении", "Подключаемый_ТаблицаНазначенийКоличествоПриИзменении");
			
			ИндексПоля = ИндексПоля + 1;
			Реквизит = НовыеРеквизиты.Получить(Сч * КоличествоПолейВДате + ИндексПоля);
			ЭлементКоличествоИсполнено = Элементы.Добавить("ТаблицаНазначений" + Реквизит.Имя, Тип("ПолеФормы"), ЭлементГруппа);
			ЭлементКоличествоИсполнено.ПутьКДанным = Реквизит.Путь + "." + Реквизит.Имя;
			ЭлементКоличествоИсполнено.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементКоличествоИсполнено.АвтоМаксимальнаяШирина = Ложь;
			ЭлементКоличествоИсполнено.МаксимальнаяШирина = 6;
			ЭлементКоличествоИсполнено.КартинкаШапки = Элементы.ТаблицаНазначенийКоличествоИсполнено.КартинкаШапки;
			ЭлементКоличествоИсполнено.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементКоличествоИсполнено.Подсказка = Реквизит.Заголовок;
			ЭлементКоличествоИсполнено.УстановитьДействие("ПриИзменении", "Подключаемый_ТаблицаНазначенийКоличествоИсполненоПриИзменении");
			
			ИндексПоля = ИндексПоля + 1;
			Реквизит = НовыеРеквизиты.Получить(Сч * КоличествоПолейВДате + ИндексПоля);
			ЭлементКоличествоИсполнено = Элементы.Добавить("ТаблицаНазначений" + Реквизит.Имя, Тип("ПолеФормы"), ЭлементГруппа);
			ЭлементКоличествоИсполнено.ПутьКДанным = Реквизит.Путь + "." + Реквизит.Имя;
			ЭлементКоличествоИсполнено.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементКоличествоИсполнено.АвтоМаксимальнаяШирина = Ложь;
			ЭлементКоличествоИсполнено.МаксимальнаяШирина = 6;
			ЭлементКоличествоИсполнено.КартинкаШапки = Элементы.ТаблицаНазначенийКоличествоИсполнено.КартинкаШапки;
			ЭлементКоличествоИсполнено.Заголовок = НСтр("ru = 'доз'");
			ЭлементКоличествоИсполнено.Подсказка = Реквизит.Заголовок;
			ЭлементКоличествоИсполнено.УстановитьДействие("ПриИзменении", "Подключаемый_ТаблицаНазначенийКоличествоДозИсполненоПриИзменении");
			
			ИндексПоля = ИндексПоля + 1;
			Реквизит = НовыеРеквизиты.Получить(Сч * КоличествоПолейВДате + ИндексПоля);
			ЭлементКоличествоОтменено = Элементы.Добавить("ТаблицаНазначений" + Реквизит.Имя, Тип("ПолеФормы"), ЭлементГруппа);
			ЭлементКоличествоОтменено.ПутьКДанным = Реквизит.Путь + "." + Реквизит.Имя;
			ЭлементКоличествоОтменено.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементКоличествоОтменено.АвтоМаксимальнаяШирина = Ложь;
			ЭлементКоличествоОтменено.МаксимальнаяШирина = 6;
			ЭлементКоличествоОтменено.КартинкаШапки = Элементы.ТаблицаНазначенийКоличествоОтменено.КартинкаШапки;
			ЭлементКоличествоОтменено.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементКоличествоОтменено.Подсказка = Реквизит.Заголовок;
			ЭлементКоличествоОтменено.УстановитьДействие("ПриИзменении", "Подключаемый_ТаблицаНазначенийКоличествоОтмененоПриИзменении");
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИтогиПоСтрокамНазначения(ТаблицаНазначений, ДатаНачала, ДатаОкончания)
	
	Для Каждого ТекущаяСтрока Из ТаблицаНазначений Цикл
		ПересчитатьКоличество(ТекущаяСтрока, ДатаНачала, ДатаОкончания);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьКоличество(ТекущаяСтрока, ДатаНачала, ДатаОкончания)
	
	Назначено = 0;
	Исполнено = 0;
	ДозИсполнено = 0;
	Отменено = 0;
	
	КоличествоДней = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.РазностьДат(ДатаНачала, ДатаОкончания, "ДЕНЬ") + 1;
	
	ТекДень = ДатаНачала;
	Для Сч = 1 По КоличествоДней Цикл
		
		ПрефиксКолонки = "Дата" + Формат(ТекДень, "ДФ=yyyyMMdd");
		
		Количество = ТекущаяСтрока[ПрефиксКолонки + "Количество"];
		
		Если Количество > 0 Тогда
			Назначено    = Назначено + Количество;
			Исполнено    = Исполнено + ТекущаяСтрока[ПрефиксКолонки + "КоличествоИсполнено"];
			ДозИсполнено = ДозИсполнено + ТекущаяСтрока[ПрефиксКолонки + "КоличествоДозИсполнено"];
			Отменено     = Отменено + ТекущаяСтрока[ПрефиксКолонки + "КоличествоОтменено"];
		КонецЕсли;
		
		ТекДень = ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьКДате(ТекДень, "ДЕНЬ", 1);
		
	КонецЦикла;
	
	ТекущаяСтрока.КоличествоНазначено    = Назначено;
	ТекущаяСтрока.КоличествоИсполнено    = Исполнено;
	ТекущаяСтрока.КоличествоДозИсполнено = ДозИсполнено;
	ТекущаяСтрока.КоличествоОтменено     = Отменено;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеПериода(ДатаНачала, ДатаОкончания)
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		Если ДатаНачала > ДатаОкончания Тогда
			Период = НСтр("ru='Ошибка. Дата начала позже даты окончания.'");
		Иначе
			Период = ПредставлениеПериода(ДатаНачала, КонецДня(ДатаОкончания));
		КонецЕсли;
	Иначе
		Период = НСтр("ru='не указан'");
	КонецЕсли;
	
	Возврат Период;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьКоличествоВЯчейке(ТекущаяСтрока, ПрефиксКолонки, ДляКолонкиИсполнено = Истина)
	
	СтароеКоличествоИсполнено = ТекущаяСтрока[ПрефиксКолонки + "КоличествоИсполнено"];
	СтароеКоличествоДозИсполнено = ТекущаяСтрока[ПрефиксКолонки + "КоличествоДозИсполнено"];
	СтароеКоличествоОтменено = ТекущаяСтрока[ПрефиксКолонки + "КоличествоОтменено"];
	СтароеКоличество = ТекущаяСтрока[ПрефиксКолонки + "Количество"];
	
	НовоеКоличествоИсполнено = СтароеКоличествоИсполнено;
	НовоеКоличествоОтменено = СтароеКоличествоОтменено;
	
	Если СтароеКоличество = 0 Тогда
		
		НовоеКоличествоИсполнено = 0;
		НовоеКоличествоДозИсполнено = 0;
		НовоеКоличествоОтменено = 0;
		
		Если Не ТекущаяСтрока[ПрефиксКолонки + "КоличествоОтменено"] = 0 Тогда
			ТекущаяСтрока[ПрефиксКолонки + "КоличествоОтменено"] = 0;
			Модифицированность = Истина;
		КонецЕсли;
		Если Не ТекущаяСтрока[ПрефиксКолонки + "КоличествоИсполнено"] = 0 Тогда
			ТекущаяСтрока[ПрефиксКолонки + "КоличествоИсполнено"] = 0;
			Модифицированность = Истина;
		КонецЕсли;
		Если Не ТекущаяСтрока[ПрефиксКолонки + "КоличествоДозИсполнено"] = 0 Тогда
			ТекущаяСтрока[ПрефиксКолонки + "КоличествоДозИсполнено"] = 0;
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ДляКолонкиИсполнено Тогда
		// ввели новое значение колонки
		ТекущийОстаток = Макс(0,Мин(СтароеКоличество - СтароеКоличествоОтменено));
		НовоеКоличествоИсполнено = Мин(ТекущийОстаток, НовоеКоличествоИсполнено); 
		
	ИначеЕсли НЕ ДляКолонкиИсполнено Тогда
		// ввели новое значение колонки
		ТекущийОстаток = Макс(0, Мин(СтароеКоличество - СтароеКоличествоИсполнено));
		НовоеКоличествоОтменено = Мин(ТекущийОстаток, НовоеКоличествоОтменено);
	КонецЕсли;
	
	Если СтароеКоличествоОтменено <> НовоеКоличествоОтменено Тогда
		ТекущаяСтрока[ПрефиксКолонки + "КоличествоОтменено"] = НовоеКоличествоОтменено;
		Модифицированность = Истина;
	КонецЕсли;
		
	Если СтароеКоличествоИсполнено <> НовоеКоличествоИсполнено Тогда
		ТекущаяСтрока[ПрефиксКолонки + "КоличествоИсполнено"] = НовоеКоличествоИсполнено;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если НовоеКоличествоИсполнено > 0 И СтароеКоличествоДозИсполнено = 0 Тогда
		ТекущаяСтрока[ПрефиксКолонки + "КоличествоДозИсполнено"] = 1;
	ИначеЕсли НовоеКоличествоИсполнено = 0 И СтароеКоличествоДозИсполнено > 0 Тогда
		ТекущаяСтрока[ПрефиксКолонки + "КоличествоДозИсполнено"] = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьОстатокВЯчейке(ТекущаяСтрока, ПрефиксКолонки, ДляКолонкиИсполнено = Истина)
	
	ЗначениеИзменено = Ложь;
	Суффикс1 = ?(ДляКолонкиИсполнено, "КоличествоИсполнено", "КоличествоОтменено");
	Суффикс2 = ?(Не ДляКолонкиИсполнено, "КоличествоИсполнено", "КоличествоОтменено");
	
	ТекущийОстаток = Макс(0, ТекущаяСтрока[ПрефиксКолонки + "Количество"] - ТекущаяСтрока[ПрефиксКолонки + Суффикс2]);
	Если Не ТекущаяСтрока[ПрефиксКолонки + Суффикс1] = ТекущийОстаток Тогда
		
		ТекущаяСтрока[ПрефиксКолонки + Суффикс1] = ТекущийОстаток;
		ПересчитатьКоличествоВЯчейке(ТекущаяСтрока, ПрефиксКолонки, ДляКолонкиИсполнено);
		ЗначениеИзменено = Истина;
		
	КонецЕсли;
	
	Возврат ЗначениеИзменено;
	
КонецФункции

&НаКлиенте
Функция РедактированиеСтрокиЗапрещено(ТекущаяСтрока)
	
	Возврат (Не РазрешитьРедактированиеДанныхМИС И ТекущаяСтрока.ЭтоСтрокаМИС);
	
КонецФункции

&НаКлиенте
Функция ЗаполнениеКолонкиРазрешено()
	
	Элемент = Элементы.ТаблицаНазначений.ТекущийЭлемент;
	
	Поз = Найти(Элемент.Имя, "Дата");
	Если Поз = 0 Тогда
		Ответ = "";
	Иначе
		Ответ = Элемент.Имя; 
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСтрокуНазначения(ДанныеСтроки, ДополнительныеПараметры) Экспорт
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	Отбор.Вставить("ТорговоеНаименование", ПредопределенноеЗначение("Справочник.ТорговыеНаименования.ПустаяСсылка"));
	Отбор.Вставить("ДействующиеВеществаМНН", ПредопределенноеЗначение("Справочник.ДействующиеВеществаМНН.ПустаяСсылка"));
	Отбор.Вставить("ФормаВыпуска", ПредопределенноеЗначение("Справочник.ФормыВыпуска.ПустаяСсылка"));
	Отбор.Вставить("ЕдиницаИзмерения", ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка"));
	Если ЗначениеЗаполнено(Объект.ИсточникФинансирования) Тогда
		Отбор.Вставить("ИсточникФинансирования", Объект.ИсточникФинансирования);
	Иначе
		Отбор.Вставить("ИсточникФинансирования", ПредопределенноеЗначение("Справочник.ИсточникиФинансирования.ПустаяСсылка"));
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСтроки) = Тип("СправочникСсылка.Номенклатура") Тогда
		Отбор.Номенклатура = ДанныеСтроки;
	Иначе
		ЗаполнитьЗначенияСвойств(Отбор, ДанныеСтроки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Отбор.ЕдиницаИзмерения) Тогда
		Отбор.Удалить("ЕдиницаИзмерения");
	КонецЕсли;
	
	НайденныеСтроки = Объект.ЛС_Назначения.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекущаяСтрока = Объект.ЛС_Назначения.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Отбор);
	Иначе
		ТекущаяСтрока = НайденныеСтроки[0]
	КонецЕсли;
	
	Элементы.ТаблицаНазначений.ТекущаяСтрока = Объект.ЛС_Назначения.Индекс(ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакЗагрузкиИзМИС()
	
	Для Каждого ТекущаяСтрока Из Объект.ЛС_Назначения Цикл
		ТекущаяСтрока.ЭтоСтрокаМИС = (ТекущаяСтрока.УИДНазначения <> ПустойУИД);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Контроль несогласованных изменений
#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура Подключаемый_ПриИзменении_КонтрольНесогласованныхИзменений(Элемент)
	
	КонтрольНесогласованныхИзмененийКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_КонтрольНесогласованныхИзменений(Элемент)
	
	КонтрольНесогласованныхИзмененийКлиент.Нажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команды_КонтрольНесогласованныхИзменений(Команда)
	
	КонтрольНесогласованныхИзмененийКлиент.Команда(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_КонтрольНесогласованныхИзменений(Элемент, Отказ)
	
	КонтрольНесогласованныхИзмененийКлиент.ПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_КонтрольНесогласованныхИзменений(Элемент, Отказ)
	
	КонтрольНесогласованныхИзмененийКлиент.ПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_КонтрольНесогласованныхИзменений(Элемент, Отказ, Копирование, Родитель, Группа)
	
	КонтрольНесогласованныхИзмененийКлиент.ПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	ДоступностьЭлементов = Не (НазначениеПолученоИзМИС И Не РазрешитьРедактированиеДанныхМИС);
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить(Элементы.Дата.Имя);
	МассивЭлементов.Добавить(Элементы.Организация.Имя);
	МассивЭлементов.Добавить(Элементы.Отделение.Имя);
	МассивЭлементов.Добавить(Элементы.Пациент.Имя);
	МассивЭлементов.Добавить(Элементы.Врач.Имя);
	МассивЭлементов.Добавить(Элементы.ИсточникФинансирования.Имя);
	МассивЭлементов.Добавить(Элементы.ПериодНазначения.Имя);
	
	// Элементы управления, связанные с товарами
	МассивЭлементов.Добавить(Элементы.ТаблицаНазначений.Имя);
	
	// Элементы управления, связанные с товарами
	МассивЭлементов.Добавить(Элементы.ТаблицаНазначенийДобавитьФОЛСИзФормуляра.Имя);
	МассивЭлементов.Добавить(Элементы.ТаблицаНазначенийДобавитьФОЛС.Имя);
	МассивЭлементов.Добавить(Элементы.ТаблицаНазначенийДобавитьНоменклатуру.Имя);
	
	МассивЭлементов.Добавить(Элементы.ТаблицаНазначенийУстановитьИсполнениеДляВыделенныхСтрок.Имя);
	МассивЭлементов.Добавить(Элементы.ТаблицаНазначенийУстановитьИсполнениеДляТекущейКолонки.Имя);
	МассивЭлементов.Добавить(Элементы.ТаблицаНазначенийУстановитьИсполнениеДляНеотмененныхСтрок.Имя);
	
	МассивЭлементов.Добавить(Элементы.ТаблицаНазначенийОтменитьВыделенныеСтроки.Имя);
	МассивЭлементов.Добавить(Элементы.ТаблицаНазначенийОтменитьНеисполненныеСтроки.Имя);
	
	МассивЭлементов.Добавить(Элементы.ТаблицаНазначенийУстановитьИсполнениеДляТекущегоПоля.Имя);
	МассивЭлементов.Добавить(Элементы.ТаблицаНазначенийОтменитьТекущееПоле.Имя);
	
	СообщениеОНевозможностиРедактирования = НСтр("ru = 'Редактирование запрещено. Документ получен из МИС.'");
	КонтрольНесогласованныхИзменений.НастроитьКонтрольИзмененияДанных(ЭтотОбъект, МассивЭлементов, Не ДоступностьЭлементов);
	
	Элементы.Изменить.Доступность = Не ДоступностьЭлементов;
	
КонецПроцедуры

#КонецОбласти // КонтрольНесогласованныхИзменений

////////////////////////////////////////////////////////////////////////////////
// Обработка изменения реквизитов
#Область ОбработкаИзмененияРеквизитов

&НаСервере
Процедура ОбработатьИзменениеОрганизации()
	
	Объект.Отделение = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОтделениеПоУмолчанию(Объект.Отделение, Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОтделения()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Отделение, "Владелец");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПериодаНазначения(Период, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Период) = Тип("Структура") Тогда
		
		Если Не ЗначениеЗаполнено(Период.ДатаНачала)
		 Или Не ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
			Возврат;
		КонецЕсли;
		
		ИзменитьПериодНазначенияНаСервере(Период.ДатаНачала, Период.ДатаОкончания);
		
		Модифицированность = Истина;
		ЗаполнитьИтогиПоСтрокамНазначения(Объект.ЛС_Назначения, ТекущаяДатаНачала, ТекущаяДатаОкончания);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработкаИзмененияРеквизитов

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти // СтандартныеПодсистемы
