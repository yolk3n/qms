
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПВызовСервера.ПриПолученииФормыДокумента(
		ПустаяСсылка(), ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбмене

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДанныеКвитанции = Неопределено) Экспорт
	
	ОперацияКвитанции = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКвитанции, "ОперацияКвитанции");
	Если ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.Получение_ВыводИзОборотаЛППоРазличнымПричинам Тогда
		
		СтатусОбработки = ДанныеКвитанции.СтатусОбработки;
		Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
		Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.ПринятоИзМДЛП;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.ПринятоЧастично Тогда
			Статусы.Отклонен = Перечисления.СтатусыИнформированияМДЛП.ЧастичноПринято;
		Иначе
			Статусы.Отклонен = Перечисления.СтатусыИнформированияМДЛП.Отклонено;
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
		Если ПараметрыОбновления = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления);
		
	КонецЕсли;
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_АвтоматическоеСписаниеЛПсИстекшимСрокомГодности Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято;
		Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
		Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.ПринятоИзМДЛП;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
		Если ПараметрыОбновления = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления);
		
	Иначе
		
		Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДанныеКвитанции);
		
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьСостояниеПодтверждения(ДокументОбъект, Операция, Сообщение, СтатусОбработки, ОтклоненныеНомера = Неопределено) Экспорт
	
	ПараметрыОбновления = ИнтеграцияМДЛП.СостояниеПодтверждения(Операция, Сообщение, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.СостояниеПодтверждения = ПараметрыОбновления.Состояние;
	Если ДокументОбъект.СостояниеПодтверждения <> Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ И ЗначениеЗаполнено(ОтклоненныеНомера) Тогда
		
		Для Каждого Номер Из ОтклоненныеНомера Цикл
			НомерУпаковки = Номер.Ключ;
			Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
			Если Строка = Неопределено Тогда
				Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
			КонецЕсли;
			Строка.Отклонено = Истина;
			Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(Номер.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Определить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОРозничнойПродажеМДЛП - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Основание");
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОВыбытии(Основание);
	КонецЕсли;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящее = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	Входящее = Перечисления.ТипыСообщенийМДЛП.Входящее;
	
	Операция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Операция");
	Если Операция = Перечисления.ОперацииВыбытияМДЛП.ВыводПоРазличнымПричинам_Входящий Тогда
		ОперацияВПоследовательности = ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.Получение_ВыводИзОборотаЛППоРазличнымПричинам);
		ОперацияВПоследовательности.КвитанцияПринят = Ложь;
	Иначе
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВыводИзОборотаЛППоРазличнымПричинам);
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее, Перечисления.ОперацииОбменаМДЛП.Получение_АвтоматическоеСписаниеЛПсИстекшимСрокомГодности);
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус информирования по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияМДЛП - Статус по-умолчанию.
//
Функция СтатусИнформированияПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыИнформированияМДЛП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные;
	
КонецФункции

// Возвращает запрос для получения статуса оформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ основание.
// 
// Возвращаемое значение:
//  Запрос - Запрос для получения статуса оформления.
//
Функция ЗапросСтатусаОформления(ДокументОснование) Экспорт
	
	Запрос = ИнтеграцияМДЛППереопределяемый.ЗапросСтатусаОформленияУведомленияОВыбытии(ДокументОснование);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПанельМаркировкиМДЛП

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
	Если Все Или Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеОбмен);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
	
	Возврат Действия;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
	Если Все Или ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	КонецЕсли;
	
	Возврат Действия;
	
КонецФункции

Процедура ПриЗаполненииДокументовПанелиМаркировкиМДЛП(ТаблицаДокументы) Экспорт
	
	Описание = ИнтеграцияМДЛП.ДобавитьДокументНаПанельМаркировки(
		ТаблицаДокументы,
		Метаданные.Документы.УведомлениеОВыбытииМДЛП,
		НСтр("ru = 'Выбытие по прочим причинам'"),
		ИнтеграцияМДЛПКлиентСервер.ПанельМаркировкаРазделСклад());
	
	Описание.Оформите    = Истина;
	Описание.Отработайте = Истина;
	Описание.Ожидайте    = Истина;
	
	Описание.Порядок = 70;
	
КонецПроцедуры

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОформите() Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.УведомлениеОВыбытииТекстЗапросаОформите();
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОтработайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОтработайте(Метаданные.Документы.УведомлениеОВыбытииМДЛП);
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОжидайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОжидайте(Метаданные.Документы.УведомлениеОВыбытииМДЛП);
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического списка формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСписока() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаФормДокументов(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического Списка к оформлению формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	ТекстЗапроса = ИнтеграцияМДЛППереопределяемый.УведомлениеОВыбытииТекстЗапросаДинамическогоСпискаКОформлению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщениеМДЛП

Функция СообщениеКПередаче(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат УведомлениеОВыбытииМаркированныхТоваров(ДокументСсылка);
	
КонецФункции

Функция ОпределитьДокументыДляЗагрузки(ДанныеДокумента, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_АвтоматическоеСписаниеЛПсИстекшимСрокомГодности Тогда
		Возврат ОпределитьУведомлениеОбАвтоматическомСписанииЛПсИстекшимСрокомГодности(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ВыводИзОборотаЛППоРазличнымПричинам Тогда
		Возврат ОпределитьУведомлениеОВыводеИзОборотаЛППоРазличнымПричинам(ДанныеДокумента);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьВходящееСообщение(ДанныеДокумента, Операция, ДокументСсылка) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_АвтоматическоеСписаниеЛПсИстекшимСрокомГодности Тогда
		ЗагрузитьУведомлениеОбАвтоматическомСписанииЛПсИстекшимСрокомГодности(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ВыводИзОборотаЛППоРазличнымПричинам Тогда
		ЗагрузитьУведомлениеОВыводеИзОборотаЛППоРазличнымПричинам(ДанныеДокумента, ДокументСсылка);
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестная операция %1'"), Операция);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает данные для заполнения представления документа.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * КомандаСоздать - Строка - Представление документа, если документ требуется создать.
//  * ИмяКомандыСоздать - Строка - Имя команды "Создать".
//  * ИмяКомандыОткрыть - Строка - Имя команды "Открыть".
//  * ДокументОтсутствуетНетПравНаСоздание - Строка - Представление документа, если документ не создан.
//  * Представление - Строка - Представление документа.
//  * НесколькоДокументовПредставление - Строка - Представление документа, если их несколько.
//
Функция ПредставлениеДокумента() Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияМДЛП.ПустоеПредставлениеДокумента();
	ВозвращаемоеЗначение.КомандаСоздать                       = НСтр("ru = 'Создать уведомление о выбытии МДЛП'");
	ВозвращаемоеЗначение.ИмяКомандыСоздать                    = "СоздатьУведомлениеОВыбытииМДЛП";
	ВозвращаемоеЗначение.ИмяКомандыОткрыть                    = "ОткрытьУведомлениеОВыбытииМДЛП";
	ВозвращаемоеЗначение.ДокументОтсутствуетНетПравНаСоздание = НСтр("ru = 'Уведомление о выбытии МДЛП не создано'");
	ВозвращаемоеЗначение.Представление                        = НСтр("ru = 'Уведомление о выбытии МДЛП: %1'");
	ВозвращаемоеЗначение.НесколькоДокументовПредставление     = НСтр("ru = 'Уведомление о выбытии МДЛП (%1)'");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПоддерживаетЗагрузкуУведомлений() Экспорт
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьИменаРеквизитовПоТипуОперации(Операция, ВсеРеквизиты, РеквизитыОперации) Экспорт
	
	ВсеРеквизиты = Новый Массив;
	ВсеРеквизиты.Добавить("НомерДокумента");
	ВсеРеквизиты.Добавить("ДатаДокумента");
	
	РеквизитыОперации = Новый Массив;
	Если Операция = Перечисления.ОперацииВыбытияМДЛП.ВыводПоРазличнымПричинам
	 Или Операция = Перечисления.ОперацииВыбытияМДЛП.ВыводПоРазличнымПричинам_Входящий Тогда
		РеквизитыОперации.Добавить("НомерДокумента");
		РеквизитыОперации.Добавить("ДатаДокумента");
	ИначеЕсли Операция = Перечисления.ОперацииВыбытияМДЛП.АвтоматическоеСписаниеСИстекшимСрокомГодности Тогда
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИменаРеквизитовПоТипуВыводаИзОборота(ТипВыводаИзОборота, ВсеРеквизиты, РеквизитыТипа) Экспорт
	
	Если ВсеРеквизиты = Неопределено Тогда
		ВсеРеквизиты = Новый Массив;
	КонецЕсли;
	Если РеквизитыТипа = Неопределено Тогда
		РеквизитыТипа = Новый Массив;
	КонецЕсли;
	
	ВсеРеквизиты.Добавить("КодСтраныЭкспорта");
	
	Если ТипВыводаИзОборота = Перечисления.ВидыВыводаИзОборотаМДЛП.ЭкспортВнеРФ
	 Или ТипВыводаИзОборота = Перечисления.ВидыВыводаИзОборотаМДЛП.ПредоставлениеГуманитарнойПомощи Тогда
		РеквизитыТипа.Добавить("КодСтраныЭкспорта");
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработкаСообщенийМДЛП

Функция УведомлениеОВыбытииМаркированныхТоваров(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВыводИзОборотаЛППоРазличнымПричинам;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена     КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                           КАК Ссылка,
	|	Шапка.Основание                        КАК Основание,
	|	Шапка.Дата                             КАК Дата,
	|	Шапка.ТипВыводаИзОборота               КАК ТипВыводаИзОборота,
	|	ЕСТЬNULL(Шапка.МестоДеятельности.Идентификатор, Шапка.Организация.РегистрационныйНомерУчастника)  КАК ИдентификаторОрганизации,
	|	Шапка.НомерДокумента                   КАК НомерДокумента,
	|	Шапка.ДатаДокумента                    КАК ДатаДокумента,
	|	Шапка.КодСтраныЭкспорта                КАК КодСтраныЭкспорта
	|ИЗ
	|	Документ.УведомлениеОВыбытииМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Шапка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN                                    КАК GTIN,
	|	НомераУпаковок.НомерКиЗ                        КАК НомерКиЗ,
	|	НомераУпаковок.КоличествоПервичныхУпаковок     КАК КоличествоПервичныхУпаковок,
	|	Товары.КоличествоПервичныхУпаковокВоВторичной  КАК КоличествоПервичныхУпаковокВоВторичной
	|ИЗ
	|	Документ.УведомлениеОВыбытииМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОВыбытииМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки               КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОВыбытииМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выгрузить();
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Упаковки.Количество() = 0) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "withdrawal";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id", Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_num", Шапка.НомерДокумента, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_date", Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "withdrawal_type", ИнтеграцияМДЛП.КодЗначенияПеречисления(Шапка.ТипВыводаИзОборота), СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "export_country_code", Шапка.КодСтраныЭкспорта, СообщениеКПередаче);
	
	Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
	Для Каждого Строка Из Товары Цикл
		НоваяСтрока = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.order_details, "sgtin");
		Если ТипЗнч(НоваяСтрока) = Тип("ОбъектXDTO") Тогда
			
			// Для версии формата 1.37 и выше.
			
			Если ЗначениеЗаполнено(Строка.КоличествоПервичныхУпаковок) И ЗначениеЗаполнено(Строка.КоличествоПервичныхУпаковокВоВторичной) Тогда
				ДоляУпаковки = СтрШаблон("%1/%2", Формат(Строка.КоличествоПервичныхУпаковок, "ЧГ="), Формат(Строка.КоличествоПервичныхУпаковокВоВторичной, "ЧГ="));
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "withdrawal_part", ДоляУпаковки, СообщениеКПередаче);
			КонецЕсли;
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "__content", Строка.НомерКиЗ, СообщениеКПередаче);
			Уведомление.order_details.sgtin.Добавить(НоваяСтрока);
			
		Иначе
			
			// Для версии формата ниже 1.37.
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sgtin", Строка.НомерКиЗ, СообщениеКПередаче);
			
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из Упаковки Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sscc" , Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция ОпределитьУведомлениеОбАвтоматическомСписанииЛПсИстекшимСрокомГодности(ДанныеДокумента)
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПолучитьСсылку());
	
КонецФункции

Функция ОпределитьУведомлениеОВыводеИзОборотаЛППоРазличнымПричинам(ДанныеДокумента)
	
	Если ИнтеграцияМДЛП.СообщениеПринято(ДанныеДокумента.Квитанция) Тогда
		
		ИдентификаторОтправителя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
		
		Организация = Неопределено;
		МестоДеятельности = Неопределено;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОтправителя, Организация, МестоДеятельности);
		
		Если ЗначениеЗаполнено(МестоДеятельности) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МестоДеятельности, "ВестиУчетВЭтойИБ") Тогда
			Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПолучитьСсылку());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Неопределено);
	
КонецФункции

Процедура ЗагрузитьУведомлениеОбАвтоматическомСписанииЛПсИстекшимСрокомГодности(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если Документ = Неопределено Тогда
		
		ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
		
		Документ = СоздатьДокумент();
		Документ.УстановитьСсылкуНового(ДокументСсылка);
		Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
		Документ.Операция = Перечисления.ОперацииВыбытияМДЛП.АвтоматическоеСписаниеСИстекшимСрокомГодности;
		Документ.ТипВыводаИзОборота = Перечисления.ВидыВыводаИзОборотаМДЛП.АвтоматическоеСписаниеПоИстечениюСрокаГодности;
		Документ.ДанныеПолученыИзМДЛП = Истина;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация, Документ.МестоДеятельности);
		
		Документ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ;
		
	Иначе
		Документ.Заблокировать();
	КонецЕсли;
	
	ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(Документ, ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ.Ссылка));
	
	Список = ДанныеДокумента.order_details;
	Граница = Список.sgtin.Количество() - 1;
	Для Индекс = 0 По Граница Цикл
		
		sgtin           = Список.sgtin[Индекс];
		gtin            = Список.gtin[Индекс];
		series_number   = Список.series_number[Индекс];
		expiration_date = Список.expiration_date[Индекс];
		
		НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN, НомерСерии", gtin, series_number));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовара = Документ.Товары.Добавить();
			СтрокаТовара.GTIN       = gtin;
			СтрокаТовара.НомерСерии = series_number;
			СтрокаТовара.ГоденДо    = СтроковыеФункцииКлиентСервер.СтрокаВДату(expiration_date);
			СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		Иначе
			СтрокаТовара = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
		
		СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
		СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
		СтрокаУпаковки.НомерКИЗ = sgtin;
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОВыбытии(Документ);
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОВыводеИзОборотаЛППоРазличнымПричинам(ДанныеДокумента, ДокументСсылка)
	
	Если ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОтправителя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	НомерДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_num");
	ДатаДокумента = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_date"));
	
	НомерТипаВыводаИзОборотаПоУмолчанию = 23; // СписаниеПриОтсутствииИнформацииСогласноБП
	НомерТипаВыводаИзОборота = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "withdrawal_type", НомерТипаВыводаИзОборотаПоУмолчанию);
	
	Документ = СоздатьДокумент();
	Документ.УстановитьСсылкуНового(ДокументСсылка);
	Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
	ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОтправителя, Документ.Организация, Документ.МестоДеятельности);
	Документ.НомерДокумента = НомерДокумента;
	Документ.ДатаДокумента = ДатаДокумента;
	Документ.Операция = Перечисления.ОперацииВыбытияМДЛП.ВыводПоРазличнымПричинам_Входящий;
	
	ИндексТипаВыводаИзОборота = ?(ЗначениеЗаполнено(НомерТипаВыводаИзОборота), НомерТипаВыводаИзОборота - 1, НомерТипаВыводаИзОборотаПоУмолчанию - 1);
	Документ.ТипВыводаИзОборота = Перечисления.ВидыВыводаИзОборотаМДЛП.Получить(ИндексТипаВыводаИзОборота);
	
	Документ.ДанныеПолученыИзМДЛП = Истина;
	
	Документ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ;
	
	Для Каждого НомерУпакоки Из ДанныеДокумента.order_details.sgtin Цикл
		
		ЧастичноеВыбытие = "";
		Если ТипЗнч(НомерУпакоки) = Тип("Структура") Тогда
			// Для версии формата 1.37 и выше.
			ЧастичноеВыбытие = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НомерУпакоки, "withdrawal_part", "");
			НомерУпакоки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НомерУпакоки, "__content");
		КонецЕсли;
		
		КоличествоПервичныхУпаковокВоВторичной = 0;
		КоличествоПервичныхУпаковок = 0;
		
		Если Не ПустаяСтрока(ЧастичноеВыбытие) Тогда
			Части = СтрРазделить(ЧастичноеВыбытие, "/");
			КоличествоПервичныхУпаковокВоВторичной = Число(Части[1]);
			КоличествоПервичныхУпаковок = Число(Части[0]);
		КонецЕсли;
		
		GTIN = Лев(НомерУпакоки, 14);
		НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN", GTIN));
		СтрокаТовара = Неопределено;
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если КоличествоПервичныхУпаковокВоВторичной = 0 Тогда
				СтрокаТовара = НайденныеСтроки[0];
			Иначе
				Для Каждого Строка Из НайденныеСтроки Цикл
					Если Строка.КоличествоПервичныхУпаковокВоВторичной = КоличествоПервичныхУпаковокВоВторичной Тогда
						СтрокаТовара = Строка;
						Прервать;
					КонецЕсли;
					Если СтрокаТовара = Неопределено И Строка.КоличествоПервичныхУпаковокВоВторичной = 0 Тогда
						СтрокаТовара = Строка;
					КонецЕсли;
				КонецЦикла;
				Если СтрокаТовара <> Неопределено Тогда
					СтрокаТовара.КоличествоПервичныхУпаковокВоВторичной = КоличествоПервичныхУпаковокВоВторичной;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		Если СтрокаТовара = Неопределено Тогда
			СтрокаТовара = Документ.Товары.Добавить();
			СтрокаТовара.GTIN = GTIN;
			СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			СтрокаТовара.КоличествоПервичныхУпаковокВоВторичной = КоличествоПервичныхУпаковокВоВторичной;
		КонецЕсли;
		
		СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
		
		СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
		СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
		СтрокаУпаковки.НомерКИЗ = НомерУпакоки;
		СтрокаУпаковки.КоличествоПервичныхУпаковок = КоличествоПервичныхУпаковок;
		
	КонецЦикла;
	
	Для Каждого НомерУпакоки Из ДанныеДокумента.order_details.sscc Цикл
		
		СтрокаУпаковки = Документ.ТранспортныеУпаковки.Добавить();
		СтрокаУпаковки.НомерУпаковки = НомерУпакоки;
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОВыбытии(Документ);
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерий(ПустаяСсылка().Метаданные(), Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//  ПараметрыУказанияСерий - Структура
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПустаяСсылка().Метаданные(), ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции Подключаемые.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ОбновлениеИнформационнойБазыМДЛП.ЗарегистрироватьДокументыДляЗаполненияМестДеятельности(ПустаяСсылка().Метаданные().ПолноеИмя(), Параметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ОбновлениеИнформационнойБазыМДЛП.ЗаполнитьМестаДеятельностиВДокументах(ПустаяСсылка().Метаданные().ПолноеИмя(), Параметры);
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеДляОбновленияОперации(Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДокументыДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОВыбытииМДЛП КАК ДокументыДляОбработки
	|ГДЕ
	|	ДокументыДляОбработки.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииВыбытияМДЛП.ПустаяСсылка)
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляОбновленияОперации(Параметры) Экспорт
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, Запрос.МенеджерВременныхТаблиц);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДокументыДляОбработки.Ссылка  КАК Ссылка,
	|	ДокументыДляОбработки.Ссылка ЕСТЬ NULL
	|		ИЛИ Документ.Операция <> ЗНАЧЕНИЕ(Перечисление.ОперацииВыбытияМДЛП.ПустаяСсылка)  КАК НеОбрабатывать
	|ИЗ
	|	#ДокументыДляОбработки КАК ДокументыДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			#Документ КАК Документ
	|		ПО
	|			Документ.Ссылка = ДокументыДляОбработки.Ссылка
	|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументыДляОбработки", Результат.ИмяВременнойТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Документ", ПолноеИмяОбъекта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеОбрабатывать Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать объект: %Объект% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Выборка.Ссылка.Метаданные(),
									Выборка.Ссылка,
									ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Операция = Перечисления.ОперацииВыбытияМДЛП.ВыводПоРазличнымПричинам;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать: %Объект% по причине: %Причина%'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли