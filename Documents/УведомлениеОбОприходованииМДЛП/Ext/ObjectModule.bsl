#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// ИнтеграцияМДЛП.Инвентаризация
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Инвентаризация")
	   И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИнвентаризацияПотребительскихУпаковокМДЛП") Тогда
		МодульИнвентаризацияМДЛП = ОбщегоНазначения.ОбщийМодуль("ИнвентаризацияМДЛП");
		МодульИнвентаризацияМДЛП.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		Возврат; // Переопределение см. в общем модуле ИнвентаризацияМДЛППереопределяемый.
	КонецЕсли;
	// Конец ИнтеграцияМДЛП.Инвентаризация
	
	ИнтеграцияМДЛППереопределяемый.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	СостояниеПодтверждения = Метаданные().Реквизиты.СостояниеПодтверждения.ЗначениеЗаполнения;
	НомераУпаковок.Очистить();
	ТранспортныеУпаковки.Очистить();
	СоставТранспортныхУпаковок.Очистить();
	ИерархияГрупповыхУпаковок.Очистить();
	
	СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораМДЛП.НеВыполнялось;
	ДанныеПроверкиИПодбора = Новый ХранилищеЗначения(Неопределено);
	
	ДокументИнвентаризации = Неопределено;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если Не ИнтеграцияМДЛП.ИспользоватьХарактеристикиНоменклатуры() Тогда
		НепроверяемыеРеквизиты.Добавить("Товары.Характеристика");
		НепроверяемыеРеквизиты.Добавить("СоставТранспортныхУпаковок.Характеристика");
	КонецЕсли;
	
	Если Не ИнтеграцияМДЛП.ИспользоватьСерииНоменклатуры() Тогда
		НепроверяемыеРеквизиты.Добавить("Товары.Серия");
		НепроверяемыеРеквизиты.Добавить("СоставТранспортныхУпаковок.Серия");
	КонецЕсли;
	
	ИнтеграцияМДЛП.ПроверитьЗаполнениеУпаковок(ЭтотОбъект, Отказ);
	
	ВсеРеквизиты = Неопределено;
	РеквизитыОперации = Неопределено;
	Документы.УведомлениеОбОприходованииМДЛП.ЗаполнитьИменаРеквизитовПоТипуОперации(Операция, ВсеРеквизиты, РеквизитыОперации);
	Для Каждого Реквизит Из ВсеРеквизиты Цикл
		Если РеквизитыОперации.Найти(Реквизит) = Неопределено Тогда
			НепроверяемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
	КонецЦикла;
	
	ЭтоПередачаНаБезвозмезднойОснове = ТипДоговора = Перечисления.ТипыДоговоровМДЛП.ПередачаНаБезвозмезднойОснове И НепроверяемыеРеквизиты.Найти("ТипДоговора") = Неопределено;
	
	Если (Операция = Перечисления.ОперацииОприходованияМДЛП.Поступление
	 Или Операция = Перечисления.ОперацииОприходованияМДЛП.ВозвратОтПокупателя
	 Или Операция = Перечисления.ОперацииОприходованияМДЛП.Пересорт
	 Или Операция = Перечисления.ОперацииОприходованияМДЛП.ИмпортЕАЭС)
	   И Не ЭтоПередачаНаБезвозмезднойОснове Тогда
		Для Каждого Строка Из ТранспортныеУпаковки Цикл
			Если Строка.Цена = 0 Тогда
				Состав = СоставТранспортныхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", Строка.ИдентификаторСтроки));
				ЕстьСтрокиБезЦены = Состав.Количество() = 0;
				Для Каждого СтрокаСостава Из Состав Цикл
					ЕСли СтрокаСостава.Цена = 0 Тогда
						ЕстьСтрокиБезЦены = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЕстьСтрокиБезЦены Тогда
					ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Цена'"), Строка.НомерСтроки, НСтр("ru = 'Транспортные упаковки'"));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТранспортныеУпаковки", Строка.НомерСтроки, "Цена");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, Поле,, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоПередачаНаБезвозмезднойОснове Тогда
		НепроверяемыеРеквизиты.Добавить("Товары.Сумма");
		НепроверяемыеРеквизиты.Добавить("СоставТранспортныхУпаковок.Цена");
	КонецЕсли;
	
	ИнтеграцияМДЛППереопределяемый.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	
	ИнтеграцияМДЛП.ПроверитьВозможностьЗаписиУведомления(ЭтотОбъект, РежимЗаписи);
	
	ВсеРеквизиты = Неопределено;
	РеквизитыОперации = Неопределено;
	Документы.УведомлениеОбОприходованииМДЛП.ЗаполнитьИменаРеквизитовПоТипуОперации(Операция, ВсеРеквизиты, РеквизитыОперации);
	ИнтеграцияМДЛП.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, ВсеРеквизиты, РеквизитыОперации);
	
	ИнтеграцияМДЛП.УбратьНезначащиеСимволы(ЭтотОбъект, "НомерДокумента,НомерКонтракта");
	
	ИнтеграцияМДЛППереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияМДЛП.ЗаписатьСтатусДокументаПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияМДЛППереопределяемый.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ОбрабатываемыеСостояния = Новый Массив;
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.КПередаче);
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ);
	ОбрабатываемыеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	
	Если ОбрабатываемыеСостояния.Найти(СостояниеПодтверждения) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = ИнтеграцияМДЛП.ПараметрыОперацииИзмененияСтатусаУпаковок();
	ПараметрыОперации.ДатаОперации    = Дата;
	ПараметрыОперации.ДокументРезерва = Ссылка;
	
	Если Операция = Перечисления.ОперацииОприходованияМДЛП.Поступление
	 Или Операция = Перечисления.ОперацииОприходованияМДЛП.ВозвратОтПокупателя
	 Или Операция = Перечисления.ОперацииОприходованияМДЛП.Пересорт Тогда
		
		ПараметрыОперации.СтатусВРезерве    = Перечисления.СтатусыУпаковокМДЛП.КПоступлению;
		ПараметрыОперации.НовыйСтатус       = Перечисления.СтатусыУпаковокМДЛП.ВОбороте;
		ПараметрыОперации.МестоДеятельности = МестоДеятельности;
		
		ИсходныйСтатус = Новый Массив;
		ИсходныйСтатус.Добавить(Перечисления.СтатусыУпаковокМДЛП.ПустаяСсылка());
		ИсходныйСтатус.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВОбороте);
		ИсходныйСтатус.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВУпаковке);
		
		ПараметрыОперации.ИсходныйСтатус = ИсходныйСтатус;
		
	ИначеЕсли Операция = Перечисления.ОперацииОприходованияМДЛП.ИмпортЕАЭС Тогда
		
		ПараметрыОперации.СтатусВРезерве    = Перечисления.СтатусыУпаковокМДЛП.ВРезерве;
		ПараметрыОперации.НовыйСтатус       = Перечисления.СтатусыУпаковокМДЛП.ВвезенНаТерриториюРФ;
		ПараметрыОперации.МестоДеятельности = МестоДеятельности;
		
		ИсходныйСтатус = Новый Массив;
		ИсходныйСтатус.Добавить(Перечисления.СтатусыУпаковокМДЛП.ПустаяСсылка());
		ИсходныйСтатус.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВУпаковке);
		ИсходныйСтатус.Добавить(Перечисления.СтатусыУпаковокМДЛП.ОжидаетОтгрузкиВРФ);
		ИсходныйСтатус.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВвезенНаТерриториюРФ);
		
		ПараметрыОперации.ИсходныйСтатус = ИсходныйСтатус;
		
	КонецЕсли;
	
	Если СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ Тогда
		ИнтеграцияМДЛП.ОтменитьРезерв(Ссылка);
	ИначеЕсли СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче Тогда
		ИнтеграцияМДЛП.ПровестиДокументПоРегиструУпаковок(Ссылка, ПараметрыОперации, Отказ);
	ИначеЕсли СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	НомераУпаковок.НомерСтроки  КАК НомерСтроки,
		|	НомераУпаковок.НомерКиЗ     КАК НомерУпаковки,
		|	1                           КАК ДоляУпаковки,
		|	ЛОЖЬ                        КАК ГрупповаяУпаковка,
		|	""НомераУпаковок""          КАК ИмяТабличнойЧасти,
		|	""НомерКиЗ""                КАК ИмяПоля
		|ПОМЕСТИТЬ ПодтвержденныеУпаковки
		|ИЗ
		|	Документ.УведомлениеОбОприходованииМДЛП.НомераУпаковок КАК НомераУпаковок
		|ГДЕ
		|	НомераУпаковок.Ссылка = &Ссылка
		|	И НЕ НомераУпаковок.Отклонено
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НомераУпаковок.НомерСтроки    КАК НомерСтроки,
		|	НомераУпаковок.НомерУпаковки  КАК НомерУпаковки,
		|	1                             КАК ДоляУпаковки,
		|	ИСТИНА                        КАК ГрупповаяУпаковка,
		|	""ТранспортныеУпаковки""      КАК ИмяТабличнойЧасти,
		|	""НомерУпаковки""             КАК ИмяПоля
		|ИЗ
		|	Документ.УведомлениеОбОприходованииМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
		|ГДЕ
		|	НомераУпаковок.Ссылка = &Ссылка
		|	И НЕ НомераУпаковок.Отклонено
		|");
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ДокументРезерва", ПараметрыОперации.ДокументРезерва);
		Запрос.УстановитьПараметр("МестоДеятельности", ПараметрыОперации.МестоДеятельности);
		
		Запрос.УстановитьПараметр("НовыйСтатус", ПараметрыОперации.НовыйСтатус);
		Запрос.УстановитьПараметр("ДатаСтатуса", ПараметрыОперации.ДатаОперации);
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
		ИнтеграцияМДЛП.ДобавитьКлючиУпаковок(Запрос.МенеджерВременныхТаблиц, "ПодтвержденныеУпаковки");
		
		Запрос.Текст = "
		// Все зарезервированные упаковки
		|ВЫБРАТЬ
		|	ДанныеУпаковок.НомерУпаковки                   КАК НомерУпаковки,
		|	&МестоДеятельности                             КАК МестоДеятельности,
		|	НЕОПРЕДЕЛЕНО                                   КАК ДокументРезерва,
		|	&НовыйСтатус                                   КАК Статус,
		|	&ДатаСтатуса                                   КАК ДатаСтатуса,
		|	ДанныеУпаковок.Владелец                        КАК Владелец,
		|	ДанныеУпаковок.НомерГрупповойУпаковки          КАК НомерГрупповойУпаковки,
		|	ДанныеУпаковок.ГрупповаяУпаковка               КАК ГрупповаяУпаковка,
		|	ДанныеУпаковок.ВложеныПотребительскиеУпаковки  КАК ВложеныПотребительскиеУпаковки
		|ИЗ
		|	ПодтвержденныеУпаковки КАК ПодтвержденныеУпаковки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			РегистрСведений.УпаковкиМДЛП КАК ДанныеУпаковок
		|		ПО
		|			ПодтвержденныеУпаковки.НомерУпаковки = ДанныеУпаковок.НомерУпаковки
		|			И ПодтвержденныеУпаковки.КлючУпаковки = ДанныеУпаковок.КлючУпаковки
		|			И ДанныеУпаковок.ДокументРезерва = &ДокументРезерва
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Потребительские упаковки, находящиеся в транспортных упаковках.
		|ВЫБРАТЬ
		|	НомераУпаковок.НомерКиЗ                               КАК НомерУпаковки,
		|	&МестоДеятельности                                    КАК МестоДеятельности,
		|	ВерхнеуровневыеУпаковки.НомерУпаковки                 КАК ДокументРезерва,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ВУпаковке)  КАК Статус,
		|	&ДатаСтатуса                                          КАК ДатаСтатуса,
		|	ДанныеУпаковок.Владелец                               КАК Владелец,
		|	НомераУпаковок.НомерРодительскойУпаковки              КАК НомерГрупповойУпаковки,
		|	ЛОЖЬ                                                  КАК ГрупповаяУпаковка,
		|	НЕОПРЕДЕЛЕНО                                          КАК ВложеныПотребительскиеУпаковки
		|ИЗ
		|	Документ.УведомлениеОбОприходованииМДЛП.ТранспортныеУпаковки КАК ТранспортныеУпаковки
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Документ.УведомлениеОбОприходованииМДЛП.СоставТранспортныхУпаковок КАК СоставТранспортныхУпаковок
		|		ПО
		|			СоставТранспортныхУпаковок.Ссылка = &Ссылка
		|			И СоставТранспортныхУпаковок.ИдентификаторСтроки = ТранспортныеУпаковки.ИдентификаторСтроки
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Документ.УведомлениеОбОприходованииМДЛП.НомераУпаковок КАК НомераУпаковок
		|		ПО
		|			НомераУпаковок.Ссылка = &Ссылка
		|			И НомераУпаковок.ИдентификаторСтроки = СоставТранспортныхУпаковок.ИдентификаторСтрокиУпаковки
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			ПодтвержденныеУпаковки КАК ВерхнеуровневыеУпаковки
		|				
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|					РегистрСведений.УпаковкиМДЛП КАК ДанныеУпаковок
		|				ПО
		|					ВерхнеуровневыеУпаковки.НомерУпаковки = ДанныеУпаковок.НомерУпаковки
		|					И ВерхнеуровневыеУпаковки.КлючУпаковки = ДанныеУпаковок.КлючУпаковки
		|					И ДанныеУпаковок.ДокументРезерва = &ДокументРезерва
		|		ПО
		|			ВерхнеуровневыеУпаковки.НомерУпаковки = ТранспортныеУпаковки.НомерУпаковки
		|ГДЕ
		|	ТранспортныеУпаковки.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Групповые упаковки, находящиеся в транспортных упаковках.
		|ВЫБРАТЬ
		|	НомераУпаковок.НомерУпаковки                          КАК НомерУпаковки,
		|	&МестоДеятельности                                    КАК МестоДеятельности,
		|	ВерхнеуровневыеУпаковки.НомерУпаковки                 КАК ДокументРезерва,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ВУпаковке)  КАК Статус,
		|	&ДатаСтатуса                                          КАК ДатаСтатуса,
		|	ДанныеУпаковок.Владелец                               КАК Владелец,
		|	НомераУпаковок.НомерРодительскойУпаковки              КАК НомерГрупповойУпаковки,
		|	ИСТИНА                                                КАК ГрупповаяУпаковка,
		|	НЕ ПервыйУровеньУпаковок.НомерУпаковки ЕСТЬ NULL      КАК ВложеныПотребительскиеУпаковки
		|ИЗ
		|	Документ.УведомлениеОбОприходованииМДЛП.ТранспортныеУпаковки КАК ТранспортныеУпаковки
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Документ.УведомлениеОбОприходованииМДЛП.ИерархияГрупповыхУпаковок КАК НомераУпаковок
		|		ПО
		|			НомераУпаковок.Ссылка = &Ссылка
		|			И НомераУпаковок.ИдентификаторСтроки = ТранспортныеУпаковки.ИдентификаторСтроки
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			ПодтвержденныеУпаковки КАК ВерхнеуровневыеУпаковки
		|				
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|					РегистрСведений.УпаковкиМДЛП КАК ДанныеУпаковок
		|				ПО
		|					ВерхнеуровневыеУпаковки.НомерУпаковки = ДанныеУпаковок.НомерУпаковки
		|					И ВерхнеуровневыеУпаковки.КлючУпаковки = ДанныеУпаковок.КлючУпаковки
		|					И ДанныеУпаковок.ДокументРезерва = &ДокументРезерва
		|		ПО
		|			ВерхнеуровневыеУпаковки.НомерУпаковки = ТранспортныеУпаковки.НомерУпаковки
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				Т.НомерРодительскойУпаковки КАК НомерУпаковки
		|			ИЗ
		|				Документ.УведомлениеОбОприходованииМДЛП.НомераУпаковок КАК Т
		|			ГДЕ
		|				Т.Ссылка = &Ссылка) КАК ПервыйУровеньУпаковок
		|		ПО
		|			ПервыйУровеньУпаковок.НомерУпаковки = НомераУпаковок.НомерУпаковки
		|ГДЕ
		|	НомераУпаковок.Ссылка = &Ссылка
		|";
		
		ОтразитьПоступление = Запрос.Выполнить().Выбрать();
		
		// Записываем номера упаковок, по которым необходимо отразить поступление.
		Набор = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
		Пока ОтразитьПоступление.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), ОтразитьПоступление);
			
			// Удаляем зависшие номера упаковок по предыдущим операциям других документов и других типов документов, если по этому документу удалось отразить поступление.
			УдалитьУпаковки = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
			УдалитьУпаковки.Отбор.НомерУпаковки.Установить(ОтразитьПоступление.НомерУпаковки);
			УдалитьУпаковки.Отбор.КлючУпаковки.Установить(ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(ОтразитьПоступление.НомерУпаковки));
			УдалитьУпаковки.Записать();
			
		КонецЦикла;
		
		Если Набор.Количество() > 0 Тогда
			Набор.Записать(Ложь);
		КонецЕсли;
		
		// Удаляем упаковки из резерва этого документа, по которым не удалось отразить поступление.
		УдалитьУпаковки = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
		УдалитьУпаковки.Отбор.ДокументРезерва.Установить(ПараметрыОперации.ДокументРезерва);
		УдалитьУпаковки.Записать();
		
		// ИнтеграцияМДЛП.Инвентаризация
		Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Инвентаризация") Тогда
			Если ЗначениеЗаполнено(ДокументИнвентаризации) Тогда
				
				ПараметрыОперации.ДокументИнвентаризации = ДокументИнвентаризации;
				
				МодульИнвентаризацияМДЛП = ОбщегоНазначения.ОбщийМодуль("ИнвентаризацияМДЛП");
				МодульИнвентаризацияМДЛП.ПоместитьДанныеВТаблицуНомераУпаковок(Запрос.МенеджерВременныхТаблиц, "ПодтвержденныеУпаковки");
				МодульИнвентаризацияМДЛП.УстановитьНовыйСтатус(Запрос.МенеджерВременныхТаблиц, ПараметрыОперации);
				
			КонецЕсли;
		КонецЕсли;
		// Конец ИнтеграцияМДЛП.Инвентаризация
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияМДЛППереопределяемый.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияМДЛП.ОтменитьРезерв(Ссылка);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли