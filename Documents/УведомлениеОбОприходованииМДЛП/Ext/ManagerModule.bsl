
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПВызовСервера.ПриПолученииФормыДокумента(
		ПустаяСсылка(), ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбмене

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросСоставаУпаковки
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИерархииВложенностиУпаковок Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросСоставаУпаковки
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИерархииВложенностиУпаковок Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ИнформацияОКиЗ
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.Получение_КвитанцияОФиксации И ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.Получение_СоставУпаковки
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.Получение_КвитанцияОФиксации И ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросСоставаУпаковки
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ИерархияВложенностиУпаковок
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.Получение_КвитанцияОФиксации И ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИерархииВложенностиУпаковок Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции

Процедура ОбновитьСостояниеПодтверждения(ДокументОбъект, Операция, Сообщение, СтатусОбработки, ОтклоненныеНомера = Неопределено) Экспорт
	
	НовоеСостояние = Неопределено;
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_Оприходование
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОприходованиеИмпорт Тогда
		
		ИсходноеСообщение = Сообщение;
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.КПередаче Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПодготовленоКПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Ошибка Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Передано Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Передано;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
		Иначе
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ;
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ
			Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросСоставаУпаковки
			Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИерархииВложенностиУпаковок Тогда
		
		ИсходноеСообщение = Сообщение;
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.КПередаче Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Передано Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Передано;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено
			  Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Ошибка Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовоеСостояние = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = ИнтеграцияМДЛПВызовСервера.ТекстСообщенияИзПротокола(ИсходноеСообщение);
	ОбъектXDTO = ИнтеграцияМДЛП.ОбъектXDTOПоТекстуСообщенияXML(ТекстСообщения, "documents", ИнтеграцияМДЛП.ПространствоИмен());
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_Оприходование Тогда
		ДанныеДокумента = ОбъектXDTO["posting"];
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОприходованиеИмпорт Тогда
		ДанныеДокумента = ОбъектXDTO["posting_import"];
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ Тогда
		ДанныеДокумента = ОбъектXDTO["query_kiz_info"];
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросСоставаУпаковки Тогда
		ДанныеДокумента = ОбъектXDTO["query_kiz_info"];
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИерархииВложенностиУпаковок Тогда
		ДанныеДокумента = ОбъектXDTO["query_hierarchy_info"];
	КонецЕсли;
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_Оприходование
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОприходованиеИмпорт Тогда
		
		ДокументОбъект.СостояниеПодтверждения = НовоеСостояние;
		
		СписокТоваров = ДанныеДокумента.order_details.union;
		Для Каждого Данные Из СписокТоваров Цикл
			
			Если ЗначениеЗаполнено(Данные.sgtin) Тогда
				НомерУпаковки = Данные.sgtin;
				Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
			Иначе
				НомерУпаковки = Данные.sscc_detail.sscc;
				Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
			КонецЕсли;
			
			Если ОтклоненныеНомера <> Неопределено И ОтклоненныеНомера[НомерУпаковки] <> Неопределено Тогда
				Строка.Отклонено = Истина;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ Тогда
		
		НомерУпаковки = ДанныеДокумента.sgtin;
		Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПолученияИнформации = НовоеСостояние;
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросСоставаУпаковки Тогда
		
		НомерУпаковки = ДанныеДокумента.sscc_down;
		Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПолученияИнформации = НовоеСостояние;
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИерархииВложенностиУпаковок Тогда
		
		НомерУпаковки = ДанныеДокумента.sscc;
		Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПолученияИнформации = НовоеСостояние;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОРозничнойПродажеМДЛП - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Основание");
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбОприходовании(Основание);
	КонецЕсли;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящее = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Операция = ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_Оприходование);
		Возврат Таблица;
	КонецЕсли;
	
	ОперацияОприходования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Операция");
	Если ОперацияОприходования = Перечисления.ОперацииОприходованияМДЛП.ИмпортЕАЭС Тогда
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОприходованиеИмпорт);
	Иначе
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_Оприходование);
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус информирования по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияМДЛП - Статус по-умолчанию.
//
Функция СтатусИнформированияПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыИнформированияМДЛП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Если ИнтеграцияМДЛП.ИспользоватьДействиеЗапросаИнформацииОбУпаковках(ПустаяСсылка()) Тогда
		Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗапроситеИнформациюОбУпаковках;
	Иначе
		Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПроверку;
	КонецЕсли;
	
КонецФункции

// Возвращает признак по умолчанию использования дальнейшего действия ЗапроситеИнформациюОбУпаковках в документе.
//
Функция ИспользоватьДействиеЗапросаИнформацииОбУпаковках() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает запрос для получения статуса оформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ основание.
// 
// Возвращаемое значение:
//  Запрос - Запрос для получения статуса оформления.
//
Функция ЗапросСтатусаОформления(ДокументОснование) Экспорт
	
	Запрос = ИнтеграцияМДЛППереопределяемый.ЗапросСтатусаОформленияУведомленияОбОприходовании(ДокументОснование);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПанельМаркировкиМДЛП

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗапроситеИнформациюОКиЗ);
	Если Все Или Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеОбмен);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗапроситеИнформациюОбУпаковках);
	
	Возврат Действия;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
	Если Все Или ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеИнформации);
	
	Возврат Действия;
	
КонецФункции

Процедура ПриЗаполненииДокументовПанелиМаркировкиМДЛП(ТаблицаДокументы) Экспорт
	
	Описание = ИнтеграцияМДЛП.ДобавитьДокументНаПанельМаркировки(
		ТаблицаДокументы,
		Метаданные.Документы.УведомлениеОбОприходованииМДЛП,
		НСтр("ru = 'Оприходование товаров'"),
		ИнтеграцияМДЛПКлиентСервер.ПанельМаркировкаРазделЗакупки());
	
	Описание.Оформите    = Истина;
	Описание.Отработайте = Истина;
	Описание.Ожидайте    = Истина;
	
	Описание.Порядок = 90;
	
КонецПроцедуры

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОформите() Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.УведомлениеОбОприходованииТекстЗапросаОформите();
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОтработайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОтработайте(Метаданные.Документы.УведомлениеОбОприходованииМДЛП);
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОжидайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОжидайте(Метаданные.Документы.УведомлениеОбОприходованииМДЛП);
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического списка формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСписока() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаФормДокументов(Метаданные.Документы.УведомлениеОбОприходованииМДЛП);
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического Списка к оформлению формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	ТекстЗапроса = ИнтеграцияМДЛППереопределяемый.УведомлениеОбОприходованииТекстЗапросаДинамическогоСпискаКОформлению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщениеМДЛП

Функция СообщениеКПередаче(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗапроситеИнформациюОКиЗ Тогда
		Возврат ЗапросИнформацииОКиЗ(ДокументСсылка);
	Иначе
		Возврат УведомлениеОбОприходовании(ДокументСсылка, ДальнейшееДействие);
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьВходящееСообщение(ДанныеДокумента, Операция, ДокументСсылка) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ИнформацияОКиЗ Тогда
		ЗагрузитьИнформациюОКиЗ(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_СоставУпаковки Тогда
		ЗагрузитьСоставУпаковки(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ИерархияВложенностиУпаковок Тогда
		ЗагрузитьИерархиюВложенностиУпаковок(ДанныеДокумента, ДокументСсылка);
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестная операция %1'"), Операция);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УпаковкиТовара

Функция ВходящееДеревоУпаковок(ДокументСсылка) Экспорт
	
	ДеревоУпаковок = Новый ДеревоЗначений;
	ДеревоУпаковок.Колонки.Добавить("ИдентификаторСтроки");
	ДеревоУпаковок.Колонки.Добавить("НомерУпаковки");
	ДеревоУпаковок.Колонки.Добавить("ТипУпаковки");
	ДеревоУпаковок.Колонки.Добавить("GTIN");
	ДеревоУпаковок.Колонки.Добавить("НомерСерии");
	ДеревоУпаковок.Колонки.Добавить("ГоденДо");
	ДеревоУпаковок.Колонки.Добавить("КодТНВЭД");
	ДеревоУпаковок.Колонки.Добавить("Номенклатура");
	ДеревоУпаковок.Колонки.Добавить("Характеристика");
	ДеревоУпаковок.Колонки.Добавить("Серия");
	ДеревоУпаковок.Колонки.Добавить("СостояниеПодтверждения");
	ДеревоУпаковок.Колонки.Добавить("СтатусПроверки");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки          КАК НомерСтроки,
	|	ТаблицаТовары.ИдентификаторСтроки  КАК ИдентификаторСтроки,
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Характеристика       КАК Характеристика,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.GTIN                 КАК GTIN,
	|	ТаблицаТовары.НомерСерии           КАК НомерСерии,
	|	ТаблицаТовары.ГоденДо              КАК ГоденДо,
	|	ТаблицаТовары.КодТНВЭД             КАК КодТНВЭД,
	|	ТаблицаУпаковки.НомерРодительскойУпаковки  КАК НомерРодительскойУпаковки,
	|	ТаблицаУпаковки.НомерКиЗ                   КАК НомерУпаковки,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)  КАК СостояниеПодтверждения
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.Товары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.НомераУпаковок КАК ТаблицаУпаковки
	|	ПО
	|		ТаблицаУпаковки.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаУпаковки.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаУпаковки.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                  КАК НомерСтроки,
	|	ТаблицаТовары.ИдентификаторСтрокиУпаковки  КАК ИдентификаторСтроки,
	|	ТаблицаТовары.Номенклатура                 КАК Номенклатура,
	|	ТаблицаТовары.Характеристика               КАК Характеристика,
	|	ТаблицаТовары.Серия                        КАК Серия,
	|	ТаблицаТовары.GTIN                         КАК GTIN,
	|	ТаблицаТовары.НомерСерии                   КАК НомерСерии,
	|	ТаблицаТовары.ГоденДо                      КАК ГоденДо,
	|	ТаблицаТовары.КодТНВЭД                     КАК КодТНВЭД,
	|	ТаблицаУпаковки.НомерРодительскойУпаковки    КАК НомерРодительскойУпаковки,
	|	ТаблицаУпаковки.НомерКиЗ                     КАК НомерУпаковки,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)  КАК СостояниеПодтверждения
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.СоставТранспортныхУпаковок КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.НомераУпаковок КАК ТаблицаУпаковки
	|	ПО
	|		ТаблицаУпаковки.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаУпаковки.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтрокиУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.ТранспортныеУпаковки КАК ТранспортныеУпаковки
	|	ПО
	|		ТранспортныеУпаковки.Ссылка = ТаблицаТовары.Ссылка
	|		И ТранспортныеУпаковки.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаУпаковки.Ссылка = &Ссылка
	|	И ТранспортныеУпаковки.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерРодительскойУпаковки,
	|	НомерСтроки УБЫВ
	|
	|ИТОГИ ПО
	|	НомерРодительскойУпаковки,
	|	ИдентификаторСтроки
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТранспортныеУпаковки.НомерУпаковки  КАК НомерУпаковки,
	|	""""                                КАК НомерРодительскойУпаковки,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)  КАК СостояниеПодтверждения
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.ТранспортныеУпаковки КАК ТранспортныеУпаковки
	|ГДЕ
	|	ТранспортныеУпаковки.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИерархияУпаковок.НомерУпаковки              КАК НомерУпаковки,
	|	ИерархияУпаковок.НомерРодительскойУпаковки  КАК НомерРодительскойУпаковки,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)  КАК СостояниеПодтверждения
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.ТранспортныеУпаковки КАК ТранспортныеУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.ИерархияГрупповыхУпаковок КАК ИерархияУпаковок
	|	ПО
	|		ИерархияУпаковок.Ссылка = ТранспортныеУпаковки.Ссылка
	|		И ИерархияУпаковок.ИдентификаторСтроки = ТранспортныеУпаковки.ИдентификаторСтроки
	|ГДЕ
	|	ТранспортныеУпаковки.Ссылка = &Ссылка
	|	И ИерархияУпаковок.Ссылка = &Ссылка
	|
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ПотребительскиеУпаковки = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИерархияУпаковок = РезультатЗапроса[1].Выгрузить();
	
	СтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии;
	
	ДобавитьПотребительскиеУпаковкиВДерево(ДеревоУпаковок, ПотребительскиеУпаковки, "", СтатусПроверки);
	
	ТранспортныеУпаковки = ИерархияУпаковок.НайтиСтроки(Новый Структура("НомерРодительскойУпаковки", ""));
	Для Каждого ТранспортнаяУпаковка Из ТранспортныеУпаковки Цикл
		
		ДобавитьГрупповуюУпаковкуВДерево(ДеревоУпаковок, ТранспортнаяУпаковка, ПотребительскиеУпаковки, ИерархияУпаковок, СтатусПроверки);
		ИерархияУпаковок.Удалить(ТранспортнаяУпаковка);
		
	КонецЦикла;
	
	Возврат ДеревоУпаковок;
	
КонецФункции

Процедура ДобавитьГрупповуюУпаковкуВДерево(ДеревоУпаковок, ТранспортнаяУпаковка, ПотребительскиеУпаковки, ИерархияУпаковок, СтатусПроверки = Неопределено)
	
	Строка = ДеревоУпаковок.Строки.Добавить();
	Строка.НомерУпаковки          = ТранспортнаяУпаковка.НомерУпаковки;
	Строка.ТипУпаковки            = Перечисления.ТипыУпаковокМДЛП.ГрупповаяУпаковка;
	Строка.СостояниеПодтверждения = ТранспортнаяУпаковка.СостояниеПодтверждения;
	Строка.СтатусПроверки         = СтатусПроверки;
	
	ДобавитьПотребительскиеУпаковкиВДерево(Строка, ПотребительскиеУпаковки, Строка.НомерУпаковки);
	
	ВложенныеУпаковки = ИерархияУпаковок.НайтиСтроки(Новый Структура("НомерРодительскойУпаковки", ТранспортнаяУпаковка.НомерУпаковки));
	Для Каждого ВложеннаяУпаковка Из ВложенныеУпаковки Цикл
		ДобавитьГрупповуюУпаковкуВДерево(Строка, ВложеннаяУпаковка, ПотребительскиеУпаковки, ИерархияУпаковок);
		ИерархияУпаковок.Удалить(ВложеннаяУпаковка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПотребительскиеУпаковкиВДерево(Дерево, ПотребительскиеУпаковки, НомерРодительскойУпаковки, СтатусПроверки = Неопределено)
	
	ПотребительскиеУпаковки.Сбросить();
	Если ПотребительскиеУпаковки.НайтиСледующий(НомерРодительскойУпаковки, "НомерРодительскойУпаковки") Тогда
		ВыборкаПоНомеруСтроки = ПотребительскиеУпаковки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоНомеруСтроки.Следующий() Цикл
			
			ПерваяСтрока = Истина;
			
			Выборка = ВыборкаПоНомеруСтроки.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ПерваяСтрока Тогда
					ПерваяСтрока = Ложь;
					СтрокаНоменклатураБезУпаковки = Дерево.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНоменклатураБезУпаковки, Выборка,, "НомерУпаковки, СостояниеПодтверждения");
				КонецЕсли;
				
				Строка = СтрокаНоменклатураБезУпаковки.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, Выборка);
				Строка.ТипУпаковки    = Перечисления.ТипыУпаковокМДЛП.МаркированныйТовар;
				Строка.СтатусПроверки = СтатусПроверки;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает данные для заполнения представления документа.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * КомандаСоздать - Строка - Представление документа, если документ требуется создать.
//  * ИмяКомандыСоздать - Строка - Имя команды "Создать".
//  * ИмяКомандыОткрыть - Строка - Имя команды "Открыть".
//  * ДокументОтсутствуетНетПравНаСоздание - Строка - Представление документа, если документ не создан.
//  * Представление - Строка - Представление документа.
//  * НесколькоДокументовПредставление - Строка - Представление документа, если их несколько.
//
Функция ПредставлениеДокумента() Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияМДЛП.ПустоеПредставлениеДокумента();
	ВозвращаемоеЗначение.КомандаСоздать                       = НСтр("ru = 'Создать уведомление об оприходовании МДЛП'");
	ВозвращаемоеЗначение.ИмяКомандыСоздать                    = "СоздатьУведомлениеОбОприходованииМДЛП";
	ВозвращаемоеЗначение.КомандаСвязать                       = НСтр("ru = 'Связать с уведомлением об оприходовании МДЛП (%1)'");
	ВозвращаемоеЗначение.ИмяКомандыСвязать                    = "СвязатьУведомлениеОбОприходованииМДЛП";
	ВозвращаемоеЗначение.ИмяКомандыОткрыть                    = "ОткрытьУведомлениеОбОприходованииМДЛП";
	ВозвращаемоеЗначение.ДокументОтсутствуетНетПравНаСоздание = НСтр("ru = 'Уведомление об оприходовании МДЛП не создано'");
	ВозвращаемоеЗначение.Представление                        = НСтр("ru = 'Уведомление об оприходовании МДЛП: %1'");
	ВозвращаемоеЗначение.НесколькоДокументовПредставление     = НСтр("ru = 'Уведомление об оприходовании МДЛП (%1)'");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПоддерживаетЗагрузкуУведомлений() Экспорт
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьИменаРеквизитовПоТипуОперации(Операция, ВсеРеквизиты, РеквизитыОперации) Экспорт
	
	ВсеРеквизиты = Новый Массив;
	ВсеРеквизиты.Добавить("МестоДеятельности");
	ВсеРеквизиты.Добавить("Грузоотправитель");
	ВсеРеквизиты.Добавить("МестоДеятельностиГрузоотправителя");
	ВсеРеквизиты.Добавить("ИсточникФинансирования");
	ВсеРеквизиты.Добавить("НомерКонтракта");
	ВсеРеквизиты.Добавить("НомерГосударственногоКонтракта");
	ВсеРеквизиты.Добавить("ДатаГосударственногоКонтракта");
	
	РеквизитыОперации = Новый Массив;
	Если Операция = Перечисления.ОперацииОприходованияМДЛП.Поступление
	 Или Операция = Перечисления.ОперацииОприходованияМДЛП.ВозвратОтПокупателя
	 Или Операция = Перечисления.ОперацииОприходованияМДЛП.Пересорт Тогда
		РеквизитыОперации.Добавить("МестоДеятельности");
		РеквизитыОперации.Добавить("Грузоотправитель");
		РеквизитыОперации.Добавить("МестоДеятельностиГрузоотправителя");
		РеквизитыОперации.Добавить("ИсточникФинансирования");
		РеквизитыОперации.Добавить("НомерКонтракта");
		РеквизитыОперации.Добавить("НомерГосударственногоКонтракта");
		РеквизитыОперации.Добавить("ДатаГосударственногоКонтракта");
	ИначеЕсли Операция = Перечисления.ОперацииОприходованияМДЛП.ИмпортЕАЭС Тогда
		РеквизитыОперации.Добавить("МестоДеятельности");
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработкаСообщенийМДЛП

Функция УведомлениеОбОприходовании(ДокументСсылка, ДальнейшееДействие)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_Оприходование;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена                           КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                                                 КАК Ссылка,
	|	Шапка.Дата                                                   КАК Дата,
	|	Шапка.Операция                                               КАК Операция,
	|	Шапка.Основание                                              КАК Основание,
	|	Шапка.ТипДоговора                                            КАК ТипДоговора,
	|	Шапка.ИсточникФинансирования                                 КАК ИсточникФинансирования,
	|	Шапка.НомерКонтракта                                         КАК НомерКонтракта,
	|	Шапка.Организация.РегистрационныйНомерУчастника              КАК ИдентификаторОрганизации,
	|	Шапка.МестоДеятельности.Идентификатор                        КАК ИдентификаторМестаДеятельности,
	|	Шапка.Грузоотправитель.ИНН                                   КАК ИННКонтрагента,
	|	Шапка.Грузоотправитель.КПП                                   КАК КППКонтрагента,
	|	Шапка.МестоДеятельностиГрузоотправителя.Идентификатор        КАК ИдентификаторМестаДеятельностиКонтрагента,
	|	Шапка.НомерДокумента                                         КАК НомерДокумента,
	|	Шапка.ДатаДокумента                                          КАК ДатаДокумента,
	|	Шапка.НомерГосударственногоКонтракта                         КАК НомерГосударственногоКонтракта,
	|	Шапка.ДатаГосударственногоКонтракта                          КАК ДатаГосударственногоКонтракта
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Шапка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN              КАК GTIN,
	|	НомераУпаковок.НомерКиЗ  КАК НомерКиЗ,
	|	ВЫБОР
	|		КОГДА Товары.КоличествоУпаковок = Товары.Количество
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК Число(15,2))
	|	КОНЕЦ                    КАК Цена,
	|	ВЫРАЗИТЬ(Товары.СуммаНДС / Товары.Количество КАК Число(15, 2)) КАК СуммаНДС
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки                        КАК НомерКиЗ,
	|	НомераУпаковок.Цена                                 КАК ЦенаОстальныхПозиций,
	|	НомераУпаковок.СуммаНДС                             КАК СуммаНДСОстальныхПозиций,
	|	ВЫБОР
	|		КОГДА Состав.GTIN ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                               КАК УказанСостав,
	|	Состав.GTIN                                         КАК GTIN,
	|	Состав.НомерСерии                                   КАК НомерСерии,
	|	ЕСТЬNULL(Состав.Цена, НомераУпаковок.Цена)          КАК Цена,
	|	ЕСТЬNULL(Состав.СуммаНДС, НомераУпаковок.СуммаНДС)  КАК СуммаНДС
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбОприходованииМДЛП.СоставТранспортныхУпаковок КАК Состав
	|	ПО
	|		Состав.Ссылка = НомераУпаковок.Ссылка
	|		И Состав.ИдентификаторСтроки = НомераУпаковок.ИдентификаторСтроки
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ЦенаОстальныхПозиций),
	|	МАКСИМУМ(СуммаНДСОстальныхПозиций),
	|	МАКСИМУМ(Цена),
	|	МАКСИМУМ(СуммаНДС),
	|	МАКСИМУМ(УказанСостав)
	|ПО
	|	НомерКиЗ
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Результат[2].Пустой()) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	ЭтоИмпорт = Шапка.Операция = Перечисления.ОперацииОприходованияМДЛП.ИмпортЕАЭС;
	
	Если ЭтоИмпорт Тогда
		СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОприходованиеИмпорт;
		ИмяПакета = "posting_import";
	Иначе
		СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_Оприходование;
		ИмяПакета = "posting";
	КонецЕсли;
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	Если ЭтоИмпорт Тогда
		
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id", Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
		
	Иначе
		
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id", Шапка.ИдентификаторМестаДеятельности, СообщениеКПередаче);
		
		Если ПередачаДанных.version < "1.37" Тогда
			Уведомление.shipper_info = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "shipper_info");
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.shipper_info, "inn", Шапка.ИННКонтрагента, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.shipper_info, "kpp", Шапка.КППКонтрагента, СообщениеКПередаче);
		Иначе
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "shipper_id", Шапка.ИдентификаторМестаДеятельностиКонтрагента, СообщениеКПередаче);
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты);
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_num", Шапка.НомерДокумента, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_date", Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
	
	Если Не ЭтоИмпорт Тогда
		
		Если Шапка.Операция = Перечисления.ОперацииОприходованияМДЛП.Пересорт Тогда
			ТипОперации = 3;
		ИначеЕсли Шапка.Операция = Перечисления.ОперацииОприходованияМДЛП.ВозвратОтПокупателя Тогда
			ТипОперации = 2;
		Иначе
			// По умолчанию тип операции - Поступление.
			ТипОперации = 1;
		КонецЕсли;
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "receive_type", ТипОперации, СообщениеКПередаче);
		
	КонецЕсли;
	
	ТипКонтракта = ИнтеграцияМДЛП.КодЗначенияПеречисления(Шапка.ТипДоговора);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_type", ТипКонтракта, СообщениеКПередаче);
	
	Если Не ЭтоИмпорт Тогда
		
		ИсточникФинансирования = ИнтеграцияМДЛП.КодЗначенияПеречисления(Шапка.ИсточникФинансирования);
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "source", ИсточникФинансирования, СообщениеКПередаче);
		
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_num", СокрЛП(Шапка.НомерКонтракта), СообщениеКПередаче);
		
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_gos_num", СокрЛП(Шапка.НомерГосударственногоКонтракта), СообщениеКПередаче);
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_gos_date", Формат(Шапка.ДатаГосударственногоКонтракта, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
		
	КонецЕсли;
	
	Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Уведомление.order_details, "union") Тогда
		Для Каждого Строка Из Товары Цикл
			НоваяСтрока = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.order_details, "union");
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sgtin"    , Строка.НомерКИЗ, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Строка.Цена, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Строка.СуммаНДС, СообщениеКПередаче);
			
			Уведомление.order_details.union.Добавить(НоваяСтрока);
		КонецЦикла;
		Пока Упаковки.Следующий() Цикл
			НоваяСтрока = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.order_details, "union");
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "sscc_detail") Тогда
				НоваяСтрока.sscc_detail = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(НоваяСтрока, "sscc_detail");
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока.sscc_detail, "sscc", Упаковки.НомерКИЗ, СообщениеКПередаче);
				Если Упаковки.УказанСостав Тогда
					СоставУпаковки = Упаковки.Выбрать();
					Пока СоставУпаковки.Следующий() Цикл
						СтрокаСостава = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(НоваяСтрока.sscc_detail, "detail");
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "gtin"         , СоставУпаковки.GTIN, СообщениеКПередаче);
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "series_number", СоставУпаковки.НомерСерии, СообщениеКПередаче);
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "cost"         , СоставУпаковки.Цена, СообщениеКПередаче);
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "vat_value"    , СоставУпаковки.СуммаНДС, СообщениеКПередаче);
						НоваяСтрока.sscc_detail.detail.Добавить(СтрокаСостава);
					КонецЦикла;
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Упаковки.ЦенаОстальныхПозиций, СообщениеКПередаче);
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Упаковки.СуммаНДСОстальныхПозиций, СообщениеКПередаче);
				Иначе
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Упаковки.Цена, СообщениеКПередаче);
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Упаковки.СуммаНДС, СообщениеКПередаче);
				КонецЕсли;
			Иначе
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sscc"     , Упаковки.НомерКИЗ, СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Упаковки.Цена, СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Упаковки.СуммаНДС, СообщениеКПередаче);
			КонецЕсли;
			
			Уведомление.order_details.union.Добавить(НоваяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторМестаДеятельности;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция ЗапросИнформацииОКиЗ(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьЗапросИерархииВложенностиУпаковок = ИнтеграцияМДЛП.ИспользуемаяВерсияСхемОбмена() >= "1.35";
	
	Сообщения = Новый Массив;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена  КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                        КАК Ссылка,
	|	Шапка.Основание                     КАК Основание,
	|	Шапка.Дата                          КАК Дата,
	|	Шапка.МестоДеятельности.Идентификатор  КАК ИдентификаторОрганизации
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерКиЗ  КАК НомерУпаковки
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.НомераУпаковок КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.НомерРодительскойУпаковки = &ПустойSSCC
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки  КАК НомерУпаковки
	|ИЗ
	|	Документ.УведомлениеОбОприходованииМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустойSSCC", Метаданные.ОпределяемыеТипы.SSCC.Тип.ПривестиЗначение());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Шапка  = РезультатЗапроса[0].Выбрать();
	ПотребительскиеУпаковки = РезультатЗапроса[1].Выгрузить();
	ТранспортныеУпаковки = РезультатЗапроса[2].Выгрузить();
	
	Если Не Шапка.Следующий() Или (ПотребительскиеУпаковки.Количество() = 0 И ТранспортныеУпаковки.Количество() = 0) Тогда
		
		Если Сообщения.Количество() = 0 Тогда
			СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
			СообщениеКПередаче.Документ = ДокументСсылка;
			
			Если Не ИспользоватьЗапросИерархииВложенностиУпаковок Или Не Шапка.Следующий() Или ПотребительскиеУпаковки.Количество() = 0 Тогда
				СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ;
			Иначе
				СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИерархииВложенностиУпаковок;
			КонецЕсли;
			
			ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
			Сообщения.Добавить(СообщениеКПередаче);
		КонецЕсли;
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	ИмяТипа   = "documents";
	ИмяПакета = "query_kiz_info";
	
	Для Каждого ТекущаяСтрока Из ПотребительскиеУпаковки Цикл
		
		СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
		СообщениеКПередаче.Документ = ДокументСсылка;
		СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ;
		
		ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
		ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
		
		Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
		ПередачаДанных[ИмяПакета] = Уведомление;
		
		Уведомление.action_id = Уведомление.action_id;
		
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id", Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "sgtin"     , ТекущаяСтрока.НомерУпаковки, СообщениеКПередаче);
		
		ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
		
		ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
		
		СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
		СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
		СообщениеКПередаче.Основание      = Шапка.Основание;
		СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
		СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
		
		Сообщения.Добавить(СообщениеКПередаче);
		
	КонецЦикла;
	
	Если Не ИспользоватьЗапросИерархииВложенностиУпаковок Тогда
		
		Для Каждого ТекущаяСтрока Из ТранспортныеУпаковки Цикл
			
			СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
			СообщениеКПередаче.Документ = ДокументСсылка;
			СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросСоставаУпаковки;
			
			ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
			ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
			
			Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
			ПередачаДанных[ИмяПакета] = Уведомление;
			
			Уведомление.action_id = Уведомление.action_id;
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id", Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "sscc_down" , ТекущаяСтрока.НомерУпаковки, СообщениеКПередаче);
			
			ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
			
			ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
			
			СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
			СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
			СообщениеКПередаче.Основание      = Шапка.Основание;
			СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
			СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
			
			Сообщения.Добавить(СообщениеКПередаче);
			
		КонецЦикла;
		
	Иначе
		
		ИмяПакета = "query_hierarchy_info";
		
		Для Каждого ТекущаяСтрока Из ТранспортныеУпаковки Цикл
			
			СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
			СообщениеКПередаче.Документ = ДокументСсылка;
			СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИерархииВложенностиУпаковок;
			
			ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
			ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
			
			Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
			ПередачаДанных[ИмяПакета] = Уведомление;
			
			Уведомление.action_id = Уведомление.action_id;
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id", Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "sscc"      , ТекущаяСтрока.НомерУпаковки, СообщениеКПередаче);
			
			ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
			
			ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
			
			СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
			СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
			СообщениеКПередаче.Основание      = Шапка.Основание;
			СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
			СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
			
			Сообщения.Добавить(СообщениеКПередаче);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Сообщения;
	
КонецФункции

Процедура ЗагрузитьИнформациюОКиЗ(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Документ.Заблокировать();
	
	СтрокаУпаковки = Документ.НомераУпаковок.Найти(ДанныеДокумента.sgtin, "НомерКиЗ");
	Если СтрокаУпаковки <> Неопределено Тогда
		СтрокаУпаковки.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
		Если ДанныеДокумента.ЕстьИнформация Тогда
			
			ДанныеУпаковки = ДанныеДокумента.ДанныеУпаковки;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеУпаковки, "info_sgtin") Тогда
				ДанныеУпаковки = ДанныеУпаковки.info_sgtin;
			КонецЕсли;
			СтрокаУпаковки.Статус = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеУпаковки, "status");
			
			СтрокаТовараСтарая = Документ.Товары.Найти(СтрокаУпаковки.ИдентификаторСтроки, "ИдентификаторСтроки");
			Если СтрокаТовараСтарая <> Неопределено Тогда
				
				ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
				ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок = Истина;
				ПараметрыЗаполнения.ПересчитатьСумму = Истина;
				
				Если СтрокаТовараСтарая.Количество > 1 Тогда
					СуммаНДС = Окр(СтрокаТовараСтарая.СуммаНДС / СтрокаТовараСтарая.Количество, 2);
				Иначе
					СуммаНДС = СтрокаТовараСтарая.СуммаНДС;
				КонецЕсли;
				
				Отбор = Новый Структура;
				Отбор.Вставить("GTIN"      , ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеУпаковки, "GTIN"));
				Отбор.Вставить("НомерСерии", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеУпаковки, "series_number"));
				Отбор.Вставить("ГоденДо"   , СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеУпаковки, "expiration_date")));
				Отбор.Вставить("Цена"      , СтрокаТовараСтарая.Цена);
				
				НайденныеСтроки = Документ.Товары.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					Если НайденныеСтроки.Найти(СтрокаТовараСтарая) = Неопределено Тогда
					
						СтрокаТовараСтарая.Количество = СтрокаТовараСтарая.Количество - 1;
						СтрокаТовараСтарая.СуммаНДС = СтрокаТовараСтарая.СуммаНДС - СуммаНДС;
						Если СтрокаТовараСтарая.Количество = 0 Тогда
							Документ.Товары.Удалить(СтрокаТовараСтарая);
						Иначе
							ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, СтрокаТовараСтарая, ПараметрыЗаполнения);
						КонецЕсли;
						
						НоваяСтрокаТовара = НайденныеСтроки[0];
						СтрокаУпаковки.ИдентификаторСтроки = НоваяСтрокаТовара.ИдентификаторСтроки;
						НоваяСтрокаТовара.Количество = НоваяСтрокаТовара.Количество + 1;
						НоваяСтрокаТовара.СуммаНДС = НоваяСтрокаТовара.СуммаНДС + СуммаНДС;
						ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, НоваяСтрокаТовара, ПараметрыЗаполнения);
						
					КонецЕсли;
					
				Иначе
					
					ОтборПоИдентификатору = Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки);
					НайденныеСтроки = Документ.НомераУпаковок.НайтиСтроки(ОтборПоИдентификатору);
					Если НайденныеСтроки.Количество() > 1 Тогда
						СтрокаТовараСтарая.Количество = СтрокаТовараСтарая.Количество - 1;
						СтрокаТовараСтарая.СуммаНДС = СтрокаТовараСтарая.СуммаНДС - СуммаНДС;
						ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, СтрокаТовараСтарая, ПараметрыЗаполнения);
						
						НоваяСтрокаТовара = Документ.Товары.Вставить(СтрокаТовараСтарая.НомерСтроки);
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТовара, СтрокаТовараСтарая,, "Серия, Количество, КоличествоУпаковок, ИдентификаторСтроки");
						НоваяСтрокаТовара.Количество = 1;
						НоваяСтрокаТовара.СуммаНДС = СуммаНДС;
						НоваяСтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
						СтрокаУпаковки.ИдентификаторСтроки = НоваяСтрокаТовара.ИдентификаторСтроки;
						
						ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, НоваяСтрокаТовара, ПараметрыЗаполнения);
					Иначе
						НоваяСтрокаТовара = СтрокаТовараСтарая;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовара, Отбор);
					НоваяСтрокаТовара.КодТНВЭД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеУпаковки, "tnved_code");
					
					
					Параметры = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
					Параметры.ОбработатьУпаковки = Ложь;
					Параметры.ПроверитьСериюРассчитатьСтатус = Истина;
					Параметры.ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(Документ, ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументСсылка));
					ИнтеграцияМДЛППереопределяемый.ПриИзмененииПараметровНоменклатуры(Документ, НоваяСтрокаТовара, Параметры);
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаУпаковки.Статус = ДанныеДокумента.Статус;
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьСоставУпаковки(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Документ.Заблокировать();
	
	СтрокаУпаковки = Документ.ТранспортныеУпаковки.Найти(ДанныеДокумента.sscc, "НомерУпаковки");
	Если СтрокаУпаковки <> Неопределено Тогда
		СтрокаУпаковки.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
		СтрокаУпаковки.Статус = ДанныеДокумента.Статус;
		
		ТекущийСостав = Документ.СоставТранспортныхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
		Для Каждого СтрокаСостава Из ТекущийСостав Цикл
			СтрокаСостава.Количество = 0;
			УпаковкиВСоставе = Документ.НомераУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтрокиУпаковки));
			Для Каждого УдаляемаяСтрока Из УпаковкиВСоставе Цикл
				Документ.НомераУпаковок.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЦикла;
		ГрупповыеУпаковкиВСоставе = Документ.ИерархияГрупповыхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
		Для Каждого УдаляемаяСтрока Из ГрупповыеУпаковкиВСоставе Цикл
			Документ.ИерархияГрупповыхУпаковок.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		Если ДанныеДокумента.ЕстьИнформация Тогда
			
			ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
			ПараметрыЗаполнения.ОбработатьУпаковки = Ложь;
			ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
			ПараметрыЗаполнения.ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(Документ, ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументСсылка));
			
			Состав = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.ДанныеУпаковки, "tree", Новый Массив);
			Для Каждого ЭлементСостава Из Состав Цикл
				ИнформацияОКиЗ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЭлементСостава, "sgtin");
				Если ИнформацияОКиЗ <> Неопределено Тогда
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИнформацияОКиЗ, "info_sgtin") Тогда
						ИнформацияОКиЗ = ИнформацияОКиЗ.info_sgtin;
					КонецЕсли;
					
					НомерКиЗ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "sgtin");
					Отбор = Новый Структура;
					Отбор.Вставить("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки);
					Отбор.Вставить("GTIN"      , ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "GTIN"));
					Отбор.Вставить("НомерСерии", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "series_number"));
					
					ИзменилисьДанныеВСтроке = Ложь;
					
					НайденныеСтроки = Документ.СоставТранспортныхУпаковок.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() > 0 Тогда
						СтрокаТовара = НайденныеСтроки[0];
					Иначе
						СтрокаТовара = Документ.СоставТранспортныхУпаковок.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТовара, Отбор);
						ЗаполнитьЗначенияСвойств(СтрокаТовара, СтрокаУпаковки, "Цена, СуммаНДС");
						ИзменилисьДанныеВСтроке = Истина;
					КонецЕсли;
					
					Если ПустаяСтрока(СтрокаТовара.ИдентификаторСтрокиУпаковки) Тогда
						СтрокаТовара.ИдентификаторСтрокиУпаковки = Строка(Новый УникальныйИдентификатор);
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СтрокаТовара.ГоденДо) Тогда
						СтрокаТовара.ГоденДо = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "expiration_date"));
						ИзменилисьДанныеВСтроке = Истина;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СтрокаТовара.КодТНВЭД) Тогда
						СтрокаТовара.КодТНВЭД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "tnved_code");
					КонецЕсли;
					
					СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
					
					Если ИзменилисьДанныеВСтроке Тогда
						ИнтеграцияМДЛППереопределяемый.ПриИзмененииПараметровНоменклатуры(Документ, СтрокаТовара, ПараметрыЗаполнения);
					КонецЕсли;
					
					НоваяСтрока = Документ.НомераУпаковок.Добавить();
					НоваяСтрока.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтрокиУпаковки;
					НоваяСтрока.НомерКИЗ = НомерКиЗ;
					НоваяСтрока.Статус    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "status");
					НоваяСтрока.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
					
				Иначе
					НоваяСтрока = Документ.ИерархияГрупповыхУпаковок.Добавить();
					НоваяСтрока.НомерУпаковки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЭлементСостава, "sscc");
					НоваяСтрока.ИдентификаторСтроки = СтрокаУпаковки.ИдентификаторСтроки;
				КонецЕсли;
				НоваяСтрока.НомерРодительскойУпаковки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЭлементСостава, "parent_sscc");
			КонецЦикла;
			
			ТекущийСостав = Документ.СоставТранспортныхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
			Для Каждого СтрокаСостава Из ТекущийСостав Цикл
				СтрокаСостава.Сумма = СтрокаСостава.Цена * СтрокаСостава.Количество;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьИерархиюВложенностиУпаковок(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Документ.Заблокировать();
	
	СтрокаУпаковки = Документ.ТранспортныеУпаковки.Найти(ДанныеДокумента.sscc, "НомерУпаковки");
	Если СтрокаУпаковки <> Неопределено Тогда
		СтрокаУпаковки.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
		СтрокаУпаковки.Статус = ДанныеДокумента.Статус;
		
		ТекущийСостав = Документ.СоставТранспортныхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
		Для Каждого СтрокаСостава Из ТекущийСостав Цикл
			СтрокаСостава.Количество = 0;
			УпаковкиВСоставе = Документ.НомераУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтрокиУпаковки));
			Для Каждого УдаляемаяСтрока Из УпаковкиВСоставе Цикл
				Документ.НомераУпаковок.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЦикла;
		ГрупповыеУпаковкиВСоставе = Документ.ИерархияГрупповыхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
		Для Каждого УдаляемаяСтрока Из ГрупповыеУпаковкиВСоставе Цикл
			Документ.ИерархияГрупповыхУпаковок.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		Если ДанныеДокумента.ЕстьИнформация Тогда
			
			ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
			ПараметрыЗаполнения.ОбработатьУпаковки = Ложь;
			ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
			ПараметрыЗаполнения.ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(Документ, ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументСсылка));
			
			СтекУпаковок = Новый Массив;
			СтекУпаковок.Добавить(ДанныеДокумента.ДанныеУпаковки);
			
			Пока СтекУпаковок.Количество() > 0 Цикл
				
				ТекущаяУпаковка = СтекУпаковок[0];
				СтекУпаковок.Удалить(0);
				
				Состав = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущаяУпаковка, "childs", Новый Массив);
				Для Каждого ЭлементСостава Из Состав Цикл
					
					НомераУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЭлементСостава, "sgtin_info", Новый Массив);
					Если НомераУпаковок.Количество() > 0 Тогда
						
						НомерРодительскойУпаковки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущаяУпаковка, "sscc");
						Для Каждого ИнформацияОКиЗ Из НомераУпаковок Цикл
							
							НомерКиЗ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "sgtin");
							Отбор = Новый Структура;
							Отбор.Вставить("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки);
							Отбор.Вставить("gtin"      , ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "gtin"));
							Отбор.Вставить("НомерСерии", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "series_number"));
							
							ИзменилисьДанныеВСтроке = Ложь;
							
							НайденныеСтроки = Документ.СоставТранспортныхУпаковок.НайтиСтроки(Отбор);
							Если НайденныеСтроки.Количество() > 0 Тогда
								СтрокаТовара = НайденныеСтроки[0];
							Иначе
								СтрокаТовара = Документ.СоставТранспортныхУпаковок.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаТовара, Отбор);
								ЗаполнитьЗначенияСвойств(СтрокаТовара, СтрокаУпаковки, "Цена, СуммаНДС");
								ИзменилисьДанныеВСтроке = Истина;
							КонецЕсли;
							
							Если ПустаяСтрока(СтрокаТовара.ИдентификаторСтрокиУпаковки) Тогда
								СтрокаТовара.ИдентификаторСтрокиУпаковки = Строка(Новый УникальныйИдентификатор);
							КонецЕсли;
							Если Не ЗначениеЗаполнено(СтрокаТовара.ГоденДо) Тогда
								СтрокаТовара.ГоденДо = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "expiration_date"));
								ИзменилисьДанныеВСтроке = Истина;
							КонецЕсли;
							Если Не ЗначениеЗаполнено(СтрокаТовара.КодТНВЭД) Тогда
								СтрокаТовара.КодТНВЭД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "tnved_code");
							КонецЕсли;
							
							СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
							
							Если ИзменилисьДанныеВСтроке Тогда
								ИнтеграцияМДЛППереопределяемый.ПриИзмененииПараметровНоменклатуры(Документ, СтрокаТовара, ПараметрыЗаполнения);
							КонецЕсли;
							
							НоваяСтрока = Документ.НомераУпаковок.Добавить();
							НоваяСтрока.ИдентификаторСтроки          = СтрокаТовара.ИдентификаторСтрокиУпаковки;
							НоваяСтрока.НомерКИЗ                     = НомерКиЗ;
							НоваяСтрока.Статус                       = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "status");
							НоваяСтрока.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
							НоваяСтрока.НомерРодительскойУпаковки    = НомерРодительскойУпаковки;
							
						КонецЦикла;
					КонецЕсли;
					
					ГрупповыеУпаковки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЭлементСостава, "sscc_info", Новый Массив);
					Если ГрупповыеУпаковки.Количество() > 0 Тогда
						
						НомерРодительскойУпаковки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущаяУпаковка, "sscc");
						Для Каждого ИнформацияОГрупповойУпаковке Из ГрупповыеУпаковки Цикл
							НоваяСтрока = Документ.ИерархияГрупповыхУпаковок.Добавить();
							НоваяСтрока.НомерУпаковки             = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОГрупповойУпаковке, "sscc");
							НоваяСтрока.ИдентификаторСтроки       = СтрокаУпаковки.ИдентификаторСтроки;
							НоваяСтрока.НомерРодительскойУпаковки = НомерРодительскойУпаковки;
							СтекУпаковок.Добавить(ИнформацияОГрупповойУпаковке);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			ТекущийСостав = Документ.СоставТранспортныхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
			Для Каждого СтрокаСостава Из ТекущийСостав Цикл
				СтрокаСостава.Сумма = СтрокаСостава.Цена * СтрокаСостава.Количество;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерий(ПустаяСсылка().Метаданные(), Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//  ПараметрыУказанияСерий - Структура
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПустаяСсылка().Метаданные(), ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции Подключаемые.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
