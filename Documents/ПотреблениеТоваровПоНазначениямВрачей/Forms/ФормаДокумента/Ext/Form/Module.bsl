
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ПодключаемоеОборудованиеСервер.НастроитьФормуДляИспользованияПодключаемогоОборудования(ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// БуферОбменаТоварами
	УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, Не ОбработкаТабличнойЧастиСервер.БуферОбменаПустой());
	// Конец БуферОбменаТоварами
	
	// ЭлектроннаяПодпись
	ЭлектроннаяПодписьБольничнаяАптека.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаЭлектронныеПодписи);
	// Конец ЭлектроннаяПодпись
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриЧтенииНаСервер_ФормаДокумента(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Элементы.ТоварыПоказыватьТоварыДляТекущегоНазначения.Пометка = ПоказыватьТоварыДляТекущегоНазначения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если ПодключаемоеОборудованиеКлиент.ОбрабатыватьОповещение(ЭтотОбъект, Источник) Тогда
		Если ПодключаемоеОборудованиеКлиент.ОбработатьПолучениеДанныхОтСканераШтрихкода(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ТекущаяСтрокаНазначений = Элементы.Назначения.ТекущиеДанные;
			Если ТекущаяСтрокаНазначений = Неопределено Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана строка назначения.'"));
				Возврат;
			КонецЕсли;
			ОбработатьШтрихкоды(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ВведенШтрихкод" И Источник = УникальныйИдентификатор Тогда
		ОбработатьШтрихкоды(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
	КонецЕсли;
	
	Если Источник = "РегистрацияШтрихкодов"
	   И ИмяСобытия = "ЗарегистрированыШтрихкоды"
	   И Параметр.КлючВладельца = УникальныйИдентификатор Тогда
		Если Параметр.ЗарегистрированныеШтрихкоды.Количество() > 0 Тогда
			ОбновитьСтрокиНенайденныхШтрихКодов(Параметр.ЗарегистрированныеШтрихкоды);
		КонецЕсли;
	КонецЕсли;
	
	// БуферОбменаТоварами
	Если ОбработкаТабличнойЧастиКлиент.ОбрабатыватьОповещениеОтБуфераОбмена(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ДоступностьБуфераОбмена = ОбработкаТабличнойЧастиКлиент.ОпределитьДоступностьВставкиИзБуфераОбменаПоСобытию(ИмяСобытия);
		УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, ДоступностьБуфераОбмена);
	КонецЕсли;
	// Конец БуферОбменаТоварами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптекаКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ПодборТоваровКлиент.ОбработатьПодборТоваровПоЗаказуВДокументСписания(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодбор(ВыбранноеЗначение.АдресТоваровВХранилище, КэшированныеЗначения);
	Иначе
		// БуферОбменаТоварами
		Если ОбработкаТабличнойЧастиКлиент.НужноОбработатьВставкуИзБуфераОбмена(ЭтотОбъект, ИсточникВыбора) Тогда
			ВставитьТоварыИзБуфераОбмена(ВыбранноеЗначение);
		КонецЕсли;
		// Конец БуферОбменаТоварами
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОценкаПроизводительностиБольничнаяАптекаКлиент.НачатьЗамерПроведенияДокумента(Объект.Ссылка, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбновитьКоличествоПодобрано(Объект.Назначения, Объект.Товары);
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	ЗаполнитьСлужебныеРеквизиты();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНДЫ ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьНазначения(Команда)
	
	Отказ = Ложь;
	
	ШаблонСообщенияОбОшибке = НСтр("ru='Поле ""%1"" не заполнено'");
	Если Не ЗначениеЗаполнено(Объект.Отделение) Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияОбОшибке, НСтр("ru='Отделение'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке,, "Объект.Отделение",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНазначенияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить()
	
	ТекущаяСтрокаНазначений = Элементы.Назначения.ТекущиеДанные;
	Если ДоступноРедактирование(ЭтотОбъект) И ТекущаяСтрокаНазначений = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Перед добавлением товара, необходимо указать строку назначения.'"));
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ПоказатьВводШтрихкода(УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьНенайденныеШтрихкоды(Команда)
	
	ОбновитьСтрокиНенайденныхШтрихКодов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНенайденныеШтрихкоды(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьНенайденныеШтрихкоды(Объект.Товары, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТоварыДляТекущегоНазначения(Команда)
	
	ПоказыватьТоварыДляТекущегоНазначения = Не ПоказыватьТоварыДляТекущегоНазначения;
	Элементы.ТоварыПоказыватьТоварыДляТекущегоНазначения.Пометка = ПоказыватьТоварыДляТекущегоНазначения;
	УстановитьОтборПоТекущемуНазначению();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодбор(Команда)
	
	Если Объект.Назначения.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Для подбора товара необходимо заполнить список исполненных назначений'");
		ПоказатьПредупреждение(, ТекстОшибки, 10);
		Возврат;
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ"              , Объект.Ссылка);
	ПараметрыПодбора.Вставить("Дата"                  , Объект.Дата);
	ПараметрыПодбора.Вставить("Организация"           , Объект.Организация);
	ПараметрыПодбора.Вставить("МестоХраненияОстатка"  , "Отделение");
	ПараметрыПодбора.Вставить("Склад"                 , Объект.Склад);
	ПараметрыПодбора.Вставить("ИсточникФинансирования", Объект.ИсточникФинансирования);
	ПараметрыПодбора.Вставить("АдресТоваровВХранилище", ПоместитьТоварыИНазначенияВХранилище());
	ПараметрыПодбора.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыПодбора.Вставить("АвтозаполнениеБезУчетаМинимальнойУпаковки", Истина);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ТоварыНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	Отбор = Новый Структура;
	ПользовательскийОтбор = Новый Массив;
	Если ЗначениеЗаполнено(Объект.МестоХранения) Тогда
		Отбор.Вставить("МестоХранения", Объект.МестоХранения);
	ИначеЕсли ЗначениеЗаполнено(Объект.Склад) Тогда
		ПользовательскийОтбор.Добавить(Новый Структура("Ключ, Значение, Представление", "МестоХранения", Объект.МестоХранения, НСтр("ru = 'Показывать наличие на складе без учета постов'")));
	КонецЕсли;
	
	Если Отбор.Количество() > 0 Тогда
		ПараметрыПодбора.Вставить("Отбор", Отбор);
	КонецЕсли;
	Если ПользовательскийОтбор.Количество() > 0 Тогда
		ПараметрыПодбора.Вставить("ПользовательскийОтбор", ПользовательскийОтбор);
	КонецЕсли;
	
	ПодборТоваровКлиент.ОткрытьПодборТоваровПоЗаказуВДокументСписания(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	Для каждого СтрокаНазначения Из Объект.Назначения Цикл
		СтрокаНазначения.СписыватьНоменклатуруПоНазначению = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	Для Каждого СтрокаНазначения Из Объект.Назначения Цикл
		СтрокаНазначения.СписыватьНоменклатуруПоНазначению = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	ОбщегоНазначенияБольничнаяАптекаКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды для списка "Электронные подписи"
#Область ЭлектроннаяПодпись

&НаКлиенте
Процедура Подписать(Команда)
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПодписатьДокументЗавершение", ЭтотОбъект);
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ПодписатьОбъектВФорме(ЭтотОбъект, ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ОткрытьПодпись(Команда)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ОткрытьПодпись(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_Проверить(Команда)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ПроверитьПодписи(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ПроверитьВсе(Команда)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ПроверитьПодписи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_УдалитьПодпись(Команда)
	
	УдалитьПодписи();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_СохранитьПодпись(Команда)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.СохранитьПодпись(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ОбновитьСписокПодписей(Команда)
	
	ЗаполнитьСписокПодписей();
	
	Коллекция = ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ТаблицаПодписей(ЭтотОбъект).ПолучитьЭлементы();
	Элемент = ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ЭлементТаблицаПодписей(ЭтотОбъект);
	Для Каждого Строка Из Коллекция Цикл
		Элемент.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ЭлектроннаяПодпись

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Шапка
#Область Шапка

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтделениеПриИзменении(Элемент)
	
	ОбработатьИзменениеОтделения();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Склад <> Объект.Склад Тогда
		ОбработатьИзменениеСклада();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияПриИзменении(Элемент)
	
	ОбработатьИзменениеМестаХранения();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	
	ОбработатьИзменениеСтатьиРасходов(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АналитикаРасходовПрочиеРасходы", АналитикаРасходовПрочиеРасходы);
	ПараметрыФормы.Вставить("СтатьяРасходов"                , Объект.СтатьяРасходов);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьНачалоВыбораАналитикиРасходов(ПараметрыФормы, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

#КонецОбласти // Шапка

////////////////////////////////////////////////////////////////////////////////
// Список "Назначения"
#Область Назначения

&НаКлиенте
Процедура НазначенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенияПриАктивизацииСтроки(Элемент)
	
	Если ПоказыватьТоварыДляТекущегоНазначения Тогда
		ПодключитьОбработчикОжидания("УстановитьОтборПоТекущемуНазначению", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Назначения

////////////////////////////////////////////////////////////////////////////////
// Список "Товары"
#Область Товары

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущаяСтрокаНазначений = Элементы.Назначения.ТекущиеДанные;
	Если ТекущаяСтрокаНазначений = Неопределено Или Не ТекущаяСтрокаНазначений.СписыватьНоменклатуруПоНазначению Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущееНазначение = Элементы.Назначения.ТекущиеДанные;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущееНазначение = Неопределено
	 Или Не (ТекущаяСтрока.Заказ = ТекущееНазначение.НазначениеВрача
	   И ТекущаяСтрока.КодСтроки = ТекущееНазначение.КодСтроки
	   И ТекущаяСтрока.НоменклатураЗаказа = ТекущееНазначение.НоменклатураЗаказа
	   И ТекущаяСтрока.ЕдиницаИзмеренияЗаказа = ТекущееНазначение.ЕдиницаИзмерения) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущееНазначение = Элементы.Назначения.ТекущиеДанные;
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		ТекущаяСтрока.Заказ = ТекущееНазначение.НазначениеВрача;
		ТекущаяСтрока.КодСтроки = ТекущееНазначение.КодСтроки;
		ТекущаяСтрока.НоменклатураЗаказа = ТекущееНазначение.НоменклатураЗаказа;
		ТекущаяСтрока.ЕдиницаИзмеренияЗаказа = ТекущееНазначение.ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбновитьКоличествоПодобрано(Объект.Назначения, Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрокаНазначения = Элементы.Назначения.ТекущиеДанные;
	
	// Далее открываем форму выбора с отбором по реквизитам элемента КАТ номенклатуры.
	ПараметрыФормыВыбора = Новый Структура();
	ПараметрыФормыВыбора.Вставить("ТекущаяСтрока", ?(ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура), ТекущаяСтрока.Номенклатура, ТекущаяСтрокаНазначения.Номенклатура));
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(ТекущаяСтрокаНазначения.Номенклатура) Тогда
		Отбор.Вставить("Номенклатура", ТекущаяСтрокаНазначения.Номенклатура);
	Иначе
		Если ЗначениеЗаполнено(ТекущаяСтрокаНазначения.ТорговоеНаименование) Тогда
			Отбор.Вставить("ТорговоеНаименование", ТекущаяСтрокаНазначения.ТорговоеНаименование);
		Иначе
			Отбор.Вставить("ДействующиеВеществаМНН", ТекущаяСтрокаНазначения.ДействующиеВеществаМНН);
		КонецЕсли;
		ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ДобавитьВСтруктуру(Отбор, ПолучитьРеквизитыФормыВыпуска(ТекущаяСтрокаНазначения.ФормаВыпуска));
	КонецЕсли;
	
	ПараметрыФормыВыбора.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ТекущаяСтрока.Штрихкод = "";
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), ТекущаяСтрока.СерияНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьПартиюПоВладельцу(), ТекущаяСтрока.Партия);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициентЕдиницыЗаказа());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоВЕдиницахЗаказа());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьКоличествоПодобрано(Объект.Назначения, Объект.Товары, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(ОбработкаТабличнойЧастиКлиентСервер.Действие_ЗаполнитьЗабраковкуСерий());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоВЕдиницахЗаказа());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьКоличествоПодобрано(Объект.Назначения, Объект.Товары, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоВЕдиницахЗаказа());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьКоличествоПодобрано(Объект.Назначения, Объект.Товары, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элемент.Родитель.ТекущиеДанные;
	ОтборПартий = Новый Структура;
	ОтборПартий.Вставить("Документ"     , Объект.Ссылка);
	ОтборПартий.Вставить("Организация"  , Объект.Организация);
	ОтборПартий.Вставить("Склад"        , Объект.Склад);
	
	ПараметрыВыбораПартии = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыВыбораПартии(ОтборПартий, ТекущаяСтрока);
	ОбработкаТабличнойЧастиКлиент.ВыбратьПартиюНоменклатуры(ЭтотОбъект, Элемент, ПараметрыВыбораПартии, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоэффициентЕдиницыЗаказаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоВЕдиницахЗаказа());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьКоличествоПодобрано(Объект.Назначения, Объект.Товары, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоВЕдиницахЗаказаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока.КоличествоВЕдиницахЗаказа = 0 Тогда
		ТекущаяСтрока.КоэффициентЕдиницыЗаказа = 0;
	Иначе
		ТекущаяСтрока.КоэффициентЕдиницыЗаказа =
			ТекущаяСтрока.Количество / ТекущаяСтрока.КоличествоВЕдиницахЗаказа;
	КонецЕсли;
	
	ОбновитьКоличествоПодобрано(Объект.Назначения, Объект.Товары, ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти // Товары

////////////////////////////////////////////////////////////////////////////////
// Список "Электронные подписи"
#Область ЭлектроннаяПодпись

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ОткрытьПодпись(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ПриАктивизацииСтроки(Элемент)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.УстановитьДоступностьКомандСпискаПодписей(ЭтотОбъект, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ОткрытьПодпись(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ЭлектроннаяПодпись

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	Склад = Объект.Склад;
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	
	ОсновнойСклад = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьСкладОтделенияПоУмолчанию(Неопределено, Объект.Отделение);
	
	ОбновитьКоличествоПодобрано(Объект.Назначения, Объект.Товары);
	
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСлужебныеРеквизитыСтатьиРасходов();
	
	Элементы.ТоварыМестоХранения.Видимость = Не ЗначениеЗаполнено(Объект.МестоХранения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты(КэшированныеЗначения = Неопределено)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТабличнуюЧасть(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыСтатьиРасходов(КэшированныеЗначения = Неопределено)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСлужебныеРеквизитыСтатьиРасходов());
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("СтатьяРасходов", Объект.СтатьяРасходов);
	ДанныеОбъекта.Вставить("АналитикаРасходовКонтролироватьЗаполнениеАналитики");
	ДанныеОбъекта.Вставить("АналитикаРасходовПрочиеРасходы");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(ДанныеОбъекта, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОбъекта);
	
	АналитикаРасходовПациент = (ТипЗнч(Объект.АналитикаРасходов) = Тип("СправочникСсылка.МедицинскиеКарты"));
	Элементы.АналитикаРасходов.Доступность = Не АналитикаРасходовПациент;
	Элементы.АналитикаРасходов.ПодсказкаВвода = ?(АналитикаРасходовПациент, НСтр("ru = '<Заполняется из данных>'"), "");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСерийНоменклатуры(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПартий(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеИсточниковФинансирования(ЭтотОбъект);
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеЗабракованнойСерии(ЭтотОбъект);
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(ЭтотОбъект);
	
	// Цвет текста полей Товары, ТоварыНоменклатура
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Товары: строки несоответствующие текущей строке назначения (доступность)'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ГруппаОтбораИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Элемент.Отбор.Элементы, "", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИли,
		"Объект.Назначения.НазначениеВрача", ВидСравненияКомпоновкиДанных.НеРавно, Новый ПолеКомпоновкиДанных("Объект.Товары.Заказ"));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИли,
		"Объект.Назначения.КодСтроки", ВидСравненияКомпоновкиДанных.НеРавно, Новый ПолеКомпоновкиДанных("Объект.Товары.КодСтроки"));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИли,
		"Объект.Назначения.НоменклатураЗаказа", ВидСравненияКомпоновкиДанных.НеРавно, Новый ПолеКомпоновкиДанных("Объект.Товары.НоменклатураЗаказа"));
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораИли,
		"Объект.Назначения.ЕдиницаИзмерения", ВидСравненияКомпоновкиДанных.НеРавно, Новый ПолеКомпоновкиДанных("Объект.Товары.ЕдиницаИзмеренияЗаказа"));
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Цвет текста полей Назначения, НазначенияНомерСтроки
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Назначения: подобрано сколько исполнено'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Назначения.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Объект.Назначения.Количество", ВидСравненияКомпоновкиДанных.Равно, Новый ПолеКомпоновкиДанных("Объект.Назначения.КоличествоПодобрано"));
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЦветМорскойВолныНейтральный);
	
	// Цвет текста полей Назначения, НазначенияНомерСтроки
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Назначения: подобрано больше чем исполнено'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Назначения.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Объект.Назначения.Количество", ВидСравненияКомпоновкиДанных.Меньше, Новый ПолеКомпоновкиДанных("Объект.Назначения.КоличествоПодобрано"));
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Отображение полей НазначенияТорговоеНаименование, НазначенияДействующиеВеществаМНН, НазначенияФормаВыпуска
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Назначения: отображение полей при заполненной номенклатуре'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НазначенияТорговоеНаименование.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НазначенияДействующиеВеществаМНН.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НазначенияФормаВыпуска.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Объект.Назначения.Номенклатура", ВидСравненияКомпоновкиДанных.Заполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Отображение полей НазначенияНоменклатура, НазначенияДействующиеВеществаМНН
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Назначения: отображение полей при заполненном торговом наименовании'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НазначенияНоменклатура.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НазначенияДействующиеВеществаМНН.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Объект.Назначения.Номенклатура", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Объект.Назначения.ТорговоеНаименование", ВидСравненияКомпоновкиДанных.Заполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Отображение полей НазначенияНоменклатура, НазначенияТорговоеНаименование
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Назначения: отображение полей при заполненном действующем веществе'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НазначенияНоменклатура.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НазначенияТорговоеНаименование.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Объект.Назначения.Номенклатура", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Объект.Назначения.ТорговоеНаименование", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"Объект.Назначения.ДействующиеВеществаМНН", ВидСравненияКомпоновкиДанных.Заполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазначенияНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Отделение", Объект.Отделение);
	Запрос.УстановитьПараметр("ИсточникФинансирования", ?(Объект.ИсточникФинансирования.Пустая(), Неопределено, Объект.ИсточникФинансирования));
	Запрос.УстановитьПараметр("ДатаОстатка", КонецДня(Объект.Дата) + 1);
	Запрос.УстановитьПараметр("НазначенияВДокументе",  Объект.Назначения.Выгрузить());
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Назначения.КодСтроки                            КАК КодСтроки,
	|	Назначения.НазначениеВрача                      КАК НазначениеВрача,
	|	Назначения.НоменклатураЗаказа                   КАК НоменклатураЗаказа,
	|	Назначения.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
	|	Назначения.ИсточникФинансирования               КАК ИсточникФинансирования
	|ПОМЕСТИТЬ НазначенияВДокументе
	|ИЗ
	|	&НазначенияВДокументе КАК Назначения
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НазначенияВДокументе.КодСтроки, 0)           КАК КодСтроки,
	|	НазначенияВрачей.НазначениеВрача                      КАК НазначениеВрача,
	|	НазначенияВрачей.АналитикаОписанияОтбораНоменклатуры  КАК НоменклатураЗаказа,
	|	ОписаниеОтборовНоменклатуры.Номенклатура              КАК Номенклатура,
	|	ОписаниеОтборовНоменклатуры.ТорговоеНаименование      КАК ТорговоеНаименование,
	|	ОписаниеОтборовНоменклатуры.ДействующиеВеществаМНН    КАК ДействующиеВеществаМНН,
	|	ОписаниеОтборовНоменклатуры.ФормаВыпуска              КАК ФормаВыпуска,
	|	НазначенияВрачей.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
	|	НазначенияВрачей.ИсточникФинансирования               КАК ИсточникФинансирования,
	|	НазначенияВрачей.КОформлениюОстаток                   КАК Количество,
	|	ВЫБОР
	|		КОГДА НазначенияВрачей.КОформлениюОстаток > НазначенияВрачейНаДату.КОформлениюОстаток
	|			ТОГДА НазначенияВрачейНаДату.КОформлениюОстаток
	|		ИНАЧЕ НазначенияВрачей.КОформлениюОстаток
	|	КОНЕЦ                                                 КАК КоличествоНаДату
	|ИЗ
	|	РегистрНакопления.РецептурныеНазначенияВрачей.Остатки(
	|		,
	|		НазначениеВрача.Организация = &Организация
	|		И НазначениеВрача.Отделение = &Отделение
	|		И (&ИсточникФинансирования = НЕОПРЕДЕЛЕНО ИЛИ ИсточникФинансирования В ИЕРАРХИИ(&ИсточникФинансирования))
	|	) КАК НазначенияВрачей
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РецептурныеНазначенияВрачей.Остатки(
	|			&ДатаОстатка,
	|			НазначениеВрача.Организация = &Организация
	|			И НазначениеВрача.Отделение = &Отделение
	|			И (&ИсточникФинансирования = НЕОПРЕДЕЛЕНО ИЛИ ИсточникФинансирования В ИЕРАРХИИ(&ИсточникФинансирования))
	|		) КАК НазначенияВрачейНаДату
	|	ПО
	|		НазначенияВрачей.НазначениеВрача = НазначенияВрачейНаДату.НазначениеВрача
	|		И НазначенияВрачей.АналитикаОписанияОтбораНоменклатуры = НазначенияВрачейНаДату.АналитикаОписанияОтбораНоменклатуры
	|		И НазначенияВрачей.ЕдиницаИзмерения = НазначенияВрачейНаДату.ЕдиницаИзмерения
	|		И НазначенияВрачей.ИсточникФинансирования = НазначенияВрачейНаДату.ИсточникФинансирования
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаОписанийОтборовНоменклатуры КАК ОписаниеОтборовНоменклатуры
	|	ПО
	|		НазначенияВрачей.АналитикаОписанияОтбораНоменклатуры = ОписаниеОтборовНоменклатуры.КлючАналитики
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		НазначенияВДокументе КАК НазначенияВДокументе
	|	ПО
	|		НазначенияВрачей.НазначениеВрача = НазначенияВДокументе.НазначениеВрача
	|		И НазначенияВрачей.АналитикаОписанияОтбораНоменклатуры = НазначенияВДокументе.НоменклатураЗаказа
	|		И НазначенияВрачей.ЕдиницаИзмерения = НазначенияВДокументе.ЕдиницаИзмерения
	|		И НазначенияВрачей.ИсточникФинансирования = НазначенияВДокументе.ИсточникФинансирования
	|
	|ГДЕ
	|	НазначенияВрачей.КОформлениюОстаток > 0
	|	И НазначенияВрачейНаДату.КОформлениюОстаток > 0
	|";
	
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[1];
	Если ЗначениеЗаполнено(Объект.Дата) И ТекущаяДатаСеанса() > КонецДня(Объект.Дата) Тогда
		ОписаниеЗапроса.Колонки.Удалить(ОписаниеЗапроса.Колонки.Индекс(ОписаниеЗапроса.Колонки.Найти("Количество")));
		ОписаниеЗапроса.Колонки.Найти("КоличествоНаДату").Псевдоним = "Количество";
	Иначе
		ОписаниеЗапроса.Колонки.Удалить(ОписаниеЗапроса.Колонки.Индекс(ОписаниеЗапроса.Колонки.Найти("КоличествоНаДату")));
		ОписаниеЗапроса.Операторы[0].Источники.Удалить("НазначенияВрачейНаДату");
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объект.Назначения.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		ИсполненоПоНазначению = Объект.Назначения.Добавить();
		ЗаполнитьЗначенияСвойств(ИсполненоПоНазначению, Выборка);
		
		ИсполненоПоНазначению.СписыватьНоменклатуруПоНазначению = Истина;
		
	КонецЦикла;
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(Объект, "Назначения");
	
	ОбновитьКоличествоПодобрано(Объект.Назначения, Объект.Товары);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКоличествоПодобрано(Назначения, ПодобранныеТовары, ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		СписокНазначений = Назначения;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("НазначениеВрача", ТекущаяСтрока.Заказ);
		Отбор.Вставить("КодСтроки", ТекущаяСтрока.КодСтроки);
		Отбор.Вставить("НоменклатураЗаказа", ТекущаяСтрока.НоменклатураЗаказа);
		Отбор.Вставить("ЕдиницаИзмерения", ТекущаяСтрока.ЕдиницаИзмеренияЗаказа);
		СписокНазначений = Назначения.НайтиСтроки(Отбор);
	КонецЕсли;
	
	Для Каждого СтрокаНазначения Из СписокНазначений Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Заказ", СтрокаНазначения.НазначениеВрача);
		Отбор.Вставить("КодСтроки", СтрокаНазначения.КодСтроки);
		Отбор.Вставить("НоменклатураЗаказа", СтрокаНазначения.НоменклатураЗаказа);
		Отбор.Вставить("ЕдиницаИзмеренияЗаказа", СтрокаНазначения.ЕдиницаИзмерения);
		НайденныеСтроки = ПодобранныеТовары.НайтиСтроки(Отбор);
		
		КоличествоПодобрано = 0;
		Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
			КоличествоПодобрано = КоличествоПодобрано + СтрокаТовара.КоличествоВЕдиницахЗаказа;
		КонецЦикла;
		
		СтрокаНазначения.КоличествоПодобрано = КоличествоПодобрано;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыФормыВыпуска(Знач ФормаВыпуска)
	
	Возврат АптечныеТовары.ПолучитьРеквизитыФормыВыпуска(ФормаВыпуска);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДоступноРедактирование(Форма)
	
	Возврат Не Форма.ТолькоПросмотр И Не Форма.Объект.ПодписанЭП;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборПоТекущемуНазначению()
	
	Если ПоказыватьТоварыДляТекущегоНазначения Тогда
		ТекущиеДанные = Элементы.Назначения.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Заказ"                 , ТекущиеДанные.НазначениеВрача);
			Отбор.Вставить("КодСтроки"             , ТекущиеДанные.КодСтроки);
			Отбор.Вставить("НоменклатураЗаказа"    , ТекущиеДанные.НоменклатураЗаказа);
			Отбор.Вставить("ЕдиницаИзмеренияЗаказа", ТекущиеДанные.ЕдиницаИзмерения);
			ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
		Иначе
			ОтборСтрок = Неопределено;
		КонецЕсли;
	Иначе
		ОтборСтрок = Неопределено;
	КонецЕсли;
	
	ТекущийОтборСтрок = Элементы.Товары.ОтборСтрок;
	Если ТипЗнч(ТекущийОтборСтрок) = Тип("ФиксированнаяСтруктура") И ТипЗнч(ОтборСтрок) = Тип("ФиксированнаяСтруктура") Тогда
		Значение = Неопределено;
		Для Каждого КлючИЗначение Из ТекущийОтборСтрок Цикл
			Если Не (ОтборСтрок.Свойство(КлючИЗначение.Ключ, Значение) И КлючИЗначение.Значение = Значение) Тогда
				Элементы.Товары.ОтборСтрок = ОтборСтрок;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ОтборСтрок <> ТекущийОтборСтрок Тогда
		Элементы.Товары.ОтборСтрок = ОтборСтрок;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Контроль несогласованных изменений
#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура Подключаемый_ПриИзменении_КонтрольНесогласованныхИзменений(Элемент)
	
	КонтрольНесогласованныхИзмененийКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_КонтрольНесогласованныхИзменений(Элемент)
	
	КонтрольНесогласованныхИзмененийКлиент.Нажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команды_КонтрольНесогласованныхИзменений(Команда)
	
	КонтрольНесогласованныхИзмененийКлиент.Команда(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_КонтрольНесогласованныхИзменений(Элемент, Отказ)
	
	КонтрольНесогласованныхИзмененийКлиент.ПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_КонтрольНесогласованныхИзменений(Элемент, Отказ)
	
	КонтрольНесогласованныхИзмененийКлиент.ПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_КонтрольНесогласованныхИзменений(Элемент, Отказ, Копирование, Родитель, Группа)
	
	КонтрольНесогласованныхИзмененийКлиент.ПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	// ЭлектроннаяПодпись
	СписокЭлементов = ЭлектроннаяПодписьБольничнаяАптека.ИменаЭлементовПодписываемыхДанных(ЭтотОбъект);
	// Конец ЭлектроннаяПодпись
	
	СписокЭлементов.Добавить(Элементы.ИсточникФинансирования.Имя);
	
	СписокЭлементов.Добавить(Элементы.ТоварыКомандаПодбор.Имя);
	
	СписокЭлементов.Добавить(Элементы.ТоварыПерезаполнитьНенайденныеШтрихкоды.Имя);
	СписокЭлементов.Добавить(Элементы.ТоварыОбработатьНенайденныеШтрихкоды.Имя);
	
	// БуферОбменаТоварами
	СписокЭлементов.Добавить(Элементы.ТоварыБуферОбменаВставить.Имя);
	СписокЭлементов.Добавить(Элементы.ТоварыКонтекстноеМенюБуферОбменаВставить.Имя);
	СписокЭлементов.Добавить(Элементы.ТоварыБуферОбмена.Имя);
	// Конец БуферОбменаТоварами
	
	ИзмененияЗапрещены = Объект.ПодписанЭП;
	КонтрольНесогласованныхИзменений.НастроитьКонтрольИзмененияДанных(ЭтотОбъект, СписокЭлементов, ИзмененияЗапрещены);
	
	Элементы.Назначения.ТолькоПросмотр = ИзмененияЗапрещены;
	Элементы.НазначенияУстановитьПометки.Доступность = Не ИзмененияЗапрещены;
	Элементы.НазначенияСнятьПометки.Доступность = Не ИзмененияЗапрещены;
	Элементы.НазначенияЗаполнитьНазначения.Доступность = Не ИзмененияЗапрещены;
	
КонецПроцедуры

#КонецОбласти // КонтрольНесогласованныхИзменений

////////////////////////////////////////////////////////////////////////////////
// Электронная подпись
#Область ЭлектроннаяПодпись

&НаКлиенте
Процедура ПодписатьДокументЗавершение(Результат, НеИспользуется) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Прочитать();
	ЗаполнитьСписокПодписей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодписей()
	
	ЭлектроннаяПодписьБольничнаяАптека.ЗаполнитьПодписи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписи()
	
	Если ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ЭлементТаблицаПодписей(ЭтотОбъект).ВыделенныеСтроки.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Удалить выделенные подписи?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выделенную подпись?'");
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УдалитьПодписиЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписиЗавершение(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПодписиИОбновитьСписок();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодписиИОбновитьСписок()
	
	ЭлектроннаяПодписьБольничнаяАптека.УдалитьПодписиИОбновитьСписок(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ЭлектроннаяПодпись

////////////////////////////////////////////////////////////////////////////////
// Обработка штрихкодов
#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ТекущаяСтрокаНазначений = Элементы.Назначения.ТекущиеДанные;
	Если ТекущаяСтрокаНазначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияСДобавленнымиСтроками = Новый Структура;
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоэффициентЕдиницыЗаказа());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоВЕдиницахЗаказа());
	
	ДействияСИзмененнымиСтроками = Новый Структура;
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоВЕдиницахЗаказа());
	
	ИзменятьКоличество = ДоступноРедактирование(ЭтотОбъект);
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиШтрихкодов(ДанныеШтрихкодов, ДействияСДобавленнымиСтроками, ДействияСИзмененнымиСтроками);
	ПараметрыДействия.ИзменятьКоличество = ИзменятьКоличество;
	ПараметрыДействия.ПараметрыУчетаНоменклатуры = ПараметрыУчетаНоменклатуры;
	
	ПараметрыДействия.ОтборСтрок.Вставить("Заказ", ТекущаяСтрокаНазначений.НазначениеВрача);
	ПараметрыДействия.ОтборСтрок.Вставить("КодСтроки", ТекущаяСтрокаНазначений.КодСтроки);
	ПараметрыДействия.ОтборСтрок.Вставить("НоменклатураЗаказа", ТекущаяСтрокаНазначений.НоменклатураЗаказа);
	ПараметрыДействия.ОтборСтрок.Вставить("ЕдиницаИзмеренияЗаказа", ТекущаяСтрокаНазначений.ЕдиницаИзмерения);
	
	ОбработатьШтрихкодыНаСервере(ПараметрыДействия, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиКлиент.СообщитьОНеизвестныхШтрихкодах(ПараметрыДействия);
	
	Если ПараметрыДействия.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = ПараметрыДействия.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыНаСервере(ПараметрыДействия, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиСервер.ОбработатьШтрихкоды(ЭтотОбъект, Объект, ПараметрыДействия, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокиНенайденныхШтрихКодов(ЗарегистрированныеШтрихкоды = Неопределено)
	
	Если Не ОбработкаТабличнойЧастиКлиент.ЕстьНенайденныеШтрихкоды(Объект.Товары) Тогда
		Возврат;
	КонецЕсли;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияСИзмененнымиСтроками = Новый Структура;
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиНенайденныхШтрихкодов();
	ПараметрыДействия.ДействияСИзмененнымиСтроками = ДействияСИзмененнымиСтроками;
	Если ЗарегистрированныеШтрихкоды <> Неопределено Тогда
		ПараметрыДействия.ЗарегистрированныеШтрихкоды = ЗарегистрированныеШтрихкоды;
	КонецЕсли;
	
	ОбновитьДанныеНенайденныхШтрихКодовНаСервере(ПараметрыДействия, КэшированныеЗначения);
	
	Если ПараметрыДействия.Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.СообщитьОНеизвестныхШтрихкодах(ПараметрыДействия);
	ОбработкаТабличнойЧастиКлиент.СообщитьОРезультатеОбновленияДанныхПоШтрихкодам(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНенайденныхШтрихКодовНаСервере(ПараметрыДействия, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиСервер.ОбновитьДанныеНенайденныхШтрихКодов(Объект, ПараметрыДействия, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти // ОбработкаШтрихкодов

////////////////////////////////////////////////////////////////////////////////
// Обработка подбора
#Область ОбработкаПодбора

&НаСервере
Функция ПоместитьТоварыИНазначенияВХранилище()
	
	ДанныеЗаказа = ПодборТоваровСервер.ПолучитьПустуюТаблицуДанныхЗаказа();
	Для Каждого СтрокаНазначения Из Объект.Назначения Цикл
		Если Не СтрокаНазначения.СписыватьНоменклатуруПоНазначению Тогда
			Продолжить;
		КонецЕсли;
		СтрокаЗаказа = ДанныеЗаказа.Добавить();
		СтрокаЗаказа.Заказ = СтрокаНазначения.НазначениеВрача;
		СтрокаЗаказа.КодСтроки = СтрокаНазначения.КодСтроки;
		СтрокаЗаказа.НоменклатураЗаказа = СтрокаНазначения.НоменклатураЗаказа;
		СтрокаЗаказа.ЕдиницаИзмеренияЗаказа = СтрокаНазначения.ЕдиницаИзмерения;
		СтрокаЗаказа.КОформлению = СтрокаНазначения.Количество;
		СтрокаЗаказа.ИсточникФинансированияЗаказа = СтрокаНазначения.ИсточникФинансирования;
	КонецЦикла;
	
	Товары = Объект.Товары.Выгрузить(, "Номенклатура, СерияНоменклатуры, Партия, ИсточникФинансирования, КоличествоВЕдиницахИзмерения, ЕдиницаИзмерения, Коэффициент, Количество, КодСтроки, Заказ, НоменклатураЗаказа, КоличествоВЕдиницахЗаказа, ЕдиницаИзмеренияЗаказа, КоэффициентЕдиницыЗаказа");
	
	ДанныеПодбораПоЗаказу = Новый Структура("ДанныеЗаказа, Товары", ДанныеЗаказа, Товары);
	Возврат ПоместитьВоВременноеХранилище(ДанныеПодбораПоЗаказу, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьПодбор(Знач АдресТоваровВХранилище, КэшированныеЗначения)
	
	Товары = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Объект.Товары.Загрузить(Товары);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТабличнуюЧасть(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьКоличествоПодобрано(Объект.Назначения, Объект.Товары);
	
КонецПроцедуры

#КонецОбласти // ОбработкаПодбора

////////////////////////////////////////////////////////////////////////////////
// Обработка изменения реквизитов
#Область ОбработкаИзмененияРеквизитов

&НаСервере
Процедура ОбработатьИзменениеОрганизации()
	
	Отделение = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОтделениеПоУмолчанию(Объект.Отделение, Объект.Организация);
	Если Объект.Отделение <> Отделение Тогда
		Объект.Отделение = Отделение;
		ОбработатьИзменениеОтделения();
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриИзмененииКлючевыхРеквизитовСостояниеЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОтделения()
	
	ОбщегоНазначенияБольничнаяАптека.ИзменитьСкладПриНеобходимости(Объект.Отделение, Объект.Склад, ОсновнойСклад);
	ОбработатьИзменениеСклада();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСклада()
	
	Если Склад = Объект.Склад Тогда
		Возврат;
	КонецЕсли;
	
	Склад = Объект.Склад;
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(Объект, ПараметрыУчетаНоменклатуры);
	
	Объект.МестоХранения = Неопределено;
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьКолонкиТабличнойЧасти(Объект.Товары, Неопределено, "МестоХранения");
	
	ОбработатьИзменениеМестаХранения();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМестаХранения()
	
	Элементы.ТоварыМестоХранения.Видимость = Не ЗначениеЗаполнено(Объект.МестоХранения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСтатьиРасходов(КэшированныеЗначения)
	
	ПланыВидовХарактеристик.СтатьиРасходов.ОбработатьИзменениеСтатьиРасходов(Объект, Объект);
	
	ЗаполнитьСлужебныеРеквизитыСтатьиРасходов(КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти // ОбработкаИзмененияРеквизитов

////////////////////////////////////////////////////////////////////////////////
// Буфер обмена товарами
#Область БуферОбменаТоварами

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ТаблицаТовары = Элементы.Товары;
	Если ОбработкаТабличнойЧастиКлиент.ВозможноКопированиеСтрок(ТаблицаТовары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиВБуферОбмена(ТаблицаТовары.Имя);
		ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(ТаблицаТовары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ТекущаяСтрокаНазначений = Элементы.Назначения.ТекущиеДанные;
	Если ТекущаяСтрокаНазначений = Неопределено Или Не ТекущаяСтрокаНазначений.СписыватьНоменклатуруПоНазначению Тогда
		Возврат;
	КонецЕсли;
	
	ВставитьТоварыИзБуфераОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБуфераОбмена(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ОткрытьБуферОбмена(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиВБуферОбмена(Знач ИмяТабличнойЧасти)
	
	ОбработкаТабличнойЧастиСервер.СкопироватьВыделенныеСтрокиВБуферОбмена(Объект, Объект[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары = Неопределено)
	
	ТаблицаТовары = Объект.Товары;
	КоличествоТоваровДоВставки = ТаблицаТовары.Количество();
	
	ВставитьТоварыИзБуфераОбменаСервер(ВыбранныеТовары);
	
	КоличествоВставленных = ТаблицаТовары.Количество() - КоличествоТоваровДоВставки;
	ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьТоварыИзБуфераОбменаСервер(Знач ВыбранныеТовары = Неопределено)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициентЕдиницыЗаказа());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоВЕдиницахЗаказа());
	
	Если ВыбранныеТовары = Неопределено Тогда
		Товары = ОбработкаТабличнойЧастиСервер.ПолучитьТекущиеТоварыИзБуфераОбмена();
	Иначе
		Товары = ОбработкаТабличнойЧастиСервер.ПолучитьВыбранныеТоварыИзБуфераОбмена(ВыбранныеТовары);
	КонецЕсли;
	
	Если Товары = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КэшированныеЗначения = Неопределено;
	
	ИдентификаторСтроки = Элементы.Назначения.ТекущаяСтрока;
	ТекущееНазначение = Объект.Назначения.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Для Каждого СтрокаТовара Из Товары Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		ТекущаяСтрока.Заказ = ТекущееНазначение.НазначениеВрача;
		ТекущаяСтрока.КодСтроки = ТекущееНазначение.КодСтроки;
		ТекущаяСтрока.НоменклатураЗаказа = ТекущееНазначение.НоменклатураЗаказа;
		ТекущаяСтрока.ЕдиницаИзмеренияЗаказа = ТекущееНазначение.ЕдиницаИзмерения;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ЕстьДанныеВБуфереОбмена)
	
	Элементы = Форма.Элементы;
	Элементы.ТоварыБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыКонтекстноеМенюБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыБуферОбмена.Доступность = ЕстьДанныеВБуфереОбмена;
	
КонецПроцедуры

#КонецОбласти // БуферОбменаТоварами

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

// Конец ИнтеграцияС1СДокументооборотом

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти // СтандартныеПодсистемы
