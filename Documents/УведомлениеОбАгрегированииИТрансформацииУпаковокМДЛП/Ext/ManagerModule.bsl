
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПВызовСервера.ПриПолученииФормыДокумента(
		ПустаяСсылка(), ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		ВыбраннаяОперация = Неопределено;
		Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ Операция ИЗ Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП ГДЕ Ссылка = &Ссылка");
			Запрос.УстановитьПараметр("Ссылка", Параметры.Ключ);
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ВыбраннаяОперация = Выборка.Операция;
		ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") Тогда
			Параметры.ЗначенияЗаполнения.Свойство("Операция", ВыбраннаяОперация);
		ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ Операция ИЗ Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП ГДЕ Ссылка = &Ссылка");
			Запрос.УстановитьПараметр("Ссылка", Параметры.ЗначениеКопирования);
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ВыбраннаяОперация = Выборка.Операция;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыбраннаяОперация) Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаДокумента";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбмене

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции

Процедура ОбновитьСостояниеПодтверждения(ДокументОбъект, Операция, Сообщение, СтатусОбработки, ОтклоненныеНомера = Неопределено) Экспорт
	
	ПараметрыОбновления = ИнтеграцияМДЛП.СостояниеПодтверждения(Операция, Сообщение, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.СостояниеПодтверждения = ПараметрыОбновления.Состояние;
	Если ДокументОбъект.СостояниеПодтверждения <> Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ
	   И ЗначениеЗаполнено(ОтклоненныеНомера) Тогда
		
		Для Каждого Номер Из ОтклоненныеНомера Цикл
			НомерУпаковки = Номер.Ключ;
			Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
			Если Строка = Неопределено Тогда
				Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
			КонецЕсли;
			Если Строка <> Неопределено Тогда
				Строка.Отклонено = Истина;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(Номер.Значение);
			Иначе
				ГруппировочнаяУпаковка = ДокументОбъект.ГруппировочныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
				Если ГруппировочнаяУпаковка <> Неопределено Тогда
					
					СтрокиТовара = ДокументОбъект.Товары.НайтиСтроки(Новый Структура("ИдентификаторГрупповойУпаковки", ГруппировочнаяУпаковка.ИдентификаторСтроки));
					Для Каждого СтрокаТовара Из СтрокиТовара Цикл
						Строки = ДокументОбъект.НомераУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТовара.ИдентификаторСтроки));
						Для Каждого Строка Из Строки Цикл
							Строка.Отклонено = Истина;
							Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(Номер.Значение);
						КонецЦикла;
					КонецЦикла;
					
					Строки = ДокументОбъект.ТранспортныеУпаковки.НайтиСтроки(Новый Структура("ИдентификаторГрупповойУпаковки", ГруппировочнаяУпаковка.ИдентификаторСтроки));
					Для Каждого Строка Из Строки Цикл
						Строка.Отклонено = Истина;
						Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(Номер.Значение);
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Определить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОРозничнойПродажеМДЛП - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Основание");
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОбАгрегированииИТрансформацииУпаковок(Основание);
	КонецЕсли;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящее = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	
	Операция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Операция");
	
	Если Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование Тогда
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_Агрегирование);
	ИначеЕсли Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Расформирование Тогда
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_РасформированиеТранспортнойУпаковки);
	ИначеЕсли Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Изъятие Тогда
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ИзъятиеЭлементовУпаковки);
	ИначеЕсли Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Включение Тогда
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВключениеЭлементовВоМножествоТранспортныхУпаковок);
	ИначеЕсли Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.ВключениеВЕдиничнуюУпаковку Тогда
		// Для совместимости с версией схем 1.34
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВключениеЭлементовВТранспортнуюУпаковку);
		// Конец Для совместимости с версией схем 1.34
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус информирования по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияМДЛП - Статус по-умолчанию.
//
Функция СтатусИнформированияПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыИнформированияМДЛП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные;
	
КонецФункции

// Возвращает запрос для получения статуса оформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ основание.
// 
// Возвращаемое значение:
//  Запрос - Запрос для получения статуса оформления.
//
Функция ЗапросСтатусаОформления(ДокументОснование) Экспорт
	
	Запрос = ИнтеграцияМДЛППереопределяемый.ЗапросСтатусаОформленияУведомленияОбАгрегированииИТрансформацииУпаковок(ДокументОснование);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПанельМаркировкиМДЛП

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
	Если Все Или Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеОбмен);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации);
	
	Возврат Действия;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
	Если Все Или ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	КонецЕсли;
	
	Возврат Действия;
	
КонецФункции

Процедура ПриЗаполненииДокументовПанелиМаркировкиМДЛП(ТаблицаДокументы) Экспорт
	
	Описание = ИнтеграцияМДЛП.ДобавитьДокументНаПанельМаркировки(
		ТаблицаДокументы,
		Метаданные.Документы.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП,
		НСтр("ru = 'Агрегирование и трансформация упаковок'"),
		ИнтеграцияМДЛПКлиентСервер.ПанельМаркировкаРазделСклад());
	
	Описание.Оформите    = Истина;
	Описание.Отработайте = Истина;
	Описание.Ожидайте    = Истина;
	
	Описание.Порядок = 90;
	
КонецПроцедуры

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОформите() Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.УведомлениеОбАгрегированииИТрансформацииУпаковокТекстЗапросаОформите();
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОтработайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОтработайте(Метаданные.Документы.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП);
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОжидайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОжидайте(Метаданные.Документы.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП);
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического списка формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСписока() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаФормДокументов(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического Списка к оформлению формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	ТекстЗапроса = ИнтеграцияМДЛППереопределяемый.УведомлениеОбАгрегированииИТрансформацииУпаковокТекстЗапросаДинамическогоСпискаКОформлению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщениеМДЛП

Функция СообщениеКПередаче(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Операция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Операция");
	Если Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование Тогда
		Сообщения = УведомлениеОМножественнойУпаковкеВТранспортнуюТару(ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Расформирование Тогда
		Сообщения = УведомлениеОМножественномРасформированииТранспортнойУпаковки(ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Изъятие Тогда
		Сообщения = УведомлениеОбИзъятииЭлементовУпаковки(ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Включение Тогда
		Сообщения = УведомлениеОВключенииЭлементовВоМножествоТранспортныхУпаковок(ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.ВключениеВЕдиничнуюУпаковку Тогда
		// Для совместимости с версией схем 1.34
		Сообщения = УведомлениеОВключенииЭлементовВТранспортнуюУпаковку(ДокументСсылка);
		// Конец Для совместимости с версией схем 1.34
	КонецЕсли;
	
	Возврат Сообщения;
	
КонецФункции

#КонецОбласти

// Возвращает данные для заполнения представления документа.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * КомандаСоздать - Строка - Представление документа, если документ требуется создать.
//  * ИмяКомандыСоздать - Строка - Имя команды "Создать".
//  * ИмяКомандыОткрыть - Строка - Имя команды "Открыть".
//  * ДокументОтсутствуетНетПравНаСоздание - Строка - Представление документа, если документ не создан.
//  * Представление - Строка - Представление документа.
//  * НесколькоДокументовПредставление - Строка - Представление документа, если их несколько.
//
Функция ПредставлениеДокумента() Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияМДЛП.ПустоеПредставлениеДокумента();
	ВозвращаемоеЗначение.КомандаСоздать                       = НСтр("ru = 'Создать уведомление об агрегировании и трансформации упаковок МДЛП'");
	ВозвращаемоеЗначение.ИмяКомандыСоздать                    = "СоздатьУведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП";
	ВозвращаемоеЗначение.ИмяКомандыОткрыть                    = "ОткрытьУведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП";
	ВозвращаемоеЗначение.ДокументОтсутствуетНетПравНаСоздание = НСтр("ru = 'Уведомление об агрегировании и трансформации упаковок МДЛП не создано'");
	ВозвращаемоеЗначение.Представление                        = НСтр("ru = 'Уведомление об агрегировании и трансформации упаковок МДЛП: %1'");
	ВозвращаемоеЗначение.НесколькоДокументовПредставление     = НСтр("ru = 'Уведомление об агрегировании и трансформации упаковок МДЛП (%1)'");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПоддерживаетЗагрузкуУведомлений() Экспорт
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УведомлениеОбУпаковкеВТранспортнуюТару(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_Агрегирование;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена  КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                        КАК Ссылка,
	|	Шапка.Дата                          КАК Дата,
	|	Шапка.Основание                     КАК Основание,
	|	Шапка.НомерУпаковки                 КАК НомерУпаковки,
	|	ЕСТЬNULL(Шапка.МестоДеятельности.Идентификатор, Шапка.Организация.РегистрационныйНомерУчастника)  КАК ИдентификаторОрганизации
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN                               КАК GTIN,
	|	НомераУпаковок.НомерКиЗ                   КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выгрузить();
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Упаковки.Количество() = 0) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "unit_pack";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "sscc", Шапка.НомерУпаковки, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	
	Уведомление.content = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "content");
	Для Каждого Строка Из Товары Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.content, "sgtin", Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	Для Каждого Строка Из Упаковки Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.content, "sscc" , Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция УведомлениеОРасформированииТранспортнойУпаковки(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_РасформированиеТранспортнойУпаковки;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена  КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                        КАК Ссылка,
	|	Шапка.Дата                          КАК Дата,
	|	Шапка.Основание                     КАК Основание,
	|	Шапка.НомерУпаковки                 КАК НомерУпаковки,
	|	ЕСТЬNULL(Шапка.МестоДеятельности.Идентификатор, Шапка.Организация.РегистрационныйНомерУчастника)  КАК ИдентификаторОрганизации,
	|	Шапка.РаспаковыватьРекурсивно       КАК РаспаковыватьРекурсивно
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Расформирование)
	|	И Шапка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "unit_unpack";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "sscc"        , Шапка.НомерУпаковки, СообщениеКПередаче);
	Если Шапка.РаспаковыватьРекурсивно Тогда
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "is_recursive", Истина, СообщениеКПередаче);
	КонецЕсли;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция УведомлениеОбИзъятииЭлементовУпаковки(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ИзъятиеЭлементовУпаковки;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена  КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                        КАК Ссылка,
	|	Шапка.Дата                          КАК Дата,
	|	Шапка.Основание                     КАК Основание,
	|	ЕСТЬNULL(Шапка.МестоДеятельности.Идентификатор, Шапка.Организация.РегистрационныйНомерУчастника)  КАК ИдентификаторОрганизации
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Изъятие)
	|	И Шапка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN                               КАК GTIN,
	|	НомераУпаковок.НомерКиЗ                   КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выгрузить();
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Упаковки.Количество() = 0) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "unit_extract";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	
	Уведомление.content = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "content");
	Для Каждого Строка Из Товары Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.content, "sgtin", Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	Для Каждого Строка Из Упаковки Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.content, "sscc" , Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция УведомлениеОВключенииЭлементовВТранспортнуюУпаковку(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВключениеЭлементовВТранспортнуюУпаковку;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена  КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                        КАК Ссылка,
	|	Шапка.Дата                          КАК Дата,
	|	Шапка.Основание                     КАК Основание,
	|	Шапка.НомерУпаковки                 КАК НомерУпаковки,
	|	ЕСТЬNULL(Шапка.МестоДеятельности.Идентификатор, Шапка.Организация.РегистрационныйНомерУчастника)  КАК ИдентификаторОрганизации
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.ВключениеВЕдиничнуюУпаковку)
	|	И Шапка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN                               КАК GTIN,
	|	НомераУпаковок.НомерКиЗ                   КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выгрузить();
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Упаковки.Количество() = 0) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "unit_append";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "sscc", Шапка.НомерУпаковки, СообщениеКПередаче);
	
	Уведомление.content = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "content");
	Для Каждого Строка Из Товары Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.content, "sgtin", Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	Для Каждого Строка Из Упаковки Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.content, "sscc" , Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция УведомлениеОМножественнойУпаковкеВТранспортнуюТару(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_Агрегирование;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена  КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                        КАК Ссылка,
	|	Шапка.Дата                          КАК Дата,
	|	Шапка.Основание                     КАК Основание,
	|	ЕСТЬNULL(Шапка.МестоДеятельности.Идентификатор, Шапка.Организация.РегистрационныйНомерУчастника)  КАК ИдентификаторОрганизации
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеУпаковки.НомерУпаковки  КАК НомерУпаковки,
	|	НомераУпаковок.НомерКиЗ      КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ГруппировочныеУпаковки КАК НовыеУпаковки
	|	ПО
	|		НовыеУпаковки.Ссылка = Товары.Ссылка
	|		И НовыеУпаковки.ИдентификаторСтроки = Товары.ИдентификаторГрупповойУпаковки
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.Ссылка.ВложеныПотребительскиеУпаковки
	|УПОРЯДОЧИТЬ ПО
	|	НовыеУпаковки.НомерСтроки
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеУпаковки.НомерУпаковки   КАК НомерУпаковки,
	|	НомераУпаковок.НомерУпаковки  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ГруппировочныеУпаковки КАК НовыеУпаковки
	|	ПО
	|		НовыеУпаковки.Ссылка = НомераУпаковок.Ссылка
	|		И НовыеУпаковки.ИдентификаторСтроки = НомераУпаковок.ИдентификаторГрупповойУпаковки
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НЕ НомераУпаковок.Ссылка.ВложеныПотребительскиеУпаковки
	|УПОРЯДОЧИТЬ ПО
	|	НовыеУпаковки.НомерСтроки
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выгрузить();
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Упаковки.Количество() = 0) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "multi_pack";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	
	Упаковка = Неопределено;
	ТекущаяУпаковка = Неопределено;
	Если Товары.Количество() > 0 Тогда
		
		Уведомление.by_sgtin = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "by_sgtin");
		Для Каждого Вложение Из Товары Цикл
			
			Если Вложение.НомерУпаковки <> ТекущаяУпаковка Тогда
				Если ТекущаяУпаковка <> Неопределено Тогда
					Уведомление.by_sgtin.detail.Добавить(Упаковка);
				КонецЕсли;
				Упаковка = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.by_sgtin, "detail");
				Упаковка.sscc = Вложение.НомерУпаковки;
				Упаковка.content = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Упаковка, "content");
				ТекущаяУпаковка = Вложение.НомерУпаковки;
			КонецЕсли;
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Упаковка.content, "sgtin", Вложение.НомерКиЗ, СообщениеКПередаче);
			
		КонецЦикла;
		
		Если ТекущаяУпаковка <> Неопределено Тогда
			Уведомление.by_sgtin.detail.Добавить(Упаковка);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяУпаковка = Неопределено;
	Если Упаковки.Количество() > 0 Тогда
		
		Уведомление.by_sscc = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "by_sscc");
		Для Каждого Вложение Из Упаковки Цикл
			
			Если Вложение.НомерУпаковки <> ТекущаяУпаковка Тогда
				Если ТекущаяУпаковка <> Неопределено Тогда
					Уведомление.by_sscc.detail.Добавить(Упаковка);
				КонецЕсли;
				Упаковка = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.by_sscc, "detail");
				Упаковка.sscc = Вложение.НомерУпаковки;
				Упаковка.content = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Упаковка, "content");
				ТекущаяУпаковка = Вложение.НомерУпаковки;
			КонецЕсли;
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Упаковка.content, "sscc", Вложение.НомерКиЗ, СообщениеКПередаче);
			
		КонецЦикла;
		
		Если ТекущаяУпаковка <> Неопределено Тогда
			Уведомление.by_sscc.detail.Добавить(Упаковка);
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция УведомлениеОМножественномРасформированииТранспортнойУпаковки(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_РасформированиеТранспортнойУпаковки;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена  КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                        КАК Ссылка,
	|	Шапка.Дата                          КАК Дата,
	|	Шапка.Основание                     КАК Основание,
	|	ЕСТЬNULL(Шапка.МестоДеятельности.Идентификатор, Шапка.Организация.РегистрационныйНомерУчастника)  КАК ИдентификаторОрганизации,
	|	Шапка.РаспаковыватьРекурсивно       КАК РаспаковыватьРекурсивно
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Расформирование)
	|	И Шапка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки  КАК НомерУпаковки
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка     = Результат[0].Выбрать();
	Упаковки  = Результат[1].Выгрузить();
	
	Если Не Шапка.Следующий() Или Упаковки.Количество() = 0 Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "unit_unpack";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	
	Для Каждого Строка Из Упаковки Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "sscc", Строка.НомерУпаковки, СообщениеКПередаче);
	КонецЦикла;
	
	Если Шапка.РаспаковыватьРекурсивно Тогда
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "is_recursive", Истина, СообщениеКПередаче);
	КонецЕсли;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция УведомлениеОВключенииЭлементовВоМножествоТранспортныхУпаковок(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВключениеЭлементовВоМножествоТранспортныхУпаковок;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена  КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                        КАК Ссылка,
	|	Шапка.Дата                          КАК Дата,
	|	Шапка.Основание                     КАК Основание,
	|	ЕСТЬNULL(Шапка.МестоДеятельности.Идентификатор, Шапка.Организация.РегистрационныйНомерУчастника)  КАК ИдентификаторОрганизации
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Включение)
	|	И Шапка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеУпаковки.НомерУпаковки  КАК НомерУпаковки,
	|	НомераУпаковок.НомерКиЗ      КАК НомерКиЗ,
	|	НовыеУпаковки.НомерСтроки    КАК НомерСтроки,
	|	ЛОЖЬ                         КАК ГрупповаяУпаковка
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ГруппировочныеУпаковки КАК НовыеУпаковки
	|	ПО
	|		НовыеУпаковки.Ссылка = НомераУпаковок.Ссылка
	|		И НовыеУпаковки.ИдентификаторСтроки = Товары.ИдентификаторГрупповойУпаковки
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НовыеУпаковки.НомерУпаковки   КАК НомерУпаковки,
	|	НомераУпаковок.НомерУпаковки  КАК НомерКиЗ,
	|	НовыеУпаковки.НомерСтроки     КАК НомерСтроки,
	|	ИСТИНА                        КАК ГрупповаяУпаковка
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ГруппировочныеУпаковки КАК НовыеУпаковки
	|	ПО
	|		НовыеУпаковки.Ссылка = НомераУпаковок.Ссылка
	|		И НовыеУпаковки.ИдентификаторСтроки = НомераУпаковок.ИдентификаторГрупповойУпаковки
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НовыеУпаковки.НомерСтроки
	|ИТОГИ ПО
	|	НомерУпаковки
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Упаковки = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не Шапка.Следующий() Или Упаковки.Количество() = 0 Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "multi_unit_append";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	
	Уведомление.info_append = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "info_append");
	
	Пока Упаковки.Следующий() Цикл
		
		Упаковка = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.info_append, "detail");
		Упаковка.content = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Упаковка, "content");
		
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Упаковка, "sscc" , Упаковки.НомерУпаковки, СообщениеКПередаче);
		
		Состав = Упаковки.Выбрать();
		Пока Состав.Следующий() Цикл
			Если Состав.ГрупповаяУпаковка Тогда
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Упаковка.content, "sscc" , Состав.НомерКиЗ, СообщениеКПередаче);
			Иначе
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Упаковка.content, "sgtin", Состав.НомерКиЗ, СообщениеКПередаче);
			КонецЕсли;
		КонецЦикла;
		
		Уведомление.info_append.detail.Добавить(Упаковка);
		
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерий(ПустаяСсылка().Метаданные(), Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//  ПараметрыУказанияСерий - Структура
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПустаяСсылка().Метаданные(), ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции Подключаемые.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеДляОбновленияОперацииРасформирование(Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП КАК ДокументыДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ТранспортныеУпаковки КАК Упаковки
	|		ПО
	|			Упаковки.Ссылка = ДокументыДляОбработки.Ссылка
	|			И Упаковки.НомерУпаковки = ДокументыДляОбработки.НомерУпаковки
	|ГДЕ
	|	ДокументыДляОбработки.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Расформирование)
	|	И ДокументыДляОбработки.НомерУпаковки <> &ПустойНомерУпаковки
	|	И Упаковки.Ссылка ЕСТЬ NULL
	|");
	
	Запрос.УстановитьПараметр("ПустойНомерУпаковки", Метаданные.ОпределяемыеТипы.SSCC.Тип.ПривестиЗначение());
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляОбновленияОперацииРасформирование(Параметры) Экспорт
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ВтДляОбработки";
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц, ДополнительныеПараметры);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарегистрированныеДанные.Ссылка                   КАК Ссылка,
	|	ДокументыДляОбработки.Ссылка ЕСТЬ NULL
	|		ИЛИ ДокументыДляОбработки.НомерУпаковки = &ПустойНомерУпаковки
	|		ИЛИ НЕ Упаковки.Ссылка ЕСТЬ NULL  КАК НеОбрабатывать
	|ИЗ
	|	ВтДляОбработки КАК ЗарегистрированныеДанные
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП КАК ДокументыДляОбработки
	|		ПО
	|			ДокументыДляОбработки.Ссылка = ЗарегистрированныеДанные.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ТранспортныеУпаковки КАК Упаковки
	|		ПО
	|			Упаковки.Ссылка = ЗарегистрированныеДанные.Ссылка
	|			И Упаковки.НомерУпаковки = ДокументыДляОбработки.НомерУпаковки
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПустойНомерУпаковки", Метаданные.ОпределяемыеТипы.SSCC.Тип.ПривестиЗначение());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеОбрабатывать Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			
			НоваяСтрока = Объект.ТранспортныеУпаковки.Добавить();
			НоваяСтрока.НомерУпаковки = Объект.НомерУпаковки;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Текст = НСтр("ru = 'Не удалось обработать объект: %1 по причине: %2'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Выборка.Ссылка, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ИмяСобытия = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Выборка.Ссылка.Метаданные(), Выборка.Ссылка, Текст);
			
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры


Процедура ЗарегистрироватьДанныеДляОбновленияОперацииВключение(Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП КАК ДокументыДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ГруппировочныеУпаковки КАК Упаковки
	|		ПО
	|			Упаковки.Ссылка = ДокументыДляОбработки.Ссылка
	|ГДЕ
	|	ДокументыДляОбработки.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Включение)
	|	И ДокументыДляОбработки.НомерУпаковки <> &ПустойНомерУпаковки
	|	И Упаковки.НомерУпаковки ЕСТЬ NULL
	|");
	
	Запрос.УстановитьПараметр("ПустойНомерУпаковки", Метаданные.ОпределяемыеТипы.SSCC.Тип.ПривестиЗначение());
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляОбновленияОперацииВключение(Параметры) Экспорт
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ВтДляОбработки";
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц, ДополнительныеПараметры);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарегистрированныеДанные.Ссылка              КАК Ссылка,
	|	ДокументыДляОбработки.Ссылка ЕСТЬ NULL
	|		ИЛИ ДокументыДляОбработки.НомерУпаковки = &ПустойНомерУпаковки
	|		ИЛИ НЕ Упаковки.НомерУпаковки ЕСТЬ NULL  КАК НеОбрабатывать
	|ИЗ
	|	ВтДляОбработки КАК ЗарегистрированныеДанные
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП КАК ДокументыДляОбработки
	|		ПО
	|			ДокументыДляОбработки.Ссылка = ЗарегистрированныеДанные.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.ГруппировочныеУпаковки КАК Упаковки
	|		ПО
	|			Упаковки.Ссылка = ЗарегистрированныеДанные.Ссылка
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПустойНомерУпаковки", Метаданные.ОпределяемыеТипы.SSCC.Тип.ПривестиЗначение());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеОбрабатывать Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.ВключениеВЕдиничнуюУпаковку;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Текст = НСтр("ru = 'Не удалось обработать объект: %1 по причине: %2'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Выборка.Ссылка, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ИмяСобытия = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Выборка.Ссылка.Метаданные(), Выборка.Ссылка, Текст);
			
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли