
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИнтеграцияМДЛППереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект, "Товары, ТранспортныеУпаковки");
	
	Если Объект.Ссылка.Пустая() Тогда
		// Для совместимости с версией схем 1.34
		Если Объект.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Включение Тогда
			Если ИнтеграцияМДЛП.ИспользуемаяВерсияСхемОбмена() < "1.35" Тогда
				Объект.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.ВключениеВЕдиничнуюУпаковку;
			КонецЕсли;
		КонецЕсли;
		// Конец Для совместимости с версией схем 1.34
		Если Объект.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование
		 Или Объект.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Включение Тогда
			Строка = Объект.ГруппировочныеУпаковки.Добавить();
			Строка.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.ТоварыХарактеристика.Имя);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.ТоварыСерия.Имя);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.ТоварыУпаковка.Имя);
	
	Элементы.ТоварыХарактеристика.Видимость = ИнтеграцияМДЛП.ИспользоватьХарактеристикиНоменклатуры();
	Элементы.ТоварыСерия.Видимость          = ИнтеграцияМДЛП.ИспользоватьСерииНоменклатуры();
	Элементы.ТоварыУпаковка.Видимость       = ИнтеграцияМДЛП.ИспользоватьУпаковкиНоменклатуры();
	
	Элементы.Основание.Видимость = ИнтеграцияМДЛП.ДоступноОснованиеУведомления(Объект.Ссылка);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.ИмпортЭкспорт.Импорт") Тогда
		Элементы.СтатусУпаковок.СписокВыбора.Добавить(Перечисления.СтатусыУпаковокМДЛП.ОжидаетОтгрузкиВРФ);
		Элементы.СтатусУпаковок.СписокВыбора.Добавить(Перечисления.СтатусыУпаковокМДЛП.МаркированаВЗТК);
		Элементы.СтатусУпаковок.СписокВыбора.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВвезенНаТерриториюРФ);
		Элементы.СтатусУпаковок.СписокВыбора.Добавить(Перечисления.СтатусыУпаковокМДЛП.Задекларирована);
		Элементы.СтатусУпаковок.СписокВыбора.Добавить(Перечисления.СтатусыУпаковокМДЛП.ПринятаНаСкладИзЗТК);
	КонецЕсли;
	
	СобытияФормМДЛППереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФормМДЛППереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ТоварыОтображатьВсеНомераУпаковок.Пометка = Не ПоказыватьВсеНомераУпаковок;
	
	// ПодключаемоеОборудование.СканерыШтрихкода
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.УстройстваВвода") Тогда
		ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	КонецЕсли;
	// Конец ПодключаемоеОборудование.СканерыШтрихкода
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСостоянияМДЛП"
	   И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменМДЛП" Тогда
		
		ОбновитьСтатусУведомления();
		
	КонецЕсли;
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() И Не ТолькоПросмотр Тогда
		Если ИмяСобытия = "ScanData" Тогда
			
			ОбработатьШтрихкоды(ИнтеграцияМДЛПКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
			
		КонецЕсли;
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
			МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
			МодульОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Документ.УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП.Форма.ФормаДокумента.Провести");
		КонецЕсли;
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ОбновитьСтатусУведомления();
	ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект);
	
	СобытияФормМДЛППереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Основание", Объект.Основание);
	Оповестить("Запись_УведомлениеОбАгрегированииИТрансформацииУпаковокМДЛП", ПараметрыЗаписи, Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование") Тогда
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПКлиент.ОбработатьНавигационнуюСсылкуСтатуса(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	НастроитьФормуПоОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВложеныПотребительскиеУпаковкиПриИзменении(Элемент)
	
	Объект.ВложеныПотребительскиеУпаковки = ВложеныПотребительскиеУпаковки;
	УстановитьВидимостьВложенныхУпаковок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерУпаковкиПриИзменении(Элемент)
	
	Если СтрДлина(Объект.НомерУпаковки) = 18 Тогда
		ОбновитьДанныеУпаковки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиНовыеУпаковки

&НаКлиенте
Процедура ГруппировочныеУпаковкиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборСоставаУпаковки(ТекущиеДанные.ИдентификаторСтроки);
	Если Объект.ВложеныПотребительскиеУпаковки Тогда
		Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
			Строки = Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторГрупповойУпаковки", ТекущиеДанные.ИдентификаторСтроки));
			Если Строки.Количество() > 0 Тогда
				Элементы.Товары.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
			Иначе
				УстановитьОтборНомеровУпаковок(Новый УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Включение") Тогда
		Объект.ВложеныПотребительскиеУпаковки = ТекущиеДанные.ВложеныПотребительскиеУпаковки;
		ВложеныПотребительскиеУпаковки = Объект.ВложеныПотребительскиеУпаковки;
		УстановитьВидимостьВложенныхУпаковок(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировочныеУпаковкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		УстановитьОтборСоставаУпаковки(ТекущиеДанные.ИдентификаторСтроки);
		Если Объект.ВложеныПотребительскиеУпаковки Тогда
			УстановитьОтборНомеровУпаковок(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыеУпаковкиНомерУпаковкиПриИзменении(Элемент)
	
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Включение") Тогда
		
		ТекущиеДанные = Элементы.ГруппировочныеУпаковки.ТекущиеДанные;
		ДанныеУпаковки = ПолучитьДанныеУпаковки(ТекущиеДанные.НомерУпаковки, Объект.МестоДеятельности);
		Если ДанныеУпаковки <> Неопределено Тогда
			
			Если ЕстьПроизводство Тогда
				Объект.Владелец = ДанныеУпаковки.Владелец;
			КонецЕсли;
			
			ТекущиеДанные.ВложеныПотребительскиеУпаковки = ДанныеУпаковки.ВложеныПотребительскиеУпаковки;
			
			Объект.ВложеныПотребительскиеУпаковки = ТекущиеДанные.ВложеныПотребительскиеУпаковки;
			ВложеныПотребительскиеУпаковки = Объект.ВложеныПотребительскиеУпаковки;
			УстановитьВидимостьВложенныхУпаковок(ЭтотОбъект);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьОтборНомеровУпаковок(ТекущиеДанные.ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущаяСтрока = Элементы.ГруппировочныеУпаковки.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено
	   И (Объект.Операция = ПредопределенноеЗначение("Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование")
			Или Объект.Операция = ПредопределенноеЗначение("Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Включение")) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана строка новой упаковки.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		Если Не Копирование
		   И (Объект.Операция = ПредопределенноеЗначение("Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование")
				Или Объект.Операция = ПредопределенноеЗначение("Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Включение")) Тогда
			ДанныеУпаковки = Элементы.ГруппировочныеУпаковки.ТекущиеДанные;
			ТекущиеДанные.ИдентификаторГрупповойУпаковки = ДанныеУпаковки.ИдентификаторСтроки;
		КонецЕсли;
		УстановитьОтборНомеровУпаковок(ТекущиеДанные.ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	СобытияФормМДЛПКлиент.ТоварыПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораНоменклатуры(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц  = Истина;
	ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
	ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораХарактеристики(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц  = Истина;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораСерии(ЭтотОбъект, ТекущаяСтрока, ПараметрыУказанияСерий, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииСерии(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораУпаковки(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц  = Истина;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииУпаковки(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц  = Истина;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиНомераУпаковок

&НаКлиенте
Процедура НомераУпаковокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана строка с товаром.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
	СтрокиУпаковок = Объект.НомераУпаковок.НайтиСтроки(ПараметрыОтбора);
	
	Если ТекущиеДанные.Количество <= СтрокиУпаковок.Количество() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если Копирование Тогда
			ТекущиеДанные.НомерКиЗ = "";
		Иначе
			ТекущиеДанные.ИдентификаторСтроки = Элементы.Товары.ТекущиеДанные.ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		ОбновитьСтатусЗаполненияУпаковокВСтроке(Элементы.Товары.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокПослеУдаления(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьСтатусыЗаполненияНомеровУпаковокОтложено", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТранспортныеУпаковки

&НаКлиенте
Процедура ТранспортныеУпаковкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущаяСтрока = Элементы.ГруппировочныеУпаковки.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено
	   И (Объект.Операция = ПредопределенноеЗначение("Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование")
			Или Объект.Операция = ПредопределенноеЗначение("Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Включение")) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана строка новой упаковки.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеУпаковкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если Копирование Тогда
			ТекущиеДанные.НомерУпаковки = "";
		ИначеЕсли Объект.Операция = ПредопределенноеЗначение("Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование")
			  Или Объект.Операция = ПредопределенноеЗначение("Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Включение") Тогда
			ДанныеУпаковки = Элементы.ГруппировочныеУпаковки.ТекущиеДанные;
			ТекущиеДанные.ИдентификаторГрупповойУпаковки = ДанныеУпаковки.ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтображатьВсеНомераУпаковок(Команда)
	
	ПоказыватьВсеНомераУпаковок = Не ПоказыватьВсеНомераУпаковок;
	Элементы.ТоварыОтображатьВсеНомераУпаковок.Пометка = Не ПоказыватьВсеНомераУпаковок;
	
	УстановитьОтборНомеровУпаковок(ИдентификаторТекущейСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ТерминалыСбораДанных") Тогда
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(
			Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
			УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормМДЛПКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(Объект, ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка));
	
	ВложеныПотребительскиеУпаковки = Объект.ВложеныПотребительскиеУпаковки;
	
	НастроитьФормуПоОперации();
	
	ОбновитьСтатусУведомления();
	ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект);
	
	УстановитьВидимостьВложенныхУпаковок(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НомераУпаковок.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.НомераУпаковок.ИдентификаторСтроки", Новый ПолеКомпоновкиДанных("ИдентификаторТекущейСтроки"), ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
	ИнтеграцияМДЛП.УстановитьУсловноеОформлениеОтклоненнойСтроки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоОперации()
	
	ЭтоВключение = (Объект.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Включение);
	ЭтоАгрегирование = (Объект.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование);
	ЭтоРасформирование = (Объект.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Расформирование);
	
	// Для совместимости с версией схем 1.34
	ЭтоВключениеВЕдиничнуюУпаковку = (Объект.Операция = Перечисления.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.ВключениеВЕдиничнуюУпаковку);
	Элементы.НомерУпаковки.Видимость = ЭтоВключениеВЕдиничнуюУпаковку;
	// Конец Для совместимости с версией схем 1.34
	
	Элементы.ГруппаОперация.Заголовок = Объект.Операция;
	
	Элементы.ГруппировочныеУпаковки.Видимость = ЭтоАгрегирование Или ЭтоВключение;
	
	Элементы.ВложеныПотребительскиеУпаковки.Видимость = Не ЭтоРасформирование;
	Элементы.РаспаковыватьРекурсивно.Видимость = ЭтоРасформирование;
	
	ЕстьПроизводство = ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.Производство");
	Если ЕстьПроизводство Тогда
		Элементы.Владелец.Видимость = ЭтоАгрегирование Или ЭтоВключение Или ЭтоВключениеВЕдиничнуюУпаковку;
		Элементы.СтатусУпаковок.Видимость = ЭтоАгрегирование Или ЭтоВключениеВЕдиничнуюУпаковку;
	Иначе
		Элементы.Владелец.Видимость = Ложь;
		Элементы.СтатусУпаковок.Видимость = Ложь;
	КонецЕсли;
	
	ЕстьИмпорт = ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияМДЛП.ИмпортЭкспорт.Импорт");
	Если ЕстьИмпорт Тогда
		Элементы.ЗонаТаможенногоКонтроля.Видимость = ЭтоАгрегирование Или ЭтоВключение Или ЭтоВключениеВЕдиничнуюУпаковку;
	Иначе
		Элементы.ЗонаТаможенногоКонтроля.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьВложенныхУпаковок(Форма);
	
	ВложеныПотребительскиеУпаковки = Форма.ВложеныПотребительскиеУпаковки;
	Если ВложеныПотребительскиеУпаковки Тогда
		ТекущаяСтраница = Форма.Элементы.ГруппаТовары;
	Иначе
		ТекущаяСтраница = Форма.Элементы.ГруппаТранспортныеУпаковки;
	КонецЕсли;
	
	Если Форма.Элементы.ГруппаВложенныеУпаковки.ТекущаяСтраница <> ТекущаяСтраница Тогда
		Форма.Элементы.ГруппаВложенныеУпаковки.ТекущаяСтраница = ТекущаяСтраница;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусУведомления()
	
	ТекущийСтатус = ИнтеграцияМДЛП.ТекущийСтатусУведомления(Объект.Ссылка);
	СтатусПредставление = ИнтеграцияМДЛП.ПредставлениеСтатусаУведомления(ТекущийСтатус);
	
	Если ЗначениеЗаполнено(ТекущийСтатус.ДальнейшееДействие)
	   И ТекущийСтатус.ДальнейшееДействие.Найти(ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ДальнейшееДействиеПоУмолчанию()) <> Неопределено Тогда
		РедактированиеФормыНедоступно = Ложь;
	Иначе
		РедактированиеФормыНедоступно = Не ОбщегоНазначенияКлиентСервер.РежимОтладки();
	КонецЕсли;
	
	ТолькоПросмотр = РедактированиеФормыНедоступно;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыЗаполненияНомеровУпаковокОтложено()
	
	ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект)
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки);
		СтрокиНомеров = Объект.НомераУпаковок.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиНомеров.Количество() = СтрокаТЧ.Количество Тогда
			СтрокаТЧ.СтатусЗаполненияУпаковок = 1;
		Иначе
			СтрокаТЧ.СтатусЗаполненияУпаковок = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
	СтрокиНомеров = Объект.НомераУпаковок.НайтиСтроки(ПараметрыОтбора);
	
	Если СтрокиНомеров.Количество() = ТекущиеДанные.Количество Тогда
		ТекущиеДанные.СтатусЗаполненияУпаковок = 1;
	Иначе
		ТекущиеДанные.СтатусЗаполненияУпаковок = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНомеровУпаковок(ИдентификаторСтроки)
	
	Если ИдентификаторТекущейСтроки <> ИдентификаторСтроки Тогда
		ИдентификаторТекущейСтроки = ИдентификаторСтроки;
	КонецЕсли;
	
	Если Не ПоказыватьВсеНомераУпаковок Тогда
		ИнтеграцияМДЛПКлиент.УстановитьОтборСтрок(
			Элементы.НомераУпаковок.ОтборСтрок,
			Новый Структура("ИдентификаторСтроки", ИдентификаторТекущейСтроки));
	Иначе
		ИнтеграцияМДЛПКлиент.СнятьОтборСтрок(Элементы.НомераУпаковок.ОтборСтрок, "ИдентификаторСтроки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСоставаУпаковки(ИдентификаторСтроки)
	
	Если ИдентификаторТекущейСтроки <> ИдентификаторСтроки Тогда
		ИдентификаторТекущейСтроки = ИдентификаторСтроки;
	КонецЕсли;
	
	ИнтеграцияМДЛПКлиент.УстановитьОтборСтрок(
		Элементы.Товары.ОтборСтрок,
		Новый Структура("ИдентификаторГрупповойУпаковки", ИдентификаторТекущейСтроки));
	ИнтеграцияМДЛПКлиент.УстановитьОтборСтрок(
		Элементы.ТранспортныеУпаковки.ОтборСтрок,
		Новый Структура("ИдентификаторГрупповойУпаковки", ИдентификаторТекущейСтроки));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеУпаковки()
	
	ДанныеУпаковки = ПолучитьДанныеУпаковки(Объект.НомерУпаковки, Объект.МестоДеятельности);
	Если ДанныеУпаковки <> Неопределено Тогда
		Если ЕстьПроизводство Тогда
			ЗаполнитьЗначенияСвойств(Объект, ДанныеУпаковки);
		Иначе
			Объект.ВложеныПотребительскиеУпаковки = ВложеныПотребительскиеУпаковки;
		КонецЕсли;
		
		ВложеныПотребительскиеУпаковки = Объект.ВложеныПотребительскиеУпаковки;
		УстановитьВидимостьВложенныхУпаковок(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеУпаковки(Знач НомерУпаковки, Знач МестоДеятельности)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Данные.Владелец                       КАК Владелец,
	|	Данные.Статус                         КАК СтатусУпаковок,
	|	Данные.ВложеныПотребительскиеУпаковки КАК ВложеныПотребительскиеУпаковки
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК Данные
	|ГДЕ
	|	Данные.НомерУпаковки = &НомерУпаковки
	|	И Данные.МестоДеятельности = &МестоДеятельности
	|");
	
	Запрос.УстановитьПараметр("НомерУпаковки", НомерУпаковки);
	Запрос.УстановитьПараметр("МестоДеятельности", МестоДеятельности);
	
	ДанныеУпаковки = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеУпаковки = Новый Структура("Владелец, СтатусУпаковок, ВложеныПотребительскиеУпаковки");
		ЗаполнитьЗначенияСвойств(ДанныеУпаковки, Выборка);
	КонецЕсли;
	
	Возврат ДанныеУпаковки;
	
КонецФункции

#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если РедактированиеФормыНедоступно Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Неопределено;
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Агрегирование")
	 Или Объект.Операция = ПредопределенноеЗначение("Перечисление.ОперацииАгрегированияИТрансформацииУпаковокМДЛП.Включение") Тогда
		ТекущаяУпаковка = Элементы.ГруппировочныеУпаковки.ТекущиеДанные;
		Если ТекущаяУпаковка = Неопределено Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбрана строка новой упаковки.'"));
			Возврат;
		КонецЕсли;
		ОтборСтрок = Новый Структура("ИдентификаторГрупповойУпаковки", ТекущаяУпаковка.ИдентификаторСтроки);
	КонецЕсли;
	
	
	ДанныеШтрихкодовПоТипам = ИнтеграцияМДЛПКлиентСервер.РазобратьШтрихкодыПоТипам(ДанныеШтрихкодов);
	
	Если Объект.ВложеныПотребительскиеУпаковки Тогда
		ДанныеШтрихкодовПоТипам.НомераТранспортныхУпаковок.Очистить();
	Иначе
		ДанныеШтрихкодовПоТипам.НомераКиЗ.Очистить();
	КонецЕсли;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц = Истина;
	
	ДанныеДляОбработки = СобытияФормМДЛПКлиентПереопределяемый.ПодготовитьДанныеДляОбработкиШтрихкодов(
		ЭтотОбъект, ДанныеШтрихкодовПоТипам, КэшированныеЗначения, ПараметрыЗаполнения, ОтборСтрок);
	
	ИнтеграцияМДЛПСлужебныйКлиент.ЗаполнитьДокументПоШтрихкодам(
		ЭтотОбъект,
		Объект,
		КэшированныеЗначения,
		ДанныеШтрихкодовПоТипам.НомераКиЗ,
		ДанныеШтрихкодовПоТипам.НомераТранспортныхУпаковок,
		ОтборСтрок);
	
	ОбработатьПолученныеШтрихкодыСервер(ДанныеДляОбработки, КэшированныеЗначения);
	
	СобытияФормМДЛПКлиентПереопределяемый.ПослеОбработкиШтрихкодов(
		ЭтотОбъект,
		ДанныеДляОбработки,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныеШтрихкодыСервер(ДанныеДляОбработки, КэшированныеЗначения)
	
	СобытияФормМДЛППереопределяемый.ОбработатьШтрихкоды(ЭтотОбъект, ДанныеДляОбработки, КэшированныеЗначения);
	
	ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект);
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
