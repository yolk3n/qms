
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ОчередьОбработкиШтрихкодов;

&НаКлиенте
Перем КэшированныеРезультатыАнализа;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИнтеграцияМДЛППереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	ИнициализироватьОтборПоДальнейшимДействиям();
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	РежимЗаполненияДанных = РежимыЗаполненияДанных.ЗаполнитьПоОстаткам;
	УстановитьВидимостьПоРежимуЗаполнения();
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.ТоварыХарактеристика.Имя);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.ТоварыСерия.Имя);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.ТоварыУпаковка.Имя);
	
	ИспользоватьСерии = ИнтеграцияМДЛП.ИспользоватьСерииНоменклатуры();
	Элементы.ТоварыСерия.Видимость = ИспользоватьСерии;
	Элементы.ТоварыСгенерироватьСерии.Видимость = ИспользоватьСерии;
	
	Элементы.ТоварыХарактеристика.Видимость = ИнтеграцияМДЛП.ИспользоватьХарактеристикиНоменклатуры();
	Элементы.ТоварыУпаковка.Видимость = ИнтеграцияМДЛП.ИспользоватьУпаковкиНоменклатуры();
	
	ДоступноОснование = ИнтеграцияМДЛП.ДоступноОснованиеУведомления(Объект.Ссылка);
	Элементы.Основание.Видимость = ДоступноОснование;
	Элементы.ТекстИнвентаризацияТоваров.Видимость = ДоступноОснование;
	
	СобытияФормМДЛППереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьВидимостьПоРежимуЗаполнения();
	
	СобытияФормМДЛППереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьВидимостьПоРежимуЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ТоварыОтображатьВсеНомераУпаковок.Пометка = Не ПоказыватьВсеНомераУпаковок;
	
	// ПодключаемоеОборудование.СканерыШтрихкода
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.УстройстваВвода") Тогда
		ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	КонецЕсли;
	// Конец ПодключаемоеОборудование.СканерыШтрихкода
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОтобразитьИнтерфейсПользователю(ВариантыОтображенияИнтерфейсаПользователю().ИнтерфейсРазблокирован);
	
	ОчередьОбработкиШтрихкодов = Новый Массив;
	
	КэшированныеРезультатыАнализа = Новый Соответствие;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСостоянияМДЛП"
	   И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьУведомленияИнвентаризацииМДЛП"
	   И Параметр.ДокументИнвентаризации = Объект.Ссылка Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьСтатусОтложенно", 0.1, Истина);
		
	КонецЕсли;
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() И Не ТолькоПросмотр Тогда
		Если ИмяСобытия = "ScanData" Тогда
			
			// Штрихкоды помещаются в очередь, т.к. может использоваться сканер с памятью.
			ОчередьОбработкиШтрихкодов.Добавить(ИнтеграцияМДЛПКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
			ПодключитьОбработчикОжидания("ОбработатьШтрихкодыОтложенно", 0.1, Истина);
			
		КонецЕсли;
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(РежимПроверкиЗаполнения) Тогда
		Если РежимПроверкиЗаполнения = "РежимЗаполненияДанных" Тогда
			
			ПроверяемыеРеквизиты.Очистить();
			
			ПроверяемыеРеквизитыОбъекта = Новый Соответствие;
			ПроверяемыеРеквизитыОбъекта.Вставить("Организация", НСтр("ru = 'Организация'"));
			ПроверяемыеРеквизитыОбъекта.Вставить("МестоДеятельности", НСтр("ru = 'Место деятельности'"));
			ПроверяемыеРеквизитыОбъекта.Вставить("ИнвентаризационнаяОпись", НСтр("ru = 'Инвентаризационная опись'"));
			
			Для Каждого КлючИЗначение Из ПроверяемыеРеквизитыОбъекта Цикл
				ПроверяемыйРеквизит = КлючИЗначение.Ключ;
				Если Не ЗначениеЗаполнено(Объект[ПроверяемыйРеквизит]) Тогда
					ПредставлениеРеквизита = КлючИЗначение.Значение;
					ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, ПредставлениеРеквизита);
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, ПроверяемыйРеквизит, "Объект", Отказ);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		РежимПроверкиЗаполнения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Основание) Тогда
		Объект.Основание = НовыйОбъект;
		Записать();
		ОбновитьТекстИнвентаризацияТоваров();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
			МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
			МодульОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.Форма.ФормаДокумента.Провести");
		КонецЕсли;
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ОтборИнвентаризации = Новый ХранилищеЗначения(КомпоновщикОтбора.Настройки, Новый СжатиеДанных(9));
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ОбновитьСтатусУведомления();
	ОбновитьТекстИнвентаризацияТоваров();
	ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект);
	
	СобытияФормМДЛППереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Основание", Объект.Основание);
	ПараметрыЗаписи.Вставить("ИнвентаризационнаяОпись", Объект.ИнвентаризационнаяОпись);
	Оповестить("Запись_ИнвентаризацияПотребительскихУпаковокМДЛП", ПараметрыЗаписи, Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование") Тогда
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВыполнитьПроверку" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуПроверкиРезультатов();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОформитьУведомления" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуОформленияУведомлений();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Закрыть" Тогда
		Объект.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Завершено");
		Модифицированность = Истина;
		ИнтеграцияМДЛПКлиент.ОбработатьНавигационнуюСсылкуСтатуса(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьФормуПроверкиРезультатовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуПроверкиРезультатов" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуПроверкиРезультатов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьФормуОформленияУведомленийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуОформленияУведомлений" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуОформленияУведомлений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьДокументИнвентаризация();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	ОбновитьТекстИнвентаризацияТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СоздатьДокументИнвентаризация();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстИнвентаризацияТоваровОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если "ОформитьИнвентаризацию" = НавигационнаяСсылкаФорматированнойСтроки Тогда
		
		СтандартнаяОбработка = Ложь;
		СоздатьДокументИнвентаризация();
		
	ИначеЕсли "СвязатьСИнвентаризацией" = НавигационнаяСсылкаФорматированнойСтроки Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбратьДокументИнвентаризация();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЗаполненияДанныхПриИзменении(Элемент)
	
	УстановитьВидимостьПоРежимуЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтбораНастройкиОтборПриИзменении(Элемент)
	
	Если КомпоновщикОтбора.Настройки.Отбор.Элементы.Количество() = 0 Тогда
		ИнициализироватьКомпоновщикОтбораЗаполненияДанных(Ложь);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ИдентификаторСтроки = ?(ТекущиеДанные <> Неопределено, ТекущиеДанные.ИдентификаторСтроки, "ВсеСкрыть");
	УстановитьОтборНомеровУпаковок(ИдентификаторСтроки);
	ОбновитьЗаголовокПоляФактическоеНаличие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		УстановитьОтборНомеровУпаковок(ТекущиеДанные.ИдентификаторСтроки);
		ОбновитьЗаголовокПоляФактическоеНаличие(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	// Необходимо скопировать идентификаторы строк,
	// т.к. при удалении строки таблицы удаляется и элемент формы.
	ИдентификаторыСтрок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		ИдентификаторыСтрок.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	Для Каждого ВыделеннаяСтрока Из ИдентификаторыСтрок Цикл
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Отбор = Новый Структура("ИдентификаторСтроки", ТекущаяСтрока.ИдентификаторСтроки);
		НайденныеСтроки = Объект.НомераУпаковок.НайтиСтроки(Отбор);
		
		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			СтрокиКУдалению.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		КонецЦикла;
		УдалитьСтрокиУпаковокИзТабличнойЧасти(СтрокиКУдалению);
		
		Объект.Товары.Удалить(ТекущаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораНоменклатуры(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц   = Истина;
	ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
	ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораХарактеристики(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц = Истина;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораСерии(ЭтотОбъект, ТекущаяСтрока, ПараметрыУказанияСерий, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииСерии(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораУпаковки(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц = Истина;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииУпаковки(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц = Истина;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиНомераУпаковок

&НаКлиенте
Процедура НомераУпаковокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.НомераУпаковокДействиеПоСверкеОстатков Тогда
		
		ПоказатьВыборДальнейшегоДействия(ВыбраннаяСтрока, "ДействиеПоСверкеОстатков");
		
	ИначеЕсли Поле = Элементы.НомераУпаковокДействиеПоОформлениюУведомлений Тогда
		
		ПоказатьВыборДальнейшегоДействия(ВыбраннаяСтрока, "ДействиеПоОформлениюУведомлений");
		
	ИначеЕсли Поле = Элементы.НомераУпаковокРезультатАнализаУпаковок Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.РезультатАнализаУпаковок) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.РезультатАнализаУпаковок);
		ПараметрыФормы.Вставить("РежимПросмотраОписания", Истина);
		ОткрытьФорму("Справочник.ОписанияРезультатовАнализаИнвентаризируемыхУпаковокМДЛП.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если РежимЗаполненияДанных <> РежимыЗаполненияДанных.ЗаполнитьПоФакту Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Добавление новых строк недоступно в текущем режиме заполнения.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана строка с товаром.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
	СтрокиУпаковок = Объект.НомераУпаковок.НайтиСтроки(ПараметрыОтбора);
	
	Если ТекущиеДанные.Количество <= СтрокиУпаковок.Количество() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если Не Копирование Тогда
			ТекущиеДанные.ИдентификаторСтроки = Элементы.Товары.ТекущиеДанные.ИдентификаторСтроки;
			ТекущиеДанные.ФактическоеНаличие = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		ОбновитьСтатусЗаполненияУпаковокВСтроке(Элементы.Товары.ТекущиеДанные);
		ИнвентаризацияМДЛПКлиентСервер.ОбработатьИзменениеФактическогоНаличияУпаковкиВСтроке(
			Элемент.ТекущиеДанные,
			КэшированныеРезультатыАнализа,
			РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимСверки);
		ОбновитьЗаголовокПоляФактическоеНаличие(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	Если УдалитьСтрокиУпаковокИзТабличнойЧасти(Элемент.ВыделенныеСтроки) Тогда
		ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект);
		ОбновитьЗаголовокПоляФактическоеНаличие(ЭтотОбъект);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокФактическоеНаличиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ТекущиеДанные", ТекущиеДанные);
	Обработчик = Новый ОписаниеОповещения("ОбработатьОтветНаВопросПередИзменениемОтметкиФактическогоНаличия", ЭтотОбъект, Контекст);
	Если Не ТекущиеДанные.ФактическоеНаличие Тогда
		ЗадатьВопросПередИзменениемОтметкиФактическогоНаличия(Обработчик);
	Иначе
		ВыполнитьОбработкуОповещения(Обработчик, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокНомерКИЗПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ТекущиеДанные.КлючУпаковки = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(ТекущиеДанные.НомерКиЗ);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокДействиеПоСверкеОстатковПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ПриИзмененииДействияПоСверкеОстатков(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтображатьВсеНомераУпаковок(Команда)
	
	ПоказыватьВсеНомераУпаковок = Не ПоказыватьВсеНомераУпаковок;
	Элементы.ТоварыОтображатьВсеНомераУпаковок.Пометка = Не ПоказыватьВсеНомераУпаковок;
	
	УстановитьОтборНомеровУпаковок(ИдентификаторТекущейСтроки);
	ОбновитьЗаголовокПоляФактическоеНаличие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьСерии(Команда)
	
	Результат = СгенерироватьСерииНаСервере();
	
	СобытияФормМДЛПКлиент.ОповеститьОбОкончанииЗаполненияСерийВДокументе(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ТерминалыСбораДанных") Тогда
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(
			Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
			УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРежимуЗаполненияДанных(Команда)
	
	РежимПроверкиЗаполнения = "РежимЗаполненияДанных";
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗаполениеСЗаписью();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДальнейшееДействие(Команда)
	
	Если СтрЗаканчиваетсяНа(Команда.Имя, "ДействиеПоСверкеОстатков") Тогда
		ИмяКлюча = "ДействиеПоСверкеОстатков";
	ИначеЕсли СтрЗаканчиваетсяНа(Команда.Имя, "ДействиеПоОформлениюУведомлений") Тогда
		ИмяКлюча = "ДействиеПоОформлениюУведомлений";
	Иначе
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.НомераУпаковок.ВыделенныеСтроки;
	
	ПоказатьВыборДальнейшегоДействия(ВыделенныеСтроки, ИмяКлюча);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРекомендуемыеДействия(Команда)
	
	Если РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимПросмотра Тогда
		Текст = НСтр("ru = 'Поля недоступны для изменения'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.НомераУпаковок.ВыделенныеСтроки;
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Элементы.НомераУпаковок.ДанныеСтроки(ТекущаяСтрока);
		Если ТекущиеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИнвентаризацияМДЛПКлиентСервер.ОбработатьИзменениеФактическогоНаличияУпаковкиВСтроке(
			ТекущиеДанные,
			КэшированныеРезультатыАнализа,
			РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимСверки);
		
		МодифицированностьФормы = Истина;
		
	КонецЦикла;
	
	Если МодифицированностьФормы Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьОтметкуФактическогоНаличия(Команда)
	
	Если РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимПросмотра Тогда
		Возврат;
	КонецЕсли;
	
	Отметка = СтрНачинаетсяС(Команда.Имя, "Установить");
	
	Контекст = Новый Структура;
	Контекст.Вставить("Отметка", Отметка);
	Обработчик = Новый ОписаниеОповещения("ОбработатьОтветНаВопросПередУстановкойСнятиемОтметкиФактическогоНаличия", ЭтотОбъект, Контекст);
	Если Не Отметка Тогда
		ЗадатьВопросПередИзменениемОтметкиФактическогоНаличия(Обработчик);
	Иначе
		ВыполнитьОбработкуОповещения(Обработчик, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьОтборПоДальнейшемуДействию(Команда)
	
	УстановитьОтборПоДальнейшемуДействию(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормМДЛПКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЕстьПравоИзменение = ПравоДоступа("Изменение", Объект.Ссылка.Метаданные());
	
	Типы = Объект.Ссылка.Метаданные().Реквизиты.Основание.Тип.Типы();
	Для Каждого Тип Из Типы Цикл
		МетаданныеОснования = Метаданные.НайтиПоТипу(Тип);
		Если МетаданныеОснования <> Неопределено И ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОснования) Тогда
			ЕстьПравоСозданияИнвентаризации = ЕстьПравоСозданияИнвентаризации Или ПравоДоступа("Добавление", МетаданныеОснования);
		КонецЕсли;
	КонецЦикла;
	
	ИнициализироватьРежимыЗаполненияДанных();
	ИнициализироватьРежимыОбработкиДокумента();
	
	ИнициализироватьКомпоновщикОтбораЗаполненияДанных(Истина);
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(Объект, ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка));
	
	ОбновитьСтатусУведомления();
	ОбновитьТекстИнвентаризацияТоваров();
	ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект);
	ОбновитьЗаголовокПоляФактическоеНаличие(ЭтотОбъект);
	
	Для Каждого СтрокаТаблицы Из Объект.НомераУпаковок Цикл
		СтрокаТаблицы.ФактическоеНаличиеДоИзменения = СтрокаТаблицы.ФактическоеНаличие;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НомераУпаковок.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.НомераУпаковок.ИдентификаторСтроки", Новый ПолеКомпоновкиДанных("ИдентификаторТекущейСтроки"), ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НомераУпаковокНомерКИЗ.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.НомераУпаковок.НомерКИЗ",, ВидСравненияКомпоновкиДанных.Заполнено);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусУведомления()
	
	ТекущийСтатус = ИнтеграцияМДЛП.ТекущийСтатусУведомления(Объект.Ссылка);
	СтатусПредставление = ИнтеграцияМДЛП.ПредставлениеСтатусаУведомления(ТекущийСтатус);
	
	Если Не ЕстьПравоИзменение Тогда
		РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимПросмотра;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.СостояниеПодтверждения) Тогда
		РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимСверки;
	Иначе
		Если Объект.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить Тогда
			РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимСверки;
		ИначеЕсли Объект.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОформитьУведомления Тогда
			РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимОформления;
		ИначеЕсли Объект.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Завершено Тогда
			РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимПросмотра;
		КонецЕсли;
	КонецЕсли;
	
	РедактированиеФормыНедоступно = Не ОбщегоНазначенияКлиентСервер.РежимОтладки();
	
	ИменаЭлементовТолькоПросмотр = Новый Массив;
	ИменаЭлементовВидимость = Новый Массив;
	ИменаЭлементовИзменятьСоставСтрок = Новый Массив;
	ИменаЭлементовДоступность = Новый Массив;
	ИменаЭлементовДоступностьВключить = Новый Массив;
	
	Если РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимСверки Тогда
		
		ИменаЭлементовДоступность.Добавить(Элементы.ДекорацияОткрытьФормуОформленияУведомлений.Имя);
		
	Иначе
		
		ИменаЭлементовДоступностьВключить.Добавить(Элементы.ДекорацияОткрытьФормуОформленияУведомлений.Имя);
		
		ИменаЭлементовТолькоПросмотр.Добавить(Элементы.Организация.Имя);
		ИменаЭлементовТолькоПросмотр.Добавить(Элементы.МестоДеятельности.Имя);
		ИменаЭлементовТолькоПросмотр.Добавить(Элементы.ИнвентаризационнаяОпись.Имя);
		ИменаЭлементовТолькоПросмотр.Добавить(Элементы.ТоварыКоличествоУпаковок.Имя);
		
		ИменаЭлементовВидимость.Добавить(Элементы.ТоварыЗагрузитьДанныеИзТСД.Имя);
		
		ИменаЭлементовИзменятьСоставСтрок.Добавить(Элементы.Товары.Имя);
		ИменаЭлементовИзменятьСоставСтрок.Добавить(Элементы.НомераУпаковок.Имя);
		
		Если РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимПросмотра Тогда
			
			ИменаЭлементовТолькоПросмотр.Добавить(Элементы.НомераУпаковок.Имя);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		
		ИменаЭлементовДоступность.Добавить(Элементы.РежимЗаполненияДанных.Имя);
		ИменаЭлементовДоступность.Добавить(Элементы.КомпоновщикОтбораНастройкиОтбор.Имя);
		ИменаЭлементовДоступность.Добавить(Элементы.ЗаполнитьПоОстаткам.Имя);
		ИменаЭлементовДоступность.Добавить(Элементы.ЗаполнитьПоФакту.Имя);
		
	Иначе
		
		ИменаЭлементовДоступностьВключить.Добавить(Элементы.РежимЗаполненияДанных.Имя);
		ИменаЭлементовДоступностьВключить.Добавить(Элементы.КомпоновщикОтбораНастройкиОтбор.Имя);
		ИменаЭлементовДоступностьВключить.Добавить(Элементы.ЗаполнитьПоОстаткам.Имя);
		ИменаЭлементовДоступностьВключить.Добавить(Элементы.ЗаполнитьПоФакту.Имя);
		
	КонецЕсли;
	
	Для Каждого ИмяЭлемента Из ИменаЭлементовТолькоПросмотр Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "ТолькоПросмотр", РедактированиеФормыНедоступно);
	КонецЦикла;
	
	Для Каждого ИмяЭлемента Из ИменаЭлементовВидимость Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", Не РедактированиеФормыНедоступно);
	КонецЦикла;
	
	Для Каждого ИмяЭлемента Из ИменаЭлементовИзменятьСоставСтрок Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "ИзменятьСоставСтрок", Не РедактированиеФормыНедоступно);
	КонецЦикла;
	
	Для Каждого ИмяЭлемента Из ИменаЭлементовДоступность Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Доступность", Не РедактированиеФормыНедоступно);
	КонецЦикла;
	
	Для Каждого ИмяЭлемента Из ИменаЭлементовДоступностьВключить Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Доступность", Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект)
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки);
		СтрокиНомеров = Объект.НомераУпаковок.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиНомеров.Количество() = СтрокаТЧ.Количество Тогда
			СтрокаТЧ.СтатусЗаполненияУпаковок = 1;
		Иначе
			СтрокаТЧ.СтатусЗаполненияУпаковок = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
	СтрокиНомеров = Объект.НомераУпаковок.НайтиСтроки(ПараметрыОтбора);
	
	Если СтрокиНомеров.Количество() = ТекущиеДанные.Количество Тогда
		ТекущиеДанные.СтатусЗаполненияУпаковок = 1;
	Иначе
		ТекущиеДанные.СтатусЗаполненияУпаковок = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНомеровУпаковок(ИдентификаторСтроки)
	
	Если ИдентификаторТекущейСтроки <> ИдентификаторСтроки Тогда
		ИдентификаторТекущейСтроки = ИдентификаторСтроки;
	КонецЕсли;
	
	Если Не ПоказыватьВсеНомераУпаковок Тогда
		ИнтеграцияМДЛПКлиент.УстановитьОтборСтрок(
			Элементы.НомераУпаковок.ОтборСтрок,
			Новый Структура("ИдентификаторСтроки", ИдентификаторТекущейСтроки));
	Иначе
		ИнтеграцияМДЛПКлиент.СнятьОтборСтрок(Элементы.НомераУпаковок.ОтборСтрок, "ИдентификаторСтроки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция УдалитьСтрокиУпаковокИзТабличнойЧасти(СтрокиКУдалению)
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого ИдентификаторСтроки Из СтрокиКУдалению Цикл
		ТекущаяСтрока = Объект.НомераУпаковок.НайтиПоИдентификатору(ИдентификаторСтроки);
		УдаляемыеСтроки.Добавить(ТекущаяСтрока);
	КонецЦикла;
	
	ОчередьУдаленияИерархииУпаковок = Новый Массив;
	КешОчереди = Новый Соответствие;
	Для Каждого ТекущаяСтрока Из УдаляемыеСтроки Цикл
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.НомерРодительскойУпаковкиМДЛП)
			И КешОчереди.Получить(ТекущаяСтрока.НомерРодительскойУпаковкиМДЛП) = Неопределено Тогда
			
			НайденныеСтроки = Объект.ИерархияГрупповыхУпаковокМДЛП.НайтиСтроки(Новый Структура("НомерУпаковки", ТекущаяСтрока.НомерРодительскойУпаковкиМДЛП));
			Если НайденныеСтроки.Количество() > 0 Тогда
				ОчередьУдаленияИерархииУпаковок.Добавить(НайденныеСтроки[0]);
			КонецЕсли;
			КешОчереди.Вставить(ТекущаяСтрока.НомерРодительскойУпаковкиМДЛП, Истина);
			
		КонецЕсли;
		
		Объект.НомераУпаковок.Удалить(ТекущаяСтрока);
		
	КонецЦикла;
	
	Пока ОчередьУдаленияИерархииУпаковок.Количество() > 0 Цикл
		
		ТекущаяСтрока = ОчередьУдаленияИерархииУпаковок[0];
		ОчередьУдаленияИерархииУпаковок.Удалить(0);
		
		НайденныеСтроки = Объект.НомераУпаковок.НайтиСтроки(Новый Структура("НомерРодительскойУпаковкиМДЛП", ТекущаяСтрока.НомерУпаковки));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = Объект.ИерархияГрупповыхУпаковокМДЛП.НайтиСтроки(Новый Структура("НомерРодительскойУпаковки", ТекущаяСтрока.НомерУпаковки));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.НомерРодительскойУпаковки)
			И КешОчереди.Получить(ТекущаяСтрока.НомерРодительскойУпаковки) = Неопределено Тогда
			
			НайденныеСтроки = Объект.ИерархияГрупповыхУпаковокМДЛП.НайтиСтроки(Новый Структура("НомерУпаковки", ТекущаяСтрока.НомерРодительскойУпаковки));
			Если НайденныеСтроки.Количество() > 0 Тогда
				ОчередьУдаленияИерархииУпаковок.Добавить(НайденныеСтроки[0]);
			КонецЕсли;
			КешОчереди.Вставить(ТекущаяСтрока.НомерРодительскойУпаковки, Истина);
			
		КонецЕсли;
		
		Объект.ИерархияГрупповыхУпаковокМДЛП.Удалить(ТекущаяСтрока.НомерСтроки - 1);
		
	КонецЦикла;
	
	Возврат УдаляемыеСтроки.Количество() > 0;
	
КонецФункции

&НаСервере
Функция СгенерироватьСерииНаСервере()
	
	Результат = ИнтеграцияМДЛП.ПустойРезультатЗаполненияСерий();
	
	Если Объект.Товары.Количество() <> 0 Тогда 
		ИнтеграцияМДЛППереопределяемый.ЗаполнитьСгенерироватьСерии(Объект, "Товары",, ПараметрыУказанияСерий, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ДокументыОснование

&НаСервере
Процедура ОбновитьТекстИнвентаризацияТоваров()
	
	Строки = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Объект.Основание) Тогда
		
		КоличествоДокументов = ИнтеграцияМДЛППереопределяемый.ПолучитьКоличествоВозможныхОснованийДляУведомления(Объект);
		
		Если ЕстьПравоСозданияИнвентаризации Тогда
			Строки.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Оформить инвентаризацию'"),,,, "ОформитьИнвентаризацию"));
			Строки.Добавить("    ");
		КонецЕсли;
		
		Строки.Добавить(
			Новый ФорматированнаяСтрока(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Связать с инвентаризацией (%1)'"), КоличествоДокументов),
				,
				,
				,
				"СвязатьСИнвентаризацией"));
		
	КонецЕсли;
	
	ТекстИнвентаризацияТоваров = Новый ФорматированнаяСтрока(Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументИнвентаризация()
	
	Обработчик = Новый ОписаниеОповещения("ОткрытьФормуСозданияДокументаИнвентаризацияТоваровНаОсновании", ЭтотОбъект);
	ИнтеграцияМДЛПСлужебныйКлиент.ЗаписатьДокументВФормеПриНеобходимости(Обработчик, ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСозданияДокументаИнвентаризацияТоваровНаОсновании(ЗаписаноУспешно, ДополнительныеПараметры) Экспорт
	
	Если Не ЗаписаноУспешно Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ОткрытьФормуСозданияДокументаИнвентаризацияТоваровНаОсновании(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументИнвентаризация()
	
	СобытияФормМДЛПКлиентПереопределяемый.ОткрытьФормуВыбораДокументаИнвентаризацияТоваров(
		ЭтотОбъект, Объект, Новый ОписаниеОповещения("ПослеВыбораДокументаИнвентаризация", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДокументаИнвентаризация(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		
		Если ИнтеграцияМДЛПВызовСервера.ЕстьРасхожденияМеждуУведомлениемИОснованием(Объект.Ссылка, ВыбранныйДокумент) Тогда
			
			ДополнительныеПараметрыВопроса = Новый Структура;
			ДополнительныеПараметрыВопроса.Вставить("ДокументИнвентаризация", ВыбранныйДокумент);
			
			Обработчик = Новый ОписаниеОповещения("ОбработатьОтветОРасхождениях", ЭтотОбъект, ДополнительныеПараметрыВопроса);
			ТекстВопроса = НСтр("ru='В инвентаризации МДЛП есть товары которых нет в выбранной инвентаризации. Продолжить выбор?'");
			ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОбработатьВыборДокументаИнвентаризация(ВыбранныйДокумент);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветОРасхождениях(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыборДокументаИнвентаризация(ДополнительныеПараметры.ДокументИнвентаризация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДокументаИнвентаризация(ДокументИнвентаризация)
	
	Если ЗначениеЗаполнено(ДокументИнвентаризация) Тогда
		
		Объект.Основание = ДокументИнвентаризация;
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ОбновитьТекстИнвентаризацияТоваров();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыОтложенно()
	
	ОтключитьОбработчикОжидания("ОбработатьШтрихкодыОтложенно");
	
	// Обрабатывать штрихкоды из очереди будем по одному.
	Если ОчередьОбработкиШтрихкодов.Количество() > 0 Тогда
		ДанныеШтрихкода = ОчередьОбработкиШтрихкодов[0];
		ОчередьОбработкиШтрихкодов.Удалить(0);
		ОбработатьШтрихкоды(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеШтрихкода));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, ЗагрузкаИзТСД = Ложь)
	
	Если РежимОбработкиДокумента <> РежимыОбработкиДокумента.РежимСверки Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкодовПоТипам = ИнтеграцияМДЛПКлиентСервер.РазобратьШтрихкодыПоТипам(ДанныеШтрихкодов);
	
	Доступность = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПродолжитьОбработкуШтрихкодов", ЭтотОбъект, ДанныеШтрихкодовПоТипам);
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОбработкуШтрихкодов(Результат, ДанныеШтрихкодовПоТипам) Экспорт
	
	Доступность = Истина;
	
	ЗаполнитьДокументПоПолученнымШтрихкодам(ДанныеШтрихкодовПоТипам);
	
	// Когда была обработана очередная порция данных, можно обрабатывать следующую.
	ПодключитьОбработчикОжидания("ОбработатьШтрихкодыОтложенно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументПоПолученнымШтрихкодам(ДанныеШтрихкодовПоТипам)
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц = Истина;
	
	ДанныеДляОбработки = СобытияФормМДЛПКлиентПереопределяемый.ПодготовитьДанныеДляОбработкиШтрихкодов(
		ЭтотОбъект, ДанныеШтрихкодовПоТипам, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ЗаполнитьДокументПоШтрихкодам(ДанныеШтрихкодовПоТипам.НомераКиЗ);
	
	ОбработатьПолученныеШтрихкодыСервер(ДанныеДляОбработки, КэшированныеЗначения, КэшированныеРезультатыАнализа);
	
	СобытияФормМДЛПКлиентПереопределяемый.ПослеОбработкиШтрихкодов(
		ЭтотОбъект,
		ДанныеДляОбработки,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументПоШтрихкодам(НомераКиЗ) Экспорт
	
	МодифицированностьФормы = Ложь;
	
	Для Каждого Данные Из НомераКиЗ Цикл
		
		НайденныеСтроки = Объект.НомераУпаковок.НайтиСтроки(Новый Структура("НомерКиЗ", Данные.sgtin));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаУпаковки = НайденныеСтроки[0];
			Если СтрокаУпаковки.ФактическоеНаличие Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Номер упаковки %1 уже присутствует в документе'"), Данные.sgtin);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.НомераУпаковок", СтрокаУпаковки.НомерСтроки, "НомерКиЗ");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, Поле);
				Продолжить;
			КонецЕсли;
		ИначеЕсли РежимЗаполненияДанных <> РежимыЗаполненияДанных.ЗаполнитьПоФакту Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Номер упаковки %1 не обнаружен в документе. Добавление новых строк недоступно в текущем режиме заполнения.'"), Данные.sgtin);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		Иначе
			СтрокаУпаковки = Объект.НомераУпаковок.Добавить();
		КонецЕсли;
		
		Если РежимЗаполненияДанных = РежимыЗаполненияДанных.ЗаполнитьПоОстаткам Тогда
			
			СтрокаУпаковки.ФактическоеНаличие = Истина;
			
			МодифицированностьФормы = Истина;
			
		ИначеЕсли РежимЗаполненияДанных = РежимыЗаполненияДанных.ЗаполнитьПоФакту Тогда
			
			ОтборНоменклатуры = Новый Структура("GTIN", Данные.GTIN);
			СтрокиТовара = Объект.Товары.НайтиСтроки(ОтборНоменклатуры);
			Если СтрокиТовара.Количество() > 0 Тогда
				ТекущаяСтрока = СтрокиТовара[0];
			Иначе
				ТекущаяСтрока = Объект.Товары.Добавить();
				ДанныеНоменклатуры = СобытияФормМДЛПКлиентПереопределяемый.ПолучитьДанныеНоменклатурыПоКиЗ(Данные);
				Если ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
					ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеНоменклатуры);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ОтборНоменклатуры);
				ТекущаяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
			СтрокиУпаковок = Объект.НомераУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ТекущаяСтрока.ИдентификаторСтроки));
			Если СтрокиУпаковок.Количество() >= ТекущаяСтрока.Количество Тогда
				ТекущаяСтрока.Количество = ТекущаяСтрока.Количество + 1;
				ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
				ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок  = Истина;
				СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииКоличества(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаУпаковки, Данные);
			СтрокаУпаковки.ИдентификаторСтроки = ТекущаяСтрока.ИдентификаторСтроки;
			СтрокаУпаковки.НомерКиЗ = Данные.sgtin;
			СтрокаУпаковки.ФактическоеНаличие = Истина;
			СтрокаУпаковки.КлючУпаковки = ИнтеграцияМДЛПКлиентСервер.ПолучитьКлючУпаковки(СтрокаУпаковки.НомерКиЗ);
			
			МодифицированностьФормы = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МодифицированностьФормы Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныеШтрихкодыСервер(ДанныеДляОбработки, КэшированныеЗначения, КэшированныеРезультатыАнализа)
	
	СобытияФормМДЛППереопределяемый.ОбработатьШтрихкоды(ЭтотОбъект, ДанныеДляОбработки, КэшированныеЗначения);
	
	ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект);
	
	ОбработатьИзменениеФактическогоНаличияУпаковок(КэшированныеРезультатыАнализа);
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанных

&НаСервере
Процедура ИнициализироватьРежимыЗаполненияДанных()
	
	РежимыЗаполненияДанныхИзменяемая = Новый Структура;
	Для Каждого Элемент Из Элементы.РежимЗаполненияДанных.СписокВыбора Цикл
		РежимыЗаполненияДанныхИзменяемая.Вставить(Элемент.Значение, Элемент.Значение);
	КонецЦикла;
	РежимыЗаполненияДанных = Новый ФиксированнаяСтруктура(РежимыЗаполненияДанныхИзменяемая);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРежимыОбработкиДокумента()
	
	РежимыОбработкиДокументаИзменяемая = Новый Структура;
	РежимыОбработкиДокументаИзменяемая.Вставить("РежимСверки"    , "РежимСверки");
	РежимыОбработкиДокументаИзменяемая.Вставить("РежимОформления", "РежимОформления");
	РежимыОбработкиДокументаИзменяемая.Вставить("РежимПросмотра" , "РежимПросмотра");
	
	РежимыОбработкиДокумента = Новый ФиксированнаяСтруктура(РежимыОбработкиДокументаИзменяемая);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоРежимуЗаполнения()
	
	Если РежимЗаполненияДанных = РежимыЗаполненияДанных.ЗаполнитьПоОстаткам Тогда
		
		Элементы.СтраницыПараметровРежимовЗаполненияДанных.ТекущаяСтраница = Элементы.СтраницаПараметрыРежимаЗаполнитьПоОстаткам;
		
	ИначеЕсли РежимЗаполненияДанных = РежимыЗаполненияДанных.ЗаполнитьПоФакту Тогда
		
		Элементы.СтраницыПараметровРежимовЗаполненияДанных.ТекущаяСтраница = Элементы.СтраницаПараметрыРежимаЗаполнитьПоФакту;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикОтбораЗаполненияДанных(ПолучатьСохраненныеНастройки = Истина)
	
	Если ПолучатьСохраненныеНастройки Тогда
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
		НастройкиКомпоновки = ТекущийОбъект.ОтборИнвентаризации.Получить();
	Иначе
		НастройкиКомпоновки = Неопределено;
	КонецЕсли;
	Документы.ИнвентаризацияПотребительскихУпаковокМДЛП.ИнициализироватьСхемуИКомпоновщикНастроек(Неопределено, ЭтотОбъект.КомпоновщикОтбора, НастройкиКомпоновки);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполениеСЗаписью()
	
	// Нужно записать документ по следующим причинам:
	// 1. Компоновщик настроек нальзя передавать в фоновое задание.
	// 2. Сохранить результат работы пользователя в документе до выполнения автоматических действий.
	//    В результате пользователь сможет вернуть документ в исходное состояние просто закрыв его не сохраняя.
	// 3. В фоновое задание возможно передавать параметры ограниченного размера.
	//    Параметры большого размера рекомендуется передавать через базу данных.
	Обработчик = Новый ОписаниеОповещения("НачатьЗаполение_ПослеЗаписи", ЭтотОбъект);
	ИнтеграцияМДЛПСлужебныйКлиент.ЗаписатьДокументВФормеПриНеобходимости(Обработчик, ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполение_ПослеЗаписи(ЗаписаноУспешно, ДополнительныеПараметры) Экспорт
	
	Если Не ЗаписаноУспешно Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗаполение();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполение()
	
	ДлительнаяОперация = ПолучитьДанныеЗаполненияВФоне();
	НачатьОжиданиеДанныхЗаполнения(ДлительнаяОперация);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеЗаполненияВФоне()
	
	ПараметрыФункции = СформироватьПараметрыПолученияДанныхЗаполнения();
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных заполнения инвентаризации МДЛП.'");
	
	Если РежимЗаполненияДанных = РежимыЗаполненияДанных.ЗаполнитьПоОстаткам Тогда
		ИмяФункции = "Документы.ИнвентаризацияПотребительскихУпаковокМДЛП.СформироватьДанныеАнализаИнвентаризируемыхУпаковокПоОстаткам";
	ИначеЕсли РежимЗаполненияДанных = РежимыЗаполненияДанных.ЗаполнитьПоФакту Тогда
		ИмяФункции = "Документы.ИнвентаризацияПотребительскихУпаковокМДЛП.СформироватьДанныеАнализаИнвентаризируемыхУпаковокПоФакту";
	КонецЕсли;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяФункции, ПараметрыФункции);
	
КонецФункции

&НаСервере
Функция СформироватьПараметрыПолученияДанныхЗаполнения()
	
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("Ссылка", Объект.Ссылка);
	
	Возврат ПараметрыФункции;
	
КонецФункции

&НаКлиенте
Процедура НачатьОжиданиеДанныхЗаполнения(ДлительнаяОперация)
	
	ОтобразитьИнтерфейсПользователю(ВариантыОтображенияИнтерфейсаПользователю().ОжиданиеДанных);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Оповестить = Новый ОписаниеОповещения("ЗакончитьОжиданиеДанныхЗаполнения", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповестить, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьОжиданиеДанныхЗаполнения(РезультатДлительнойОперации, ДополнительныеПараметры) Экспорт
	
	Если РезультатДлительнойОперации = Неопределено Тогда
		Возврат; // Задание отменено.
	КонецЕсли;
	
	Если РезультатДлительнойОперации.Статус = "Ошибка" Тогда
		ОтобразитьИнтерфейсПользователю(ВариантыОтображенияИнтерфейсаПользователю().ДинамическаяОшибка, РезультатДлительнойОперации.КраткоеПредставлениеОшибки);
		Возврат;
	КонецЕсли;
	
	ЗакончитьОжиданиеДанныхЗаполненияНаСервере(РезультатДлительнойОперации.АдресРезультата);
	
	ОтобразитьИнтерфейсПользователю(ВариантыОтображенияИнтерфейсаПользователю().ИнтерфейсРазблокирован);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьОжиданиеДанныхЗаполненияНаСервере(Знач АдресРезультата)
	
	РезультатПолученияДанных = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);
	
	Для Каждого ТекстОшибки Из РезультатПолученияДанных.Ошибки Цикл
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЦикла;
	
	Если РезультатПолученияДанных.Статус <> "Успешно" Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьДанныеРезультатовАнализа(РезультатПолученияДанных.ДанныеРезультатовАнализа);
	ОбработатьДанныеИерархииГрупповыхУпаковок(РезультатПолученияДанных.ИерархияГрупповыхУпаковокМДЛП, Объект.ИерархияГрупповыхУпаковокМДЛП);
	ОбработатьДанныеИерархииГрупповыхУпаковок(РезультатПолученияДанных.ИерархияГрупповыхУпаковокИБ, Объект.ИерархияГрупповыхУпаковокИБ);
	
	ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект);
	ОбновитьЗаголовокПоляФактическоеНаличие(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеРезультатовАнализа(Данные)
	
	Объект.НомераУпаковок.Очистить();
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок = Истина;
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		СтрокаТовара.Количество = 0;
		ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Объект, СтрокаТовара, ПараметрыЗаполнения);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Данные Цикл
		
		СтрокаУпаковки = Объект.НомераУпаковок.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаУпаковки, СтрокаТаблицы);
		
		ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
		ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок = Истина;
		
		Отбор = Новый Структура("GTIN, НомерСерии, ГоденДо");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НоваяСтрокаТовара = НайденныеСтроки[0];
			НоваяСтрокаТовара.Количество = НоваяСтрокаТовара.Количество + 1;
			СтрокаУпаковки.ИдентификаторСтроки = НоваяСтрокаТовара.ИдентификаторСтроки;
			
			ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Объект, НоваяСтрокаТовара, ПараметрыЗаполнения);
			
		Иначе
			
			НоваяСтрокаТовара = Объект.Товары.Добавить();
			НоваяСтрокаТовара.Количество = 1;
			НоваяСтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			СтрокаУпаковки.ИдентификаторСтроки = НоваяСтрокаТовара.ИдентификаторСтроки;
			
			ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Объект, НоваяСтрокаТовара, ПараметрыЗаполнения);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовара, Отбор);
			
			ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
			ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
			ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
			ИнтеграцияМДЛППереопределяемый.ПриИзмененииПараметровНоменклатуры(Объект, НоваяСтрокаТовара, ПараметрыЗаполнения);
			
		КонецЕсли;
		
		СтрокаУпаковки.ФактическоеНаличиеДоИзменения = СтрокаУпаковки.ФактическоеНаличие;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеИерархииГрупповыхУпаковок(Данные, ИерархияГрупповыхУпаковок)
	
	ИерархияГрупповыхУпаковок.Очистить();
	
	Для Каждого СтрокаТаблицы Из Данные Цикл
		
		СтрокаУпаковки = ИерархияГрупповыхУпаковок.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаУпаковки, СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИнтерфейсПользователю(Вариант, Уточнение = "")
	
	Варианты = ВариантыОтображенияИнтерфейсаПользователю();
	
	Если Вариант = Варианты.ОжиданиеДанных Тогда
		
		Элементы.СтраницыДействий.ТекущаяСтраница = Элементы.СтраницаОжиданиеДанных;
		
		Элементы.СтраницаДоступныеДействия.Видимость = Ложь;
		
		Элементы.ДекорацияОткрытьФормуПроверкиРезультатов.Доступность = Ложь;
		Элементы.ДекорацияОткрытьФормуОформленияУведомлений.Доступность = Ложь;
		Элементы.ТоварыСгенерироватьСерии.Доступность = Ложь;
		
	ИначеЕсли Вариант = Варианты.ИнтерфейсРазблокирован Тогда
		
		Элементы.СтраницыДействий.ТекущаяСтраница = Элементы.СтраницаДоступныеДействия;
		
		Элементы.СтраницаДоступныеДействия.Видимость = Истина;
		
		Элементы.ДекорацияОткрытьФормуПроверкиРезультатов.Доступность = Истина;
		Элементы.ДекорацияОткрытьФормуОформленияУведомлений.Доступность = РежимОбработкиДокумента <> РежимыОбработкиДокумента.РежимСверки;
		Элементы.ТоварыСгенерироватьСерии.Доступность = Истина;
		
	ИначеЕсли Вариант = Варианты.ДинамическаяОшибка Тогда
		
		Элементы.СтраницыДействий.ТекущаяСтраница = Элементы.СтраницаДоступныеДействия;
		
		Элементы.СтраницаДоступныеДействия.Видимость = Истина;
		
		Элементы.ДекорацияОткрытьФормуПроверкиРезультатов.Доступность = Истина;
		Элементы.ДекорацияОткрытьФормуОформленияУведомлений.Доступность = РежимОбработкиДокумента <> РежимыОбработкиДокумента.РежимСверки;
		Элементы.ТоварыСгенерироватьСерии.Доступность = Истина;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Уточнение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВариантыОтображенияИнтерфейсаПользователю()
	
	Варианты = Новый Структура;
	Варианты.Вставить("ОжиданиеДанных");
	Варианты.Вставить("ИнтерфейсРазблокирован");
	Варианты.Вставить("ДинамическаяОшибка");
	
	Для Каждого КлючИЗначение Из Варианты Цикл
		Варианты[КлючИЗначение.Ключ] = КлючИЗначение.Ключ;
	КонецЦикла;
	
	Возврат Варианты;
	
КонецФункции

#КонецОбласти

#Область РаботаСРезультатамиИДальнейшимиДействиямиИнвентаризации

#Область ПроверкаРезультатовАнализа

&НаКлиенте
Процедура ОткрытьФормуПроверкиРезультатов()
	
	Обработчик = Новый ОписаниеОповещения("ОткрытьФормуПроверкиРезультатов_ПослеЗаписи", ЭтотОбъект);
	ИнтеграцияМДЛПСлужебныйКлиент.ЗаписатьДокументВФормеПриНеобходимости(Обработчик, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПроверкиРезультатов_ПослеЗаписи(ЗаписаноУспешно, ДополнительныеПараметры) Экспорт
	
	Если Не ЗаписаноУспешно Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("Документ", Объект.Ссылка);
	ПараметрыПроверки.Вставить("РежимОбработкиДокумента", РежимОбработкиДокумента);
	
	Обработчик = Новый ОписаниеОповещения("ПроверкаРезультатовПослеЗакрытия", ЭтотОбъект);
	ОткрытьФорму("Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.Форма.ФормаПроверкиРезультатов", ПараметрыПроверки, ЭтотОбъект,,,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаРезультатовПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьОкончаниеПроверки(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОкончаниеПроверки(Знач АдресРезультата)
	
	РезультатыПроверки = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	СтатусПроверки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатыПроверки, "СтатусПроверки");
	Если СтатусПроверки <> Перечисления.СтатусыПроверкиИПодбораМДЛП.Завершено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДокументДаннымиРезультатовПроверки(РезультатыПроверки);
	
	Если Объект.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить Тогда
		Объект.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОформитьУведомления;
		Модифицированность = Истина;
	КонецЕсли;
	
	ОбновитьСтатус();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументДаннымиРезультатовПроверки(РезультатыПроверки)
	
	ДанныеРезультатовПроверки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатыПроверки, "ДанныеРезультатовПроверки");
	Если Не ЗначениеЗаполнено(ДанныеРезультатовПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеРезультатовПроверки Цикл
		
		СтрокаУпаковки = Объект.НомераУпаковок[СтрокаДанных.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(СтрокаУпаковки, СтрокаДанных,, "НомерСтроки");
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеУведомлений

&НаКлиенте
Процедура ОткрытьФормуОформленияУведомлений() Экспорт
	
	Обработчик = Новый ОписаниеОповещения("ОткрытьФормуОформленияУведомлений_ПослеЗаписи", ЭтотОбъект);
	ИнтеграцияМДЛПСлужебныйКлиент.ЗаписатьДокументВФормеПриНеобходимости(Обработчик, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОформленияУведомлений_ПослеЗаписи(ЗаписаноУспешно, ДополнительныеПараметры) Экспорт
	
	Если Не ЗаписаноУспешно Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОбновитьСтатус(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("Документ", Объект.Ссылка);
	ПараметрыПроверки.Вставить("РежимОбработкиДокумента", РежимОбработкиДокумента);
	
	ОткрытьФорму("Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.Форма.ФормаОформленияУведомлений", ПараметрыПроверки, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеСтатуса

&НаКлиенте
Процедура ОбновитьСтатусОтложенно()
	
	ОбновитьСтатус();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатус(Отказ = Ложь)
	
	НачатьТранзакцию();
	Попытка
		
		Если Модифицированность Тогда
			Если Не Записать() Тогда
				ВызватьИсключение НСтр("ru = 'Ошибка записи документа.'");
			КонецЕсли;
		КонецЕсли;
		
		НовыйСтатус = Документы.ИнвентаризацияПотребительскихУпаковокМДЛП.ОбновитьСтатус(Объект.Ссылка);
		
		Если НовыйСтатус = Перечисления.СтатусыИнформированияМДЛП.Закрыто Тогда
			
			Объект.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Завершено;
			
			Если Не Записать() Тогда
				ВызватьИсключение НСтр("ru = 'Ошибка записи документа.'");
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обновить статус документа: %1 по причине: %2'"),
			Объект.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
	КонецПопытки;
	
	Прочитать();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ИнициализироватьОтборПоДальнейшимДействиям() Экспорт
	
	Менеджер = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП;
	ОбъектМетаданных = Метаданные.Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП;
	
	Префикс = "Отбор";
	
	ИмяКлючаДействиеПоСверкеОстатков        = "ДействиеПоСверкеОстатков";
	ИмяКлючаДействиеПоОформлениюУведомлений = "ДействиеПоОформлениюУведомлений";
	
	// Добавление реквизитов.
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Префикс + ИмяКлючаДействиеПоСверкеОстатков, Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияИнвентаризацииМДЛП")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Префикс + ИмяКлючаДействиеПоОформлениюУведомлений, Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияИнвентаризацииМДЛП")));
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавление команд и кнопок отбора.
	ГруппаОтборДействийПоСверкеОстатков = Элементы.Добавить(Префикс + ИмяКлючаДействиеПоСверкеОстатков, Тип("ГруппаФормы"), Элементы.ОтборПоДействию);
	ГруппаОтборДействийПоСверкеОстатков.Вид = ВидГруппыФормы.Подменю;
	ГруппаОтборДействийПоСверкеОстатков.Заголовок = НСтр("ru = 'Отбор действий по сверке остатков'");
	Для Каждого Значение Из ИнвентаризацияМДЛПКлиентСервер.ДействияПоСверкеОстатков() Цикл
		
		МетаданныеЗначения = ОбъектМетаданных.ЗначенияПеречисления[Менеджер.Индекс(Значение)];
		
		НоваяКоманда = Команды.Добавить(Префикс + МетаданныеЗначения.Имя);
		НоваяКоманда.Действие = "Подключаемый_УстановитьОтборПоДальнейшемуДействию";
		НоваяКоманда.Заголовок = МетаданныеЗначения.Представление();
		
		Кнопка = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), ГруппаОтборДействийПоСверкеОстатков);
		Кнопка.ИмяКоманды = НоваяКоманда.Имя;
		
	КонецЦикла;
	
	ГруппаОтборДействийПоОформлениюУведомлений = Элементы.Добавить(Префикс + ИмяКлючаДействиеПоОформлениюУведомлений, Тип("ГруппаФормы"), Элементы.ОтборПоДействию);
	ГруппаОтборДействийПоОформлениюУведомлений.Вид = ВидГруппыФормы.Подменю;
	ГруппаОтборДействийПоОформлениюУведомлений.Заголовок = НСтр("ru = 'Отбор действий по оформлению уведомлений'");
	Для Каждого Значение Из ИнвентаризацияМДЛПКлиентСервер.ДействияПоОформлениюУведомлений() Цикл
		
		МетаданныеЗначения = ОбъектМетаданных.ЗначенияПеречисления[Менеджер.Индекс(Значение)];
		
		НоваяКоманда = Команды.Добавить(Префикс + МетаданныеЗначения.Имя);
		НоваяКоманда.Действие = "Подключаемый_УстановитьОтборПоДальнейшемуДействию";
		НоваяКоманда.Заголовок = МетаданныеЗначения.Представление();
		
		Кнопка = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), ГруппаОтборДействийПоОформлениюУведомлений);
		Кнопка.ИмяКоманды = НоваяКоманда.Имя;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоДальнейшемуДействию(Команда) Экспорт
	
	Префикс = "Отбор";
	
	ИмяДействия = Сред(Команда.Имя, СтрДлина(Префикс) + 1);
	
	ЗначениеОтбора = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияИнвентаризацииМДЛП." + ИмяДействия);
	
	Если ИнвентаризацияМДЛПКлиентСервер.ДействияПоСверкеОстатков().Найти(ЗначениеОтбора) <> Неопределено Тогда
		ИмяРеквизитаПоляОтбора           = "ДействиеПоСверкеОстатков";
		ИмяРеквизитаУстановленногоОтбора = Префикс + ИмяРеквизитаПоляОтбора;
		ИмяПодменюКнопокОтбораФормы      = Префикс + ИмяРеквизитаПоляОтбора;
	ИначеЕсли ИнвентаризацияМДЛПКлиентСервер.ДействияПоОформлениюУведомлений().Найти(ЗначениеОтбора) <> Неопределено Тогда
		ИмяРеквизитаПоляОтбора           = "ДействиеПоОформлениюУведомлений";
		ИмяРеквизитаУстановленногоОтбора = Префикс + ИмяРеквизитаПоляОтбора;
		ИмяПодменюКнопокОтбораФормы      = Префикс + ИмяРеквизитаПоляОтбора;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеОтбора = ЭтотОбъект[ИмяРеквизитаУстановленногоОтбора] Тогда
		Отбор = Неопределено;
	Иначе
		Отбор = Новый Структура(ИмяРеквизитаПоляОтбора, ЗначениеОтбора);
	КонецЕсли;
	
	Если Отбор = Неопределено Тогда
		ИнтеграцияМДЛПКлиент.СнятьОтборСтрок(Элементы.НомераУпаковок.ОтборСтрок, ИмяРеквизитаПоляОтбора);
	Иначе
		ИнтеграцияМДЛПКлиент.УстановитьОтборСтрок(Элементы.НомераУпаковок.ОтборСтрок, Отбор);
	КонецЕсли;
	
	ЭтотОбъект[ИмяРеквизитаУстановленногоОтбора] = ?(Отбор = Неопределено, Неопределено, ЗначениеОтбора);
	
	Для Каждого ЭлементКоманда Из Элементы[ИмяПодменюКнопокОтбораФормы].ПодчиненныеЭлементы Цикл
		
		Если Отбор = Неопределено Тогда
			ЭлементКоманда.Пометка = Ложь;
		Иначе
			ЭлементКоманда.Пометка = (ЭлементКоманда.ИмяКоманды = Команда.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПередИзменениемОтметкиФактическогоНаличия(Обработчик)
	
	ТекстВопроса = НСтр("ru = 'Вы уверены, что хотите снять отметку фактического наличия упаковки?'");
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросПередИзменениемОтметкиФактическогоНаличия(Ответ, Контекст) Экспорт
	
	ТекущиеДанные = Контекст.ТекущиеДанные;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		ТекущиеДанные.ФактическоеНаличие = ТекущиеДанные.ФактическоеНаличиеДоИзменения;
		Возврат;
	КонецЕсли;
	
	ИнвентаризацияМДЛПКлиентСервер.ОбработатьИзменениеФактическогоНаличияУпаковкиВСтроке(
		ТекущиеДанные,
		КэшированныеРезультатыАнализа,
		РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимСверки);
	
	ОбновитьЗаголовокПоляФактическоеНаличие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросПередУстановкойСнятиемОтметкиФактическогоНаличия(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСнятьОтметкуФактическогоНаличияНаСервере(Контекст.Отметка, КэшированныеРезультатыАнализа);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьОтметкуФактическогоНаличияНаСервере(Знач Отметка, КэшированныеРезультатыАнализа)
	
	ЭтоРежимСверки = РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимСверки;
	
	ВыделенныеСтроки = Элементы.НомераУпаковок.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки <> Неопределено И ВыделенныеСтроки.Количество() > 1 Тогда
		
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			ТекущиеДанные = Объект.НомераУпаковок.НайтиПоИдентификатору(ВыделеннаяСтрока);
			ТекущиеДанные.ФактическоеНаличие = Отметка;
			ИнвентаризацияМДЛПКлиентСервер.ОбработатьИзменениеФактическогоНаличияУпаковкиВСтроке(ТекущиеДанные, КэшированныеРезультатыАнализа, ЭтоРежимСверки);
		КонецЦикла;
		
	Иначе
		
		Префикс = "Отбор";
		
		ИмяКлючаДействиеПоСверкеОстатков        = "ДействиеПоСверкеОстатков";
		ИмяКлючаДействиеПоОформлениюУведомлений = "ДействиеПоОформлениюУведомлений";
		
		ЗаполненОтборДействийПоСверкеОстатков        = ЗначениеЗаполнено(ЭтотОбъект[Префикс + ИмяКлючаДействиеПоСверкеОстатков]);
		ЗаполненОтборДействийПоОформлениюУведомлений = ЗначениеЗаполнено(ЭтотОбъект[Префикс + ИмяКлючаДействиеПоОформлениюУведомлений]);
		
		Для Каждого СтрокаТаблицы Из Объект.НомераУпаковок Цикл
			
			Если Не ПоказыватьВсеНомераУпаковок И СтрокаТаблицы.ИдентификаторСтроки <> ЭтотОбъект["ИдентификаторТекущейСтроки"] Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗаполненОтборДействийПоСверкеОстатков И СтрокаТаблицы.ДействиеПоСверкеОстатков <> ЭтотОбъект[Префикс + ИмяКлючаДействиеПоСверкеОстатков]
			 Или ЗаполненОтборДействийПоОформлениюУведомлений И СтрокаТаблицы.ДействиеПоСверкеОстатков <> ЭтотОбъект[Префикс + ИмяКлючаДействиеПоОформлениюУведомлений] Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.ФактическоеНаличие = Отметка;
			ИнвентаризацияМДЛПКлиентСервер.ОбработатьИзменениеФактическогоНаличияУпаковкиВСтроке(СтрокаТаблицы, КэшированныеРезультатыАнализа, ЭтоРежимСверки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьЗаголовокПоляФактическоеНаличие(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеФактическогоНаличияУпаковок(КэшированныеРезультатыАнализа)
	
	Для Каждого СтрокаТаблицы Из Объект.НомераУпаковок Цикл
		
		Если СтрокаТаблицы.ФактическоеНаличие = СтрокаТаблицы.ФактическоеНаличиеДоИзменения Тогда
			Продолжить;
		КонецЕсли;
		
		ИнвентаризацияМДЛПКлиентСервер.ОбработатьИзменениеФактическогоНаличияУпаковкиВСтроке(
			СтрокаТаблицы,
			КэшированныеРезультатыАнализа,
			РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимСверки);
		
	КонецЦикла;
	
	ОбновитьЗаголовокПоляФактическоеНаличие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовокПоляФактическоеНаличие(Форма)
	
	// Использование такого подхода обусловлено тем, что сервер вызывается в минимальном количетсве случаев
	// (не явно, в случае изменения значения свойства ОтображатьВШапке).
	// Если вместо этого подхода использовать подход прямого изменения заголовка поля,
	// то каждое изменение заголовка влечет за собой вызов сервера.
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Форма.ПоказыватьВсеНомераУпаковок Тогда
		
		КоличествоФактическоеНаличие = Объект.НомераУпаковок.НайтиСтроки(Новый Структура("ФактическоеНаличие", Истина)).Количество();
		КоличествоВсего = Объект.НомераУпаковок.Количество();
		
	Иначе
		
		КоличествоФактическоеНаличие = Объект.НомераУпаковок.НайтиСтроки(Новый Структура("ФактическоеНаличие, ИдентификаторСтроки", Истина, Форма.ИдентификаторТекущейСтроки)).Количество();
		КоличествоВсего = Объект.НомераУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", Форма.ИдентификаторТекущейСтроки)).Количество();
		
	КонецЕсли;
	
	Форма.ЗаголовокКоличествоФактическоеНаличие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '(%1/%2)'"),
		Формат(КоличествоФактическоеНаличие, "ЧН=0; ЧГ=0"),
		Формат(КоличествоВсего, "ЧН=0; ЧГ=0"));
	
	
	// Переключение отображения нужно, т.к. если в табличном поле нет строк,
	// то в пользовательском режиме не происходит обновление значения совойства ПутьКДаннымШапки
	// (см. свойство ПутьКДаннымШапки элемента ГруппаНомераУпаковокНомерУпаковки).
	// По этому, если в табличном поле есть строки,
	// то в шапке таблицы отображается заголовок группы ГруппаНомераУпаковокФактическоеНаличие,
	// иначе заголовок поля НомераУпаковокФактическоеНаличие.
	Если КоличествоВсего > 0 Тогда
		Если Не Элементы.ГруппаНомераУпаковокФактическоеНаличие.ОтображатьВШапке Тогда
			Элементы.ГруппаНомераУпаковокФактическоеНаличие.ОтображатьВШапке = Истина;
			Элементы.НомераУпаковокФактическоеНаличие.ОтображатьВШапке = Ложь;
		КонецЕсли;
	Иначе
		Если Элементы.ГруппаНомераУпаковокФактическоеНаличие.ОтображатьВШапке Тогда
			Элементы.ГруппаНомераУпаковокФактическоеНаличие.ОтображатьВШапке = Ложь;
			Элементы.НомераУпаковокФактическоеНаличие.ОтображатьВШапке = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборДальнейшегоДействия(ВыбраннаяСтрокаИлиСтроки, ИмяКлюча)
	
	Если РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимПросмотра Тогда
		Текст = НСтр("ru = 'Поле недоступно для изменения'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = Новый Массив;
	Если ТипЗнч(ВыбраннаяСтрокаИлиСтроки) = Тип("Массив") Тогда
		ВыбранныеСтроки = ВыбраннаяСтрокаИлиСтроки;
	Иначе
		ВыбранныеСтроки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбраннаяСтрокаИлиСтроки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыбранныеСтроки) Тогда
		Текст = НСтр("ru = 'Нет данных для обработки'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	ЭтоДействиеПоСверкеОстатков        = ИмяКлюча = "ДействиеПоСверкеОстатков";
	ЭтоДействиеПоОформлениюУведомлений = ИмяКлюча = "ДействиеПоОформлениюУведомлений";
	
	ЭтоРежимСверки = РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимСверки;
	
	Если ЭтоРежимСверки И ЭтоДействиеПоСверкеОстатков Тогда
		Действия = ИнвентаризацияМДЛПКлиентСервер.ДействияПоСверкеОстатков();
	ИначеЕсли ЭтоДействиеПоОформлениюУведомлений Тогда
		Действия = ИнвентаризацияМДЛПКлиентСервер.ДействияПоОформлениюУведомлений();
	Иначе
		Текст = НСтр("ru = 'Поле недоступно для изменения'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	ОтработанныеРезультатыАнализа = Новый Соответствие;
	Для Каждого ТекущаяСтрока Из ВыбранныеСтроки Цикл
		
		ТекущиеДанные = Элементы.НомераУпаковок.ДанныеСтроки(ТекущаяСтрока);
		Если ТекущиеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.РезультатАнализаУпаковок) Тогда
			
			Текст = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, НСтр("ru = 'Результат инвентаризации'"), ТекущиеДанные.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.НомераУпаковок", ТекущиеДанные.НомерСтроки, "РезультатАнализаУпаковок");
			ОбщегоНазначенияКлиент.СообщитьПользователю(Текст,, Поле);
			Возврат;
			
		КонецЕсли;
		
		Если ОтработанныеРезультатыАнализа[ТекущиеДанные.РезультатАнализаУпаковок] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоДействиеПоСверкеОстатков Тогда
			СписокДоступныхДействий = ИнвентаризацияМДЛПКлиентСервер.СформироватьСписокДальнейшихДействий(ТекущиеДанные.РезультатАнализаУпаковок, "ДействияПоСверкеОстатков", КэшированныеРезультатыАнализа);
		ИначеЕсли ЭтоДействиеПоОформлениюУведомлений Тогда
			СписокДоступныхДействий = ИнвентаризацияМДЛПКлиентСервер.СформироватьСписокДальнейшихДействий(ТекущиеДанные.РезультатАнализаУпаковок, "ДействияПоОформлениюУведомлений", КэшированныеРезультатыАнализа);
		КонецЕсли;
		
		ГраницаДействий = Действия.ВГраница();
		Для Индекс = 0 По ГраницаДействий Цикл
			
			Действие = Действия[ГраницаДействий - Индекс];
			
			Если СписокДоступныхДействий.НайтиПоЗначению(Действие) = Неопределено Тогда
				Действия.Удалить(ГраницаДействий - Индекс);
			КонецЕсли;
			
		КонецЦикла;
		
		ОтработанныеРезультатыАнализа.Вставить(ТекущиеДанные.РезультатАнализаУпаковок, Истина);
		
	КонецЦикла;
	
	СписокДействий = Новый СписокЗначений;
	СписокДействий.ЗагрузитьЗначения(Действия);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ВыбраннаяСтрокаИлиСтроки", ВыбраннаяСтрокаИлиСтроки);
	Контекст.Вставить("ИмяРеквизита", ИмяКлюча);
	
	Обработчик = Новый ОписаниеОповещения("ОбработкаВыбораДальнейшегоДействия", ЭтотОбъект, Контекст);
	
	Если ТипЗнч(ВыбраннаяСтрокаИлиСтроки) = Тип("Массив") Тогда
		ПараметрыФормы = Новый Структура("СписокДействий", СписокДействий);
		ОткрытьФорму("Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.Форма.ФормаВыбораДействия", ПараметрыФормы, ЭтотОбъект,,,, Обработчик);
	Иначе
		ПоказатьВыборИзМеню(Обработчик, СписокДействий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДальнейшегоДействия(РезультатВыбора, Контекст) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = Новый Массив;
	Если ТипЗнч(Контекст.ВыбраннаяСтрокаИлиСтроки) = Тип("Массив") Тогда
		ВыбранныеСтроки = Контекст.ВыбраннаяСтрокаИлиСтроки;
	Иначе
		ВыбранныеСтроки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контекст.ВыбраннаяСтрокаИлиСтроки);
	КонецЕсли;
	
	ЭтоДействиеПоСверкеОстатков = Контекст.ИмяРеквизита = "ДействиеПоСверкеОстатков";
	Для Каждого ТекущаяСтрока Из ВыбранныеСтроки Цикл
		
		СтрокаУпаковки = Элементы.НомераУпаковок.ДанныеСтроки(ТекущаяСтрока);
		СтрокаУпаковки[Контекст.ИмяРеквизита] = РезультатВыбора.Значение;
		
		Если ЭтоДействиеПоСверкеОстатков Тогда
			ПриИзмененииДействияПоСверкеОстатков(СтрокаУпаковки);
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДействияПоСверкеОстатков(СтрокаУпаковки)
	
	Если СтрокаУпаковки.ДействиеПоСверкеОстатков = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияИнвентаризацииМДЛП.НеВыполнятьСверкуОстатков") Тогда
		Если СтрокаУпаковки.ДействиеПоОформлениюУведомлений <> ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияИнвентаризацииМДЛП.ОформлятьУведомлениеНеТребуется")
		   И СтрокаУпаковки.ДействиеПоОформлениюУведомлений <> ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияИнвентаризацииМДЛП.НеОформлятьУведомление") Тогда
			СтрокаУпаковки.ДействиеПоОформлениюУведомлений = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияИнвентаризацииМДЛП.НеОформлятьУведомление");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
