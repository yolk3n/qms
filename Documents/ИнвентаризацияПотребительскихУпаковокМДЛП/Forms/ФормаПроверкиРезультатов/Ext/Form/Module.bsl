
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеРезультатыАнализа;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Документ = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИнициализироватьРежимыОбработкиДокумента();
	
	Документ = Параметры.Документ;
	РежимОбработкиДокумента = Параметры.РежимОбработкиДокумента;
	
	ИнициализироватьОтборПоДальнейшимДействиям();
	
	УправлениеЭлементамиФормыПриСоздании();
	
	ОбновитьРезультаты();
	
	СобытияФормМДЛППереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЗаголовокПоляФактическоеНаличие();
	
	КэшированныеРезультатыАнализа = Новый Соответствие;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияФормМДЛПКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодтвердитьЗавершениеПроверки(Команда)
	
	СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораМДЛП.Завершено");
	
	Отказ = Ложь;
	ВозвращаемыйРезультат = СформироватьВозвращаемыйРезультат(ВладелецФормы.УникальныйИдентификатор, СтатусПроверки, Отказ);
	
	Если Не Отказ Тогда
		Закрыть(ВозвращаемыйРезультат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДальнейшееДействие(Команда)
	
	Если СтрЗаканчиваетсяНа(Команда.Имя, "ДействиеПоСверкеОстатков") Тогда
		ИмяКлюча = "ДействиеПоСверкеОстатков";
	ИначеЕсли СтрЗаканчиваетсяНа(Команда.Имя, "ДействиеПоОформлениюУведомлений") Тогда
		ИмяКлюча = "ДействиеПоОформлениюУведомлений";
	Иначе
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ТаблицаДанныхДокумента.ВыделенныеСтроки;
	
	ПоказатьВыборДальнейшегоДействия(ВыделенныеСтроки, ИмяКлюча);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРекомендуемыеДействия(Команда)
	
	Если РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимПросмотра Тогда
		Текст = НСтр("ru = 'Поля недоступны для изменения'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ТаблицаДанныхДокумента.ВыделенныеСтроки;
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Элементы.ТаблицаДанныхДокумента.ДанныеСтроки(ТекущаяСтрока);
		Если ТекущиеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИнвентаризацияМДЛПКлиентСервер.ОбработатьИзменениеФактическогоНаличияУпаковкиВСтроке(
			ТекущиеДанные,
			КэшированныеРезультатыАнализа,
			РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимСверки);
		
		ТекущиеДанные.ДанныеСтрокиИзменились = Истина;
		
		МодифицированностьФормы = Истина;
		
	КонецЦикла;
	
	Если МодифицированностьФормы Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьОтметкуФактическогоНаличия(Команда)
	
	Если РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимПросмотра Тогда
		Возврат;
	КонецЕсли;
	
	Отметка = СтрНачинаетсяС(Команда.Имя, "Установить");
	
	Контекст = Новый Структура;
	Контекст.Вставить("Отметка", Отметка);
	Обработчик = Новый ОписаниеОповещения("ОбработатьОтветНаВопросПередУстановкойСнятиемОтметкиФактическогоНаличия", ЭтотОбъект, Контекст);
	Если Не Отметка Тогда
		ЗадатьВопросПередИзменениемОтметкиФактическогоНаличия(Обработчик);
	Иначе
		ВыполнитьОбработкуОповещения(Обработчик, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьОтборПоДальнейшемуДействию(Команда)
	
	УстановитьОтборПоДальнейшемуДействию(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормМДЛПКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТаблицаДанныхДокументаПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОтобразитьИерархиюУпаковок", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхДокументаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ТаблицаДанныхДокументаДействиеПоСверкеОстатков Тогда
		
		ПоказатьВыборДальнейшегоДействия(ВыбраннаяСтрока, "ДействиеПоСверкеОстатков");
		
	ИначеЕсли Поле = Элементы.ТаблицаДанныхДокументаДействиеПоОформлениюУведомлений Тогда
		
		ПоказатьВыборДальнейшегоДействия(ВыбраннаяСтрока, "ДействиеПоОформлениюУведомлений");
		
	ИначеЕсли Поле = Элементы.ТаблицаДанныхДокументаРезультатАнализаУпаковок Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.РезультатАнализаУпаковок) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.РезультатАнализаУпаковок);
		ПараметрыФормы.Вставить("РежимПросмотраОписания", Истина);
		ОткрытьФорму("Справочник.ОписанияРезультатовАнализаИнвентаризируемыхУпаковокМДЛП.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Поле = Элементы.ТаблицаДанныхДокументаДокументУведомление Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументУведомление) Тогда
			ПоказатьЗначение(, ТекущиеДанные.ДокументУведомление);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхДокументаФактическоеНаличиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ТекущиеДанные", ТекущиеДанные);
	Обработчик = Новый ОписаниеОповещения("ОбработатьОтветНаВопросПередИзменениемОтметкиФактическогоНаличия", ЭтотОбъект, Контекст);
	Если Не ТекущиеДанные.ФактическоеНаличие Тогда
		ЗадатьВопросПередИзменениемОтметкиФактическогоНаличия(Обработчик);
	Иначе
		ВыполнитьОбработкуОповещения(Обработчик, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхДокументаДействиеПоСверкеОстатковПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ПриИзмененииДействияПоСверкеОстатков(ТекущиеДанные);
	
	ТекущиеДанные.ДанныеСтрокиИзменились = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхДокументаДействиеПоОформлениюУведомленийПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ДанныеСтрокиИзменились = Истина;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДанныхДокументаСтатусИБТекущееЗначение.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДанныхДокументаСтатусМДЛПТекущееЗначение.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДанныхДокументаДатаСтатусаИБТекущееЗначение.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДанныхДокументаДатаСтатусаМДЛПТекущееЗначение.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ИерархияГрупповыхУпаковокИБТекущиеЗначения.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ИерархияГрупповыхУпаковокМДЛПТекущиеЗначения.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"РежимОбработкиДокумента", "РежимСверки", ВидСравненияКомпоновкиДанных.Равно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДанныхДокументаСтатусИБДоИзменения.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДанныхДокументаСтатусМДЛПДоИзменения.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДанныхДокументаДатаСтатусаИБДоИзменения.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДанныхДокументаДатаСтатусаМДЛПДоИзменения.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ИерархияГрупповыхУпаковокИБДоИзменения.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ИерархияГрупповыхУпаковокМДЛПДоИзменения.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"РежимОбработкиДокумента", "РежимСверки", ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРежимыОбработкиДокумента()
	
	РежимыОбработкиДокументаИзменяемая = Новый Структура;
	РежимыОбработкиДокументаИзменяемая.Вставить("РежимСверки"    , "РежимСверки");
	РежимыОбработкиДокументаИзменяемая.Вставить("РежимОформления", "РежимОформления");
	РежимыОбработкиДокументаИзменяемая.Вставить("РежимПросмотра" , "РежимПросмотра");
	
	РежимыОбработкиДокумента = Новый ФиксированнаяСтруктура(РежимыОбработкиДокументаИзменяемая);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПриСоздании()
	
	РедактированиеФормыНедоступно = Не ОбщегоНазначенияКлиентСервер.РежимОтладки();
	
	ИменаЭлементовТолькоПросмотр = Новый Массив;
	ИменаЭлементовВидимость = Новый Массив;
	
	Если РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимСверки Тогда
		
		ИменаЭлементовВидимость.Добавить(Элементы.ТаблицаДанныхДокументаСтатусИБТекущееЗначение.Имя);
		ИменаЭлементовВидимость.Добавить(Элементы.ТаблицаДанныхДокументаСтатусМДЛПТекущееЗначение.Имя);
		ИменаЭлементовВидимость.Добавить(Элементы.ТаблицаДанныхДокументаДатаСтатусаИБТекущееЗначение.Имя);
		ИменаЭлементовВидимость.Добавить(Элементы.ТаблицаДанныхДокументаДатаСтатусаМДЛПТекущееЗначение.Имя);
		ИменаЭлементовВидимость.Добавить(Элементы.ИерархияГрупповыхУпаковокИБТекущиеЗначения.Имя);
		ИменаЭлементовВидимость.Добавить(Элементы.ИерархияГрупповыхУпаковокМДЛПТекущиеЗначения.Имя);
		
	ИначеЕсли РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимПросмотра Тогда
		
		ИменаЭлементовТолькоПросмотр.Добавить(Элементы.ТаблицаДанныхДокумента.Имя);
		
		ИменаЭлементовВидимость.Добавить(Элементы.ФормаПодтвердитьЗавершениеПроверки.Имя);
		
	КонецЕсли;
	
	Для Каждого ИмяЭлемента Из ИменаЭлементовТолькоПросмотр Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "ТолькоПросмотр", РедактированиеФормыНедоступно);
	КонецЦикла;
	
	Для Каждого ИмяЭлемента Из ИменаЭлементовВидимость Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", Не РедактированиеФормыНедоступно);
	КонецЦикла;
	
КонецПроцедуры

#Область ОбновлениеДанных

&НаСервере
Процедура ОбновитьРезультаты()
	
	ЭтоРежимСверки = РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимСверки;
	
	ТаблицаДанныхДокумента.Очистить();
	ГрупповыеУпаковкиМДЛПДоИзменения.Очистить();
	ГрупповыеУпаковкиИБДоИзменения.Очистить();
	ГрупповыеУпаковкиИБТекущиеЗначения.Очистить();
	ГрупповыеУпаковкиМДЛПТекущиеЗначения.Очистить();
	ИерархияГрупповыхУпаковокМДЛПДоИзменения.ПолучитьЭлементы().Очистить();
	ИерархияГрупповыхУпаковокИБДоИзменения.ПолучитьЭлементы().Очистить();
	ИерархияГрупповыхУпаковокИБТекущиеЗначения.ПолучитьЭлементы().Очистить();
	ИерархияГрупповыхУпаковокМДЛПТекущиеЗначения.ПолучитьЭлементы().Очистить();
	
	Запросы = Новый Массив;
	Запросы.Добавить(ТекстЗапросаНомераУпаковокДокумента());
	Запросы.Добавить(ТекстЗапросаТаблицаДанныхДокумента());
	Запросы.Добавить(ТекстЗапросаГрупповыеУпаковкиМДЛПДоИзменения());
	Запросы.Добавить(ТекстЗапросаГрупповыеУпаковкиИБДоИзменения());
	
	Если Не ЭтоРежимСверки Тогда
		Запросы.Добавить(ТекстЗапросаГрупповыеУпаковкиИБТекущиеЗначения());
		Запросы.Добавить(ТекстЗапросаГрупповыеУпаковкиМДЛПТекущиеЗначения());
	КонецЕсли;
	
	ОсновныеДанныеДокумента = ПодготовитьОсновныеДанныеДокумента(Документ);
	
	Запрос = Новый Запрос(СтрСоединить(Запросы, ОбщегоНазначения.РазделительПакетаЗапросов()));
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("МестоДеятельности", ОсновныеДанныеДокумента.МестоДеятельности);
	Запрос.УстановитьПараметр("ИнвентаризационнаяОпись", ОсновныеДанныеДокумента.ИнвентаризационнаяОпись);
	Запрос.УстановитьПараметр("ПустаяГрупповаяУпаковка", Метаданные.ОпределяемыеТипы.SSCC.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр("СтатусУпаковкиПустаяСсылка", Перечисления.СтатусыУпаковокМДЛП.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтатусУпаковкиВУпаковке", Перечисления.СтатусыУпаковокМДЛП.ВУпаковке);
	Запрос.УстановитьПараметр("ЭтоРежимСверки", ЭтоРежимСверки);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаДанныхДокумента.Загрузить(РезультатыЗапроса[1].Выгрузить());
	ГрупповыеУпаковкиМДЛПДоИзменения.Загрузить(РезультатыЗапроса[3].Выгрузить());
	ГрупповыеУпаковкиИБДоИзменения.Загрузить(РезультатыЗапроса[6].Выгрузить());
	
	Если Не ЭтоРежимСверки Тогда
		ГрупповыеУпаковкиИБТекущиеЗначения.Загрузить(РезультатыЗапроса[9].Выгрузить());
		ГрупповыеУпаковкиМДЛПТекущиеЗначения.Загрузить(РезультатыЗапроса[12].Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьОсновныеДанныеДокумента(Документ)
	
	ЗапрашиваемыеДанные = Новый Структура;
	ЗапрашиваемыеДанные.Вставить("МестоДеятельности");
	ЗапрашиваемыеДанные.Вставить("ИнвентаризационнаяОпись");
	
	ОсновныеДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, ЗапрашиваемыеДанные);
	
	Возврат ОсновныеДанныеДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаНомераУпаковокДокумента()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НомераУпаковокДокумента.НомерСтроки                                                     КАК НомерСтроки,
	|	НомераУпаковокДокумента.ИдентификаторСтроки                                             КАК ИдентификаторСтроки,
	|	НомераУпаковокДокумента.ФактическоеНаличие                                              КАК ФактическоеНаличие,
	|	НомераУпаковокДокумента.НомерКИЗ                                                        КАК НомерКИЗ,
	|	НомераУпаковокДокумента.КлючУпаковки                                                    КАК КлючУпаковки,
	
	|	НомераУпаковокДокумента.РезультатАнализаУпаковок                                        КАК РезультатАнализаУпаковок,
	|	НомераУпаковокДокумента.ДействиеПоСверкеОстатков                                        КАК ДействиеПоСверкеОстатков,
	|	ЕСТЬNULL(ИнвентаризированныеУпаковки.СтатусДействияПоСверкеОстатков,
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.ПустаяСсылка))    КАК СтатусДействияПоСверкеОстатков,
	|	НомераУпаковокДокумента.ДействиеПоОформлениюУведомлений                                 КАК ДействиеПоОформлениюУведомлений,
	|	ЕСТЬNULL(ИнвентаризированныеУпаковки.СтатусДействияПоОформлениюУведомлений,
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.ПустаяСсылка))    КАК СтатусДействияПоОформлениюУведомлений,
	|	ЕСТЬNULL(ИнвентаризированныеУпаковки.ДокументУведомление, НЕОПРЕДЕЛЕНО)                 КАК ДокументУведомление,
	
	|	НомераУпаковокДокумента.СтатусМДЛП                                                      КАК СтатусМДЛПДоИзменения,
	|	НомераУпаковокДокумента.СтатусИБ                                                        КАК СтатусИБДоИзменения,
	|	ЕСТЬNULL(ТекущиеДанныеУпаковок.Статус,
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка))                            КАК СтатусИБТекущееЗначение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОстаткиПотребительскихУпаковокМДЛП.НомерГрупповойУпаковки, &ПустаяГрупповаяУпаковка) <> &ПустаяГрупповаяУпаковка
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ВУпаковке)
	|		ИНАЧЕ ЕСТЬNULL(ОстаткиПотребительскихУпаковокМДЛП.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка))
	|	КОНЕЦ                                                                                   КАК СтатусМДЛПТекущееЗначение,
	
	|	НомераУпаковокДокумента.ДатаСтатусаМДЛП                                                 КАК ДатаСтатусаМДЛПДоИзменения,
	|	НомераУпаковокДокумента.ДатаСтатусаИБ                                                   КАК ДатаСтатусаИБДоИзменения,
	|	ЕСТЬNULL(ТекущиеДанныеУпаковок.ДатаСтатуса,
	|		ДАТАВРЕМЯ(1,1,1))                                                                   КАК ДатаСтатусаИБТекущееЗначение,
	|	ЕСТЬNULL(ОстаткиПотребительскихУпаковокМДЛП.ДатаСтатуса,
	|		ДАТАВРЕМЯ(1,1,1))                                                                   КАК ДатаСтатусаМДЛПТекущееЗначение,
	
	|	НомераУпаковокДокумента.НомерРодительскойУпаковкиМДЛП                                   КАК НомерРодительскойУпаковкиМДЛПДоИзменения,
	|	НомераУпаковокДокумента.НомерРодительскойУпаковкиИБ                                     КАК НомерРодительскойУпаковкиИБДоИзменения,
	|	ЕСТЬNULL(ТекущиеДанныеУпаковок.НомерГрупповойУпаковки,
	|		&ПустаяГрупповаяУпаковка)                                                           КАК НомерРодительскойУпаковкиИБТекущееЗначение,
	|	ЕСТЬNULL(ОстаткиПотребительскихУпаковокМДЛП.НомерГрупповойУпаковки,
	|		&ПустаяГрупповаяУпаковка)                                                           КАК НомерРодительскойУпаковкиМДЛПТекущееЗначение,
	
	|	НомераУпаковокДокумента.НомерВерхнеуровневойУпаковкиМДЛП                                КАК НомерВерхнеуровневойУпаковкиМДЛПДоИзменения,
	|	НомераУпаковокДокумента.НомерВерхнеуровневойУпаковкиИБ                                  КАК НомерВерхнеуровневойУпаковкиИБДоИзменения,
	|	ЕСТЬNULL(ТекущиеДанныеВерхнеуровневыхУпаковок.НомерУпаковки, &ПустаяГрупповаяУпаковка)  КАК НомерВерхнеуровневойУпаковкиИБТекущееЗначение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОстаткиГрупповыхУпаковокМДЛП.НомерВерхнеуровневойУпаковки, &ПустаяГрупповаяУпаковка) <> &ПустаяГрупповаяУпаковка
	|			ТОГДА ЕСТЬNULL(ОстаткиГрупповыхУпаковокМДЛП.НомерВерхнеуровневойУпаковки, &ПустаяГрупповаяУпаковка)
	|		ИНАЧЕ ЕСТЬNULL(ОстаткиПотребительскихУпаковокМДЛП.НомерГрупповойУпаковки, &ПустаяГрупповаяУпаковка)
	|	КОНЕЦ                                                                                   КАК НомерВерхнеуровневойУпаковкиМДЛПТекущееЗначение,
	
	|	НомераУпаковокДокумента.ДатаАктуальности                                                КАК ДатаАктуальностиДоИзменения,
	|	ЕСТЬNULL(ОстаткиПотребительскихУпаковокМДЛП.ДатаАктуальности, ДАТАВРЕМЯ(1,1,1))         КАК ДатаАктуальностиТекущееЗначение
	
	|ПОМЕСТИТЬ НомераУпаковокДокумента
	
	|ИЗ
	|	Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.НомераУпаковок КАК НомераУпаковокДокумента
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.УпаковкиМДЛП КАК ТекущиеДанныеУпаковок
	|				ЛЕВОЕ СОЕДИНЕНИЕ
	|					РегистрСведений.УпаковкиМДЛП КАК ТекущиеДанныеВерхнеуровневыхУпаковок
	|				ПО
	|					ТекущиеДанныеВерхнеуровневыхУпаковок.НомерУпаковки = ТекущиеДанныеУпаковок.ДокументРезерва
	|					И ТекущиеДанныеВерхнеуровневыхУпаковок.МестоДеятельности = &МестоДеятельности
	|		ПО
	|			ТекущиеДанныеУпаковок.НомерУпаковки = НомераУпаковокДокумента.НомерКИЗ
	|			И ТекущиеДанныеУпаковок.КлючУпаковки = НомераУпаковокДокумента.КлючУпаковки
	|			И ТекущиеДанныеУпаковок.МестоДеятельности = &МестоДеятельности
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ИнвентаризированныеУпаковкиМДЛП КАК ИнвентаризированныеУпаковки
	|		ПО
	|			ИнвентаризированныеУпаковки.НомерУпаковки = НомераУпаковокДокумента.НомерКИЗ
	|			И ИнвентаризированныеУпаковки.КлючУпаковки = НомераУпаковокДокумента.КлючУпаковки
	|			И ИнвентаризированныеУпаковки.МестоДеятельности = &МестоДеятельности
	|			И ИнвентаризированныеУпаковки.ИнвентаризационнаяОпись = &ИнвентаризационнаяОпись
	|			И ИнвентаризированныеУпаковки.ДокументИнвентаризации = &Документ
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОстаткиПотребительскихУпаковокМДЛП КАК ОстаткиПотребительскихУпаковокМДЛП
	|				ЛЕВОЕ СОЕДИНЕНИЕ
	|					РегистрСведений.ОстаткиГрупповыхУпаковокМДЛП КАК ОстаткиГрупповыхУпаковокМДЛП
	|				ПО
	|					ОстаткиГрупповыхУпаковокМДЛП.НомерУпаковки = ОстаткиПотребительскихУпаковокМДЛП.НомерГрупповойУпаковки
	|					И ОстаткиГрупповыхУпаковокМДЛП.МестоДеятельности = &МестоДеятельности
	|		ПО
	|			НЕ &ЭтоРежимСверки
	|			И ОстаткиПотребительскихУпаковокМДЛП.НомерУпаковки = НомераУпаковокДокумента.НомерКИЗ
	|			И ОстаткиПотребительскихУпаковокМДЛП.КлючУпаковки = НомераУпаковокДокумента.КлючУпаковки
	|			И ОстаткиПотребительскихУпаковокМДЛП.МестоДеятельности = &МестоДеятельности
	|ГДЕ
	|	НомераУпаковокДокумента.Ссылка = &Документ
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаТаблицаДанныхДокумента()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаДанныхДокумента.ФактическоеНаличие                                КАК ФактическоеНаличие,
	|	ТаблицаДанныхДокумента.ИдентификаторСтроки                               КАК ИдентификаторСтроки,
	|	ТаблицаДанныхДокумента.НомерСтроки                                       КАК НомерСтроки,
	|	ТаблицаДанныхДокумента.НомерКИЗ                                          КАК НомерКИЗ,
	|	ТаблицаДанныхДокумента.КлючУпаковки                                      КАК КлючУпаковки,
	
	|	ТаблицаДанныхДокумента.РезультатАнализаУпаковок                          КАК РезультатАнализаУпаковок,
	|	ТаблицаДанныхДокумента.ДействиеПоСверкеОстатков                          КАК ДействиеПоСверкеОстатков,
	|	ТаблицаДанныхДокумента.СтатусДействияПоСверкеОстатков                    КАК СтатусДействияПоСверкеОстатков,
	|	ТаблицаДанныхДокумента.ДействиеПоОформлениюУведомлений                   КАК ДействиеПоОформлениюУведомлений,
	|	ТаблицаДанныхДокумента.СтатусДействияПоОформлениюУведомлений             КАК СтатусДействияПоОформлениюУведомлений,
	|	ТаблицаДанныхДокумента.ДокументУведомление                               КАК ДокументУведомление,
	
	|	ТаблицаДанныхДокумента.СтатусМДЛПДоИзменения                             КАК СтатусМДЛПДоИзменения,
	|	ТаблицаДанныхДокумента.СтатусИБДоИзменения                               КАК СтатусИБДоИзменения,
	|	ТаблицаДанныхДокумента.СтатусИБТекущееЗначение                           КАК СтатусИБТекущееЗначение,
	|	ТаблицаДанныхДокумента.СтатусМДЛПТекущееЗначение                         КАК СтатусМДЛПТекущееЗначение,
	
	|	ТаблицаДанныхДокумента.ДатаСтатусаМДЛПДоИзменения                        КАК ДатаСтатусаМДЛПДоИзменения,
	|	ТаблицаДанныхДокумента.ДатаСтатусаИБДоИзменения                          КАК ДатаСтатусаИБДоИзменения,
	|	ТаблицаДанныхДокумента.ДатаСтатусаИБТекущееЗначение                      КАК ДатаСтатусаИБТекущееЗначение,
	|	ТаблицаДанныхДокумента.ДатаСтатусаМДЛПТекущееЗначение                    КАК ДатаСтатусаМДЛПТекущееЗначение,
	
	|	ТаблицаДанныхДокумента.НомерРодительскойУпаковкиМДЛПДоИзменения          КАК НомерРодительскойУпаковкиМДЛПДоИзменения,
	|	ТаблицаДанныхДокумента.НомерРодительскойУпаковкиИБДоИзменения            КАК НомерРодительскойУпаковкиИБДоИзменения,
	|	ТаблицаДанныхДокумента.НомерРодительскойУпаковкиИБТекущееЗначение        КАК НомерРодительскойУпаковкиИБТекущееЗначение,
	|	ТаблицаДанныхДокумента.НомерРодительскойУпаковкиМДЛПТекущееЗначение      КАК НомерРодительскойУпаковкиМДЛПТекущееЗначение,
	
	|	ТаблицаДанныхДокумента.НомерВерхнеуровневойУпаковкиМДЛПДоИзменения       КАК НомерВерхнеуровневойУпаковкиМДЛПДоИзменения,
	|	ТаблицаДанныхДокумента.НомерВерхнеуровневойУпаковкиИБДоИзменения         КАК НомерВерхнеуровневойУпаковкиИБДоИзменения,
	|	ТаблицаДанныхДокумента.НомерВерхнеуровневойУпаковкиИБТекущееЗначение     КАК НомерВерхнеуровневойУпаковкиИБТекущееЗначение,
	|	ТаблицаДанныхДокумента.НомерВерхнеуровневойУпаковкиМДЛПТекущееЗначение   КАК НомерВерхнеуровневойУпаковкиМДЛПТекущееЗначение,
	
	|	ТаблицаДанныхДокумента.ДатаАктуальностиДоИзменения                       КАК ДатаАктуальностиДоИзменения,
	|	ТаблицаДанныхДокумента.ДатаАктуальностиТекущееЗначение                   КАК ДатаАктуальностиТекущееЗначение,
	
	|	ТаблицаДанныхДокумента.ФактическоеНаличие                                КАК ФактическоеНаличиеДоИзменения
	
	|ИЗ
	|	НомераУпаковокДокумента КАК ТаблицаДанныхДокумента
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаГрупповыеУпаковкиМДЛПДоИзменения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НомераУпаковокДокумента.НомерВерхнеуровневойУпаковкиМДЛПДоИзменения КАК НомерВерхнеуровневойУпаковкиМДЛПДоИзменения
	|ПОМЕСТИТЬ НомераВерхнеуровневыхУпаковокМДЛПДокументаДоИзменения
	|ИЗ
	|	НомераУпаковокДокумента КАК НомераУпаковокДокумента
	|ГДЕ
	|	НомераУпаковокДокумента.НомерВерхнеуровневойУпаковкиМДЛПДоИзменения <> &ПустаяГрупповаяУпаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Верхнеуровневые групповые упаковки по данным МДЛП до изменения
	|ВЫБРАТЬ
	|	ИерархияГрупповыхУпаковокМДЛП.НомерУпаковки                          КАК НомерУпаковки,
	|	ИерархияГрупповыхУпаковокМДЛП.КлючУпаковки                           КАК КлючУпаковки,
	|	ИерархияГрупповыхУпаковокМДЛП.Статус                                 КАК Статус,
	|	ИерархияГрупповыхУпаковокМДЛП.ДатаСтатуса                            КАК ДатаСтатуса,
	|	ИерархияГрупповыхУпаковокМДЛП.НомерРодительскойУпаковки              КАК НомерГрупповойУпаковки
	|ИЗ
	|	Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.ИерархияГрупповыхУпаковокМДЛП КАК ИерархияГрупповыхУпаковокМДЛП
	|ГДЕ
	|	ИерархияГрупповыхУпаковокМДЛП.Ссылка = &Документ
	|	И ИерархияГрупповыхУпаковокМДЛП.НомерУпаковки В (ВЫБРАТЬ Т.НомерВерхнеуровневойУпаковкиМДЛПДоИзменения ИЗ НомераВерхнеуровневыхУпаковокМДЛПДокументаДоИзменения КАК Т)
	|
	|ОБЪЕДИНИТЬ
	|
	// Вложенные групповые упаковки по данным МДЛП до изменения
	|ВЫБРАТЬ
	|	ИерархияГрупповыхУпаковокМДЛП.НомерУпаковки                 КАК НомерУпаковки,
	|	ИерархияГрупповыхУпаковокМДЛП.КлючУпаковки                  КАК КлючУпаковки,
	|	ИерархияГрупповыхУпаковокМДЛП.Статус                        КАК Статус,
	|	ИерархияГрупповыхУпаковокМДЛП.ДатаСтатуса                   КАК ДатаСтатуса,
	|	ИерархияГрупповыхУпаковокМДЛП.НомерРодительскойУпаковки     КАК НомерГрупповойУпаковки
	|ИЗ
	|	Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.ИерархияГрупповыхУпаковокМДЛП КАК ИерархияГрупповыхУпаковокМДЛП
	|ГДЕ
	|	ИерархияГрупповыхУпаковокМДЛП.Ссылка = &Документ
	|	И ИерархияГрупповыхУпаковокМДЛП.НомерВерхнеуровневойУпаковки В (ВЫБРАТЬ Т.НомерВерхнеуровневойУпаковкиМДЛПДоИзменения ИЗ НомераВерхнеуровневыхУпаковокМДЛПДокументаДоИзменения КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НомераВерхнеуровневыхУпаковокМДЛПДокументаДоИзменения
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаГрупповыеУпаковкиИБДоИзменения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НомераУпаковокДокумента.НомерВерхнеуровневойУпаковкиИБДоИзменения КАК НомерВерхнеуровневойУпаковкиИБДоИзменения
	|ПОМЕСТИТЬ НомераВерхнеуровневыхУпаковокИБДокументаДоИзменения
	|ИЗ
	|	НомераУпаковокДокумента КАК НомераУпаковокДокумента
	|ГДЕ
	|	НомераУпаковокДокумента.НомерВерхнеуровневойУпаковкиИБДоИзменения <> &ПустаяГрупповаяУпаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Верхнеуровневые групповые упаковки по данным ИБ до изменения
	|ВЫБРАТЬ
	|	ИерархияГрупповыхУпаковокИБ.НомерУпаковки                          КАК НомерУпаковки,
	|	ИерархияГрупповыхУпаковокИБ.КлючУпаковки                           КАК КлючУпаковки,
	|	ИерархияГрупповыхУпаковокИБ.Статус                                 КАК Статус,
	|	ИерархияГрупповыхУпаковокИБ.ДатаСтатуса                            КАК ДатаСтатуса,
	|	ИерархияГрупповыхУпаковокИБ.НомерРодительскойУпаковки              КАК НомерГрупповойУпаковки
	|ИЗ
	|	Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.ИерархияГрупповыхУпаковокИБ КАК ИерархияГрупповыхУпаковокИБ
	|ГДЕ
	|	ИерархияГрупповыхУпаковокИБ.Ссылка = &Документ
	|	И ИерархияГрупповыхУпаковокИБ.НомерУпаковки В (ВЫБРАТЬ Т.НомерВерхнеуровневойУпаковкиИБДоИзменения ИЗ НомераВерхнеуровневыхУпаковокИБДокументаДоИзменения КАК Т)
	|
	|ОБЪЕДИНИТЬ
	|
	// Вложенные групповые упаковки по данным ИБ до изменения
	|ВЫБРАТЬ
	|	ИерархияГрупповыхУпаковокИБ.НомерУпаковки                 КАК НомерУпаковки,
	|	ИерархияГрупповыхУпаковокИБ.КлючУпаковки                  КАК КлючУпаковки,
	|	ИерархияГрупповыхУпаковокИБ.Статус                        КАК Статус,
	|	ИерархияГрупповыхУпаковокИБ.ДатаСтатуса                   КАК ДатаСтатуса,
	|	ИерархияГрупповыхУпаковокИБ.НомерРодительскойУпаковки     КАК НомерГрупповойУпаковки
	|ИЗ
	|	Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.ИерархияГрупповыхУпаковокИБ КАК ИерархияГрупповыхУпаковокИБ
	|ГДЕ
	|	ИерархияГрупповыхУпаковокИБ.Ссылка = &Документ
	|	И ИерархияГрупповыхУпаковокИБ.НомерВерхнеуровневойУпаковки В (ВЫБРАТЬ Т.НомерВерхнеуровневойУпаковкиИБДоИзменения ИЗ НомераВерхнеуровневыхУпаковокИБДокументаДоИзменения КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НомераВерхнеуровневыхУпаковокИБДокументаДоИзменения
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаГрупповыеУпаковкиИБТекущиеЗначения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НомераУпаковокДокумента.НомерВерхнеуровневойУпаковкиИБТекущееЗначение КАК НомерВерхнеуровневойУпаковкиИБТекущееЗначение
	|ПОМЕСТИТЬ НомераВерхнеуровневыхУпаковокИБДокументаТекущееЗначение
	|ИЗ
	|	НомераУпаковокДокумента КАК НомераУпаковокДокумента
	|ГДЕ
	|	НомераУпаковокДокумента.НомерВерхнеуровневойУпаковкиИБТекущееЗначение <> &ПустаяГрупповаяУпаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Верхнеуровневые групповые упаковки по данным ИБ текущие значения
	|ВЫБРАТЬ
	|	ТекущиеДанныеУпаковок.НомерУпаковки            КАК НомерУпаковки,
	|	ТекущиеДанныеУпаковок.КлючУпаковки             КАК КлючУпаковки,
	|	ВЫБОР
	|		КОГДА ТекущиеДанныеУпаковок.ДокументРезерва = &Документ
	|			ТОГДА ТекущиеДанныеУпаковок.ИсходныйСтатус
	|		ИНАЧЕ ТекущиеДанныеУпаковок.Статус
	|	КОНЕЦ                                          КАК Статус,
	|	ТекущиеДанныеУпаковок.ДатаСтатуса              КАК ДатаСтатуса,
	|	ТекущиеДанныеУпаковок.НомерГрупповойУпаковки   КАК НомерГрупповойУпаковки
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК ТекущиеДанныеУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			НомераВерхнеуровневыхУпаковокИБДокументаТекущееЗначение КАК НомераУпаковокДокумента
	|		ПО
	|			ТекущиеДанныеУпаковок.НомерУпаковки = НомераУпаковокДокумента.НомерВерхнеуровневойУпаковкиИБТекущееЗначение
	|ГДЕ
	|	ТекущиеДанныеУпаковок.МестоДеятельности = &МестоДеятельности
	|	И ТекущиеДанныеУпаковок.ГрупповаяУпаковка
	|
	|ОБЪЕДИНИТЬ
	|
	// Вложенные групповые упаковки по данным ИБ текущие значения
	|ВЫБРАТЬ
	|	ТекущиеДанныеУпаковок.НомерУпаковки            КАК НомерУпаковки,
	|	ТекущиеДанныеУпаковок.КлючУпаковки             КАК КлючУпаковки,
	|	ВЫБОР
	|		КОГДА ТекущиеДанныеУпаковок.ДокументРезерва = &Документ
	|			ТОГДА ТекущиеДанныеУпаковок.ИсходныйСтатус
	|		ИНАЧЕ ТекущиеДанныеУпаковок.Статус
	|	КОНЕЦ                                          КАК Статус,
	|	ТекущиеДанныеУпаковок.ДатаСтатуса              КАК ДатаСтатуса,
	|	ТекущиеДанныеУпаковок.НомерГрупповойУпаковки   КАК НомерГрупповойУпаковки
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК ТекущиеДанныеУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			НомераВерхнеуровневыхУпаковокИБДокументаТекущееЗначение КАК НомераУпаковокДокумента
	|		ПО
	|			ТекущиеДанныеУпаковок.ДокументРезерва = НомераУпаковокДокумента.НомерВерхнеуровневойУпаковкиИБТекущееЗначение
	|ГДЕ
	|	ТекущиеДанныеУпаковок.МестоДеятельности = &МестоДеятельности
	|	И ТекущиеДанныеУпаковок.ГрупповаяУпаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НомераВерхнеуровневыхУпаковокИБДокументаТекущееЗначение
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаГрупповыеУпаковкиМДЛПТекущиеЗначения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НомераУпаковокДокумента.НомерВерхнеуровневойУпаковкиМДЛПТекущееЗначение КАК НомерВерхнеуровневойУпаковкиМДЛПТекущееЗначение
	|ПОМЕСТИТЬ НомераВерхнеуровневыхУпаковокМДЛПДокументаТекущееЗначение
	|ИЗ
	|	НомераУпаковокДокумента КАК НомераУпаковокДокумента
	|ГДЕ
	|	НомераУпаковокДокумента.НомерВерхнеуровневойУпаковкиМДЛПТекущееЗначение <> &ПустаяГрупповаяУпаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Верхнеуровневые групповые упаковки по данным МДЛП текущие значения
	|ВЫБРАТЬ
	|	ОстаткиГрупповыхУпаковокМДЛП.НомерУпаковки            КАК НомерУпаковки,
	|	ОстаткиГрупповыхУпаковокМДЛП.КлючУпаковки             КАК КлючУпаковки,
	|	ОстаткиГрупповыхУпаковокМДЛП.Статус                   КАК Статус,
	|	ОстаткиГрупповыхУпаковокМДЛП.ДатаСтатуса              КАК ДатаСтатуса,
	|	ОстаткиГрупповыхУпаковокМДЛП.НомерГрупповойУпаковки   КАК НомерГрупповойУпаковки
	|ИЗ
	|	РегистрСведений.ОстаткиГрупповыхУпаковокМДЛП КАК ОстаткиГрупповыхУпаковокМДЛП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			НомераВерхнеуровневыхУпаковокМДЛПДокументаТекущееЗначение КАК НомераУпаковокДокумента
	|		ПО
	|			ОстаткиГрупповыхУпаковокМДЛП.НомерУпаковки = НомераУпаковокДокумента.НомерВерхнеуровневойУпаковкиМДЛПТекущееЗначение
	|ГДЕ
	|	ОстаткиГрупповыхУпаковокМДЛП.МестоДеятельности = &МестоДеятельности
	|
	|ОБЪЕДИНИТЬ
	|
	// Вложенные групповые упаковки по данным МДЛП текущие значения
	|ВЫБРАТЬ
	|	ОстаткиГрупповыхУпаковокМДЛП.НомерУпаковки            КАК НомерУпаковки,
	|	ОстаткиГрупповыхУпаковокМДЛП.КлючУпаковки             КАК КлючУпаковки,
	|	&СтатусУпаковкиВУпаковке                              КАК Статус,
	|	ОстаткиГрупповыхУпаковокМДЛП.ДатаСтатуса              КАК ДатаСтатуса,
	|	ОстаткиГрупповыхУпаковокМДЛП.НомерГрупповойУпаковки   КАК НомерГрупповойУпаковки
	|ИЗ
	|	РегистрСведений.ОстаткиГрупповыхУпаковокМДЛП КАК ОстаткиГрупповыхУпаковокМДЛП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			НомераВерхнеуровневыхУпаковокМДЛПДокументаТекущееЗначение КАК НомераУпаковокДокумента
	|		ПО
	|			ОстаткиГрупповыхУпаковокМДЛП.НомерВерхнеуровневойУпаковки = НомераУпаковокДокумента.НомерВерхнеуровневойУпаковкиМДЛПТекущееЗначение
	|ГДЕ
	|	ОстаткиГрупповыхУпаковокМДЛП.МестоДеятельности = &МестоДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НомераВерхнеуровневыхУпаковокМДЛПДокументаТекущееЗначение
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ФормированиеВозвращаемыхДанных

&НаСервере
Функция СформироватьВозвращаемыйРезультат(УникальныйИдентификаторФормыВладельца, СтатусПроверки, Отказ)
	
	Если РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимПросмотра Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДанныеСтрокиИзменились", Истина);
	
	Колонки = Новый Массив;
	Колонки.Добавить("НомерСтроки");
	Колонки.Добавить("ФактическоеНаличие");
	Колонки.Добавить("ФактическоеНаличиеДоИзменения");
	Колонки.Добавить("РезультатАнализаУпаковок");
	Колонки.Добавить("ДействиеПоОформлениюУведомлений");
	
	Если РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимСверки Тогда
		Колонки.Добавить("ДействиеПоСверкеОстатков");
	КонецЕсли;
	
	ДанныеРезультатовПроверки = ТаблицаДанныхДокумента.Выгрузить(Отбор, СтрСоединить(Колонки, ","));
	
	ВозвращаемыйРезультат = Новый Структура;
	ВозвращаемыйРезультат.Вставить("СтатусПроверки", СтатусПроверки);
	ВозвращаемыйРезультат.Вставить("ДанныеРезультатовПроверки", ДанныеРезультатовПроверки);
	
	ПроверитьВозвращаемыйРезультат(ВозвращаемыйРезультат, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Новый ФиксированнаяСтруктура(ВозвращаемыйРезультат), УникальныйИдентификаторФормыВладельца);
	
КонецФункции

&НаСервере
Процедура ПроверитьВозвращаемыйРезультат(ВозвращаемыйРезультат, Отказ)
	
	МаксимальноеКоличествоСообщений = 10;
	НомерСообщения = 0;
	Для Каждого СтрокаУпаковки Из ВозвращаемыйРезультат.ДанныеРезультатовПроверки Цикл
		
		ЕстьОшибки = Ложь;
		
		Если РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимСверки И Не ЗначениеЗаполнено(СтрокаУпаковки.ДействиеПоСверкеОстатков) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Действие по сверке остатков'"), СтрокаУпаковки.НомерСтроки, НСтр("ru = 'Данные документа'"));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТаблицаДанныхДокумента", СтрокаУпаковки.НомерСтроки, "ДействиеПоСверкеОстатков");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, ЕстьОшибки);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаУпаковки.ДействиеПоОформлениюУведомлений) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Действие по оформлению уведомлений'"), СтрокаУпаковки.НомерСтроки, НСтр("ru = 'Данные документа'"));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТаблицаДанныхДокумента", СтрокаУпаковки.НомерСтроки, "ДействиеПоОформлениюУведомлений");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, ЕстьОшибки);
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			Отказ = Истина;
			НомерСообщения = НомерСообщения + 1;
			Если НомерСообщения > МаксимальноеКоличествоСообщений Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru ='Показаны первые %1 сообщений об ошибках.'"),
					МаксимальноеКоличествоСообщений);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтображениеИерархииУпаковок

&НаКлиенте
Процедура ОтобразитьИерархиюУпаковок()
	
	ТекущаяСтрока = Элементы.ТаблицаДанныхДокумента.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьИерархиюУпаковокНаСервере(ТекущаяСтрока);
	РазвернутьИерархиюУпаковок();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИерархиюУпаковокНаСервере(ТекущаяСтрока)
	
	ТекущиеДанные = ТаблицаДанныхДокумента.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ИерархияГрупповыхУпаковокМДЛПДоИзменения.ПолучитьЭлементы().Очистить();
	Если ЗначениеЗаполнено(ТекущиеДанные.НомерРодительскойУпаковкиМДЛПДоИзменения) Тогда
		ЗаполнитьДеревоИерархииУпаковок(ИерархияГрупповыхУпаковокМДЛПДоИзменения, ГрупповыеУпаковкиМДЛПДоИзменения, ТекущиеДанные.НомерРодительскойУпаковкиМДЛПДоИзменения);
	КонецЕсли;
	
	ИерархияГрупповыхУпаковокИБДоИзменения.ПолучитьЭлементы().Очистить();
	Если ЗначениеЗаполнено(ТекущиеДанные.НомерРодительскойУпаковкиИБДоИзменения) Тогда
		ЗаполнитьДеревоИерархииУпаковок(ИерархияГрупповыхУпаковокИБДоИзменения, ГрупповыеУпаковкиИБДоИзменения, ТекущиеДанные.НомерРодительскойУпаковкиИБДоИзменения);
	КонецЕсли;
	
	ИерархияГрупповыхУпаковокИБТекущиеЗначения.ПолучитьЭлементы().Очистить();
	Если ЗначениеЗаполнено(ТекущиеДанные.НомерРодительскойУпаковкиИБТекущееЗначение) Тогда
		ЗаполнитьДеревоИерархииУпаковок(ИерархияГрупповыхУпаковокИБТекущиеЗначения, ГрупповыеУпаковкиИБТекущиеЗначения, ТекущиеДанные.НомерРодительскойУпаковкиИБТекущееЗначение);
	КонецЕсли;
	
	ИерархияГрупповыхУпаковокМДЛПТекущиеЗначения.ПолучитьЭлементы().Очистить();
	Если ЗначениеЗаполнено(ТекущиеДанные.НомерРодительскойУпаковкиМДЛПТекущееЗначение) Тогда
		ЗаполнитьДеревоИерархииУпаковок(ИерархияГрупповыхУпаковокМДЛПТекущиеЗначения, ГрупповыеУпаковкиМДЛПТекущиеЗначения, ТекущиеДанные.НомерРодительскойУпаковкиМДЛПТекущееЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоИерархииУпаковок(Иерархия, ТаблицаУпаковок, НомерГрупповойУпаковки)
	
	ЭлементыИерархии = Иерархия.ПолучитьЭлементы();
	
	НайденныеСтроки = ТаблицаУпаковок.НайтиСтроки(Новый Структура("НомерУпаковки", НомерГрупповойУпаковки));
	
	ПодчиненныеСтроки = Новый Соответствие;
	
	ТекущийРодитель = Неопределено;
	Пока НайденныеСтроки.Количество() > 0 Цикл
		
		СтрокаТаблицы = НайденныеСтроки[0];
		НайденныеСтроки.Удалить(0);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НомерГрупповойУпаковки) Тогда
			// Получаем родительские строки пока в текущей строке заполнено значение НомерГрупповойУпаковки.
			НайденныеРодительскиеСтроки = ТаблицаУпаковок.НайтиСтроки(Новый Структура("НомерУпаковки", СтрокаТаблицы.НомерГрупповойУпаковки));
			Если НайденныеРодительскиеСтроки.Количество() > 0 Тогда
				
				РодительскаяСтрока = НайденныеРодительскиеСтроки[0];
				НайденныеСтроки.Добавить(РодительскаяСтрока);
				
				ПодчиненныеСтроки.Вставить(СтрокаТаблицы.НомерГрупповойУпаковки, СтрокаТаблицы);
				
			КонецЕсли;
		Иначе
			// Когда значение НомерГрупповойУпаковки не заполнено считаем, что это верхнеуровневая упаковка
			// и добавляем ПодчиненныеСтроки в иерархию.
			Пока СтрокаТаблицы <> Неопределено Цикл
				ЭлементИерархии = ЭлементыИерархии.Добавить();
				ЗаполнитьЗначенияСвойств(ЭлементИерархии, СтрокаТаблицы);
				СтрокаТаблицы = ПодчиненныеСтроки[СтрокаТаблицы.НомерУпаковки];
				ЭлементыИерархии = ЭлементИерархии.ПолучитьЭлементы();
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьИерархиюУпаковок()
	
	Если Элементы.ИерархияГрупповыхУпаковокМДЛПДоИзменения.Видимость Тогда
		Строки = ИерархияГрупповыхУпаковокМДЛПДоИзменения.ПолучитьЭлементы();
		Для Каждого Строка Из Строки Цикл
			Элементы.ИерархияГрупповыхУпаковокМДЛПДоИзменения.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
	Если Элементы.ИерархияГрупповыхУпаковокИБДоИзменения.Видимость Тогда
		Строки = ИерархияГрупповыхУпаковокИБДоИзменения.ПолучитьЭлементы();
		Для Каждого Строка Из Строки Цикл
			Элементы.ИерархияГрупповыхУпаковокИБДоИзменения.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
	Если Элементы.ИерархияГрупповыхУпаковокИБТекущиеЗначения.Видимость Тогда
		Строки = ИерархияГрупповыхУпаковокИБТекущиеЗначения.ПолучитьЭлементы();
		Для Каждого Строка Из Строки Цикл
			Элементы.ИерархияГрупповыхУпаковокИБТекущиеЗначения.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
	Если Элементы.ИерархияГрупповыхУпаковокМДЛПТекущиеЗначения.Видимость Тогда
		Строки = ИерархияГрупповыхУпаковокМДЛПТекущиеЗначения.ПолучитьЭлементы();
		Для Каждого Строка Из Строки Цикл
			Элементы.ИерархияГрупповыхУпаковокМДЛПТекущиеЗначения.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРезультатамиИДальнейшимиДействиямиИнвентаризации

&НаСервере
Процедура ИнициализироватьОтборПоДальнейшимДействиям() Экспорт
	
	Менеджер = Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП;
	ОбъектМетаданных = Метаданные.Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП;
	
	Префикс = "Отбор";
	
	ИмяКлючаДействиеПоСверкеОстатков        = "ДействиеПоСверкеОстатков";
	ИмяКлючаДействиеПоОформлениюУведомлений = "ДействиеПоОформлениюУведомлений";
	
	// Добавление реквизитов.
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Префикс + ИмяКлючаДействиеПоСверкеОстатков, Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияИнвентаризацииМДЛП")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Префикс + ИмяКлючаДействиеПоОформлениюУведомлений, Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияИнвентаризацииМДЛП")));
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавление команд и кнопок отбора.
	ГруппаОтборДействийПоСверкеОстатков = Элементы.Добавить(Префикс + ИмяКлючаДействиеПоСверкеОстатков, Тип("ГруппаФормы"), Элементы.ОтборПоДействию);
	ГруппаОтборДействийПоСверкеОстатков.Вид = ВидГруппыФормы.Подменю;
	ГруппаОтборДействийПоСверкеОстатков.Заголовок = НСтр("ru = 'Отбор действий по сверке остатков'");
	Для Каждого Значение Из ИнвентаризацияМДЛПКлиентСервер.ДействияПоСверкеОстатков() Цикл
		
		МетаданныеЗначения = ОбъектМетаданных.ЗначенияПеречисления[Менеджер.Индекс(Значение)];
		
		НоваяКоманда = Команды.Добавить(Префикс + МетаданныеЗначения.Имя);
		НоваяКоманда.Действие = "Подключаемый_УстановитьОтборПоДальнейшемуДействию";
		НоваяКоманда.Заголовок = МетаданныеЗначения.Представление();
		
		Кнопка = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), ГруппаОтборДействийПоСверкеОстатков);
		Кнопка.ИмяКоманды = НоваяКоманда.Имя;
		
	КонецЦикла;
	
	ГруппаОтборДействийПоОформлениюУведомлений = Элементы.Добавить(Префикс + ИмяКлючаДействиеПоОформлениюУведомлений, Тип("ГруппаФормы"), Элементы.ОтборПоДействию);
	ГруппаОтборДействийПоОформлениюУведомлений.Вид = ВидГруппыФормы.Подменю;
	ГруппаОтборДействийПоОформлениюУведомлений.Заголовок = НСтр("ru = 'Отбор действий по оформлению уведомлений'");
	Для Каждого Значение Из ИнвентаризацияМДЛПКлиентСервер.ДействияПоОформлениюУведомлений() Цикл
		
		МетаданныеЗначения = ОбъектМетаданных.ЗначенияПеречисления[Менеджер.Индекс(Значение)];
		
		НоваяКоманда = Команды.Добавить(Префикс + МетаданныеЗначения.Имя);
		НоваяКоманда.Действие = "Подключаемый_УстановитьОтборПоДальнейшемуДействию";
		НоваяКоманда.Заголовок = МетаданныеЗначения.Представление();
		
		Кнопка = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), ГруппаОтборДействийПоОформлениюУведомлений);
		Кнопка.ИмяКоманды = НоваяКоманда.Имя;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоДальнейшемуДействию(Команда) Экспорт
	
	Префикс = "Отбор";
	
	ИмяДействия = Сред(Команда.Имя, СтрДлина(Префикс) + 1);
	
	ЗначениеОтбора = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияИнвентаризацииМДЛП." + ИмяДействия);
	
	Если ИнвентаризацияМДЛПКлиентСервер.ДействияПоСверкеОстатков().Найти(ЗначениеОтбора) <> Неопределено Тогда
		ИмяРеквизитаПоляОтбора           = "ДействиеПоСверкеОстатков";
		ИмяРеквизитаУстановленногоОтбора = Префикс + ИмяРеквизитаПоляОтбора;
		ИмяПодменюКнопокОтбораФормы      = Префикс + ИмяРеквизитаПоляОтбора;
	ИначеЕсли ИнвентаризацияМДЛПКлиентСервер.ДействияПоОформлениюУведомлений().Найти(ЗначениеОтбора) <> Неопределено Тогда
		ИмяРеквизитаПоляОтбора           = "ДействиеПоОформлениюУведомлений";
		ИмяРеквизитаУстановленногоОтбора = Префикс + ИмяРеквизитаПоляОтбора;
		ИмяПодменюКнопокОтбораФормы      = Префикс + ИмяРеквизитаПоляОтбора;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеОтбора = ЭтотОбъект[ИмяРеквизитаУстановленногоОтбора] Тогда
		Отбор = Неопределено;
	Иначе
		Отбор = Новый Структура(ИмяРеквизитаПоляОтбора, ЗначениеОтбора);
	КонецЕсли;
	
	Если Отбор = Неопределено Тогда
		ИнтеграцияМДЛПКлиент.СнятьОтборСтрок(Элементы.ТаблицаДанныхДокумента.ОтборСтрок, ИмяРеквизитаПоляОтбора);
	Иначе
		ИнтеграцияМДЛПКлиент.УстановитьОтборСтрок(Элементы.ТаблицаДанныхДокумента.ОтборСтрок, Отбор);
	КонецЕсли;
	
	ЭтотОбъект[ИмяРеквизитаУстановленногоОтбора] = ?(Отбор = Неопределено, Неопределено, ЗначениеОтбора);
	
	Для Каждого ЭлементКоманда Из Элементы[ИмяПодменюКнопокОтбораФормы].ПодчиненныеЭлементы Цикл
		
		Если Отбор = Неопределено Тогда
			ЭлементКоманда.Пометка = Ложь;
		Иначе
			ЭлементКоманда.Пометка = (ЭлементКоманда.ИмяКоманды = Команда.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросПередИзменениемОтметкиФактическогоНаличия(Обработчик)
	
	ТекстВопроса = НСтр("ru = 'Вы уверены, что хотите снять отметку фактического наличия упаковки?'");
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросПередИзменениемОтметкиФактическогоНаличия(Ответ, Контекст) Экспорт
	
	ТекущиеДанные = Контекст.ТекущиеДанные;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		ТекущиеДанные.ФактическоеНаличие = ТекущиеДанные.ФактическоеНаличиеДоИзменения;
		Возврат;
	КонецЕсли;
	
	ИнвентаризацияМДЛПКлиентСервер.ОбработатьИзменениеФактическогоНаличияУпаковкиВСтроке(
		ТекущиеДанные,
		КэшированныеРезультатыАнализа,
		РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимСверки);
	
	ОбновитьЗаголовокПоляФактическоеНаличие();
	
	ТекущиеДанные.ДанныеСтрокиИзменились = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросПередУстановкойСнятиемОтметкиФактическогоНаличия(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСнятьОтметкуФактическогоНаличияНаСервере(Контекст.Отметка, КэшированныеРезультатыАнализа);
	
	ОбновитьЗаголовокПоляФактическоеНаличие();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьОтметкуФактическогоНаличияНаСервере(Знач Отметка, КэшированныеРезультатыАнализа)
	
	ЭтоРежимСверки = РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимСверки;
	
	ВыделенныеСтроки = Элементы.ТаблицаДанныхДокумента.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки <> Неопределено И ВыделенныеСтроки.Количество() > 1 Тогда
		
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			ТекущиеДанные = ТаблицаДанныхДокумента.НайтиПоИдентификатору(ВыделеннаяСтрока);
			ТекущиеДанные.ФактическоеНаличие = Отметка;
			ТекущиеДанные.ДанныеСтрокиИзменились = Истина;
			ИнвентаризацияМДЛПКлиентСервер.ОбработатьИзменениеФактическогоНаличияУпаковкиВСтроке(ТекущиеДанные, КэшированныеРезультатыАнализа, ЭтоРежимСверки);
		КонецЦикла;
		
	Иначе
		
		ИмяКлючаДействиеПоСверкеОстатков        = "ДействиеПоСверкеОстатков";
		ИмяКлючаДействиеПоОформлениюУведомлений = "ДействиеПоОформлениюУведомлений";
		
		ЗаполненОтборДействийПоСверкеОстатков        = ЗначениеЗаполнено(ЭтотОбъект["Отбор" + ИмяКлючаДействиеПоСверкеОстатков]);
		ЗаполненОтборДействийПоОформлениюУведомлений = ЗначениеЗаполнено(ЭтотОбъект["Отбор" + ИмяКлючаДействиеПоОформлениюУведомлений]);
		
		Для Каждого ТекущиеДанные Из ТаблицаДанныхДокумента Цикл
			
			Если ЗаполненОтборДействийПоСверкеОстатков И ТекущиеДанные.ДействиеПоСверкеОстатков <> ЭтотОбъект["Отбор" + ИмяКлючаДействиеПоСверкеОстатков]
			 Или ЗаполненОтборДействийПоОформлениюУведомлений И ТекущиеДанные.ДействиеПоСверкеОстатков <> ЭтотОбъект["Отбор" + ИмяКлючаДействиеПоОформлениюУведомлений] Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущиеДанные.ФактическоеНаличие = Отметка;
			ТекущиеДанные.ДанныеСтрокиИзменились = Истина;
			ИнвентаризацияМДЛПКлиентСервер.ОбработатьИзменениеФактическогоНаличияУпаковкиВСтроке(ТекущиеДанные, КэшированныеРезультатыАнализа, ЭтоРежимСверки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокПоляФактическоеНаличие()
	
	// Использование такого подхода обусловлено тем, что сервер не вызывается.
	
	КоличествоФактическоеНаличие = ТаблицаДанныхДокумента.НайтиСтроки(Новый Структура("ФактическоеНаличие", Истина)).Количество();
	КоличествоВсего = ТаблицаДанныхДокумента.Количество();
	
	ЗаголовокКоличествоФактическоеНаличие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '(%1/%2)'"),
		Формат(КоличествоФактическоеНаличие, "ЧН=0; ЧГ=0"),
		Формат(КоличествоВсего, "ЧН=0; ЧГ=0"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборДальнейшегоДействия(ВыбраннаяСтрокаИлиСтроки, ИмяКлюча)
	
	Если РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимПросмотра Тогда
		Текст = НСтр("ru = 'Поле недоступно для изменения'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = Новый Массив;
	Если ТипЗнч(ВыбраннаяСтрокаИлиСтроки) = Тип("Массив") Тогда
		ВыбранныеСтроки = ВыбраннаяСтрокаИлиСтроки;
	Иначе
		ВыбранныеСтроки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбраннаяСтрокаИлиСтроки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыбранныеСтроки) Тогда
		Текст = НСтр("ru = 'Нет данных для обработки'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	ЭтоДействиеПоСверкеОстатков        = ИмяКлюча = "ДействиеПоСверкеОстатков";
	ЭтоДействиеПоОформлениюУведомлений = ИмяКлюча = "ДействиеПоОформлениюУведомлений";
	
	ЭтоРежимСверки = РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимСверки;
	
	Если ЭтоРежимСверки И ЭтоДействиеПоСверкеОстатков Тогда
		Действия = ИнвентаризацияМДЛПКлиентСервер.ДействияПоСверкеОстатков();
	ИначеЕсли ЭтоДействиеПоОформлениюУведомлений Тогда
		Действия = ИнвентаризацияМДЛПКлиентСервер.ДействияПоОформлениюУведомлений();
	Иначе
		Текст = НСтр("ru = 'Поле недоступно для изменения'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	ОтработанныеРезультатыАнализа = Новый Соответствие;
	Для Каждого ТекущаяСтрока Из ВыбранныеСтроки Цикл
		
		ТекущиеДанные = Элементы.ТаблицаДанныхДокумента.ДанныеСтроки(ТекущаяСтрока);
		Если ТекущиеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.РезультатАнализаУпаковок) Тогда
			
			Текст = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, НСтр("ru = 'Результат инвентаризации'"), ТекущиеДанные.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТаблицаДанныхДокумента", ТекущиеДанные.НомерСтроки, "РезультатАнализаУпаковок");
			ОбщегоНазначенияКлиент.СообщитьПользователю(Текст,, Поле);
			Возврат;
			
		КонецЕсли;
		
		Если ОтработанныеРезультатыАнализа[ТекущиеДанные.РезультатАнализаУпаковок] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоДействиеПоСверкеОстатков Тогда
			СписокДоступныхДействий = ИнвентаризацияМДЛПКлиентСервер.СформироватьСписокДальнейшихДействий(ТекущиеДанные.РезультатАнализаУпаковок, "ДействияПоСверкеОстатков", КэшированныеРезультатыАнализа);
		ИначеЕсли ЭтоДействиеПоОформлениюУведомлений Тогда
			СписокДоступныхДействий = ИнвентаризацияМДЛПКлиентСервер.СформироватьСписокДальнейшихДействий(ТекущиеДанные.РезультатАнализаУпаковок, "ДействияПоОформлениюУведомлений", КэшированныеРезультатыАнализа);
		КонецЕсли;
		
		ГраницаДействий = Действия.ВГраница();
		Для Индекс = 0 По ГраницаДействий Цикл
			
			Действие = Действия[ГраницаДействий - Индекс];
			
			Если СписокДоступныхДействий.НайтиПоЗначению(Действие) = Неопределено Тогда
				Действия.Удалить(ГраницаДействий - Индекс);
			КонецЕсли;
			
		КонецЦикла;
		
		ОтработанныеРезультатыАнализа.Вставить(ТекущиеДанные.РезультатАнализаУпаковок, Истина);
		
	КонецЦикла;
	
	СписокДействий = Новый СписокЗначений;
	СписокДействий.ЗагрузитьЗначения(Действия);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ВыбраннаяСтрокаИлиСтроки", ВыбраннаяСтрокаИлиСтроки);
	Контекст.Вставить("ИмяРеквизита", ИмяКлюча);
	
	Обработчик = Новый ОписаниеОповещения("ОбработкаВыбораДальнейшегоДействия", ЭтотОбъект, Контекст);
	
	Если ТипЗнч(ВыбраннаяСтрокаИлиСтроки) = Тип("Массив") Тогда
		ПараметрыФормы = Новый Структура("СписокДействий", СписокДействий);
		ОткрытьФорму("Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.Форма.ФормаВыбораДействия", ПараметрыФормы, ЭтотОбъект,,,, Обработчик);
	Иначе
		ПоказатьВыборИзМеню(Обработчик, СписокДействий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДальнейшегоДействия(РезультатВыбора, Контекст) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеСтроки = Новый Массив;
	Если ТипЗнч(Контекст.ВыбраннаяСтрокаИлиСтроки) = Тип("Массив") Тогда
		ВыбранныеСтроки = Контекст.ВыбраннаяСтрокаИлиСтроки;
	Иначе
		ВыбранныеСтроки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контекст.ВыбраннаяСтрокаИлиСтроки);
	КонецЕсли;
	
	ЭтоДействиеПоСверкеОстатков = Контекст.ИмяРеквизита = "ДействиеПоСверкеОстатков";
	Для Каждого ТекущаяСтрока Из ВыбранныеСтроки Цикл
		
		СтрокаУпаковки = Элементы.ТаблицаДанныхДокумента.ДанныеСтроки(ТекущаяСтрока);
		СтрокаУпаковки[Контекст.ИмяРеквизита] = РезультатВыбора.Значение;
		
		Если ЭтоДействиеПоСверкеОстатков Тогда
			ПриИзмененииДействияПоСверкеОстатков(СтрокаУпаковки);
		КонецЕсли;
		
		СтрокаУпаковки.ДанныеСтрокиИзменились = Истина;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДействияПоСверкеОстатков(СтрокаУпаковки)
	
	Если СтрокаУпаковки.ДействиеПоСверкеОстатков = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияИнвентаризацииМДЛП.НеВыполнятьСверкуОстатков") Тогда
		Если СтрокаУпаковки.ДействиеПоОформлениюУведомлений <> ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияИнвентаризацииМДЛП.ОформлятьУведомлениеНеТребуется")
		   И СтрокаУпаковки.ДействиеПоОформлениюУведомлений <> ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияИнвентаризацииМДЛП.НеОформлятьУведомление") Тогда
			СтрокаУпаковки.ДействиеПоОформлениюУведомлений = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияИнвентаризацииМДЛП.НеОформлятьУведомление");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции
