
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Документ = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИнициализироватьРежимыОбработкиДокумента();
	
	Документ = Параметры.Документ;
	РежимОбработкиДокумента = Параметры.РежимОбработкиДокумента;
	
	ОбновитьДеревоУведомлений();
	
	СобытияФормМДЛППереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьУведомленияИнвентаризацииМДЛП"
	   И Параметр.ДокументИнвентаризации = Документ Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьДеревоУведомленийОтложенно", 0.1, Истина);
		
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДеревоУведомленийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ДокументУведомлениеПредставление Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные.ДокументУведомлениеПредставление = Строка_Создать() Тогда
			
			Если РежимОбработкиДокумента = РежимыОбработкиДокумента.РежимПросмотра Тогда
				Возврат;
			КонецЕсли;
			
			ИмяФормыУведомления = ТекущиеДанные.ДокументУведомлениеПолноеИмя + ".ФормаОбъекта";
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Основание", Документ);
			
			ОткрытьФорму(ИмяФормыУведомления, ПараметрыФормы);
			
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ДокументУведомление) Тогда
			
			ПоказатьЗначение(, ТекущиеДанные.ДокументУведомление);
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.Примечание Тогда
		
		ПодключитьОбработчикОжидания("ПоказатьДеревоПересекающихсяУведомлений", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПересекающихсяУведомленийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ДеревоПересекающихсяУведомленийДокументУведомление Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ПоказатьЗначение(, ТекущиеДанные.ДокументУведомление);
		
	ИначеЕсли Поле = Элементы.ДеревоПересекающихсяУведомленийДокументУведомлениеПересекающийся Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ПоказатьЗначение(, ТекущиеДанные.ДокументУведомлениеПересекающийся);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	#Область ДеревоУведомлений
		
		//
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументУведомлениеПредставление.Имя);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
			"ДеревоУведомлений.Уровень", 0, ВидСравненияКомпоновкиДанных.Равно);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		//
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументУведомлениеТип.Имя);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
			"ДеревоУведомлений.Уровень", 1, ВидСравненияКомпоновкиДанных.Равно);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		//
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусУведомления.Имя);
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДальнейшееДействиеУведомления.Имя);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
			"ДеревоУведомлений.ДокументУведомление",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		//
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоУведомлений.Имя);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
			"ДеревоУведомлений.Уровень", 1, ВидСравненияКомпоновкиДанных.Равно);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
			"ДеревоУведомлений.ДокументУведомление",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
			"РежимОбработкиДокумента", "РежимПросмотра", ВидСравненияКомпоновкиДанных.Равно);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	#КонецОбласти
	
	#Область ДеревоПересекающихсяУведомлений
		
		//
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПересекающихсяУведомленийДокументУведомлениеПересекающийся.Имя);
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПересекающихсяУведомленийНомерУпаковки.Имя);
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПересекающихсяУведомленийСтатусУведомленияПересекающийся.Имя);
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПересекающихсяУведомленийДальнейшееДействиеУведомленияПересекающийся.Имя);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
			"ДеревоПересекающихсяУведомлений.Уровень", 0, ВидСравненияКомпоновкиДанных.Равно);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		//
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПересекающихсяУведомленийДокументУведомление.Имя);
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПересекающихсяУведомленийНомерУпаковки.Имя);
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПересекающихсяУведомленийСтатусУведомления.Имя);
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПересекающихсяУведомленийДальнейшееДействиеУведомления.Имя);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
			"ДеревоПересекающихсяУведомлений.Уровень", 1, ВидСравненияКомпоновкиДанных.Равно);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		//
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПересекающихсяУведомленийДокументУведомление.Имя);
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПересекающихсяУведомленийДокументУведомлениеПересекающийся.Имя);
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПересекающихсяУведомленийСтатусУведомления.Имя);
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПересекающихсяУведомленийДальнейшееДействиеУведомления.Имя);
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПересекающихсяУведомленийСтатусУведомленияПересекающийся.Имя);
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПересекающихсяУведомленийДальнейшееДействиеУведомленияПересекающийся.Имя);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
			"ДеревоПересекающихсяУведомлений.Уровень", 2, ВидСравненияКомпоновкиДанных.Равно);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРежимыОбработкиДокумента()
	
	РежимыОбработкиДокументаИзменяемая = Новый Структура;
	РежимыОбработкиДокументаИзменяемая.Вставить("РежимСверки"    , "РежимСверки");
	РежимыОбработкиДокументаИзменяемая.Вставить("РежимОформления", "РежимОформления");
	РежимыОбработкиДокументаИзменяемая.Вставить("РежимПросмотра" , "РежимПросмотра");
	
	РежимыОбработкиДокумента = Новый ФиксированнаяСтруктура(РежимыОбработкиДокументаИзменяемая);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДеревоПересекающихсяУведомлений()
	
	ТекущиеДанные = Элементы.ДеревоУведомлений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийДокументУведомление = ТекущиеДанные.ДокументУведомление;
	Если Не ЗначениеЗаполнено(ТекущийДокументУведомление) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаВсплывающаяДеревоПересекающихсяУведомлений.Показать();
	
	СтрокиДереваПересекающихсяУведомлений = ДеревоПересекающихсяУведомлений.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДереваПересекающихсяУведомлений Цикл
		ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
		Если СтрокаДерева.ДокументУведомление = ТекущийДокументУведомление Тогда
			Элементы.ДеревоПересекающихсяУведомлений.ТекущаяСтрока = ТекущаяСтрока;
			Элементы.ДеревоПересекающихсяУведомлений.Развернуть(ТекущаяСтрока, Истина);
		Иначе
			Элементы.ДеревоПересекающихсяУведомлений.Свернуть(ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ОбновлениеДанных

&НаКлиенте
Процедура ОбновитьДеревоУведомленийОтложенно()
	
	ОбновитьДеревоУведомлений();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоУведомлений()
	
	ДеревоУведомлений.ПолучитьЭлементы().Очистить();
	ДеревоПересекающихсяУведомлений.ПолучитьЭлементы().Очистить();
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаТипыУведомлений());
	ТекстыЗапроса.Добавить(ТекстЗапросаИнвентаризированныеУпаковки());
	ТекстыЗапроса.Добавить(ТекстЗапросаНомераУпаковокУведомлений());
	ТекстыЗапроса.Добавить(ТекстЗапросаСводныеДанныеУпаковок());
	ТекстыЗапроса.Добавить(ТекстЗапросаПересекающиесяНомераУпаковок());
	ТекстыЗапроса.Добавить(ТекстЗапросаДеревоПересекающихсяУведомлений());
	ТекстыЗапроса.Добавить(ТекстЗапросаДеревоУведомлений());
	
	Запрос = Новый Запрос(СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов()));
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ТипыУведомлений", СформироватьТаблицуТиповУведомлений());
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ЗаполнитьДеревоПересекающихсяУведомлений(Результаты[Результаты.ВГраница() - 1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам));
	ЗаполнитьДеревоУведомлений(Результаты[Результаты.ВГраница()].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам));
	
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуТиповУведомлений()
	
	СоответствиеТиповДокументов = ИнвентаризацияМДЛПКлиентСервер.СоответствиеТиповДокументовДействиямИнвентаризации();
	
	ТипыУведомлений = Новый ТаблицаЗначений;
	ТипыУведомлений.Колонки.Добавить("ДействиеПоОформлениюУведомлений", Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияИнвентаризацииМДЛП"));
	ТипыУведомлений.Колонки.Добавить("ДокументУведомлениеТип", Метаданные.ОпределяемыеТипы.УведомлениеИнвентаризацииПотребительскихУпаковокМДЛП.Тип);
	
	Для Каждого КлючИЗначение Из СоответствиеТиповДокументов Цикл
		
		СтрокаТаблицы = ТипыУведомлений.Добавить();
		СтрокаТаблицы.ДействиеПоОформлениюУведомлений = КлючИЗначение.Ключ;
		СтрокаТаблицы.ДокументУведомлениеТип = КлючИЗначение.Значение;
		
	КонецЦикла;
	
	Возврат ТипыУведомлений;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаТипыУведомлений()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТипыУведомлений.ДействиеПоОформлениюУведомлений  КАК ДействиеПоОформлениюУведомлений,
	|	ТипыУведомлений.ДокументУведомлениеТип           КАК ДокументУведомлениеТип
	|ПОМЕСТИТЬ ТипыУведомлений
	|ИЗ
	|	&ТипыУведомлений КАК ТипыУведомлений
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаИнвентаризированныеУпаковки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИнвентаризированныеУпаковки.НомерУпаковки                    КАК НомерУпаковки,
	|	ИнвентаризированныеУпаковки.ДокументУведомление              КАК ДокументУведомление,
	|	ВЫБОР
	|		КОГДА ИнвентаризированныеУпаковки.ДокументУведомление <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ТИПЗНАЧЕНИЯ(ИнвентаризированныеУпаковки.ДокументУведомление)
	|		ИНАЧЕ ТИПЗНАЧЕНИЯ(ТипыУведомлений.ДокументУведомлениеТип)
	|	КОНЕЦ                                                        КАК ДокументУведомлениеТип
	|ПОМЕСТИТЬ ИнвентаризированныеУпаковки
	|ИЗ
	|	РегистрСведений.ИнвентаризированныеУпаковкиМДЛП КАК ИнвентаризированныеУпаковки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТипыУведомлений КАК ТипыУведомлений
	|		ПО
	|			ТипыУведомлений.ДействиеПоОформлениюУведомлений = ИнвентаризированныеУпаковки.ДействиеПоОформлениюУведомлений
	|ГДЕ
	|	ИнвентаризированныеУпаковки.ДокументИнвентаризации = &Документ
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаНомераУпаковокУведомлений()
	
	ШаблонТекстаЗапросаУведомлений = "
	|ВЫБРАТЬ
	|	НомераУпаковокУведомления.НомерКИЗ  КАК НомерУпаковки,
	|	Уведомление.Ссылка                  КАК ДокументУведомление,
	|	ТИПЗНАЧЕНИЯ(Уведомление.Ссылка)     КАК ДокументУведомлениеТип
	|ИЗ
	|	#Уведомление КАК Уведомление
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			#Уведомление.НомераУпаковок КАК НомераУпаковокУведомления
	|		ПО
	|			НомераУпаковокУведомления.Ссылка = Уведомление.Ссылка
	|ГДЕ
	|	Уведомление.ДокументИнвентаризации = &Документ
	|	И НЕ Уведомление.ПометкаУдаления
	|";
	
	ТекстОбъединитьВсе = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ТекстыЗапроса = Новый Массив;
	
	ТипыУведомлений = Метаданные.ОпределяемыеТипы.УведомлениеИнвентаризацииПотребительскихУпаковокМДЛП.Тип.Типы();
	Для Каждого ТипУведомления Из ТипыУведомлений Цикл
		ТекстыЗапроса.Добавить(СтрЗаменить(ШаблонТекстаЗапросаУведомлений, "#Уведомление", Метаданные.НайтиПоТипу(ТипУведомления).ПолноеИмя()));
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ТекстОбъединитьВсе);
	ИнвентаризацияМДЛП.ДобавитьИмяВременнойТаблицыПоследнемуЗапросуПакета(ТекстЗапроса, "НомераУпаковокУведомлений");
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаСводныеДанныеУпаковок()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИнвентаризированныеУпаковки.НомерУпаковки           КАК НомерУпаковки,
	|	ИнвентаризированныеУпаковки.ДокументУведомление     КАК ДокументУведомление,
	|	ИнвентаризированныеУпаковки.ДокументУведомлениеТип  КАК ДокументУведомлениеТип
	|ПОМЕСТИТЬ СводныеДанныеУпаковок
	|ИЗ
	|	ИнвентаризированныеУпаковки КАК ИнвентаризированныеУпаковки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НомераУпаковокУведомлений.НомерУпаковки             КАК НомерУпаковки,
	|	НомераУпаковокУведомлений.ДокументУведомление       КАК ДокументУведомление,
	|	НомераУпаковокУведомлений.ДокументУведомлениеТип    КАК ДокументУведомлениеТип
	|ИЗ
	|	НомераУпаковокУведомлений КАК НомераУпаковокУведомлений
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаПересекающиесяНомераУпаковок()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СводныеДанныеУпаковок.НомерУпаковки  КАК НомерУпаковки
	|ПОМЕСТИТЬ ПересекающиесяНомераУпаковок
	|ИЗ
	|	СводныеДанныеУпаковок КАК СводныеДанныеУпаковок
	|ГДЕ
	|	СводныеДанныеУпаковок.ДокументУведомление <> НЕОПРЕДЕЛЕНО
	|СГРУППИРОВАТЬ ПО
	|	СводныеДанныеУпаковок.НомерУпаковки
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СводныеДанныеУпаковок.ДокументУведомление) > 1
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаДеревоПересекающихсяУведомлений()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СводныеДанныеУпаковок.ДокументУведомление                           КАК ДокументУведомление,
	|	ПересекающиесяУведомления.ДокументУведомление                       КАК ДокументУведомлениеПересекающийся,
	|	СтатусыИнформированияУведомления.Статус                             КАК СтатусУведомления,
	|	СтатусыИнформированияУведомления.ДальнейшееДействие1                КАК ДальнейшееДействиеУведомления,
	|	СтатусыИнформированияУведомленияПересекающийся.Статус               КАК СтатусУведомленияПересекающийся,
	|	СтатусыИнформированияУведомленияПересекающийся.ДальнейшееДействие1  КАК ДальнейшееДействиеУведомленияПересекающийся,
	|	СводныеДанныеУпаковок.НомерУпаковки                                 КАК НомерУпаковки
	|ИЗ
	|	СводныеДанныеУпаковок КАК СводныеДанныеУпаковок
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.СтатусыИнформированияМДЛП КАК СтатусыИнформированияУведомления
	|		ПО
	|			СтатусыИнформированияУведомления.Документ = СводныеДанныеУпаковок.ДокументУведомление
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			СводныеДанныеУпаковок КАК ПересекающиесяУведомления
	|				ЛЕВОЕ СОЕДИНЕНИЕ
	|					РегистрСведений.СтатусыИнформированияМДЛП КАК СтатусыИнформированияУведомленияПересекающийся
	|				ПО
	|					СтатусыИнформированияУведомленияПересекающийся.Документ = ПересекающиесяУведомления.ДокументУведомление
	|		
	|		ПО
	|			ПересекающиесяУведомления.НомерУпаковки = СводныеДанныеУпаковок.НомерУпаковки
	|			И ПересекающиесяУведомления.ДокументУведомление <> СводныеДанныеУпаковок.ДокументУведомление
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ПересекающиесяНомераУпаковок КАК ПересекающиесяНомераУпаковок
	|		ПО
	|			ПересекающиесяНомераУпаковок.НомерУпаковки = СводныеДанныеУпаковок.НомерУпаковки
	|		
	|ГДЕ
	|	СводныеДанныеУпаковок.ДокументУведомление <> НЕОПРЕДЕЛЕНО
	|	И ПересекающиесяУведомления.ДокументУведомление <> НЕОПРЕДЕЛЕНО
	|ИТОГИ
	|	МАКСИМУМ(СтатусУведомления),
	|	МАКСИМУМ(ДальнейшееДействиеУведомления),
	|	МАКСИМУМ(СтатусУведомленияПересекающийся),
	|	МАКСИМУМ(ДальнейшееДействиеУведомленияПересекающийся)
	|ПО
	|	ДокументУведомление,
	|	ДокументУведомлениеПересекающийся
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаДеревоУведомлений()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СводныеДанныеУпаковок.ДокументУведомлениеТип  КАК ДокументУведомлениеТип,
	|	СводныеДанныеУпаковок.ДокументУведомление     КАК ДокументУведомление,
	|	СтатусыИнформирования.Статус                  КАК СтатусУведомления,
	|	СтатусыИнформирования.ДальнейшееДействие1     КАК ДальнейшееДействиеУведомления,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ ПересекающиесяНомераУпаковок.НомерУпаковки ЕСТЬ NULL
	|			И СводныеДанныеУпаковок.ДокументУведомление <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)                                        КАК ЕстьПересекающиесяУведомления
	|ИЗ
	|	СводныеДанныеУпаковок КАК СводныеДанныеУпаковок
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.СтатусыИнформированияМДЛП КАК СтатусыИнформирования
	|		ПО
	|			СтатусыИнформирования.Документ = СводныеДанныеУпаковок.ДокументУведомление
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПересекающиесяНомераУпаковок КАК ПересекающиесяНомераУпаковок
	|		ПО
	|			ПересекающиесяНомераУпаковок.НомерУпаковки = СводныеДанныеУпаковок.НомерУпаковки
	|СГРУППИРОВАТЬ ПО
	|	СводныеДанныеУпаковок.ДокументУведомлениеТип,
	|	СводныеДанныеУпаковок.ДокументУведомление,
	|	СтатусыИнформирования.Статус,
	|	СтатусыИнформирования.ДальнейшееДействие1
	|УПОРЯДОЧИТЬ ПО
	|	ДокументУведомлениеТип,
	|	ДокументУведомление УБЫВ
	|ИТОГИ ПО
	|	ДокументУведомлениеТип
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоПересекающихсяУведомлений(ИсходноеДерево)
	
	ИсходноеДерево.Колонки.Добавить("Уровень");
	
	ПараметрыОбхода = ИнтеграцияМДЛП.ПараметрыОбходаДерева(ИсходноеДерево);
	Пока Истина Цикл
		
		ЭлементДерева = ИнтеграцияМДЛП.ПолучитьОчереднойЭлементДерева(ПараметрыОбхода);
		Если ЭлементДерева = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ЭлементДерева.Уровень = ЭлементДерева.Уровень();
		Если ЭлементДерева.Уровень = 0 Тогда
			
			ЭлементДерева.СтатусУведомленияПересекающийся             = Неопределено;
			ЭлементДерева.ДальнейшееДействиеУведомленияПересекающийся = Неопределено;
			
		ИначеЕсли ЭлементДерева.Уровень = 1 Тогда
			
			ЭлементДерева.СтатусУведомления             = Неопределено;
			ЭлементДерева.ДальнейшееДействиеУведомления = Неопределено;
			
		ИначеЕсли ЭлементДерева.Уровень = 2 Тогда
			
			ЭлементДерева.СтатусУведомления                           = Неопределено;
			ЭлементДерева.ДальнейшееДействиеУведомления               = Неопределено;
			ЭлементДерева.СтатусУведомленияПересекающийся             = Неопределено;
			ЭлементДерева.ДальнейшееДействиеУведомленияПересекающийся = Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ИсходноеДерево, "ДеревоПересекающихсяУведомлений");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоУведомлений(ИсходноеДерево)
	
	ИсходноеДерево.Колонки.Добавить("ДокументУведомлениеПредставление");
	ИсходноеДерево.Колонки.Добавить("ДокументУведомлениеПолноеИмя");
	ИсходноеДерево.Колонки.Добавить("Примечание");
	ИсходноеДерево.Колонки.Добавить("Уровень");
	
	ПараметрыОбхода = ИнтеграцияМДЛП.ПараметрыОбходаДерева(ИсходноеДерево);
	Пока Истина Цикл
		
		ЭлементДерева = ИнтеграцияМДЛП.ПолучитьОчереднойЭлементДерева(ПараметрыОбхода);
		Если ЭлементДерева = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ЭлементДерева.ДокументУведомлениеПолноеИмя = Метаданные.НайтиПоТипу(ЭлементДерева.ДокументУведомлениеТип).ПолноеИмя();
		
		ЭлементДерева.Уровень = ЭлементДерева.Уровень();
		Если ЭлементДерева.Уровень = 1 Тогда
			
			Если ЗначениеЗаполнено(ЭлементДерева.ДокументУведомление) Тогда
				ЭлементДерева.ДокументУведомлениеПредставление = ЭлементДерева.ДокументУведомление;
			Иначе
				ЭлементДерева.ДокументУведомлениеПредставление = Строка_Создать();
			КонецЕсли;
			
			Если ЭлементДерева.ЕстьПересекающиесяУведомления Тогда
				ЭлементДерева.Примечание = НСтр("ru = 'Есть пересекающиеся уведомления'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ИсходноеДерево, "ДеревоУведомлений");
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция Строка_Создать()
	
	Возврат НСтр("ru = 'Создать'");
	
КонецФункции

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции
