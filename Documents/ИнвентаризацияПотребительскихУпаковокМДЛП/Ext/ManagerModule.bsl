
#Область ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	СобытияФормМДЛППереопределяемый.ПриПолученииФормыДокумента(ПустаяСсылка().Метаданные().Имя, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидФормы = "ФормаСписка" Тогда
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("Уведомление", ПустаяСсылка());
		ВыбраннаяФорма = Метаданные.Документы.ИнвентаризацияПотребительскихУпаковокМДЛП.Формы.ФормаСпискаДокументов;
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("Уведомление", ПустаяСсылка());
		ВыбраннаяФорма = Метаданные.Документы.ИнвентаризацияПотребительскихУпаковокМДЛП.Формы.ФормаВыбораДокументов;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбмене

Функция ОбновитьСтатус(ДокументСсылка) Экспорт
	
	ДальнейшиеДействия = ПолучитьДальнейшиеДействияПоДокументу(ДокументСсылка);
	
	Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
	
	Если ДальнейшиеДействия.Количество() = 0 Тогда
		
		Статусы.Принят  = Перечисления.СтатусыИнформированияМДЛП.Закрыто;
		
	Иначе
		
		Если ДальнейшиеДействия.Количество() = 1 Тогда
			Если ДальнейшиеДействия[0] = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте Тогда
				Статусы.Принят  = Перечисления.СтатусыИнформированияМДЛП.Закрыто;
			ИначеЕсли ДальнейшиеДействия[0] = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПроверку Тогда
				Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.Черновик;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Статусы.ПринятДействия, ДальнейшиеДействия, Истина);
			Иначе
				Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.КОформлению;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Статусы.ПринятДействия, ДальнейшиеДействия, Истина);
			КонецЕсли;
		Иначе
			Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.КОформлению;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Статусы.ПринятДействия, ДальнейшиеДействия, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусы(ДокументСсылка, Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято, Статусы);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатус = РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления);
	
	Возврат НовыйСтатус;
	
КонецФункции

Функция ПолучитьДальнейшиеДействияПоДокументу(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	НомераУпаковок.Ссылка  КАК Ссылка,
	
	|	ВЫБОР
	|		КОГДА МИНИМУМ(НомераУпаковок.Ссылка.СостояниеПодтверждения) В (&КонечныеСостояния)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                  КАК ВзаимодействиеЗавершено,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.Ссылка.СостояниеПодтверждения В (&МожноВыполнитьПроверку)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)                 КАК МожноВыполнитьПроверку,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.Ссылка.СостояниеПодтверждения В (&МожноОформитьУведомленияИлиЗакрыть)
	|			И (ИнвентаризированныеУпаковки.НомерУпаковки ЕСТЬ NULL ИЛИ ИнвентаризированныеУпаковки.ДокументУведомление = НЕОПРЕДЕЛЕНО)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)                 КАК МожноОформитьУведомления,
	
	|	МИНИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.Ссылка.СостояниеПодтверждения В (&МожноОформитьУведомленияИлиЗакрыть)
	|			И НЕ ИнвентаризированныеУпаковки.НомерУпаковки ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)                 КАК МожноЗакрыть
	
	|ИЗ
	|	Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.НомераУпаковок КАК НомераУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ИнвентаризированныеУпаковкиМДЛП КАК ИнвентаризированныеУпаковки
	|		ПО
	|			ИнвентаризированныеУпаковки.НомерУпаковки = НомераУпаковок.НомерКИЗ
	|			И ИнвентаризированныеУпаковки.КлючУпаковки = НомераУпаковок.КлючУпаковки
	|			И ИнвентаризированныеУпаковки.МестоДеятельности = НомераУпаковок.Ссылка.МестоДеятельности
	|			И ИнвентаризированныеУпаковки.ИнвентаризационнаяОпись = НомераУпаковок.Ссылка.ИнвентаризационнаяОпись
	|			И ИнвентаризированныеУпаковки.ДокументИнвентаризации = &Ссылка
	|			И ИнвентаризированныеУпаковки.СтатусДействияПоОформлениюУведомлений = &СтатусЗавершено
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	НомераУпаковок.Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("СтатусЗавершено", Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.Завершено);
	
	КонечныеСостояния = Новый Массив;
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Завершено);
	Запрос.УстановитьПараметр("КонечныеСостояния", КонечныеСостояния);
	
	МожноВыполнитьПроверку = Новый Массив;
	МожноВыполнитьПроверку.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить);
	Запрос.УстановитьПараметр("МожноВыполнитьПроверку", МожноВыполнитьПроверку);
	
	МожноОформитьУведомленияИлиЗакрыть = Новый Массив;
	МожноОформитьУведомленияИлиЗакрыть.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОформитьУведомления);
	Запрос.УстановитьПараметр("МожноОформитьУведомленияИлиЗакрыть", МожноОформитьУведомленияИлиЗакрыть);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДальнейшиеДействия = Новый Массив;
	Если Выборка.ВзаимодействиеЗавершено Тогда
		
	Иначе
		
		Если Выборка.МожноВыполнитьПроверку Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПроверку);
		КонецЕсли;
		
		Если Выборка.МожноОформитьУведомления Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОформитеУведомления);
		КонецЕсли;
		
		Если Выборка.МожноЗакрыть Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДальнейшиеДействия;
	
КонецФункции

// Определить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Основание");
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияИнвентаризацииПотребительскихУпаковокМДЛП(Основание);
	КонецЕсли;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций();
	
	ПустойТипСообщения = Перечисления.ТипыСообщенийМДЛП.ПустаяСсылка();
	ПустаяОперация = Перечисления.ОперацииОбменаМДЛП.ПустаяСсылка();
	ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, ПустойТипСообщения, ПустаяОперация);
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус информирования по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияМДЛП - Статус по-умолчанию.
//
Функция СтатусИнформированияПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыИнформированияМДЛП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПроверку;
	
КонецФункции

// Возвращает запрос для получения статуса оформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ основание.
// 
// Возвращаемое значение:
//  Запрос - Запрос для получения статуса оформления.
//
Функция ЗапросСтатусаОформления(ДокументОснование) Экспорт
	
	Запрос = ИнтеграцияМДЛППереопределяемый.ЗапросСтатусаОформленияИнвентаризацииПотребительскихУпаковокМДЛП(ДокументОснование);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПанельМаркировкиМДЛП

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПроверку);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОформитеУведомления);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
	
	Возврат Действия;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	
	Возврат Действия;
	
КонецФункции

Процедура ПриЗаполненииДокументовПанелиМаркировкиМДЛП(ТаблицаДокументы) Экспорт
	
	Описание = ИнтеграцияМДЛП.ДобавитьДокументНаПанельМаркировки(
		ТаблицаДокументы,
		Метаданные.Документы.ИнвентаризацияПотребительскихУпаковокМДЛП,
		НСтр("ru = 'Инвентаризация потребительских упаковок'"),
		ИнтеграцияМДЛПКлиентСервер.ПанельМаркировкаРазделИнвентаризация());
	
	Описание.Оформите    = Истина;
	Описание.Отработайте = Истина;
	Описание.Ожидайте    = Ложь;
	
КонецПроцедуры

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОформите() Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.ИнвентаризацияПотребительскихУпаковокМДЛПТекстЗапросаОформите();
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОтработайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОтработайте(Метаданные.Документы.ИнвентаризацияПотребительскихУпаковокМДЛП);
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического списка формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСписока() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаФормДокументов(Метаданные.Документы.ИнвентаризацияПотребительскихУпаковокМДЛП);
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического Списка к оформлению формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	ТекстЗапроса = ИнтеграцияМДЛППереопределяемый.ИнвентаризацияПотребительскихУпаковокТекстЗапросаДинамическогоСпискаКОформлению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

// Возвращает данные для заполнения представления документа.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * КомандаСоздать - Строка - Представление документа, если документ требуется создать.
//  * ИмяКомандыСоздать - Строка - Имя команды "Создать".
//  * ИмяКомандыОткрыть - Строка - Имя команды "Открыть".
//  * ДокументОтсутствуетНетПравНаСоздание - Строка - Представление документа, если документ не создан.
//  * Представление - Строка - Представление документа.
//  * НесколькоДокументовПредставление - Строка - Представление документа, если их несколько.
//
Функция ПредставлениеДокумента() Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияМДЛП.ПустоеПредставлениеДокумента();
	ВозвращаемоеЗначение.КомандаСоздать                       = НСтр("ru = 'Создать инвентаризацию потребительских упаковок МДЛП'");
	ВозвращаемоеЗначение.ИмяКомандыСоздать                    = "СоздатьИнвентаризацияПотребительскихУпаковокМДЛП";
	ВозвращаемоеЗначение.КомандаСвязать                       = НСтр("ru = 'Связать с инвентаризацией потребительских упаковок МДЛП (%1)'");
	ВозвращаемоеЗначение.ИмяКомандыСвязать                    = "СвязатьИнвентаризацияПотребительскихУпаковокМДЛП";
	ВозвращаемоеЗначение.ИмяКомандыОткрыть                    = "ОткрытьИнвентаризацияПотребительскихУпаковокМДЛП";
	ВозвращаемоеЗначение.ДокументОтсутствуетНетПравНаСоздание = НСтр("ru = 'Инвентаризация потребительских упаковок МДЛП не создана'");
	ВозвращаемоеЗначение.Представление                        = НСтр("ru = 'Инвентаризация потребительских упаковок МДЛП: %1'");
	ВозвращаемоеЗначение.НесколькоДокументовПредставление     = НСтр("ru = 'Инвентаризация потребительских упаковок МДЛП (%1)'");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПоддерживаетЗагрузкуУведомлений() Экспорт
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеДанныхАнализаИнвентаризируемыхУпаковок

#Область ФормированиеПоОстаткам

Функция СформироватьДанныеАнализаИнвентаризируемыхУпаковокПоОстаткам(ПараметрыФункции) Экспорт
	
	Результат = РезультатПолученияДанныхАнализаИнвентаризируемыхУпаковок();
	
	ОсновныеПараметры = ПолучитьОсновныеПараметрыФормированияДанных(ПараметрыФункции.Ссылка, Результат);
	
	Схема = Неопределено;
	КомпоновщикНастроек = Неопределено;
	ИнициализироватьСхемуИКомпоновщикНастроек(Схема, КомпоновщикНастроек, ОсновныеПараметры.НастройкиКомпоновки);
	
	УстановитьЗначениеПараметраНастроек(КомпоновщикНастроек.Настройки, "Документ"                                              , ОсновныеПараметры.Документ);
	УстановитьЗначениеПараметраНастроек(КомпоновщикНастроек.Настройки, "МестоДеятельности"                                     , ОсновныеПараметры.МестоДеятельности);
	УстановитьЗначениеПараметраНастроек(КомпоновщикНастроек.Настройки, "ИнвентаризационнаяОпись"                               , ОсновныеПараметры.ИнвентаризационнаяОпись);
	УстановитьЗначениеПараметраНастроек(КомпоновщикНастроек.Настройки, "ПустаяГрупповаяУпаковка"                               , Метаданные.ОпределяемыеТипы.SSCC.Тип.ПривестиЗначение());
	УстановитьЗначениеПараметраНастроек(КомпоновщикНастроек.Настройки, "ПустойGTIN"                                            , Метаданные.ОпределяемыеТипы.GTIN.Тип.ПривестиЗначение());
	УстановитьЗначениеПараметраНастроек(КомпоновщикНастроек.Настройки, "ПустойСтатусУпаковки"                                  , Перечисления.СтатусыУпаковокМДЛП.ПустаяСсылка());
	УстановитьЗначениеПараметраНастроек(КомпоновщикНастроек.Настройки, "СтатусыМожноВыполнитьСверкуМДЛП"                       , СтатусыМожноВыполнитьСверкуМДЛП());
	УстановитьЗначениеПараметраНастроек(КомпоновщикНастроек.Настройки, "СтатусыМожноВыполнитьСверкуИБ"                         , СтатусыМожноВыполнитьСверкуИБ());
	УстановитьЗначениеПараметраНастроек(КомпоновщикНастроек.Настройки, "СтатусыМожноОформитьОприходованиеМДЛП"                 , СтатусыМожноОформитьОприходованиеМДЛП());
	УстановитьЗначениеПараметраНастроек(КомпоновщикНастроек.Настройки, "СтатусыМожноОформитьПовторныйВводВОборотМДЛП"          , СтатусыМожноОформитьПовторныйВводВОборотМДЛП());
	УстановитьЗначениеПараметраНастроек(КомпоновщикНастроек.Настройки, "СтатусыМожноОформитьВыводИзОборотаМДЛП"                , СтатусыМожноОформитьВыводИзОборотаМДЛП());
	УстановитьЗначениеПараметраНастроек(КомпоновщикНастроек.Настройки, "СтатусыМожноПереместитьВАрхив"                         , СтатусыМожноПереместитьВАрхив());
	УстановитьЗначениеПараметраНастроек(КомпоновщикНастроек.Настройки, "ГраницаЗагрузкиОстатков"                               , ОсновныеПараметры.ГраницаЗагрузкиОстатков);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, КомпоновщикНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДанныеРезультатовАнализа = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ДанныеРезультатовАнализа.Количество() > МаксимальноеКоличествоСтрок() Тогда
		Результат.Статус = "Ошибка";
		Результат.Ошибки.Добавить(ТекстОшибкиСлишкомМногоДанныхДляОбработки());
		Возврат Результат;
	КонецЕсли;
	
	Результат.ДанныеРезультатовАнализа = ДанныеРезультатовАнализа;
	Результат.ИерархияГрупповыхУпаковокМДЛП = СформироватьИерархиюГрупповыхУпаковокМДЛП(ДанныеРезультатовАнализа, ОсновныеПараметры);
	Результат.ИерархияГрупповыхУпаковокИБ = СформироватьИерархиюГрупповыхУпаковокИБ(ДанныеРезультатовАнализа, ОсновныеПараметры);
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьСхемуИКомпоновщикНастроек(Схема = Неопределено, КомпоновщикНастроек = Неопределено, НастройкиКомпоновки = Неопределено) Экспорт
	
	Если Схема = Неопределено Тогда
		Схема = ИнициализироватьСхемуКомпоновкиДанных();
		URLСхемы = ПоместитьВоВременноеХранилище(Схема, Новый УникальныйИдентификатор());
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	КонецЕсли;
	
	Если КомпоновщикНастроек = Неопределено Тогда
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КонецЕсли;
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	Если НастройкиКомпоновки <> Неопределено И НастройкиКомпоновки.Отбор.Элементы.Количество() > 0 Тогда
		// Нужны только настройки отбора.
		ДополнитьОтборКомпоновкиДанных(КомпоновщикНастроек.Настройки.Отбор, НастройкиКомпоновки.Отбор);
	КонецЕсли;
	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	
КонецПроцедуры

Функция ИнициализироватьСхемуКомпоновкиДанных()
	
	Схема = Новый СхемаКомпоновкиДанных;
	
	ИнициализироватьИсточникДанныхСхемыКомпоновки(Схема);
	ИнициализироватьНаборДанныхСхемыКомпоновки(Схема);
	ИнициализироватьПараметрыДанныхСхемыКомпоновки(Схема);
	ИнициализироватьСтруктуруНастроекСхемыКомпоновки(Схема);
	ИнициализироватьВыбираемыеПоляНастроекКомпоновки(Схема);
	
	Возврат Схема;
	
КонецФункции

Процедура ИнициализироватьИсточникДанныхСхемыКомпоновки(Схема)
	
	ИсточникДанных = Схема.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
КонецПроцедуры

Процедура ИнициализироватьНаборДанныхСхемыКомпоновки(Схема)
	
	НаборДанных = Схема.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "РезультатыИнвентаризации";
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Ложь;
	
	Запросы = Новый Массив;
	Запросы.Добавить(ТекстЗапросаНомераУпаковокФакт());
	Запросы.Добавить(ТекстЗапросаДанныеСерийНомеровУпаковокИБ());
	Запросы.Добавить(ТекстЗапросаИнвентаризированныеУпаковки(Ложь));
	Запросы.Добавить(ТекстЗапросаОстаткиУпаковокИБ(Ложь));
	Запросы.Добавить(ТекстЗапросаОстаткиУпаковокМДЛП(Ложь));
	Запросы.Добавить(ТекстЗапросаСводнаяТаблица());
	Запросы.Добавить(ТекстЗапросаРезультатыАнализа());
	
	НаборДанных.Запрос = СтрСоединить(Запросы, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецПроцедуры

Процедура ИнициализироватьПараметрыДанныхСхемыКомпоновки(Схема)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Схема.НаборыДанных.РезультатыИнвентаризации.Запрос);
	
	Для Каждого ПараметрИсточник Из СхемаЗапроса.НайтиПараметры() Цикл
		ПараметрПриемник = Схема.Параметры.Добавить();
		ЗаполнитьЗначенияСвойств(ПараметрПриемник, ПараметрИсточник);
		ПараметрПриемник.ВключатьВДоступныеПоля = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьСтруктуруНастроекСхемыКомпоновки(Схема)
	
	ГруппировкаДетальныеЗаписи = Схема.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
КонецПроцедуры

Процедура ИнициализироватьВыбираемыеПоляНастроекКомпоновки(Схема)
	
	ПоляВыбора = Новый Массив;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Схема.НаборыДанных.РезультатыИнвентаризации.Запрос);
	Граница = СхемаЗапроса.ПакетЗапросов.Количество() - 1;
	Для Индекс = 0 По Граница Цикл
		
		ЗапросОбъект = СхемаЗапроса.ПакетЗапросов[Граница - Индекс];
		Если ТипЗнч(ЗапросОбъект) = Тип("ЗапросВыбораСхемыЗапроса")
			И Не ЗначениеЗаполнено(ЗапросОбъект.ТаблицаДляПомещения) Тогда
			
			Если ЗначениеЗаполнено(ЗапросОбъект.ПоляВыбораКомпоновкиДанных) Тогда
				Для Каждого ПолеВыбора Из ЗапросОбъект.ПоляВыбораКомпоновкиДанных Цикл
					ПоляВыбора.Добавить(ПолеВыбора.Поле.Псевдоним);
				КонецЦикла;
			Иначе
				Для Каждого Колонка Из ЗапросОбъект.Колонки Цикл
					ПоляВыбора.Добавить(Колонка.Псевдоним);
				КонецЦикла;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИмяПоля Из ПоляВыбора Цикл
		ВыбранноеПоле = Схема.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьОтборКомпоновкиДанных(Приемник, Источник) Экспорт
	
	Для Каждого ЭлементОтбора Из Источник.Элементы Цикл
		
		ТипЭлементаОтбора = ТипЗнч(ЭлементОтбора);
		НовыйЭлемент = Приемник.Элементы.Добавить(ТипЭлементаОтбора);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора);
		
		Если ТипЭлементаОтбора = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ДополнитьОтборКомпоновкиДанных(НовыйЭлемент, ЭлементОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначениеПараметраНастроек(Настройки, ИмяПараметра, Значение)
	
	Параметр = Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Значение;
		Параметр.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПоФакту

Функция СформироватьДанныеАнализаИнвентаризируемыхУпаковокПоФакту(ПараметрыФункции) Экспорт
	
	Результат = РезультатПолученияДанныхАнализаИнвентаризируемыхУпаковок();
	
	ОсновныеПараметры = ПолучитьОсновныеПараметрыФормированияДанных(ПараметрыФункции.Ссылка, Результат);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Документ"                                              , ОсновныеПараметры.Документ);
	Запрос.УстановитьПараметр("МестоДеятельности"                                     , ОсновныеПараметры.МестоДеятельности);
	Запрос.УстановитьПараметр("ИнвентаризационнаяОпись"                               , ОсновныеПараметры.ИнвентаризационнаяОпись);
	Запрос.УстановитьПараметр("ПустаяГрупповаяУпаковка"                               , Метаданные.ОпределяемыеТипы.SSCC.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр("ПустойGTIN"                                            , Метаданные.ОпределяемыеТипы.GTIN.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр("ПустойСтатусУпаковки"                                  , Перечисления.СтатусыУпаковокМДЛП.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтатусыМожноВыполнитьСверкуМДЛП"                       , СтатусыМожноВыполнитьСверкуМДЛП());
	Запрос.УстановитьПараметр("СтатусыМожноВыполнитьСверкуИБ"                         , СтатусыМожноВыполнитьСверкуИБ());
	Запрос.УстановитьПараметр("СтатусыМожноОформитьОприходованиеМДЛП"                 , СтатусыМожноОформитьОприходованиеМДЛП());
	Запрос.УстановитьПараметр("СтатусыМожноОформитьПовторныйВводВОборотМДЛП"          , СтатусыМожноОформитьПовторныйВводВОборотМДЛП());
	Запрос.УстановитьПараметр("СтатусыМожноОформитьВыводИзОборотаМДЛП"                , СтатусыМожноОформитьВыводИзОборотаМДЛП());
	Запрос.УстановитьПараметр("СтатусыМожноПереместитьВАрхив"                         , СтатусыМожноПереместитьВАрхив());
	Запрос.УстановитьПараметр("ГраницаЗагрузкиОстатков"                               , ОсновныеПараметры.ГраницаЗагрузкиОстатков);
	
	Запрос.Текст = ТекстЗапросаНомераУпаковокФакт();
	
	ПроверитьМаксимальнуюДлиннуВыборкиВременнойТаблицы(Запрос, Результат);
	Если Результат.Статус <> "Успешно" Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запросы = Новый Массив;
	Запросы.Добавить(ТекстЗапросаДанныеСерийНомеровУпаковокИБ());
	Запросы.Добавить(ТекстЗапросаИнвентаризированныеУпаковки(Истина));
	Запросы.Добавить(ТекстЗапросаОстаткиУпаковокИБ(Истина));
	Запросы.Добавить(ТекстЗапросаОстаткиУпаковокМДЛП(Истина));
	Запросы.Добавить(ТекстЗапросаСводнаяТаблица());
	Запросы.Добавить(ТекстЗапросаРезультатыАнализа());
	
	Запрос.Текст = СтрСоединить(Запросы, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ДанныеРезультатовАнализа = Запрос.Выполнить().Выгрузить();
	
	Результат.ДанныеРезультатовАнализа = ДанныеРезультатовАнализа;
	Результат.ИерархияГрупповыхУпаковокМДЛП = СформироватьИерархиюГрупповыхУпаковокМДЛП(ДанныеРезультатовАнализа, ОсновныеПараметры);
	Результат.ИерархияГрупповыхУпаковокИБ = СформироватьИерархиюГрупповыхУпаковокИБ(ДанныеРезультатовАнализа, ОсновныеПараметры);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФормированиеРезультатаПолученияДанныхАнализа

Функция РезультатПолученияДанныхАнализаИнвентаризируемыхУпаковок()
	
	Результат = Новый Структура;
	Результат.Вставить("Статус"                         , "Успешно");
	Результат.Вставить("ДанныеРезультатовАнализа"       , Новый ТаблицаЗначений);
	Результат.Вставить("ИерархияГрупповыхУпаковокМДЛП"  , Новый ТаблицаЗначений);
	Результат.Вставить("ИерархияГрупповыхУпаковокИБ"    , Новый ТаблицаЗначений);
	Результат.Вставить("Ошибки"                         , Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОсновныеПараметрыФормированияДанных(Документ, Результат)
	
	ОсновныеПараметры = Новый Структура;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                           КАК Документ,
	|	ДанныеДокумента.МестоДеятельности                КАК МестоДеятельности,
	|	ДанныеДокумента.ИнвентаризационнаяОпись          КАК ИнвентаризационнаяОпись,
	|	ДанныеДокумента.ОтборИнвентаризации              КАК ОтборИнвентаризации,
	|	ДанныеДокумента.МестоДеятельности.Идентификатор  КАК ИдентификаторМестаДеятельности
	|ИЗ
	|	Документ.ИнвентаризацияПотребительскихУпаковокМДЛП КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Документ
	|");
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Результат.Статус = "Ошибка";
		Результат.Ошибки.Добавить(НСтр("ru = 'Нет данных для обработки'"));
		Возврат ОсновныеПараметры;
	КонецЕсли;
	
	ОсновныеПараметры.Вставить("Документ"               , Выборка.Документ);
	ОсновныеПараметры.Вставить("МестоДеятельности"      , Выборка.МестоДеятельности);
	ОсновныеПараметры.Вставить("ИнвентаризационнаяОпись", Выборка.ИнвентаризационнаяОпись);
	ОсновныеПараметры.Вставить("НастройкиКомпоновки"    , Выборка.ОтборИнвентаризации.Получить());
	ОсновныеПараметры.Вставить("ГраницаЗагрузкиОстатков", ИнтеграцияМДЛПВызовСервера.ПолучитьГраницуЗагрузкиОстатковПотребительскихУпаковок(Выборка.ИдентификаторМестаДеятельности));
	
	Возврат ОсновныеПараметры;
	
КонецФункции

Функция ТекстЗапросаНомераУпаковокФакт()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеНомеровУпаковокДокумента.НомерКИЗ                    КАК НомерКИЗ,
	|	ДанныеНомеровУпаковокДокумента.КлючУпаковки                КАК КлючУпаковки,
	|	ПОДСТРОКА(ДанныеНомеровУпаковокДокумента.НомерКИЗ, 1, 14)  КАК GTIN,
	|	ЕСТЬNULL(ДанныеТоваров.НомерСерии, """")                   КАК НомерСерии,
	|	ЕСТЬNULL(ДанныеТоваров.ГоденДо, ДАТАВРЕМЯ(1,1,1))          КАК ГоденДо
	|ПОМЕСТИТЬ НомераУпаковокФакт
	|ИЗ
	|	Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.НомераУпаковок КАК ДанныеНомеровУпаковокДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.Товары КАК ДанныеТоваров
	|		ПО
	|			ДанныеТоваров.Ссылка = ДанныеНомеровУпаковокДокумента.Ссылка
	|			И ДанныеТоваров.ИдентификаторСтроки = ДанныеНомеровУпаковокДокумента.ИдентификаторСтроки
	|ГДЕ
	|	ДанныеНомеровУпаковокДокумента.Ссылка = &Документ
	|	И ДанныеНомеровУпаковокДокумента.ФактическоеНаличие
	|	И ДанныеНомеровУпаковокДокумента.КлючУпаковки <> """"
	|{ГДЕ
	|	ДанныеНомеровУпаковокДокумента.НомерКИЗ КАК НомерКИЗ,
	|	ПОДСТРОКА(ДанныеНомеровУпаковокДокумента.НомерКИЗ, 1, 14) КАК GTIN}
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныеСерийНомеровУпаковокИБ()
	
	ТекстЗапроса = "";
	ИнвентаризацияМДЛППереопределяемый.УстановитьТекстЗапросаДанныеСерийНомеровУпаковокИБ(ТекстЗапроса);
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	""""              КАК НомерУпаковки,
		|	""""              КАК КлючУпаковки,
		|	""""              КАК НомерСерии,
		|	ДАТАВРЕМЯ(1,1,1)  КАК ГоденДо
		|ГДЕ
		|	ЛОЖЬ
		|";
		
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ЗапросОбъект = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ЗапросОбъект.ТаблицаДляПомещения = "ДанныеСерииНомеровУпаковокИБ";
	ЗапросОбъект.Индекс.Добавить("НомерУпаковки");
	ЗапросОбъект.Индекс.Добавить("КлючУпаковки");
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИнвентаризированныеУпаковки(ПолучениеОстатковПоФакту = Ложь)
	
	Если ПолучениеОстатковПоФакту Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	""""  КАК НомерУпаковки,
		|	""""  КАК КлючУпаковки
		|ПОМЕСТИТЬ ИнвентаризированныеУпаковки
		|ГДЕ
		|	ЛОЖЬ
		|";
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИнвентаризированныеУпаковки.НомерУпаковки  КАК НомерУпаковки,
		|	ИнвентаризированныеУпаковки.КлючУпаковки   КАК КлючУпаковки
		|ПОМЕСТИТЬ ИнвентаризированныеУпаковки
		|ИЗ
		|	РегистрСведений.ИнвентаризированныеУпаковкиМДЛП КАК ИнвентаризированныеУпаковки
		|ГДЕ
		|	ИнвентаризированныеУпаковки.ИнвентаризационнаяОпись = &ИнвентаризационнаяОпись
		|	И ИнвентаризированныеУпаковки.ДокументИнвентаризации <> &Документ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИнвентаризированныеУпаковки.НомерУпаковки  КАК НомерУпаковки,
		|	ИнвентаризированныеУпаковки.КлючУпаковки   КАК КлючУпаковки
		|ИЗ
		|	РегистрСведений.ИнвентаризированныеУпаковкиАрхивМДЛП КАК ИнвентаризированныеУпаковки
		|ГДЕ
		|	ИнвентаризированныеУпаковки.МестоДеятельности = &МестоДеятельности
		|	И ИнвентаризированныеУпаковки.ДатаСтатуса >= &ГраницаЗагрузкиОстатков
		|";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОстаткиУпаковокИБ(ПолучениеОстатковПоФакту = Ложь)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиУпаковок.НомерУпаковки          КАК НомерКИЗ,
	|	ОстаткиУпаковок.КлючУпаковки           КАК КлючУпаковки,
	|	ОстаткиУпаковок.МестоДеятельности      КАК МестоДеятельности,
	|	МАКСИМУМ(ОстаткиУпаковок.ДатаСтатуса)  КАК ДатаСтатуса
	|ПОМЕСТИТЬ СгруппированныеОстаткиУпаковокИБ
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК ОстаткиУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ИнвентаризированныеУпаковки КАК ИнвентаризированныеУпаковки
	|		ПО
	|			ИнвентаризированныеУпаковки.НомерУпаковки = ОстаткиУпаковок.НомерУпаковки
	|			И ИнвентаризированныеУпаковки.КлючУпаковки = ОстаткиУпаковок.КлючУпаковки
	|ГДЕ
	|	ОстаткиУпаковок.МестоДеятельности = &МестоДеятельности
	|	И НЕ ОстаткиУпаковок.ГрупповаяУпаковка
	|	И ИнвентаризированныеУпаковки.НомерУпаковки ЕСТЬ NULL
	|	И ОстаткиУпаковок.ДатаСтатуса >= &ГраницаЗагрузкиОстатков
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиУпаковок.НомерУпаковки,
	|	ОстаткиУпаковок.КлючУпаковки,
	|	ОстаткиУпаковок.МестоДеятельности
	|";
	
	Если ПолучениеОстатковПоФакту Тогда
		ДобавитьВнутреннееСоединениеНомераУпаковокФакт(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ОстаткиУпаковок.НомерКИЗ                                      КАК НомерКИЗ,
	|	ОстаткиУпаковок.КлючУпаковки                                  КАК КлючУпаковки,
	|	ПОДСТРОКА(ОстаткиУпаковок.НомерКИЗ, 1, 14)                    КАК GTIN,
	
	|	ВЫБОР
	|		КОГДА ДанныеОстатковУпаковок.ДокументРезерва = &Документ
	|			ТОГДА ДанныеОстатковУпаковок.ИсходныйСтатус
	|		ИНАЧЕ ДанныеОстатковУпаковок.Статус
	|	КОНЕЦ                                                         КАК Статус,
	
	|	ДанныеОстатковУпаковок.ДатаСтатуса                            КАК ДатаСтатуса,
	|	ДанныеОстатковУпаковок.НомерГрупповойУпаковки                 КАК НомерГрупповойУпаковки,
	|	ЕСТЬNULL(ДанныеОстатковВерхнеуровневыхУпаковок.НомерУпаковки,
	|		&ПустаяГрупповаяУпаковка)                                 КАК НомерВерхнеуровневойУпаковки,
	
	|	ВЫБОР
	|		КОГДА ДанныеОстатковВерхнеуровневыхУпаковок.ДокументРезерва = &Документ
	|			ТОГДА ЕСТЬNULL(ДанныеОстатковВерхнеуровневыхУпаковок.ИсходныйСтатус, &ПустойСтатусУпаковки)
	|		ИНАЧЕ ЕСТЬNULL(ДанныеОстатковВерхнеуровневыхУпаковок.Статус, &ПустойСтатусУпаковки)
	|	КОНЕЦ                                                         КАК СтатусВерхнеуровневойУпаковки,
	
	// Групповая упаковка может быть верхнеуровневой. Если это так, то статус должен быть как у верхнеуровневой, иначе Статус.
	|	ВЫБОР
	|		КОГДА ДанныеОстатковВложенныхГрупповыхУпаковок.ДокументРезерва = &Документ
	|			ТОГДА ЕСТЬNULL(ДанныеОстатковВложенныхГрупповыхУпаковок.ИсходныйСтатус, &ПустойСтатусУпаковки)
	|		ИНАЧЕ ЕСТЬNULL(ДанныеОстатковВложенныхГрупповыхУпаковок.Статус, &ПустойСтатусУпаковки)
	|	КОНЕЦ                                                         КАК СтатусГрупповойУпаковки,
	
	|	ЕСТЬNULL(ДанныеСерииНомеровУпаковокИБ.НомерСерии, """")           КАК НомерСерии,
	|	ЕСТЬNULL(ДанныеСерииНомеровУпаковокИБ.ГоденДо, ДАТАВРЕМЯ(1,1,1))  КАК ГоденДо
	
	|ПОМЕСТИТЬ ОстаткиУпаковокИБ
	|ИЗ
	|	СгруппированныеОстаткиУпаковокИБ КАК ОстаткиУпаковок
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.УпаковкиМДЛП КАК ДанныеОстатковУпаковок
	|		ПО
	|			ДанныеОстатковУпаковок.НомерУпаковки = ОстаткиУпаковок.НомерКИЗ
	|			И ДанныеОстатковУпаковок.КлючУпаковки = ОстаткиУпаковок.КлючУпаковки
	|			И ДанныеОстатковУпаковок.МестоДеятельности = &МестоДеятельности
	|			И ДанныеОстатковУпаковок.ДатаСтатуса = ОстаткиУпаковок.ДатаСтатуса
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.УпаковкиМДЛП КАК ДанныеОстатковВерхнеуровневыхУпаковок
	|		ПО
	|			ДанныеОстатковВерхнеуровневыхУпаковок.НомерУпаковки = ДанныеОстатковУпаковок.ДокументРезерва
	|			И ДанныеОстатковВерхнеуровневыхУпаковок.МестоДеятельности = &МестоДеятельности
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.УпаковкиМДЛП КАК ДанныеОстатковВложенныхГрупповыхУпаковок
	|		ПО
	|			ДанныеОстатковВложенныхГрупповыхУпаковок.НомерУпаковки = ДанныеОстатковУпаковок.НомерГрупповойУпаковки
	|			И ДанныеОстатковВложенныхГрупповыхУпаковок.МестоДеятельности = &МестоДеятельности
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ДанныеСерииНомеровУпаковокИБ КАК ДанныеСерииНомеровУпаковокИБ
	|		ПО
	|			ДанныеСерииНомеровУпаковокИБ.НомерУпаковки = ОстаткиУпаковок.НомерКИЗ
	|			И ДанныеСерииНомеровУпаковокИБ.КлючУпаковки = ОстаткиУпаковок.КлючУпаковки
	|{ГДЕ
	|	ОстаткиУпаковок.НомерКИЗ КАК НомерКИЗ,
	|	ПОДСТРОКА(ОстаткиУпаковок.НомерКИЗ, 1, 14) КАК GTIN}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СгруппированныеОстаткиУпаковокИБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеСерииНомеровУпаковокИБ
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОстаткиУпаковокМДЛП(ПолучениеОстатковПоФакту = Ложь)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОстаткиУпаковок.НомерУпаковки                КАК НомерКИЗ,
	|	ОстаткиУпаковок.КлючУпаковки                 КАК КлючУпаковки,
	|	ОстаткиУпаковок.GTIN                         КАК GTIN,
	|	ОстаткиУпаковок.НомерГрупповойУпаковки       КАК НомерГрупповойУпаковки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОстаткиГрупповыхУпаковокМДЛП.НомерВерхнеуровневойУпаковки, &ПустаяГрупповаяУпаковка) <> &ПустаяГрупповаяУпаковка
	|			ТОГДА ОстаткиГрупповыхУпаковокМДЛП.НомерВерхнеуровневойУпаковки
	|		ИНАЧЕ ОстаткиУпаковок.НомерГрупповойУпаковки
	|	КОНЕЦ                                        КАК НомерВерхнеуровневойУпаковки,
	|	ОстаткиУпаковок.ИсходныйСтатус               КАК ИсходныйСтатус,
	|	ВЫБОР
	|		КОГДА ОстаткиУпаковок.НомерГрупповойУпаковки <> &ПустаяГрупповаяУпаковка
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ВУпаковке)
	|		ИНАЧЕ ОстаткиУпаковок.Статус
	|	КОНЕЦ                                        КАК Статус,
	
	// Групповая упаковка может быть верхнеуровневой.
	// Статус верхнеуровневой групповой упаковки должен быть всегда равен статусу потребительской упаковки.
	|	ВЫБОР
	|		КОГДА ОстаткиУпаковок.НомерГрупповойУпаковки <> &ПустаяГрупповаяУпаковка
	|			ТОГДА ОстаткиУпаковок.Статус
	|		ИНАЧЕ &ПустойСтатусУпаковки
	|	КОНЕЦ                                        КАК СтатусВерхнеуровневойУпаковки,
	
	// Групповая упаковка может быть верхнеуровневой. Если это так, то статус должен быть как у верхнеуровневой, иначе В упаковке.
	|	ВЫБОР
	|		КОГДА ОстаткиУпаковок.НомерГрупповойУпаковки <> &ПустаяГрупповаяУпаковка
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(ОстаткиГрупповыхУпаковокМДЛП.НомерВерхнеуровневойУпаковки, &ПустаяГрупповаяУпаковка) = &ПустаяГрупповаяУпаковка
	|					ТОГДА ОстаткиУпаковок.Статус
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ВУпаковке)
	|			КОНЕЦ
	|		ИНАЧЕ &ПустойСтатусУпаковки
	|	КОНЕЦ                                        КАК СтатусГрупповойУпаковки,
	
	|	ОстаткиУпаковок.ДатаСтатуса                  КАК ДатаСтатуса,
	|	ОстаткиУпаковок.ДатаОтгрузки                 КАК ДатаОтгрузки,
	|	ОстаткиУпаковок.НомерСерии                   КАК НомерСерии,
	|	ОстаткиУпаковок.ГоденДо                      КАК ГоденДо,
	|	ОстаткиУпаковок.ДатаАктуальности             КАК ДатаАктуальности
	|ПОМЕСТИТЬ ОстаткиУпаковокМДЛП
	|ИЗ
	|	РегистрСведений.ОстаткиПотребительскихУпаковокМДЛП КАК ОстаткиУпаковок
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОстаткиГрупповыхУпаковокМДЛП КАК ОстаткиГрупповыхУпаковокМДЛП
	|		ПО
	|			ОстаткиГрупповыхУпаковокМДЛП.НомерУпаковки = ОстаткиУпаковок.НомерГрупповойУпаковки
	|			И ОстаткиГрупповыхУпаковокМДЛП.МестоДеятельности = &МестоДеятельности
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ИнвентаризированныеУпаковки КАК ИнвентаризированныеУпаковки
	|		ПО
	|			ИнвентаризированныеУпаковки.НомерУпаковки = ОстаткиУпаковок.НомерУпаковки
	|			И ИнвентаризированныеУпаковки.КлючУпаковки = ОстаткиУпаковок.КлючУпаковки
	|ГДЕ
	|	ОстаткиУпаковок.МестоДеятельности = &МестоДеятельности
	|	И ИнвентаризированныеУпаковки.НомерУпаковки ЕСТЬ NULL
	|	И ОстаткиУпаковок.ДатаСтатуса >= &ГраницаЗагрузкиОстатков
	|{ГДЕ
	|	ОстаткиУпаковок.НомерУпаковки КАК НомерКИЗ,
	|	ОстаткиУпаковок.GTIN КАК GTIN}
	|";
	
	Если ПолучениеОстатковПоФакту Тогда
		ДобавитьВнутреннееСоединениеНомераУпаковокФакт(ТекстЗапроса);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСводнаяТаблица()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СводнаяТаблица.НомерКИЗ                                    КАК НомерКИЗ,
	|	СводнаяТаблица.КлючУпаковки                                КАК КлючУпаковки,
	|	СводнаяТаблица.GTIN                                        КАК GTIN,
	|	МАКСИМУМ(СводнаяТаблица.ИсходныйСтатусМДЛП)                КАК ИсходныйСтатусМДЛП,
	|	МАКСИМУМ(СводнаяТаблица.СтатусМДЛП)                        КАК СтатусМДЛП,
	|	МАКСИМУМ(СводнаяТаблица.СтатусИБ)                          КАК СтатусИБ,
	|	МАКСИМУМ(СводнаяТаблица.СтатусВерхнеуровневойУпаковкиМДЛП) КАК СтатусВерхнеуровневойУпаковкиМДЛП,
	|	МАКСИМУМ(СводнаяТаблица.СтатусВерхнеуровневойУпаковкиИБ)   КАК СтатусВерхнеуровневойУпаковкиИБ,
	|	МАКСИМУМ(СводнаяТаблица.СтатусГрупповойУпаковкиМДЛП)       КАК СтатусГрупповойУпаковкиМДЛП,
	|	МАКСИМУМ(СводнаяТаблица.СтатусГрупповойУпаковкиИБ)         КАК СтатусГрупповойУпаковкиИБ,
	|	МАКСИМУМ(СводнаяТаблица.ДатаСтатусаМДЛП)                   КАК ДатаСтатусаМДЛП,
	|	МАКСИМУМ(СводнаяТаблица.ДатаСтатусаИБ)                     КАК ДатаСтатусаИБ,
	|	МАКСИМУМ(СводнаяТаблица.НомерГрупповойУпаковкиМДЛП)        КАК НомерГрупповойУпаковкиМДЛП,
	|	МАКСИМУМ(СводнаяТаблица.НомерГрупповойУпаковкиИБ)          КАК НомерГрупповойУпаковкиИБ,
	|	МАКСИМУМ(СводнаяТаблица.НомерВерхнеуровневойУпаковкиМДЛП)  КАК НомерВерхнеуровневойУпаковкиМДЛП,
	|	МАКСИМУМ(СводнаяТаблица.НомерВерхнеуровневойУпаковкиИБ)    КАК НомерВерхнеуровневойУпаковкиИБ,
	|	МАКСИМУМ(СводнаяТаблица.НомерСерииМДЛП)                    КАК НомерСерииМДЛП,
	|	МАКСИМУМ(СводнаяТаблица.ГоденДоМДЛП)                       КАК ГоденДоМДЛП,
	|	МАКСИМУМ(СводнаяТаблица.НомерСерииИБ)                      КАК НомерСерииИБ,
	|	МАКСИМУМ(СводнаяТаблица.ГоденДоИБ)                         КАК ГоденДоИБ,
	|	МАКСИМУМ(СводнаяТаблица.НомерСерииФакт)                    КАК НомерСерииФакт,
	|	МАКСИМУМ(СводнаяТаблица.ГоденДоФакт)                       КАК ГоденДоФакт,
	|	МАКСИМУМ(СводнаяТаблица.ДатаАктуальности)                  КАК ДатаАктуальности,
	|	МАКСИМУМ(СводнаяТаблица.ФактическоеНаличие)                КАК ФактическоеНаличие
	|ПОМЕСТИТЬ СводнаяТаблица
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОстаткиУпаковокМДЛП.НомерКИЗ                      КАК НомерКИЗ,
	|		ОстаткиУпаковокМДЛП.КлючУпаковки                  КАК КлючУпаковки,
	|		ОстаткиУпаковокМДЛП.GTIN                          КАК GTIN,
	|		ОстаткиУпаковокМДЛП.ИсходныйСтатус                КАК ИсходныйСтатусМДЛП,
	|		ОстаткиУпаковокМДЛП.Статус                        КАК СтатусМДЛП,
	|		NULL                                              КАК СтатусИБ,
	|		ОстаткиУпаковокМДЛП.СтатусВерхнеуровневойУпаковки КАК СтатусВерхнеуровневойУпаковкиМДЛП,
	|		NULL                                              КАК СтатусВерхнеуровневойУпаковкиИБ,
	|		ОстаткиУпаковокМДЛП.СтатусГрупповойУпаковки       КАК СтатусГрупповойУпаковкиМДЛП,
	|		NULL                                              КАК СтатусГрупповойУпаковкиИБ,
	|		ОстаткиУпаковокМДЛП.ДатаСтатуса                   КАК ДатаСтатусаМДЛП,
	|		NULL                                              КАК ДатаСтатусаИБ,
	|		ОстаткиУпаковокМДЛП.НомерГрупповойУпаковки        КАК НомерГрупповойУпаковкиМДЛП,
	|		NULL                                              КАК НомерГрупповойУпаковкиИБ,
	|		ОстаткиУпаковокМДЛП.НомерВерхнеуровневойУпаковки  КАК НомерВерхнеуровневойУпаковкиМДЛП,
	|		NULL                                              КАК НомерВерхнеуровневойУпаковкиИБ,
	|		ОстаткиУпаковокМДЛП.НомерСерии                    КАК НомерСерииМДЛП,
	|		ОстаткиУпаковокМДЛП.ГоденДо                       КАК ГоденДоМДЛП,
	|		NULL                                              КАК НомерСерииИБ,
	|		NULL                                              КАК ГоденДоИБ,
	|		NULL                                              КАК НомерСерииФакт,
	|		NULL                                              КАК ГоденДоФакт,
	|		ОстаткиУпаковокМДЛП.ДатаАктуальности              КАК ДатаАктуальности,
	|		NULL                                              КАК ФактическоеНаличие
	|	ИЗ
	|		ОстаткиУпаковокМДЛП КАК ОстаткиУпаковокМДЛП
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстаткиУпаковокИБ.НомерКИЗ                        КАК НомерКИЗ,
	|		ОстаткиУпаковокИБ.КлючУпаковки                    КАК КлючУпаковки,
	|		ОстаткиУпаковокИБ.GTIN                            КАК GTIN,
	|		NULL                                              КАК ИсходныйСтатусМДЛП,
	|		NULL                                              КАК СтатусМДЛП,
	|		ОстаткиУпаковокИБ.Статус                          КАК СтатусИБ,
	|		NULL                                              КАК СтатусВерхнеуровневойУпаковкиМДЛП,
	|		ОстаткиУпаковокИБ.СтатусВерхнеуровневойУпаковки   КАК СтатусВерхнеуровневойУпаковкиИБ,
	|		NULL                                              КАК СтатусГрупповойУпаковкиМДЛП,
	|		ОстаткиУпаковокИБ.СтатусГрупповойУпаковки         КАК СтатусГрупповойУпаковкиИБ,
	|		NULL                                              КАК ДатаСтатусаМДЛП,
	|		ОстаткиУпаковокИБ.ДатаСтатуса                     КАК ДатаСтатусаИБ,
	|		NULL                                              КАК НомерГрупповойУпаковкиМДЛП,
	|		ОстаткиУпаковокИБ.НомерГрупповойУпаковки          КАК НомерГрупповойУпаковкиИБ,
	|		NULL                                              КАК НомерВерхнеуровневойУпаковкиМДЛП,
	|		ОстаткиУпаковокИБ.НомерВерхнеуровневойУпаковки    КАК НомерВерхнеуровневойУпаковкиИБ,
	|		NULL                                              КАК НомерСерииМДЛП,
	|		NULL                                              КАК ГоденДоМДЛП,
	|		ОстаткиУпаковокИБ.НомерСерии                      КАК НомерСерииИБ,
	|		ОстаткиУпаковокИБ.ГоденДо                         КАК ГоденДоИБ,
	|		NULL                                              КАК НомерСерииФакт,
	|		NULL                                              КАК ГоденДоФакт,
	|		NULL                                              КАК ДатаАктуальности,
	|		NULL                                              КАК ФактическоеНаличие
	|	ИЗ
	|		ОстаткиУпаковокИБ КАК ОстаткиУпаковокИБ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НомераУпаковокФакт.НомерКИЗ                       КАК НомерКИЗ,
	|		НомераУпаковокФакт.КлючУпаковки                   КАК КлючУпаковки,
	|		НомераУпаковокФакт.GTIN                           КАК GTIN,
	|		NULL                                              КАК ИсходныйСтатусМДЛП,
	|		NULL                                              КАК СтатусМДЛП,
	|		NULL                                              КАК СтатусИБ,
	|		NULL                                              КАК СтатусВерхнеуровневойУпаковкиМДЛП,
	|		NULL                                              КАК СтатусВерхнеуровневойУпаковкиИБ,
	|		NULL                                              КАК СтатусГрупповойУпаковкиМДЛП,
	|		NULL                                              КАК СтатусГрупповойУпаковкиИБ,
	|		NULL                                              КАК ДатаСтатусаМДЛП,
	|		NULL                                              КАК ДатаСтатусаИБ,
	|		NULL                                              КАК НомерГрупповойУпаковкиМДЛП,
	|		NULL                                              КАК НомерГрупповойУпаковкиИБ,
	|		NULL                                              КАК НомерВерхнеуровневойУпаковкиМДЛП,
	|		NULL                                              КАК НомерВерхнеуровневойУпаковкиИБ,
	|		NULL                                              КАК НомерСерииМДЛП,
	|		NULL                                              КАК ГоденДоМДЛП,
	|		NULL                                              КАК НомерСерииИБ,
	|		NULL                                              КАК ГоденДоИБ,
	|		НомераУпаковокФакт.НомерСерии                     КАК НомерСерииФакт,
	|		НомераУпаковокФакт.ГоденДо                        КАК ГоденДоФакт,
	|		NULL                                              КАК ДатаАктуальности,
	|		ИСТИНА                                            КАК ФактическоеНаличие
	|	ИЗ
	|		НомераУпаковокФакт КАК НомераУпаковокФакт
	|	
	|	) КАК СводнаяТаблица
	|{ГДЕ
	|	СводнаяТаблица.НомерКИЗ                                                                                          КАК НомерКИЗ,
	|	СводнаяТаблица.GTIN                                                                                              КАК GTIN,
	|	ЕСТЬNULL(МАКСИМУМ(СводнаяТаблица.ИсходныйСтатусМДЛП), """")                                                      КАК ИсходныйСтатусМДЛП,
	|	ЕСТЬNULL(МАКСИМУМ(СводнаяТаблица.СтатусМДЛП), &ПустойСтатусУпаковки)                                             КАК СтатусМДЛП,
	|	ЕСТЬNULL(МАКСИМУМ(СводнаяТаблица.СтатусИБ), &ПустойСтатусУпаковки)                                               КАК СтатусИБ,
	|	ЕСТЬNULL(МАКСИМУМ(СводнаяТаблица.ДатаСтатусаМДЛП), ДАТАВРЕМЯ(1,1,1))                                             КАК ДатаСтатусаМДЛП,
	|	ЕСТЬNULL(МАКСИМУМ(СводнаяТаблица.ДатаСтатусаИБ), ДАТАВРЕМЯ(1,1,1))                                               КАК ДатаСтатусаИБ,
	|	ЕСТЬNULL(МАКСИМУМ(СводнаяТаблица.НомерВерхнеуровневойУпаковкиМДЛП), &ПустаяГрупповаяУпаковка)                    КАК НомерВерхнеуровневойУпаковкиМДЛП,
	|	ЕСТЬNULL(МАКСИМУМ(СводнаяТаблица.НомерВерхнеуровневойУпаковкиИБ), &ПустаяГрупповаяУпаковка)                      КАК НомерВерхнеуровневойУпаковкиИБ,
	|	ЕСТЬNULL(МАКСИМУМ(СводнаяТаблица.НомерСерииМДЛП), """")                                                          КАК НомерСерииМДЛП,
	|	ЕСТЬNULL(МАКСИМУМ(СводнаяТаблица.ГоденДоМДЛП), ДАТАВРЕМЯ(1,1,1))                                                 КАК ГоденДоМДЛП,
	|	ЕСТЬNULL(МАКСИМУМ(СводнаяТаблица.НомерСерииИБ), """")                                                            КАК НомерСерииИБ,
	|	ЕСТЬNULL(МАКСИМУМ(СводнаяТаблица.ГоденДоИБ), ДАТАВРЕМЯ(1,1,1))                                                   КАК ГоденДоИБ}
	|СГРУППИРОВАТЬ ПО
	|	СводнаяТаблица.НомерКИЗ,
	|	СводнаяТаблица.КлючУпаковки,
	|	СводнаяТаблица.GTIN
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиУпаковокМДЛП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиУпаковокИБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НомераУпаковокФакт
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРезультатыАнализа()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СводнаяТаблица.НомерКИЗ                                           КАК НомерКИЗ,
	|	СводнаяТаблица.КлючУпаковки                                       КАК КлючУпаковки,
	|	ЕСТЬNULL(СводнаяТаблица.GTIN, &ПустойGTIN)                        КАК GTIN,
	|	ЕСТЬNULL(СводнаяТаблица.ИсходныйСтатусМДЛП, """")                 КАК ИсходныйСтатусМДЛП,
	|	ЕСТЬNULL(СводнаяТаблица.СтатусМДЛП,
	|		&ПустойСтатусУпаковки)                                        КАК СтатусМДЛП,
	|	ЕСТЬNULL(СводнаяТаблица.СтатусИБ,
	|		&ПустойСтатусУпаковки)                                        КАК СтатусИБ,
	|	ЕСТЬNULL(СводнаяТаблица.ДатаСтатусаМДЛП,
	|		ДАТАВРЕМЯ(1,1,1))                                             КАК ДатаСтатусаМДЛП,
	|	ЕСТЬNULL(СводнаяТаблица.ДатаСтатусаИБ,
	|		ДАТАВРЕМЯ(1,1,1))                                             КАК ДатаСтатусаИБ,
	|	ЕСТЬNULL(СводнаяТаблица.НомерГрупповойУпаковкиМДЛП,
	|		&ПустаяГрупповаяУпаковка)                                     КАК НомерГрупповойУпаковкиМДЛП,
	|	ЕСТЬNULL(СводнаяТаблица.НомерГрупповойУпаковкиИБ,
	|		&ПустаяГрупповаяУпаковка)                                     КАК НомерГрупповойУпаковкиИБ,
	|	ЕСТЬNULL(СводнаяТаблица.НомерВерхнеуровневойУпаковкиМДЛП,
	|		&ПустаяГрупповаяУпаковка)                                     КАК НомерВерхнеуровневойУпаковкиМДЛП,
	|	ЕСТЬNULL(СводнаяТаблица.НомерВерхнеуровневойУпаковкиИБ,
	|		&ПустаяГрупповаяУпаковка)                                     КАК НомерВерхнеуровневойУпаковкиИБ,
	
	|	ВЫБОР
	|		КОГДА СводнаяТаблица.НомерСерииМДЛП ЕСТЬ NULL ИЛИ СводнаяТаблица.ГоденДоМДЛП ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА СводнаяТаблица.НомерСерииФакт ЕСТЬ NULL ИЛИ СводнаяТаблица.ГоденДоФакт ЕСТЬ NULL
	|					ТОГДА СводнаяТаблица.НомерСерииИБ
	|				ИНАЧЕ СводнаяТаблица.НомерСерииФакт
	|			КОНЕЦ
	|		ИНАЧЕ СводнаяТаблица.НомерСерииМДЛП
	|	КОНЕЦ                                                             КАК НомерСерии,
	
	|	ВЫБОР
	|		КОГДА СводнаяТаблица.НомерСерииМДЛП ЕСТЬ NULL ИЛИ СводнаяТаблица.ГоденДоМДЛП ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА СводнаяТаблица.НомерСерииФакт ЕСТЬ NULL ИЛИ СводнаяТаблица.ГоденДоФакт ЕСТЬ NULL
	|					ТОГДА СводнаяТаблица.ГоденДоИБ
	|				ИНАЧЕ СводнаяТаблица.ГоденДоФакт
	|			КОНЕЦ
	|		ИНАЧЕ СводнаяТаблица.ГоденДоМДЛП
	|	КОНЕЦ                                                             КАК ГоденДо,
	
	|	ЕСТЬNULL(СводнаяТаблица.ДатаАктуальности, ДАТАВРЕМЯ(1,1,1))       КАК ДатаАктуальности,
	|	ЕСТЬNULL(СводнаяТаблица.ФактическоеНаличие, ЛОЖЬ)                 КАК ФактическоеНаличие,
	
	|	ВЫБОР
	|		КОГДА
	|			СводнаяТаблица.СтатусМДЛП ЕСТЬ NULL И НЕ СводнаяТаблица.СтатусИБ ЕСТЬ NULL
	|			ИЛИ НЕ СводнаяТаблица.СтатусМДЛП ЕСТЬ NULL И СводнаяТаблица.СтатусИБ ЕСТЬ NULL
	|			ИЛИ ЕСТЬNULL(СводнаяТаблица.СтатусМДЛП, &ПустойСтатусУпаковки)
	|				<> ЕСТЬNULL(СводнаяТаблица.СтатусИБ, &ПустойСтатусУпаковки)
	|			ИЛИ ЕСТЬNULL(СводнаяТаблица.ДатаСтатусаМДЛП, ДАТАВРЕМЯ(1,1,1))
	|				<> ЕСТЬNULL(СводнаяТаблица.ДатаСтатусаИБ, ДАТАВРЕМЯ(1,1,1))
	|			ИЛИ ЕСТЬNULL(СводнаяТаблица.НомерГрупповойУпаковкиМДЛП, &ПустаяГрупповаяУпаковка)
	|				<> ЕСТЬNULL(СводнаяТаблица.НомерГрупповойУпаковкиИБ, &ПустаяГрупповаяУпаковка)
	|			ИЛИ ЕСТЬNULL(СводнаяТаблица.НомерВерхнеуровневойУпаковкиМДЛП, &ПустаяГрупповаяУпаковка)
	|				<> ЕСТЬNULL(СводнаяТаблица.НомерВерхнеуровневойУпаковкиИБ, &ПустаяГрупповаяУпаковка)
	|			ИЛИ ЕСТЬNULL(СводнаяТаблица.СтатусВерхнеуровневойУпаковкиМДЛП, &ПустойСтатусУпаковки)
	|				<> ЕСТЬNULL(СводнаяТаблица.СтатусВерхнеуровневойУпаковкиИБ, &ПустойСтатусУпаковки)
	|			ИЛИ ЕСТЬNULL(СводнаяТаблица.СтатусГрупповойУпаковкиМДЛП, &ПустойСтатусУпаковки)
	|				<> ЕСТЬNULL(СводнаяТаблица.СтатусГрупповойУпаковкиИБ, &ПустойСтатусУпаковки)
	|			ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                             КАК СостояниеУпаковкиОтличается,
	
	|	ВЫБОР
	|		КОГДА СводнаяТаблица.СтатусМДЛП ЕСТЬ NULL И НЕ СводнаяТаблица.СтатусИБ ЕСТЬ NULL
	|			ИЛИ СводнаяТаблица.СтатусМДЛП В (&СтатусыМожноВыполнитьСверкуМДЛП)
	|			ИЛИ СводнаяТаблица.СтатусВерхнеуровневойУпаковкиМДЛП В (&СтатусыМожноВыполнитьСверкуМДЛП) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                             КАК МожноВыполнитьСверкуМДЛП,
	
	|	ВЫБОР
	|		КОГДА СводнаяТаблица.СтатусИБ ЕСТЬ NULL И НЕ СводнаяТаблица.СтатусМДЛП ЕСТЬ NULL
	|			ИЛИ СводнаяТаблица.СтатусИБ В (&СтатусыМожноВыполнитьСверкуИБ)
	|			ИЛИ СводнаяТаблица.СтатусВерхнеуровневойУпаковкиИБ В (&СтатусыМожноВыполнитьСверкуИБ) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                             КАК МожноВыполнитьСверкуИБ,
	
	|	ВЫБОР
	|		КОГДА СводнаяТаблица.СтатусМДЛП ЕСТЬ NULL
	|			ИЛИ СводнаяТаблица.СтатусМДЛП В (&СтатусыМожноОформитьОприходованиеМДЛП) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                             КАК МожноОформитьОприходованиеМДЛП,
	
	|	ВЫБОР
	|		КОГДА НЕ СводнаяТаблица.СтатусМДЛП ЕСТЬ NULL
	|			И СводнаяТаблица.СтатусМДЛП В (&СтатусыМожноОформитьПовторныйВводВОборотМДЛП) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                             КАК МожноОформитьПовторныйВводВОборотМДЛП,
	
	|	ВЫБОР
	|		КОГДА НЕ СводнаяТаблица.СтатусМДЛП ЕСТЬ NULL
	|			И СводнаяТаблица.СтатусМДЛП В (&СтатусыМожноОформитьВыводИзОборотаМДЛП) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                             КАК МожноОформитьВыводИзОборотаМДЛП,
	
	|	ВЫБОР
	|		КОГДА НЕ СводнаяТаблица.СтатусМДЛП ЕСТЬ NULL
	|			И СводнаяТаблица.СтатусМДЛП В (&СтатусыМожноПереместитьВАрхив) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                             КАК МожноПереместитьВАрхив
	
	|ПОМЕСТИТЬ ДанныеАнализа
	|ИЗ
	|	СводнаяТаблица КАК СводнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СводнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеАнализа.НомерКИЗ                          КАК НомерКИЗ,
	|	ДанныеАнализа.КлючУпаковки                      КАК КлючУпаковки,
	|	&МестоДеятельности                              КАК МестоДеятельности,
	|	ДанныеАнализа.GTIN                              КАК GTIN,
	|	ДанныеАнализа.ИсходныйСтатусМДЛП                КАК ИсходныйСтатусМДЛП,
	|	ДанныеАнализа.СтатусМДЛП                        КАК СтатусМДЛП,
	|	ДанныеАнализа.СтатусИБ                          КАК СтатусИБ,
	|	ДанныеАнализа.ДатаСтатусаМДЛП                   КАК ДатаСтатусаМДЛП,
	|	ДанныеАнализа.ДатаСтатусаИБ                     КАК ДатаСтатусаИБ,
	|	ДанныеАнализа.НомерГрупповойУпаковкиМДЛП        КАК НомерРодительскойУпаковкиМДЛП,
	|	ДанныеАнализа.НомерГрупповойУпаковкиИБ          КАК НомерРодительскойУпаковкиИБ,
	|	ДанныеАнализа.НомерВерхнеуровневойУпаковкиМДЛП  КАК НомерВерхнеуровневойУпаковкиМДЛП,
	|	ДанныеАнализа.НомерВерхнеуровневойУпаковкиИБ    КАК НомерВерхнеуровневойУпаковкиИБ,
	|	ДанныеАнализа.НомерСерии                        КАК НомерСерии,
	|	ДанныеАнализа.ГоденДо                           КАК ГоденДо,
	|	ДанныеАнализа.ДатаАктуальности                  КАК ДатаАктуальности,
	|	ДанныеАнализа.ФактическоеНаличие                КАК ФактическоеНаличие,
	|	ОписанияРезультатовИнвентаризации.Ссылка                                        КАК РезультатАнализаУпаковок,
	|	ОписанияРезультатовИнвентаризации.РекомендуемоеДействиеПоСверкеОстатков         КАК ДействиеПоСверкеОстатков,
	|	ОписанияРезультатовИнвентаризации.РекомендуемоеДействиеПоОформлениюУведомлений  КАК ДействиеПоОформлениюУведомлений,
	|	ОписанияРезультатовИнвентаризации.ОписаниеРезультатаАнализа                     КАК ОписаниеРезультатаАнализа,
	|	ОписанияРезультатовИнвентаризации.ОписаниеРекомендуемыхДействий                 КАК ОписаниеРекомендуемыхДействий
	|{ВЫБРАТЬ
	|	НомерКИЗ,
	|	КлючУпаковки,
	|	GTIN,
	|	ИсходныйСтатусМДЛП,
	|	СтатусМДЛП,
	|	СтатусИБ,
	|	ДатаСтатусаМДЛП,
	|	ДатаСтатусаИБ,
	|	НомерРодительскойУпаковкиМДЛП,
	|	НомерРодительскойУпаковкиИБ,
	|	НомерВерхнеуровневойУпаковкиМДЛП,
	|	НомерВерхнеуровневойУпаковкиИБ,
	|	НомерСерии,
	|	ГоденДо,
	|	ДатаАктуальности,
	|	ФактическоеНаличие,
	|	РезультатАнализаУпаковок,
	|	ДействиеПоСверкеОстатков,
	|	ДействиеПоОформлениюУведомлений,
	|	ОписаниеРезультатаАнализа,
	|	ОписаниеРекомендуемыхДействий}
	|ИЗ
	|	ДанныеАнализа КАК ДанныеАнализа
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.ОписанияРезультатовАнализаИнвентаризируемыхУпаковокМДЛП КАК ОписанияРезультатовИнвентаризации
	|		ПО
	|			ОписанияРезультатовИнвентаризации.ФактическоеНаличие = ДанныеАнализа.ФактическоеНаличие
	|			И ОписанияРезультатовИнвентаризации.СостояниеУпаковкиОтличается = ДанныеАнализа.СостояниеУпаковкиОтличается
	|			И ОписанияРезультатовИнвентаризации.МожноВыполнитьСверкуМДЛП = ДанныеАнализа.МожноВыполнитьСверкуМДЛП
	|			И ОписанияРезультатовИнвентаризации.МожноВыполнитьСверкуИБ = ДанныеАнализа.МожноВыполнитьСверкуИБ
	|			И ОписанияРезультатовИнвентаризации.МожноОформитьОприходованиеМДЛП = ДанныеАнализа.МожноОформитьОприходованиеМДЛП
	|			И ОписанияРезультатовИнвентаризации.МожноОформитьПовторныйВводВОборотМДЛП = ДанныеАнализа.МожноОформитьПовторныйВводВОборотМДЛП
	|			И ОписанияРезультатовИнвентаризации.МожноОформитьВыводИзОборотаМДЛП = ДанныеАнализа.МожноОформитьВыводИзОборотаМДЛП
	|			И ОписанияРезультатовИнвентаризации.МожноПереместитьВАрхив = ДанныеАнализа.МожноПереместитьВАрхив
	|			И НЕ ПометкаУдаления
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьИерархиюГрупповыхУпаковокМДЛП(ДанныеРезультатовАнализа, ОсновныеПараметры)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНомеровУпаковок.НомерВерхнеуровневойУпаковки  КАК НомерВерхнеуровневойУпаковки
	|ПОМЕСТИТЬ ТаблицаНомеровУпаковок
	|ИЗ
	|	&ТаблицаНомеровУпаковок КАК ТаблицаНомеровУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Верхнеуровневые групповые упаковки
	|ВЫБРАТЬ
	|	ОстаткиГрупповыхУпаковокМДЛП.НомерУпаковки                 КАК НомерУпаковки,
	|	ОстаткиГрупповыхУпаковокМДЛП.КлючУпаковки                  КАК КлючУпаковки,
	|	ОстаткиГрупповыхУпаковокМДЛП.НомерГрупповойУпаковки        КАК НомерРодительскойУпаковки,
	|	ОстаткиГрупповыхУпаковокМДЛП.НомерВерхнеуровневойУпаковки  КАК НомерВерхнеуровневойУпаковки,
	|	ОстаткиГрупповыхУпаковокМДЛП.ИсходныйСтатус                КАК ИсходныйСтатус,
	|	ОстаткиГрупповыхУпаковокМДЛП.Статус                        КАК Статус,
	|	ОстаткиГрупповыхУпаковокМДЛП.ДатаСтатуса                   КАК ДатаСтатуса
	|ИЗ
	|	ТаблицаНомеровУпаковок КАК ТаблицаНомеровУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОстаткиГрупповыхУпаковокМДЛП КАК ОстаткиГрупповыхУпаковокМДЛП
	|		ПО
	|			ОстаткиГрупповыхУпаковокМДЛП.НомерУпаковки = ТаблицаНомеровУпаковок.НомерВерхнеуровневойУпаковки
	|			И ОстаткиГрупповыхУпаковокМДЛП.МестоДеятельности = &МестоДеятельности
	|ГДЕ
	|	ОстаткиГрупповыхУпаковокМДЛП.МестоДеятельности = &МестоДеятельности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Вложенные групповые упаковки
	|ВЫБРАТЬ
	|	ОстаткиГрупповыхУпаковокМДЛП.НомерУпаковки                 КАК НомерУпаковки,
	|	ОстаткиГрупповыхУпаковокМДЛП.КлючУпаковки                  КАК КлючУпаковки,
	|	ОстаткиГрупповыхУпаковокМДЛП.НомерГрупповойУпаковки        КАК НомерРодительскойУпаковки,
	|	ОстаткиГрупповыхУпаковокМДЛП.НомерВерхнеуровневойУпаковки  КАК НомерВерхнеуровневойУпаковки,
	|	ОстаткиГрупповыхУпаковокМДЛП.ИсходныйСтатус                КАК ИсходныйСтатус,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ВУпаковке)       КАК Статус,
	|	ОстаткиГрупповыхУпаковокМДЛП.ДатаСтатуса                   КАК ДатаСтатуса
	|ИЗ
	|	ТаблицаНомеровУпаковок КАК ТаблицаНомеровУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОстаткиГрупповыхУпаковокМДЛП КАК ОстаткиГрупповыхУпаковокМДЛП
	|		ПО
	|			ОстаткиГрупповыхУпаковокМДЛП.НомерВерхнеуровневойУпаковки = ТаблицаНомеровУпаковок.НомерВерхнеуровневойУпаковки
	|			И ОстаткиГрупповыхУпаковокМДЛП.МестоДеятельности = &МестоДеятельности
	|ГДЕ
	|	ОстаткиГрупповыхУпаковокМДЛП.МестоДеятельности = &МестоДеятельности
	|");
	
	ТаблицаНомеровУпаковок = Новый ТаблицаЗначений;
	ТаблицаНомеровУпаковок.Колонки.Добавить("НомерВерхнеуровневойУпаковки", Метаданные.ОпределяемыеТипы.SSCC.Тип);
	Для Каждого СтрокаДанных Из ДанныеРезультатовАнализа Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.НомерВерхнеуровневойУпаковкиМДЛП) Тогда
			СтрокаТаблицы = ТаблицаНомеровУпаковок.Добавить();
			СтрокаТаблицы.НомерВерхнеуровневойУпаковки = СтрокаДанных.НомерВерхнеуровневойУпаковкиМДЛП;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МестоДеятельности"     , ОсновныеПараметры.МестоДеятельности);
	Запрос.УстановитьПараметр("ТаблицаНомеровУпаковок", ТаблицаНомеровУпаковок);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СформироватьИерархиюГрупповыхУпаковокИБ(ДанныеРезультатовАнализа, ОсновныеПараметры)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНомеровУпаковок.НомерВерхнеуровневойУпаковки  КАК НомерВерхнеуровневойУпаковки
	|ПОМЕСТИТЬ ТаблицаНомеровУпаковок
	|ИЗ
	|	&ТаблицаНомеровУпаковок КАК ТаблицаНомеровУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Верхнеуровневые групповые упаковки
	|ВЫБРАТЬ
	|	ОстаткиГрупповыхУпаковокИБ.НомерУпаковки                 КАК НомерУпаковки,
	|	ОстаткиГрупповыхУпаковокИБ.КлючУпаковки                  КАК КлючУпаковки,
	|	&ПустаяГрупповаяУпаковка                                 КАК НомерРодительскойУпаковки,
	|	&ПустаяГрупповаяУпаковка                                 КАК НомерВерхнеуровневойУпаковки,
	|	ОстаткиГрупповыхУпаковокИБ.Статус                        КАК Статус,
	|	ОстаткиГрупповыхУпаковокИБ.ДатаСтатуса                   КАК ДатаСтатуса
	|ИЗ
	|	ТаблицаНомеровУпаковок КАК ТаблицаНомеровУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.УпаковкиМДЛП КАК ОстаткиГрупповыхУпаковокИБ
	|		ПО
	|			ОстаткиГрупповыхУпаковокИБ.НомерУпаковки = ТаблицаНомеровУпаковок.НомерВерхнеуровневойУпаковки
	|			И ОстаткиГрупповыхУпаковокИБ.МестоДеятельности = &МестоДеятельности
	|ГДЕ
	|	ОстаткиГрупповыхУпаковокИБ.МестоДеятельности = &МестоДеятельности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Вложенные групповые упаковки
	|ВЫБРАТЬ
	|	ОстаткиГрупповыхУпаковокИБ.НомерУпаковки                 КАК НомерУпаковки,
	|	ОстаткиГрупповыхУпаковокИБ.КлючУпаковки                  КАК КлючУпаковки,
	|	ОстаткиГрупповыхУпаковокИБ.НомерГрупповойУпаковки        КАК НомерРодительскойУпаковки,
	|	ОстаткиГрупповыхУпаковокИБ.ДокументРезерва               КАК НомерВерхнеуровневойУпаковки,
	|	ОстаткиГрупповыхУпаковокИБ.Статус                        КАК Статус,
	|	ОстаткиГрупповыхУпаковокИБ.ДатаСтатуса                   КАК ДатаСтатуса
	|ИЗ
	|	ТаблицаНомеровУпаковок КАК ТаблицаНомеровУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.УпаковкиМДЛП КАК ОстаткиГрупповыхУпаковокИБ
	|		ПО
	|			ОстаткиГрупповыхУпаковокИБ.ДокументРезерва = ТаблицаНомеровУпаковок.НомерВерхнеуровневойУпаковки
	|			И ОстаткиГрупповыхУпаковокИБ.МестоДеятельности = &МестоДеятельности
	|ГДЕ
	|	ОстаткиГрупповыхУпаковокИБ.МестоДеятельности = &МестоДеятельности
	|");
	
	ТаблицаНомеровУпаковок = Новый ТаблицаЗначений;
	ТаблицаНомеровУпаковок.Колонки.Добавить("НомерВерхнеуровневойУпаковки", Метаданные.ОпределяемыеТипы.SSCC.Тип);
	Для Каждого СтрокаДанных Из ДанныеРезультатовАнализа Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.НомерВерхнеуровневойУпаковкиИБ) Тогда
			СтрокаТаблицы = ТаблицаНомеровУпаковок.Добавить();
			СтрокаТаблицы.НомерВерхнеуровневойУпаковки = СтрокаДанных.НомерВерхнеуровневойУпаковкиИБ;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МестоДеятельности"     , ОсновныеПараметры.МестоДеятельности);
	Запрос.УстановитьПараметр("ТаблицаНомеровУпаковок", ТаблицаНомеровУпаковок);
	Запрос.УстановитьПараметр("ПустаяГрупповаяУпаковка", Метаданные.ОпределяемыеТипы.SSCC.Тип.ПривестиЗначение());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДобавитьВнутреннееСоединениеНомераУпаковокФакт(ТекстЗапроса)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Оператор = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1].Операторы[0];
	
	Источник_НомераУпаковокФакт = Оператор.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), "НомераУпаковокФакт", "НомераУпаковокФакт");
	ДоступныеПоляИсточника_НомераУпаковокФакт = Источник_НомераУпаковокФакт.Источник.ДоступныеПоля;
	ДоступныеПоляИсточника_НомераУпаковокФакт.Добавить("НомерКИЗ");
	ДоступныеПоляИсточника_НомераУпаковокФакт.Добавить("КлючУпаковки");
	
	Условие = "НомераУпаковокФакт.НомерКИЗ = ОстаткиУпаковок.НомерУпаковки
		|И НомераУпаковокФакт.КлючУпаковки = ОстаткиУпаковок.КлючУпаковки";
	
	Соединения = Оператор.Источники[0].Соединения;
	Соединения.Добавить(Источник_НомераУпаковокФакт, Условие);
	Соединение = Соединения[Соединения.Количество() - 1];
	Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыУпаковокДляАнализа

Функция СтатусыМожноВыполнитьСверкуМДЛП()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВыбылаИзОборота);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ПереданаНаУничтожение);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.Уничтожена);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВОбороте);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ОборотПриостановлен);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.Перемаркирована);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ПринятаНаСкладИзЗТК);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.НеИспользована);
	
	Возврат Статусы;
	
КонецФункции

Функция СтатусыМожноВыполнитьСверкуИБ()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВыбылаИзОборота);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ПереданаНаУничтожение);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.Уничтожена);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВОбороте);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ОборотПриостановлен);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.Перемаркирована);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ПринятаНаСкладИзЗТК);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.НеИспользована);
	
	Возврат Статусы;
	
КонецФункции

Функция СтатусыМожноОформитьОприходованиеМДЛП()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ПустаяСсылка());
	
	Возврат Статусы;
	
КонецФункции

Функция СтатусыМожноОформитьПовторныйВводВОборотМДЛП()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВыбылаИзОборота);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой);
	
	Возврат Статусы;
	
КонецФункции

Функция СтатусыМожноОформитьВыводИзОборотаМДЛП()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВОбороте);
	
	Возврат Статусы;
	
КонецФункции

Функция СтатусыМожноПереместитьВАрхив()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВыбылаИзОборота);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.ВыбылаИзОборотаСОшибкой);
	Статусы.Добавить(Перечисления.СтатусыУпаковокМДЛП.Уничтожена);
	
	Возврат Статусы;
	
КонецФункции

#КонецОбласти

#Область ПроверкаДлинныВыборкиДанных

Процедура ПроверитьМаксимальнуюДлиннуВыборкиВременнойТаблицы(Запрос, Результат)
	
	РезультатыВыполнения = Запрос.ВыполнитьПакет();
	Граница = РезультатыВыполнения.Количество() - 1;
	Для Индекс = 0 По Граница Цикл
		
		РезультатВыполнения = РезультатыВыполнения[Граница - Индекс];
		Если РезультатВыполнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаКоличестваЗаписей = РезультатВыполнения.Выбрать();
		ВыборкаКоличестваЗаписей.Следующий();
		Если ВыборкаКоличестваЗаписей.Количество > МаксимальноеКоличествоСтрок() Тогда
			Результат.Статус = "Ошибка";
			Результат.Ошибки.Добавить(ТекстОшибкиСлишкомМногоДанныхДляОбработки());
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

Функция МаксимальноеКоличествоСтрок()
	
	Возврат 99999;
	
КонецФункции

Функция ТекстОшибкиСлишкомМногоДанныхДляОбработки()
	
	Возврат НСтр("ru = 'Слишком много данных для обработки. Ограничьте запрос более конкретными отборами.'");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерий(ПустаяСсылка().Метаданные(), Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//  ПараметрыУказанияСерий - Структура
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПустаяСсылка().Метаданные(), ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции Подключаемые.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
