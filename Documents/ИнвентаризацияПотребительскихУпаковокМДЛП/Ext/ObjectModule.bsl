#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИнвентаризационнаяОписьМДЛП") Тогда
		ИнвентаризацияМДЛП.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		Возврат; // Переопределение см. в общем модуле ИнвентаризацияМДЛППереопределяемый.
	КонецЕсли;
	
	ИнтеграцияМДЛППереопределяемый.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	СостояниеПодтверждения = Метаданные().Реквизиты.СостояниеПодтверждения.ЗначениеЗаполнения;
	ИнвентаризационнаяОпись = Неопределено;
	
	НомераУпаковок.Очистить();
	ИерархияГрупповыхУпаковокМДЛП.Очистить();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если Не ИнтеграцияМДЛП.ИспользоватьХарактеристикиНоменклатуры() Тогда
		НепроверяемыеРеквизиты.Добавить("Товары.Характеристика");
	КонецЕсли;
	
	Если Не ИнтеграцияМДЛП.ИспользоватьСерииНоменклатуры() Тогда
		НепроверяемыеРеквизиты.Добавить("Товары.Серия");
	КонецЕсли;
	
	ИнтеграцияМДЛП.ПроверитьЗаполнениеУпаковок(ЭтотОбъект, Отказ, 99999);
	
	Если СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить Тогда
		НепроверяемыеРеквизиты.Добавить("НомераУпаковок.ДействиеПоОформлениюУведомлений");
	КонецЕсли;
	
	ИнтеграцияМДЛППереопределяемый.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	
	ИсключаемыеРеквизиты = Новый Массив;
	ИсключаемыеРеквизиты.Добавить("ОтборИнвентаризации");
	
	ИнтеграцияМДЛП.ПроверитьВозможностьЗаписиУведомления(ЭтотОбъект, РежимЗаписи, ИсключаемыеРеквизиты);
	
	ИнтеграцияМДЛППереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияМДЛП.ЗаписатьСтатусДокументаПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияМДЛППереопределяемый.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ОсновныеДанныеДокумента = ПодготовитьОсновныеДанныеДляПроведения();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Для Каждого ДанныеДокумента Из ОсновныеДанныеДокумента Цикл
		Запрос.УстановитьПараметр(ДанныеДокумента.Ключ, ДанныеДокумента.Значение);
	КонецЦикла;
	
	ЗапросНомераУпаковокДокумента(Запрос);
	ЗапросИнвентаризированныеУпаковки(Запрос);
	
	Если Не ПроверитьДоступностьИнвентаризируемыхУпаковок(Запрос, ОсновныеДанныеДокумента, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить Тогда
		
		ЗарезервироватьИнвентаризированныеУпаковки(Запрос, ОсновныеДанныеДокумента);
		
		ЗапросНомераУпаковокДляСверки(Запрос);
		ЗапросИерархияГрупповыхУпаковок(Запрос);
		
		ЗарезервироватьУпаковки(Запрос, ОсновныеДанныеДокумента);
		
	ИначеЕсли СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОформитьУведомления Тогда
		
		УстановитьНовыйСтатусИнвентаризированныхУпаковок(Запрос, ОсновныеДанныеДокумента);
		
		Если ПроверитьНеобходимостьЗаписиНовыхСвойствУпаковок(ОсновныеДанныеДокумента) Тогда
			
			ЗапросНомераУпаковокДляСверки(Запрос);
			ЗапросИерархияГрупповыхУпаковок(Запрос);
			
			ЗаписатьНовыеСвойстваУпаковок(Запрос, ОсновныеДанныеДокумента);
			УдалитьЗаписиРеестраВыбытияУпаковокМДЛП(Запрос, ОсновныеДанныеДокумента);
			
		КонецЕсли;
		
	ИначеЕсли СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Завершено Тогда
		
		ЗафиксироватьСтатусИнвентаризированныхУпаковок(Запрос, ОсновныеДанныеДокумента);
		
		ОбновитьАрхивИнвентаризированныхУпаковок(Запрос, ОсновныеДанныеДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	СтандартнаяОбработка = Истина;
	ИнтеграцияМДЛППереопределяемый.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРезервИнвентаризированныхУпаковок();
	ОтменитьРезервУпаковок();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьОсновныеДанныеДляПроведения()
	
	ЗапрашиваемыеДанные = Новый Структура;
	ЗапрашиваемыеДанные.Вставить("Ссылка");
	ЗапрашиваемыеДанные.Вставить("Дата");
	ЗапрашиваемыеДанные.Вставить("МестоДеятельности");
	ЗапрашиваемыеДанные.Вставить("ИнвентаризационнаяОпись");
	
	ОсновныеДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ЗапрашиваемыеДанные);
	
	Возврат ОсновныеДанныеДокумента;
	
КонецФункции

Процедура ЗапросНомераУпаковокДокумента(Запрос)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомераУпаковокДокумента.НомерСтроки                       КАК НомерСтроки,
	|	НомераУпаковокДокумента.НомерКиЗ                          КАК НомерУпаковки,
	|	НомераУпаковокДокумента.КлючУпаковки                      КАК КлючУпаковки,
	|	НомераУпаковокДокумента.ИсходныйСтатусМДЛП <> """"        КАК ЕстьВМДЛП,
	|	НомераУпаковокДокумента.ДействиеПоСверкеОстатков          КАК ДействиеПоСверкеОстатков,
	|	НомераУпаковокДокумента.ДействиеПоОформлениюУведомлений   КАК ДействиеПоОформлениюУведомлений,
	|	НомераУпаковокДокумента.СтатусМДЛП                        КАК Статус,
	|	НомераУпаковокДокумента.ДатаСтатусаМДЛП                   КАК ДатаСтатуса,
	|	НомераУпаковокДокумента.НомерРодительскойУпаковкиМДЛП     КАК НомерГрупповойУпаковки,
	|	НомераУпаковокДокумента.НомерВерхнеуровневойУпаковкиМДЛП  КАК НомерВерхнеуровневойУпаковки
	|ПОМЕСТИТЬ НомераУпаковокДокумента
	|ИЗ
	|	Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.НомераУпаковок КАК НомераУпаковокДокумента
	|ГДЕ
	|	НомераУпаковокДокумента.Ссылка = &Ссылка
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗапросИнвентаризированныеУпаковки(Запрос)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ИнвентаризированныеУпаковки.НомерУпаковки                          КАК НомерУпаковки,
	|	ИнвентаризированныеУпаковки.КлючУпаковки                           КАК КлючУпаковки,
	|	ИнвентаризированныеУпаковки.ДокументИнвентаризации                 КАК ДокументИнвентаризации,
	|	ИнвентаризированныеУпаковки.ДокументУведомление                    КАК ДокументУведомление,
	|	ИнвентаризированныеУпаковки.ДействиеПоСверкеОстатков               КАК ДействиеПоСверкеОстатков,
	|	ИнвентаризированныеУпаковки.СтатусДействияПоСверкеОстатков         КАК СтатусДействияПоСверкеОстатков,
	|	ИнвентаризированныеУпаковки.ДействиеПоОформлениюУведомлений        КАК ДействиеПоОформлениюУведомлений,
	|	ИнвентаризированныеУпаковки.СтатусДействияПоОформлениюУведомлений  КАК СтатусДействияПоОформлениюУведомлений
	|ПОМЕСТИТЬ ИнвентаризированныеУпаковки
	|ИЗ
	|	РегистрСведений.ИнвентаризированныеУпаковкиМДЛП КАК ИнвентаризированныеУпаковки
	|ГДЕ
	|	ИнвентаризированныеУпаковки.ИнвентаризационнаяОпись = &ИнвентаризационнаяОпись
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗапросНомераУпаковокДляСверки(Запрос)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомераУпаковокДокумента.НомерСтроки                   КАК НомерСтроки,
	|	НомераУпаковокДокумента.НомерУпаковки                 КАК НомерУпаковки,
	|	НомераУпаковокДокумента.КлючУпаковки                  КАК КлючУпаковки,
	|	НомераУпаковокДокумента.ЕстьВМДЛП                     КАК ЕстьВМДЛП,
	|	НомераУпаковокДокумента.Статус                        КАК Статус,
	|	НомераУпаковокДокумента.ДатаСтатуса                   КАК ДатаСтатуса,
	|	НомераУпаковокДокумента.НомерГрупповойУпаковки        КАК НомерГрупповойУпаковки,
	|	НомераУпаковокДокумента.НомерВерхнеуровневойУпаковки  КАК НомерВерхнеуровневойУпаковки
	|ПОМЕСТИТЬ НомераУпаковокДляСверки
	|ИЗ
	|	НомераУпаковокДокумента КАК НомераУпаковокДокумента
	|ГДЕ
	|	НомераУпаковокДокумента.ДействиеПоСверкеОстатков = &ДействиеВыполнитьСверкуОстатков
	|";
	
	Запрос.УстановитьПараметр("ДействиеВыполнитьСверкуОстатков", Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП.ВыполнитьСверкуОстатков);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗапросИерархияГрупповыхУпаковок(Запрос)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ИерархияГрупповыхУпаковок.НомерУпаковки                    КАК НомерУпаковки,
	|	ИерархияГрупповыхУпаковок.КлючУпаковки                     КАК КлючУпаковки,
	|	ИерархияГрупповыхУпаковок.НомерРодительскойУпаковки        КАК НомерГрупповойУпаковки,
	|	ИерархияГрупповыхУпаковок.НомерВерхнеуровневойУпаковки     КАК НомерВерхнеуровневойУпаковки,
	|	НЕ ПервыйУровеньУпаковок.НомерГрупповойУпаковки ЕСТЬ NULL  КАК ВложеныПотребительскиеУпаковки,
	|	ИерархияГрупповыхУпаковок.Статус                           КАК Статус,
	|	ИерархияГрупповыхУпаковок.ДатаСтатуса                      КАК ДатаСтатуса
	|ПОМЕСТИТЬ ИерархияГрупповыхУпаковок
	|ИЗ
	|	Документ.ИнвентаризацияПотребительскихУпаковокМДЛП.ИерархияГрупповыхУпаковокМДЛП КАК ИерархияГрупповыхУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Т.НомерГрупповойУпаковки КАК НомерГрупповойУпаковки
	|			ИЗ
	|				НомераУпаковокДляСверки КАК Т) КАК ПервыйУровеньУпаковок
	|	ПО
	|		ИерархияГрупповыхУпаковок.Ссылка = &Ссылка
	|		И ПервыйУровеньУпаковок.НомерГрупповойУпаковки = ИерархияГрупповыхУпаковок.НомерУпаковки
	|ГДЕ
	|	ИерархияГрупповыхУпаковок.Ссылка = &Ссылка
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры


Функция ПроверитьДоступностьИнвентаризируемыхУпаковок(Запрос, ОсновныеДанныеДокумента, Отказ)
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НомераУпаковокДокумента.НомерСтроки                                КАК НомерСтроки,
	|	""НомераУпаковок""                                                 КАК ИмяТабличнойЧасти,
	|	""НомерКиЗ""                                                       КАК ИмяПоля,
	
	|	НомераУпаковокДокумента.НомерУпаковки                              КАК НомерУпаковки,
	|	НомераУпаковокДокумента.КлючУпаковки                               КАК КлючУпаковки,
	
	|	ИнвентаризированныеУпаковки.ДокументИнвентаризации                 КАК ДокументИнвентаризации,
	|	ИнвентаризированныеУпаковки.ДокументУведомление                    КАК ДокументУведомление,
	
	|	ВЫБОР
	|		КОГДА НЕ ИнвентаризированныеУпаковки.НомерУпаковки ЕСТЬ NULL
	|			И ИнвентаризированныеУпаковки.ДокументИнвентаризации <> &Ссылка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                              КАК ЕстьОшибкаУпаковкаУжеИнвентаризируется,
	
	|	ВЫБОР
	|		КОГДА НЕ ИнвентаризированныеУпаковки.НомерУпаковки ЕСТЬ NULL
	|			И ИнвентаризированныеУпаковки.ДокументУведомление <> НЕОПРЕДЕЛЕНО
	|			И НомераУпаковокДокумента.ДействиеПоОформлениюУведомлений <> ИнвентаризированныеУпаковки.ДействиеПоОформлениюУведомлений
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                              КАК ЕстьОшибкаУпаковкаУжеОформляется
	
	|ИЗ
	|	НомераУпаковокДокумента КАК НомераУпаковокДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ИнвентаризированныеУпаковки КАК ИнвентаризированныеУпаковки
	|		ПО
	|			ИнвентаризированныеУпаковки.НомерУпаковки = НомераУпаковокДокумента.НомерУпаковки
	|			И ИнвентаризированныеУпаковки.КлючУпаковки = НомераУпаковокДокумента.КлючУпаковки
	|ГДЕ
	|	НЕ ИнвентаризированныеУпаковки.НомерУпаковки ЕСТЬ NULL
	|		И ИнвентаризированныеУпаковки.ДокументИнвентаризации <> &Ссылка
	|	ИЛИ НЕ ИнвентаризированныеУпаковки.НомерУпаковки ЕСТЬ NULL
	|		И ИнвентаризированныеУпаковки.ДокументУведомление <> НЕОПРЕДЕЛЕНО
	|		И НомераУпаковокДокумента.ДействиеПоОформлениюУведомлений <> ИнвентаризированныеУпаковки.ДействиеПоОформлениюУведомлений
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		МаксимальноеКоличествоСообщений = 10;
		НомерСообщения = 0;
		Пока Выборка.Следующий() Цикл
			
			НомерСообщения = НомерСообщения + 1;
			Если НомерСообщения > МаксимальноеКоличествоСообщений Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru ='Показаны первые %1 из %2 сообщений об ошибках.'"),
					МаксимальноеКоличествоСообщений,
					Выборка.Количество());
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ОсновныеДанныеДокумента.Ссылка);
				Прервать;
			КонецЕсли;
			
			Если Выборка.ЕстьОшибкаУпаковкаУжеИнвентаризируется Тогда
				ТекстСообщения = НСтр("ru = 'Упаковка %1 уже инвентаризируется документом %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерУпаковки, Выборка.ДокументИнвентаризации);
			ИначеЕсли Выборка.ЕстьОшибкаУпаковкаУжеОформляется Тогда
				ТекстСообщения = НСтр("ru = 'Упаковка %1 уже обрабатывается документом %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерУпаковки, Выборка.ДокументУведомление);
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерУпаковки);
			Если Выборка.НомерСтроки = 0 Тогда
				Поле = Выборка.ИмяПоля;
			Иначе
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТабличнойЧасти, Выборка.НомерСтроки, Выборка.ИмяПоля);
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ОсновныеДанныеДокумента.Ссылка, Поле, "Объект");
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ОсновныеДанныеДокумента.Ссылка, Поле, "Объект", Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗарезервироватьИнвентаризированныеУпаковки(Запрос, ОсновныеДанныеДокумента)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомераУпаковокДокумента.НомерУпаковки                        КАК НомерУпаковки,
	|	НомераУпаковокДокумента.КлючУпаковки                         КАК КлючУпаковки,
	|	&МестоДеятельности                                           КАК МестоДеятельности,
	|	&ИнвентаризационнаяОпись                                     КАК ИнвентаризационнаяОпись,
	|	&Ссылка                                                      КАК ДокументИнвентаризации,
	|	НЕОПРЕДЕЛЕНО                                                 КАК ДокументУведомление,
	|	НомераУпаковокДокумента.ДействиеПоСверкеОстатков             КАК ДействиеПоСверкеОстатков,
	|	&СтатусНеВыполнялось                                         КАК СтатусДействияПоСверкеОстатков,
	|	НомераУпаковокДокумента.ДействиеПоОформлениюУведомлений      КАК ДействиеПоОформлениюУведомлений,
	|	&СтатусНеВыполнялось                                         КАК СтатусДействияПоОформлениюУведомлений
	|ИЗ
	|	НомераУпаковокДокумента КАК НомераУпаковокДокумента
	|";
	
	Запрос.УстановитьПараметр("СтатусНеВыполнялось", Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.НеВыполнялось);
	
	// Резервирование указанных номеров упаковок.
	// Отбор по документу выполняет две логические функции:
	//  1. Перезапись номеров упаковок, которые указанный документ возможно уже резервировал.
	//  2. Удаление номеров упаковок, которые возможно ранее резервировал указанный документ,
	//     но сейчас их нет в выборке и их нужно снять с резерва.
	Набор = РегистрыСведений.ИнвентаризированныеУпаковкиМДЛП.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументИнвентаризации.Установить(ОсновныеДанныеДокумента.Ссылка);
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	Набор.Записать();
	
КонецПроцедуры

Процедура УстановитьНовыйСтатусИнвентаризированныхУпаковок(Запрос, ОсновныеДанныеДокумента)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомераУпаковокДокумента.НомерУпаковки                                    КАК НомерУпаковки,
	|	НомераУпаковокДокумента.КлючУпаковки                                     КАК КлючУпаковки,
	|	&МестоДеятельности                                                       КАК МестоДеятельности,
	|	&ИнвентаризационнаяОпись                                                 КАК ИнвентаризационнаяОпись,
	|	&Ссылка                                                                  КАК ДокументИнвентаризации,
	|	ЕСТЬNULL(ИнвентаризированныеУпаковки.ДокументУведомление, НЕОПРЕДЕЛЕНО)  КАК ДокументУведомление,
	
	|	НомераУпаковокДокумента.ДействиеПоСверкеОстатков                         КАК ДействиеПоСверкеОстатков,
	|	&СтатусЗавершено                                                         КАК СтатусДействияПоСверкеОстатков,
	
	|	ВЫБОР
	// Если упаковка уже оформляется документом, то ДействиеПоОформлениюУведомлений оставляем как есть.
	|		КОГДА ЕСТЬNULL(ИнвентаризированныеУпаковки.ДокументУведомление, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ИнвентаризированныеУпаковки.ДействиеПоОформлениюУведомлений
	// Иначе значение берем из документа.
	|		ИНАЧЕ НомераУпаковокДокумента.ДействиеПоОформлениюУведомлений
	|	КОНЕЦ                                                                    КАК ДействиеПоОформлениюУведомлений,
	
	|	ВЫБОР
	// Если упаковка уже оформляется документом, то статус оставляем как есть.
	|		КОГДА ЕСТЬNULL(ИнвентаризированныеУпаковки.ДокументУведомление, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ИнвентаризированныеУпаковки.СтатусДействияПоОформлениюУведомлений
	// Если действий по оформлению упаковки не требуется, то устанавливаем статус Завершено.
	|		КОГДА НомераУпаковокДокумента.ДействиеПоОформлениюУведомлений В (&ДействияНеТребующиеОформленияУведомлений)
	|			ТОГДА &СтатусЗавершено
	// Иначе устанавливаем статус НеВыполнялось.
	|		ИНАЧЕ &СтатусНеВыполнялось
	|	КОНЕЦ                                                                    КАК СтатусДействияПоОформлениюУведомлений
	
	|ИЗ
	|	НомераУпаковокДокумента КАК НомераУпаковокДокумента
	// Соединение для получения номеров упаковок, зарезервированных этим документом.
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ИнвентаризированныеУпаковки КАК ИнвентаризированныеУпаковки
	|		ПО
	|			ИнвентаризированныеУпаковки.НомерУпаковки = НомераУпаковокДокумента.НомерУпаковки
	|			И ИнвентаризированныеУпаковки.КлючУпаковки = НомераУпаковокДокумента.КлючУпаковки
	|			И ИнвентаризированныеУпаковки.ДокументИнвентаризации = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("ДействиеВыполнитьСверкуОстатков"         , Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП.ВыполнитьСверкуОстатков);
	Запрос.УстановитьПараметр("ДействияНеТребующиеОформленияУведомлений", ИнвентаризацияМДЛПКлиентСервер.ДействияНеТребующиеОформленияУведомлений());
	Запрос.УстановитьПараметр("СтатусЗавершено"                         , Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.Завершено);
	Запрос.УстановитьПараметр("СтатусНеВыполнялось"                     , Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.НеВыполнялось);
	
	// Установка нового статуса указанных номеров упаковок.
	// Отбор по документу выполняет две логические функции:
	//  1. Перезапись номеров упаковок, которые указанный документ возможно уже резервировал.
	//  2. Удаление номеров упаковок, которые возможно ранее резервировал указанный документ,
	//     но сейчас их нет в выборке и их нужно снять с резерва.
	Набор = РегистрыСведений.ИнвентаризированныеУпаковкиМДЛП.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументИнвентаризации.Установить(ОсновныеДанныеДокумента.Ссылка);
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	Набор.Записать();
	
КонецПроцедуры

Процедура ЗафиксироватьСтатусИнвентаризированныхУпаковок(Запрос, ОсновныеДанныеДокумента)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомераУпаковокДокумента.НомерУпаковки                                    КАК НомерУпаковки,
	|	НомераУпаковокДокумента.КлючУпаковки                                     КАК КлючУпаковки,
	|	&МестоДеятельности                                                       КАК МестоДеятельности,
	|	&ИнвентаризационнаяОпись                                                 КАК ИнвентаризационнаяОпись,
	|	&Ссылка                                                                  КАК ДокументИнвентаризации,
	|	ЕСТЬNULL(ИнвентаризированныеУпаковки.ДокументУведомление, НЕОПРЕДЕЛЕНО)  КАК ДокументУведомление,
	
	|	НомераУпаковокДокумента.ДействиеПоСверкеОстатков                         КАК ДействиеПоСверкеОстатков,
	|	&СтатусЗавершено                                                         КАК СтатусДействияПоСверкеОстатков,
	
	|	ВЫБОР
	// Если упаковка уже оформляется документом, то ДействиеПоОформлениюУведомлений оставляем как есть.
	|		КОГДА ЕСТЬNULL(ИнвентаризированныеУпаковки.ДокументУведомление, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ИнвентаризированныеУпаковки.ДействиеПоОформлениюУведомлений
	// Иначе значение берем из документа.
	|		ИНАЧЕ НомераУпаковокДокумента.ДействиеПоОформлениюУведомлений
	|	КОНЕЦ                                                                    КАК ДействиеПоОформлениюУведомлений,
	
	|	ВЫБОР
	// Если упаковка уже оформляется документом, то статус оставляем как есть.
	|		КОГДА ЕСТЬNULL(ИнвентаризированныеУпаковки.ДокументУведомление, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ИнвентаризированныеУпаковки.СтатусДействияПоОформлениюУведомлений
	// Если действий по оформлению упаковки не требуется, то устанавливаем статус Завершено.
	|		КОГДА НомераУпаковокДокумента.ДействиеПоОформлениюУведомлений В (&ДействияНеТребующиеОформленияУведомлений)
	|			ТОГДА &СтатусЗавершено
	// Иначе устанавливаем статус ЗавершеноПринудительно.
	|		ИНАЧЕ &СтатусЗавершеноПринудительно
	|	КОНЕЦ                                                                    КАК СтатусДействияПоОформлениюУведомлений
	
	|ИЗ
	|	НомераУпаковокДокумента КАК НомераУпаковокДокумента
	// Соединение для получения номеров упаковок, зарезервированных этим документом.
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ИнвентаризированныеУпаковки КАК ИнвентаризированныеУпаковки
	|		ПО
	|			ИнвентаризированныеУпаковки.НомерУпаковки = НомераУпаковокДокумента.НомерУпаковки
	|			И ИнвентаризированныеУпаковки.КлючУпаковки = НомераУпаковокДокумента.КлючУпаковки
	|			И ИнвентаризированныеУпаковки.ДокументИнвентаризации = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("ДействиеВыполнитьСверкуОстатков"         , Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП.ВыполнитьСверкуОстатков);
	Запрос.УстановитьПараметр("ДействияНеТребующиеОформленияУведомлений", ИнвентаризацияМДЛПКлиентСервер.ДействияНеТребующиеОформленияУведомлений());
	Запрос.УстановитьПараметр("СтатусЗавершено"                         , Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.Завершено);
	Запрос.УстановитьПараметр("СтатусЗавершеноПринудительно"            , Перечисления.СтатусыДействийПоИнвентаризацииУпаковокМДЛП.ЗавершеноПринудительно);
	
	// Фиксация статуса указанных номеров упаковок.
	// Отбор по документу выполняет две логические функции:
	//  1. Перезапись номеров упаковок, которые указанный документ возможно уже резервировал.
	//  2. Удаление номеров упаковок, которые возможно ранее резервировал указанный документ,
	//     но сейчас их нет в выборке и их нужно снять с резерва.
	Набор = РегистрыСведений.ИнвентаризированныеУпаковкиМДЛП.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументИнвентаризации.Установить(ОсновныеДанныеДокумента.Ссылка);
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	Набор.Записать();
	
КонецПроцедуры

Процедура ОтменитьРезервИнвентаризированныхУпаковок()
	
	Набор = РегистрыСведений.ИнвентаризированныеУпаковкиМДЛП.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументИнвентаризации.Установить(Ссылка);
	Набор.Записать();
	
КонецПроцедуры


Функция ПроверитьНеобходимостьЗаписиНовыхСвойствУпаковок(ОсновныеДанныеДокумента)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗарезервированныеУпаковки
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК ТекущиеСтатусы
	|ГДЕ
	|	ТекущиеСтатусы.ДокументРезерва = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ОсновныеДанныеДокумента.Ссылка);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ЗарезервироватьУпаковки(Запрос, ОсновныеДанныеДокумента)
	
	Запрос.Текст = "
	// Потребительские упаковки россыпью, существующие в регистре УпаковкиМДЛП
	|ВЫБРАТЬ
	|	НомераУпаковокДляСверки.НомерУпаковки  КАК НомерУпаковки,
	|	НомераУпаковокДляСверки.КлючУпаковки   КАК КлючУпаковки,
	|	ЛОЖЬ                                   КАК ГрупповаяУпаковка,
	|	1                                      КАК ДоляУпаковки
	|ПОМЕСТИТЬ НомераУпаковок
	|ИЗ
	|	НомераУпаковокДляСверки КАК НомераУпаковокДляСверки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.УпаковкиМДЛП КАК ДанныеПотребительскихУпаковок
	|		ПО
	|			ДанныеПотребительскихУпаковок.НомерУпаковки = НомераУпаковокДляСверки.НомерУпаковки
	|			И ДанныеПотребительскихУпаковок.КлючУпаковки = НомераУпаковокДляСверки.КлючУпаковки
	|			И ДанныеПотребительскихУпаковок.МестоДеятельности = &МестоДеятельности
	|ГДЕ
	|	ДанныеПотребительскихУпаковок.НомерГрупповойУпаковки = &ПустаяГрупповаяУпаковка
	|
	|ОБЪЕДИНИТЬ
	|
	// Потребительские упаковки россыпью, не существующие в регистре УпаковкиМДЛП
	|ВЫБРАТЬ
	|	НомераУпаковокДляСверки.НомерУпаковки  КАК НомерУпаковки,
	|	НомераУпаковокДляСверки.КлючУпаковки   КАК КлючУпаковки,
	|	ЛОЖЬ                                   КАК ГрупповаяУпаковка,
	|	1                                      КАК ДоляУпаковки
	|ИЗ
	|	НомераУпаковокДляСверки КАК НомераУпаковокДляСверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.УпаковкиМДЛП КАК ДанныеПотребительскихУпаковок
	|		ПО
	|			ДанныеПотребительскихУпаковок.НомерУпаковки = НомераУпаковокДляСверки.НомерУпаковки
	|			И ДанныеПотребительскихУпаковок.КлючУпаковки = НомераУпаковокДляСверки.КлючУпаковки
	|			И ДанныеПотребительскихУпаковок.МестоДеятельности = &МестоДеятельности
	|ГДЕ
	|	НомераУпаковокДляСверки.НомерВерхнеуровневойУпаковки = &ПустаяГрупповаяУпаковка
	|	И ДанныеПотребительскихУпаковок.НомерУпаковки ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	// Групповые верхнеуровневые упаковки, существующие в регистре УпаковкиМДЛП
	|ВЫБРАТЬ
	|	ДанныеГрупповыхУпаковок.НомерУпаковки  КАК НомерУпаковки,
	|	ДанныеГрупповыхУпаковок.КлючУпаковки   КАК КлючУпаковки,
	|	ИСТИНА                                 КАК ГрупповаяУпаковка,
	|	1                                      КАК ДоляУпаковки
	|ИЗ
	|	НомераУпаковокДляСверки КАК НомераУпаковокДляСверки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.УпаковкиМДЛП КАК ДанныеПотребительскихУпаковок
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|					РегистрСведений.УпаковкиМДЛП КАК ДанныеГрупповыхУпаковок
	|				ПО
	|					ДанныеГрупповыхУпаковок.НомерУпаковки = ДанныеПотребительскихУпаковок.ДокументРезерва
	|					И ДанныеГрупповыхУпаковок.МестоДеятельности = &МестоДеятельности
	|		ПО
	|			ДанныеПотребительскихУпаковок.НомерУпаковки = НомераУпаковокДляСверки.НомерУпаковки
	|			И ДанныеПотребительскихУпаковок.КлючУпаковки = НомераУпаковокДляСверки.КлючУпаковки
	|			И ДанныеПотребительскихУпаковок.МестоДеятельности = &МестоДеятельности
	|ГДЕ
	|	ДанныеПотребительскихУпаковок.НомерГрупповойУпаковки <> &ПустаяГрупповаяУпаковка
	|	И ДанныеПотребительскихУпаковок.ДокументРезерва <> НЕОПРЕДЕЛЕНО
	|	И ДанныеПотребительскихУпаковок.ДокументРезерва <> &ПустаяГрупповаяУпаковка
	|
	|ОБЪЕДИНИТЬ
	|
	// Групповые верхнеуровневые упаковки, не существующие в регистре УпаковкиМДЛП
	|ВЫБРАТЬ
	|	ИерархияГрупповыхУпаковок.НомерУпаковки  КАК НомерУпаковки,
	|	ИерархияГрупповыхУпаковок.КлючУпаковки   КАК КлючУпаковки,
	|	ИСТИНА                                   КАК ГрупповаяУпаковка,
	|	1                                        КАК ДоляУпаковки
	|ИЗ
	|	НомераУпаковокДляСверки КАК НомераУпаковокДляСверки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ИерархияГрупповыхУпаковок КАК ИерархияГрупповыхУпаковок
	|				ЛЕВОЕ СОЕДИНЕНИЕ
	|					РегистрСведений.УпаковкиМДЛП КАК ДанныеГрупповыхУпаковок
	|				ПО
	|					ДанныеГрупповыхУпаковок.НомерУпаковки = ИерархияГрупповыхУпаковок.НомерУпаковки
	|					И ДанныеГрупповыхУпаковок.КлючУпаковки = ИерархияГрупповыхУпаковок.КлючУпаковки
	|					И ДанныеГрупповыхУпаковок.МестоДеятельности = &МестоДеятельности
	|		ПО
	|			ИерархияГрупповыхУпаковок.НомерУпаковки = НомераУпаковокДляСверки.НомерВерхнеуровневойУпаковки
	|ГДЕ
	|	НомераУпаковокДляСверки.НомерВерхнеуровневойУпаковки <> &ПустаяГрупповаяУпаковка
	|	И ДанныеГрупповыхУпаковок.НомерУпаковки ЕСТЬ NULL
	|";
	
	Запрос.УстановитьПараметр("ПустаяГрупповаяУпаковка", Метаданные.ОпределяемыеТипы.SSCC.Тип.ПривестиЗначение());
	
	Запрос.Выполнить();
	
	ПараметрыОперации = ИнтеграцияМДЛП.ПараметрыОперацииИзмененияСтатусаУпаковок();
	ПараметрыОперации.ДатаОперации       = ОсновныеДанныеДокумента.Дата;
	ПараметрыОперации.ДокументРезерва    = ОсновныеДанныеДокумента.Ссылка;
	ПараметрыОперации.МестоДеятельности  = ОсновныеДанныеДокумента.МестоДеятельности;
	ПараметрыОперации.СтатусВРезерве     = Перечисления.СтатусыУпаковокМДЛП.ВРезерве;
	ПараметрыОперации.ИгнорироватьРезерв = Истина;
	
	ИнтеграцияМДЛП.ЗарезервироватьУпаковки(Запрос.МенеджерВременныхТаблиц, ПараметрыОперации);
	
КонецПроцедуры

Процедура ЗаписатьНовыеСвойстваУпаковок(Запрос, ОсновныеДанныеДокумента)
	
	Запрос.Текст = "
	// Установить новый статус
	// Потребительские упаковки
	|ВЫБРАТЬ
	|	НомераУпаковокДляСверки.НомерУпаковки                             КАК НомерУпаковки,
	|	НомераУпаковокДляСверки.КлючУпаковки                              КАК КлючУпаковки,
	|	&МестоДеятельности                                                КАК МестоДеятельности,
	|	ВЫБОР
	|		КОГДА НомераУпаковокДляСверки.НомерВерхнеуровневойУпаковки <> &ПустаяГрупповаяУпаковка
	|			ТОГДА НомераУпаковокДляСверки.НомерВерхнеуровневойУпаковки
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                             КАК ДокументРезерва,
	|	НомераУпаковокДляСверки.ЕстьВМДЛП                                 КАК ЕстьВМДЛП,
	|	ВЫБОР
	|		КОГДА НомераУпаковокДляСверки.НомерВерхнеуровневойУпаковки <> &ПустаяГрупповаяУпаковка
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ВУпаковке)
	|		ИНАЧЕ НомераУпаковокДляСверки.Статус
	|	КОНЕЦ                                                             КАК Статус,
	|	НомераУпаковокДляСверки.ДатаСтатуса                               КАК ДатаСтатуса,
	|	ЛОЖЬ                                                              КАК ГрупповаяУпаковка,
	|	ЛОЖЬ                                                              КАК ВложеныПотребительскиеУпаковки,
	|	НомераУпаковокДляСверки.НомерГрупповойУпаковки                    КАК НомерГрупповойУпаковки
	|ПОМЕСТИТЬ НомераУпаковокУстановитьНовыйСтатус
	|ИЗ
	|	НомераУпаковокДляСверки КАК НомераУпаковокДляСверки
	|
	|ОБЪЕДИНИТЬ
	|
	// Верхнеуровневые групповые упаковки
	|ВЫБРАТЬ
	|	ИерархияГрупповыхУпаковок.НомерУпаковки                           КАК НомерУпаковки,
	|	ИерархияГрупповыхУпаковок.КлючУпаковки                            КАК КлючУпаковки,
	|	&МестоДеятельности                                                КАК МестоДеятельности,
	|	НЕОПРЕДЕЛЕНО                                                      КАК ДокументРезерва,
	|	ИСТИНА                                                            КАК ЕстьВМДЛП,
	|	ИерархияГрупповыхУпаковок.Статус                                  КАК Статус,
	|	ИерархияГрупповыхУпаковок.ДатаСтатуса                             КАК ДатаСтатуса,
	|	ИСТИНА                                                            КАК ГрупповаяУпаковка,
	|	ИерархияГрупповыхУпаковок.ВложеныПотребительскиеУпаковки          КАК ВложеныПотребительскиеУпаковки,
	|	НЕОПРЕДЕЛЕНО                                                      КАК НомерГрупповойУпаковки
	|ИЗ
	|	ИерархияГрупповыхУпаковок КАК ИерархияГрупповыхУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			НомераУпаковокДляСверки КАК НомераУпаковокДляСверки
	|		ПО
	|			НомераУпаковокДляСверки.НомерВерхнеуровневойУпаковки = ИерархияГрупповыхУпаковок.НомерУпаковки
	|			И НомераУпаковокДляСверки.НомерВерхнеуровневойУпаковки <> &ПустаяГрупповаяУпаковка
	|
	|ОБЪЕДИНИТЬ
	|
	// Вложенные групповые упаковки
	|ВЫБРАТЬ
	|	ИерархияГрупповыхУпаковок.НомерУпаковки                           КАК НомерУпаковки,
	|	ИерархияГрупповыхУпаковок.КлючУпаковки                            КАК КлючУпаковки,
	|	&МестоДеятельности                                                КАК МестоДеятельности,
	|	ИерархияГрупповыхУпаковок.НомерВерхнеуровневойУпаковки            КАК ДокументРезерва,
	|	ИСТИНА                                                            КАК ЕстьВМДЛП,
	|	ИерархияГрупповыхУпаковок.Статус                                  КАК Статус,
	|	ИерархияГрупповыхУпаковок.ДатаСтатуса                             КАК ДатаСтатуса,
	|	ИСТИНА                                                            КАК ГрупповаяУпаковка,
	|	ИерархияГрупповыхУпаковок.ВложеныПотребительскиеУпаковки          КАК ВложеныПотребительскиеУпаковки,
	|	ИерархияГрупповыхУпаковок.НомерГрупповойУпаковки                  КАК НомерГрупповойУпаковки
	|ИЗ
	|	ИерархияГрупповыхУпаковок КАК ИерархияГрупповыхУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			НомераУпаковокДляСверки КАК НомераУпаковокДляСверки
	|		ПО
	|			НомераУпаковокДляСверки.НомерВерхнеуровневойУпаковки = ИерархияГрупповыхУпаковок.НомерВерхнеуровневойУпаковки
	|			И НомераУпаковокДляСверки.НомерВерхнеуровневойУпаковки <> &ПустаяГрупповаяУпаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковокУстановитьНовыйСтатус.*,
	|	ЕСТЬNULL(ТекущиеСтатусы.ИсходныйСтатус,
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка))      КАК ПредыдущийСтатус,
	|	ЕСТЬNULL(ТекущиеСтатусы.Владелец,
	|		ЗНАЧЕНИЕ(Справочник.ОрганизацииМДЛП.ПустаяСсылка))            КАК Владелец,
	|	ЕСТЬNULL(ТекущиеСтатусы.ДокументРезерва, НЕОПРЕДЕЛЕНО) = &Ссылка  КАК НомерУпаковкиЗарезервирован
	|ИЗ
	|	НомераУпаковокУстановитьНовыйСтатус КАК НомераУпаковокУстановитьНовыйСтатус
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.УпаковкиМДЛП КАК ТекущиеСтатусы
	|		ПО
	|			ТекущиеСтатусы.НомерУпаковки = НомераУпаковокУстановитьНовыйСтатус.НомерУпаковки
	|			И ТекущиеСтатусы.КлючУпаковки = НомераУпаковокУстановитьНовыйСтатус.КлючУпаковки
	|			И ТекущиеСтатусы.МестоДеятельности = &МестоДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Вернуть в доступные
	|ВЫБРАТЬ
	|	ТекущиеСтатусы.НомерУпаковки                    КАК НомерУпаковки,
	|	ТекущиеСтатусы.КлючУпаковки                     КАК КлючУпаковки,
	|	ТекущиеСтатусы.МестоДеятельности                КАК МестоДеятельности,
	|	ТекущиеСтатусы.ИсходныйДокументРезерва          КАК ДокументРезерва,
	|	ТекущиеСтатусы.ЗонаТаможенногоКонтроля          КАК ЗонаТаможенногоКонтроля,
	|	ТекущиеСтатусы.ИсходныйСтатус                   КАК Статус,
	|	ТекущиеСтатусы.ПредыдущийСтатус                 КАК ПредыдущийСтатус,
	|	ТекущиеСтатусы.ДатаСтатуса                      КАК ДатаСтатуса,
	|	ТекущиеСтатусы.ГрупповаяУпаковка                КАК ГрупповаяУпаковка,
	|	ТекущиеСтатусы.ВложеныПотребительскиеУпаковки   КАК ВложеныПотребительскиеУпаковки,
	|	ТекущиеСтатусы.НомерГрупповойУпаковки           КАК НомерГрупповойУпаковки,
	|	ТекущиеСтатусы.Владелец                         КАК Владелец
	|ИЗ
	|	РегистрСведений.УпаковкиМДЛП КАК ТекущиеСтатусы
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			НомераУпаковокУстановитьНовыйСтатус КАК НомераУпаковокУстановитьНовыйСтатус
	|		ПО
	|			ТекущиеСтатусы.НомерУпаковки = НомераУпаковокУстановитьНовыйСтатус.НомерУпаковки
	|			И ТекущиеСтатусы.КлючУпаковки = НомераУпаковокУстановитьНовыйСтатус.КлючУпаковки
	|			И ТекущиеСтатусы.МестоДеятельности = &МестоДеятельности
	|ГДЕ
	|	ТекущиеСтатусы.ДокументРезерва = &Ссылка
	|	И ТекущиеСтатусы.ИсходныйСтатус <> ЗНАЧЕНИЕ(Перечисление.СтатусыУпаковокМДЛП.ПустаяСсылка)
	|	И НомераУпаковокУстановитьНовыйСтатус.НомерУпаковки ЕСТЬ NULL
	|";
	
	Запрос.УстановитьПараметр("ПустаяГрупповаяУпаковка", Метаданные.ОпределяемыеТипы.SSCC.Тип.ПривестиЗначение());
	
	Результаты = Запрос.ВыполнитьПакет();
	УстановитьНовыйСтатус = Результаты[Результаты.ВГраница() - 1].Выбрать();
	СнятьСРезерва         = Результаты[Результаты.ВГраница()].Выбрать();
	
	Набор = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
	Пока УстановитьНовыйСтатус.Следующий() Цикл
		
		Если Не УстановитьНовыйСтатус.НомерУпаковкиЗарезервирован Тогда
			// Удаление упаковки, которая не была ранее зарезервирована указанным документом, но меняется ее состояние.
			НаборКУдалению = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
			НаборКУдалению.Отбор.НомерУпаковки.Установить(УстановитьНовыйСтатус.НомерУпаковки);
			НаборКУдалению.Отбор.КлючУпаковки.Установить(УстановитьНовыйСтатус.КлючУпаковки);
			НаборКУдалению.Отбор.МестоДеятельности.Установить(УстановитьНовыйСтатус.МестоДеятельности);
			НаборКУдалению.Записать();
		КонецЕсли;
		
		Если Не УстановитьНовыйСтатус.ЕстьВМДЛП Тогда
			// Удаление зарезервированных упаковок, которых нет в МДЛП выполнится следующим набором.
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), УстановитьНовыйСтатус);
		
	КонецЦикла;
	
	Пока СнятьСРезерва.Следующий() Цикл
		// Упаковки, которые были зарезервированы документом, но не попали в НомераУпаковокДляСверки возвращаются в ИсходныйСтатус.
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), СнятьСРезерва);
	КонецЦикла;
	
	// Запись упаковок с новыми свойствами или свойствами до резервирования.
	Набор.Записать(Ложь);
	
	// Удаление всех номеров упаковок, которые были ранее зарезервированы указанным документом.
	// Запись номеров упаковок с новыми свойствами или со свойствами до резервирования выполняется предыдущим набором.
	Набор = РегистрыСведений.УпаковкиМДЛП.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументРезерва.Установить(Ссылка);
	Набор.Записать();
	
КонецПроцедуры

Процедура УдалитьЗаписиРеестраВыбытияУпаковокМДЛП(Запрос, ОсновныеДанныеДокумента)
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомераУпаковокДляСверки.НомерУпаковки КАК НомерУпаковки,
	|	НомераУпаковокДляСверки.КлючУпаковки  КАК КлючУпаковки
	|ИЗ
	|	НомераУпаковокДляСверки КАК НомераУпаковокДляСверки
	|ГДЕ
	|	НомераУпаковокДляСверки.Статус В (&СтатусыУпаковокВыведенаИзОборота)
	|";
	
	Запрос.УстановитьПараметр("СтатусыУпаковокВыведенаИзОборота", ИнтеграцияМДЛПКлиентСервер.СтатусыУпаковокВыведенаИзОборота());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.РеестрВыбытияУпаковокМДЛП.СоздатьНаборЗаписей();
		Набор.Отбор.НомерУпаковки.Установить(Выборка.НомерУпаковки);
		Набор.Отбор.КлючУпаковки.Установить(Выборка.КлючУпаковки);
		Набор.Отбор.МестоДеятельности.Установить(ОсновныеДанныеДокумента.МестоДеятельности);
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьРезервУпаковок()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	""""  КАК НомерУпаковки,
	|	""""  КАК КлючУпаковки,
	|	1     КАК ДоляУпаковки
	|ПОМЕСТИТЬ ОстаткиДолейУпаковок
	|ГДЕ
	|	ЛОЖЬ
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""""  КАК НомерУпаковки,
	|	""""  КАК КлючУпаковки,
	|	1     КАК ДоляУпаковки,
	|	ЛОЖЬ  КАК ГрупповаяУпаковка
	|ПОМЕСТИТЬ НомераУпаковок
	|ГДЕ
	|	ЛОЖЬ
	|");
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ПараметрыОперации = ИнтеграцияМДЛП.ПараметрыОперацииИзмененияСтатусаУпаковок();
	ПараметрыОперации.ДокументРезерва = Ссылка;
	ПараметрыОперации.ИгнорироватьРезерв = Истина;
	
	ИнтеграцияМДЛП.ЗарезервироватьУпаковки(Запрос.МенеджерВременныхТаблиц, ПараметрыОперации);
	
КонецПроцедуры


Процедура ОбновитьАрхивИнвентаризированныхУпаковок(Запрос, ОсновныеДанныеДокумента)
	
	Запрос.Текст = "
	// Упаковки, которые уже помещены в архив
	// + Упаковки, которые нужно добавить в архив из документа
	// - Упаковки, которые нужно убрать из архива.
	|ВЫБРАТЬ
	|	СводныеДанные.НомерУпаковки      КАК НомерУпаковки,
	|	СводныеДанные.КлючУпаковки       КАК КлючУпаковки,
	|	СводныеДанные.МестоДеятельности  КАК МестоДеятельности,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(СводныеДанные.СтатусВДокументе) ЕСТЬ NULL
	|			ТОГДА МАКСИМУМ(СводныеДанные.СтатусВАрхиве)
	|		ИНАЧЕ МАКСИМУМ(СводныеДанные.СтатусВДокументе)
	|	КОНЕЦ                            КАК Статус,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(СводныеДанные.СтатусВДокументе) ЕСТЬ NULL
	|			ТОГДА МАКСИМУМ(СводныеДанные.ДатаСтатусаВАрхиве)
	|		ИНАЧЕ МАКСИМУМ(СводныеДанные.ДатаСтатусаВДокументе)
	|	КОНЕЦ                            КАК ДатаСтатуса
	|ИЗ
	|	(
	// Упаковки в архиве
	|	ВЫБРАТЬ
	|		ИнвентаризированныеУпаковкиАрхив.НомерУпаковки      КАК НомерУпаковки,
	|		ИнвентаризированныеУпаковкиАрхив.КлючУпаковки       КАК КлючУпаковки,
	|		ИнвентаризированныеУпаковкиАрхив.МестоДеятельности  КАК МестоДеятельности,
	|		ИнвентаризированныеУпаковкиАрхив.Статус             КАК СтатусВАрхиве,
	|		ИнвентаризированныеУпаковкиАрхив.ДатаСтатуса        КАК ДатаСтатусаВАрхиве,
	|		NULL                                                КАК СтатусВДокументе,
	|		NULL                                                КАК ДатаСтатусаВДокументе,
	|		1                                                   КАК РасчетнаяСумма
	|	ИЗ
	|		РегистрСведений.ИнвентаризированныеУпаковкиАрхивМДЛП КАК ИнвентаризированныеУпаковкиАрхив
	|	ГДЕ
	|		ИнвентаризированныеУпаковкиАрхив.МестоДеятельности = &МестоДеятельности
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Упаковки в документе
	|	ВЫБРАТЬ
	|		НомераУпаковокДокумента.НомерУпаковки    КАК НомерУпаковки,
	|		НомераУпаковокДокумента.КлючУпаковки     КАК КлючУпаковки,
	|		&МестоДеятельности                       КАК МестоДеятельности,
	|		NULL                                     КАК СтатусВАрхиве,
	|		NULL                                     КАК ДатаСтатусаВАрхиве,
	|		НомераУпаковокДокумента.Статус           КАК СтатусВДокументе,
	|		НомераУпаковокДокумента.ДатаСтатуса      КАК ДатаСтатусаВДокументе,
	|		ВЫБОР
	|			КОГДА НомераУпаковокДокумента.ДействиеПоСверкеОстатков = &ДействиеПереместитьВАрхив
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ                                  КАК РасчетнаяСумма
	|	ИЗ
	|		НомераУпаковокДокумента КАК НомераУпаковокДокумента
	|) КАК СводныеДанные
	|СГРУППИРОВАТЬ ПО
	|	СводныеДанные.НомерУпаковки,
	|	СводныеДанные.КлючУпаковки,
	|	СводныеДанные.МестоДеятельности
	|ИМЕЮЩИЕ
	|	СУММА(СводныеДанные.РасчетнаяСумма) > 0
	|";
	
	Запрос.УстановитьПараметр("ДействиеПереместитьВАрхив", Перечисления.ДальнейшиеДействияИнвентаризацииМДЛП.ПереместитьВАрхив);
	
	Данные = Запрос.Выполнить().Выгрузить();
	Если Данные.Количество() > 0 Тогда
		
		// Обновление данных архива инвентаризированных упаковок.
		// Отбор по МД выполняет две логические функции:
		//  1. Запись номеров упаковок, которые нужно добавить в архив на этом МД.
		//  2. Удаление номеров упаковок, которые ранее были добавлены в архив на этом МД.
		Набор = РегистрыСведений.ИнвентаризированныеУпаковкиАрхивМДЛП.СоздатьНаборЗаписей();
		Набор.Отбор.МестоДеятельности.Установить(ОсновныеДанныеДокумента.МестоДеятельности);
		Набор.Загрузить(Данные);
		Набор.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли