
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриСозданииНаСервере(ЭтотОбъект);
	
	// БуферОбменаТоварами
	УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, Не ОбработкаТабличнойЧастиСервер.БуферОбменаПустой());
	// Конец БуферОбменаТоварами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
		Если Объект.ПриходоватьТоварыПоСебестоимостиСписания Тогда
			Объект.ВидЦены = Неопределено;
			ОчиститьЦены(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЗаголовокКолонкиВалюта = СтрЗаменить(НСтр("ru = 'Цена (%Валюта%)'"), "%Валюта%", ВалютаРегламентированногоУчета);
	Элементы.ТоварыЦена.Заголовок = ЗаголовокКолонкиВалюта;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриЧтенииНаСервер_ФормаДокумента(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// БуферОбменаТоварами
	Если ОбработкаТабличнойЧастиКлиент.ОбрабатыватьОповещениеОтБуфераОбмена(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ДоступностьБуфераОбмена = ОбработкаТабличнойЧастиКлиент.ОпределитьДоступностьВставкиИзБуфераОбменаПоСобытию(ИмяСобытия);
		УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, ДоступностьБуфераОбмена);
	КонецЕсли;
	// Конец БуферОбменаТоварами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптекаКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ПодборТоваровКлиент.ОбработатьПодборТоваровВДокументСписания(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодбор(ВыбранноеЗначение.АдресТоваровВХранилище, КэшированныеЗначения);
	Иначе
		// БуферОбменаТоварами
		Если ОбработкаТабличнойЧастиКлиент.НужноОбработатьВставкуИзБуфераОбмена(ЭтотОбъект, ИсточникВыбора) Тогда
			ВставитьТоварыИзБуфераОбмена(ВыбранноеЗначение);
		КонецЕсли;
		// Конец БуферОбменаТоварами
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОценкаПроизводительностиБольничнаяАптекаКлиент.НачатьЗамерПроведенияДокумента(Объект.Ссылка, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПодбор(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ"              , Объект.Ссылка);
	ПараметрыПодбора.Вставить("Дата"                  , Объект.Дата);
	ПараметрыПодбора.Вставить("Организация"           , Объект.Организация);
	ПараметрыПодбора.Вставить("МестоХраненияОстатка"  , "Отделение");
	ПараметрыПодбора.Вставить("Склад"                 , Объект.Склад);
	ПараметрыПодбора.Вставить("ИсточникФинансирования", Объект.ИсточникФинансирования);
	ПараметрыПодбора.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ТоварыНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	Отбор = Новый Структура;
	ПользовательскийОтбор = Новый Массив;
	Если ЗначениеЗаполнено(Объект.МестоХранения) Тогда
		Отбор.Вставить("МестоХранения", Объект.МестоХранения);
	ИначеЕсли ЗначениеЗаполнено(Объект.Склад) Тогда
		ПользовательскийОтбор.Добавить(Новый Структура("Ключ, Значение, Представление", "МестоХранения", Объект.МестоХранения, НСтр("ru = 'Показывать наличие на складе без учета постов'")));
	КонецЕсли;
	
	Если Отбор.Количество() > 0 Тогда
		ПараметрыПодбора.Вставить("Отбор", Отбор);
	КонецЕсли;
	Если ПользовательскийОтбор.Количество() > 0 Тогда
		ПараметрыПодбора.Вставить("ПользовательскийОтбор", ПользовательскийОтбор);
	КонецЕсли;
	
	ПодборТоваровКлиент.ОткрытьПодборТоваровВДокументСписания(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("ПослеРазбиенияСтроки", ЭтотОбъект, ТекущаяСтрока);
	ОбработкаТабличнойЧастиКлиент.РазбитьСтрокуТЧ(Объект.Товары, ТекущаяСтрока, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМестоХранения(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"МестоХранения",
		НСтр("ru='Место хранения'"),
		"Справочник.МестаХранения.ФормаВыбора",
		Новый Структура("Отбор", Новый Структура("Владелец", Объект.Склад)));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсточникФинансирования(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"ИсточникФинансирования",
		НСтр("ru='Источник финансирования'"),
		"Справочник.ИсточникиФинансирования.ФормаВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)
	
	ОчиститьСообщения();
	Если Объект.Товары.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='В документе не заполнена таблица ""Товары"". Цены не могут быть заполнены'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Товары", "Объект");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		ЗаполнитьЦеныПоВидуЦенСервер();
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены заполнены'"),
			,
			СтрЗаменить(НСтр("ru='Цены по виду цен ""%ВидЦены%"" заполнены'"), "%ВидЦены%", Объект.ВидЦены),
			БиблиотекаКартинок.Информация32);
	Иначе
		ТекстСообщения = НСтр("ru = 'Поле ""вид цены"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ВидЦены", "Объект");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоСебестоимости(Команда)
	
	ОчиститьСообщения();
	Если Объект.Товары.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='В документе не заполнена таблица ""Товары"". Цены не могут быть заполнены'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Товары", "Объект");
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Организация", "Объект", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Склад"" не заполнено'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Склад", "Объект", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаполнитьЦеныПоСебестоимостиСервер() Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены заполнены'"),
			,
			НСтр("ru='Цены по себестоимости заполнены'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	ОбщегоНазначенияБольничнаяАптекаКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Шапка
#Область Шапка

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтделениеПриИзменении(Элемент)
	
	ОбработатьИзменениеОтделения();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Склад <> Объект.Склад Тогда
		ОбработатьИзменениеСклада();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияПриИзменении(Элемент)
	
	ОбработатьИзменениеМестаХранения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриходоватьТоварыПоСебестоимостиСписанияПриИзменении(Элемент)
	
	Если Объект.ПриходоватьТоварыПоСебестоимостиСписания Тогда
		
		Объект.ВидЦены = Неопределено;
		ОчиститьЦены(ЭтотОбъект);
		
	КонецЕсли;
	
	УстановитьДоступность(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПриИзменении(Элемент)
	
	ОбработатьИзменениеСтатьиДоходов(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	
	ОбработатьИзменениеСтатьиРасходов(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АналитикаРасходовПрочиеРасходы", АналитикаРасходовПрочиеРасходы);
	ПараметрыФормы.Вставить("СтатьяРасходов"                , Объект.СтатьяРасходов);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьНачалоВыбораАналитикиРасходов(ПараметрыФормы, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

#КонецОбласти // Шапка

////////////////////////////////////////////////////////////////////////////////
// Список "Товары"
#Область Товары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), ТекущаяСтрока.СерияНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьПартиюПоВладельцу(), ТекущаяСтрока.Партия);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СинхронизироватьЕдиницыИзмерения(ТекущаяСтрока, Элементы.ТоварыЕдиницаИзмерения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СинхронизироватьЕдиницыИзмерения(ТекущаяСтрока, Элементы.ТоварыЕдиницаИзмерения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ОтборПартий = Новый Структура;
	ОтборПартий.Вставить("Документ"     , Объект.Ссылка);
	ОтборПартий.Вставить("Организация"  , Объект.Организация);
	ОтборПартий.Вставить("Склад"        , Объект.Склад);
	
	ПараметрыВыбораПартии = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыВыбораПартии(ОтборПартий, ТекущаяСтрока);
	ОбработкаТабличнойЧастиКлиент.ВыбратьПартиюНоменклатуры(ЭтотОбъект, Элемент, ПараметрыВыбораПартии, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОприходованиеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), ТекущаяСтрока.СерияНоменклатурыОприходование);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмеренияОприходование);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	Если Не Объект.ПриходоватьТоварыПоСебестоимостиСписания Тогда
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуПродажи(), ПараметрыЗаполненияЦены(ЭтотОбъект));
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	КонецЕсли;
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Номенклатура"                , ТекущаяСтрока.НоменклатураОприходование);
	ДанныеСтроки.Вставить("СерияНоменклатуры"           , ТекущаяСтрока.СерияНоменклатурыОприходование);
	ДанныеСтроки.Вставить("Партия"                      , ТекущаяСтрока.ПартияОприходование);
	ДанныеСтроки.Вставить("ЕдиницаИзмерения"            , ТекущаяСтрока.ЕдиницаИзмеренияОприходование);
	ДанныеСтроки.Вставить("КоличествоВЕдиницахИзмерения", ТекущаяСтрока.КоличествоВЕдиницахИзмерения);
	ДанныеСтроки.Вставить("Коэффициент" , 0);
	ДанныеСтроки.Вставить("Количество"  , 0);
	ДанныеСтроки.Вставить("Цена"        , ТекущаяСтрока.Цена);
	ДанныеСтроки.Вставить("Сумма"       , ТекущаяСтрока.Сумма);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ДанныеСтроки, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.СерияНоменклатурыОприходование = ДанныеСтроки.СерияНоменклатуры;
	ТекущаяСтрока.ЕдиницаИзмеренияОприходование  = ДанныеСтроки.ЕдиницаИзмерения;
	ТекущаяСтрока.КоэффициентОприходование       = ДанныеСтроки.Коэффициент;
	ТекущаяСтрока.КоличествоОприходование        = ДанныеСтроки.Количество;
	ТекущаяСтрока.Цена                           = ДанныеСтроки.Цена;
	ТекущаяСтрока.Сумма                          = ДанныеСтроки.Сумма;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СинхронизироватьЕдиницыИзмерения(ТекущаяСтрока, Элементы.ТоварыЕдиницаИзмеренияОприходование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияОприходованиеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Номенклатура"                , ТекущаяСтрока.НоменклатураОприходование);
	ДанныеСтроки.Вставить("ЕдиницаИзмерения"            , ТекущаяСтрока.ЕдиницаИзмеренияОприходование);
	ДанныеСтроки.Вставить("КоличествоВЕдиницахИзмерения", ТекущаяСтрока.КоличествоВЕдиницахИзмерения);
	ДанныеСтроки.Вставить("Коэффициент" , 0);
	ДанныеСтроки.Вставить("Количество"  , 0);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ДанныеСтроки, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.КоэффициентОприходование = ДанныеСтроки.Коэффициент;
	ТекущаяСтрока.КоличествоОприходование  = ДанныеСтроки.Количество;
	
	СинхронизироватьЕдиницыИзмерения(ТекущаяСтрока, Элементы.ТоварыЕдиницаИзмеренияОприходование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияОприходованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ОтборПартий = Новый Структура;
	ОтборПартий.Вставить("Документ"     , Объект.Ссылка);
	ОтборПартий.Вставить("Организация"  , Объект.Организация);
	ОтборПартий.Вставить("Склад"        , Объект.Склад);
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Номенклатура", ТекущаяСтрока.НоменклатураОприходование);
	ДанныеСтроки.Вставить("СерияНоменклатуры", ТекущаяСтрока.СерияНоменклатурыОприходование);
	
	ПараметрыВыбораПартии = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыВыбораПартии(ОтборПартий, ДанныеСтроки);
	ПараметрыВыбораПартии.МожноСоздаватьПартию = Истина;
	ОбработкаТабличнойЧастиКлиент.ВыбратьПартиюНоменклатуры(ЭтотОбъект, Элемент, ПараметрыВыбораПартии, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыОприходованиеПриИзменении(Элемент)
	
	ЗаполнитьЦенуВТекущейСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияОприходованиеПриИзменении(Элемент)
	
	ЗаполнитьЦенуВТекущейСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти // Товары

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ  ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	
	Склад = Объект.Склад;
	ОсновнойСклад = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьСкладОтделенияПоУмолчанию(Неопределено, Объект.Отделение);
	
	ЗаполнитьСлужебныеРеквизиты();
	УстановитьДоступность(ЭтотОбъект);
	
	УстановитьВидимостьМестХранения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты(КэшированныеЗначения = Неопределено)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСлужебныеРеквизитыСтатьиДоходов());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСлужебныеРеквизитыСтатьиРасходов());
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("СтатьяДоходов", Объект.СтатьяДоходов);
	ДанныеОбъекта.Вставить("АналитикаДоходовКонтролироватьЗаполнениеАналитики");
	ДанныеОбъекта.Вставить("СтатьяРасходов", Объект.СтатьяРасходов);
	ДанныеОбъекта.Вставить("АналитикаРасходовКонтролироватьЗаполнениеАналитики");
	ДанныеОбъекта.Вставить("АналитикаРасходовПрочиеРасходы");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(ДанныеОбъекта, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОбъекта);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСерийНоменклатуры(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПартий(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСерийНоменклатуры(ЭтотОбъект, Элементы.ТоварыСерияНоменклатурыОприходование.Имя, "Объект.Товары.СтатусУказанияСерийОприходование");
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПартий(ЭтотОбъект, Элементы.ТоварыПартияОприходование.Имя, "Объект.Товары.СтатусУказанияПартийОприходование");
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеИсточниковФинансирования(ЭтотОбъект);
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(ЭтотОбъект);
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(ЭтотОбъект);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	// Оформление Цены
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПриходоватьТоварыПоСебестоимостиСписания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<приходуется по себестоимости>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Оформление статей доходов/расходов
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьяДоходов.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьяРасходов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПриходоватьТоварыПоСебестоимостиСписания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступность(Форма)
	
	Форма.Элементы.ЗаполнитьЦены.Доступность        = Не Форма.Объект.ПриходоватьТоварыПоСебестоимостиСписания;
	Форма.Элементы.ВидЦены.Доступность              = Не Форма.Объект.ПриходоватьТоварыПоСебестоимостиСписания;
	
	Форма.Элементы.АналитикаДоходов.ТолькоПросмотр  = Не ЗначениеЗаполнено(Форма.Объект.СтатьяДоходов);
	Форма.Элементы.АналитикаРасходов.ТолькоПросмотр = Не ЗначениеЗаполнено(Форма.Объект.СтатьяРасходов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьМестХранения()
	
	Элементы.ТоварыМестоХранения.Видимость = Не ЗначениеЗаполнено(Объект.МестоХранения);
	Элементы.ТоварыЗаполнитьМестоХранения.Видимость = Не ЗначениеЗаполнено(Объект.МестоХранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитВВыделенныхСтроках(ИмяРеквизита, ПредставлениеРеквизита, ИмяФормыВыборка, ПараметрыФормы = Неопределено)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	ЗаполнениеВозможно = ОбработкаТабличнойЧастиКлиент.ПроверитьВозможностьЗаполненияРеквизитаВТабличнойЧасти(
		Объект.Товары, ВыделенныеСтроки, НСтр("ru='Товары'"), ПредставлениеРеквизита);
	Если ЗаполнениеВозможно Тогда
		
		ПараметрыЗаполнения = Новый Структура("ИмяРеквизита, ПредставлениеРеквизита", ИмяРеквизита, ПредставлениеРеквизита);
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьРеквизитВВыделенныхСтрокахЗавершение", ЭтотОбъект, ПараметрыЗаполнения);
		ОткрытьФорму(ИмяФормыВыборка, ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитВВыделенныхСтрокахЗавершение(Значение, ПараметрыЗаполнения) Экспорт
	
	Если Значение <> Неопределено Тогда
		ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
		ЗаполненоСтрок = ОбработкаТабличнойЧастиКлиент.ЗаполнитьРеквизитВВыделенныхСтроках(
			Объект.Товары, ВыделенныеСтроки, ПараметрыЗаполнения.ИмяРеквизита, Значение);
		ОбработкаТабличнойЧастиКлиент.ПоказатьОповещениеОЗаполненииРеквизитаВВыделенныхСтроках(
			Значение, ЗаполненоСтрок, ВыделенныеСтроки.Количество(), ПараметрыЗаполнения.ПредставлениеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныПоВидуЦенСервер()
	
	Поля = Новый Структура;
	Поля.Вставить("НомерСтроки");
	Поля.Вставить("НоменклатураОприходование");
	Поля.Вставить("СерияНоменклатурыОприходование");
	Поля.Вставить("ПартияОприходование");
	Поля.Вставить("ЕдиницаИзмеренияОприходование");
	Поля.Вставить("КоличествоВЕдиницахИзмерения");
	Поля.Вставить("Цена");
	Поля.Вставить("Сумма");
	
	Товары = Объект.Товары.Выгрузить(, ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(Поля));
	
	Для Каждого Поле Из Поля Цикл
		Если СтрНайти(Поле.Ключ, "Оприходование") Тогда
			Товары.Колонки[Поле.Ключ].Имя = СтрЗаменить(Поле.Ключ, "Оприходование", "");
		КонецЕсли;
	КонецЦикла;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	
	ОбработкаТабличнойЧастиСервер.ЗаполнитьЦены(ПараметрыЗаполненияЦены(ЭтотОбъект), Товары,, СтруктураДействий);
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", ТекущаяСтрока.НомерСтроки));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекущаяСтрока, "Цена, Сумма");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияЦены(Форма)
	
	ПараметрыЗаполненияЦены = Новый Структура;
	ПараметрыЗаполненияЦены.Вставить("Дата", Форма.Объект.Дата);
	ПараметрыЗаполненияЦены.Вставить("Валюта", Форма.ВалютаРегламентированногоУчета);
	ПараметрыЗаполненияЦены.Вставить("ВидЦены", Форма.Объект.ВидЦены);
	
	Возврат ПараметрыЗаполненияЦены;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныПоСебестоимостиСервер()
	
	РасчетВыполнен = Документы.РасчетСебестоимостиТоваров.РасчетВыполнен(Объект.Организация, Объект.Дата);
	Если Не РасчетВыполнен.ФактическийРасчет И Не РасчетВыполнен.ПредварительныйРасчет Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось заполнить цены по себестоимости в документе %Документ%: на %Период% не произведен расчет себестоимости.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Объект.Ссылка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Формат(НачалоМесяца(Объект.Дата), "ДЛФ=DD"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1
	|ПОМЕСТИТЬ втШапка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ДатаПолученияЦены                                                        КАК ДатаПолученияЦены,
	|	ЗНАЧЕНИЕ(Перечисление.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости) КАК ИсточникИнформацииОЦенах,
	|	&ПредварительныйРасчет                                                    КАК ПредварительныйРасчет,
	|	&Ссылка                                                                   КАК Документ,
	|	&Организация                                                              КАК Организация,
	|	&Склад                                                                    КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)                КАК ПодразделениеОрганизации,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВОтделениях) КАК РазделУчета,
	|	Товары.НомерСтроки                                                        КАК НомерСтроки,
	|	Товары.Номенклатура                                                       КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Товары.СтатусУказанияСерий В (&СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА Товары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                                     КАК СерияНоменклатурыДляСебестоимости,
	|	ВЫБОР
	|		КОГДА Товары.СтатусУказанияПартий В (&СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА Товары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                                     КАК ПартияДляСебестоимости,
	|	Товары.ИсточникФинансирования КАК ИсточникФинансирования,
	|	Товары.Количество                                                         КАК Количество,
	|	Товары.Коэффициент                                                        КАК Коэффициент
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&ТаблицаТовары КАК Товары
	|";
	
	ПараметрыПолученияЦен = ФормированиеПечатныхФормБольничнаяАптека.ПараметрыПолученияЦен();
	ПараметрыПолученияЦен.ИспользоватьЦеныПоСебестоимости = Истина;
	
	ТекстЗапроса = ФормированиеПечатныхФормБольничнаяАптека.ТекстЗапросаСЦенами(ТекстЗапроса, ПараметрыПолученияЦен);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаПолученияЦены"     , Объект.Дата);
	Запрос.УстановитьПараметр("ПредварительныйРасчет" , Истина); // Для получения данных из регистра сведений Стоимость товаров.
	Запрос.УстановитьПараметр("Ссылка"                , Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация"           , Объект.Организация);
	Запрос.УстановитьПараметр("Склад"                 , Объект.Склад);
	Запрос.УстановитьПараметр("ТаблицаТовары"         , Объект.Товары.Выгрузить());
	ЗапасыСервер.УстановитьСтатусыПараметровУчетаВПараметрахЗапроса(Запрос);
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументам.Следующий() Цикл
		Выборка = ВыборкаПоДокументам.Выбрать();
		Пока Выборка.Следующий() Цикл
			НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", Выборка.НомерСтроки));
			Если НайденныеСтроки.Количество() > 0 Тогда
				ТекущаяСтрока = НайденныеСтроки[0];
				ТекущаяСтрока.Сумма = Выборка.Сумма;
				Если ТекущаяСтрока.КоличествоВЕдиницахИзмерения <> 0 Тогда
					ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма / ТекущаяСтрока.КоличествоВЕдиницахИзмерения;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЦенуВТекущейСтроке()
	
	Если Объект.ПриходоватьТоварыПоСебестоимостиСписания Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуПродажи(), ПараметрыЗаполненияЦены(ЭтотОбъект));
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Номенклатура"                , ТекущаяСтрока.НоменклатураОприходование);
	ДанныеСтроки.Вставить("СерияНоменклатуры"           , ТекущаяСтрока.СерияНоменклатурыОприходование);
	ДанныеСтроки.Вставить("Партия"                      , ТекущаяСтрока.ПартияОприходование);
	ДанныеСтроки.Вставить("КоличествоВЕдиницахИзмерения", ТекущаяСтрока.КоличествоВЕдиницахИзмерения);
	ДанныеСтроки.Вставить("ЕдиницаИзмерения"            , ТекущаяСтрока.ЕдиницаИзмеренияОприходование);
	ДанныеСтроки.Вставить("Цена"                        , ТекущаяСтрока.Цена);
	ДанныеСтроки.Вставить("Сумма"                       , ТекущаяСтрока.Сумма);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ДанныеСтроки, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.Цена                           = ДанныеСтроки.Цена;
	ТекущаяСтрока.Сумма                          = ДанныеСтроки.Сумма;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьЦены(Форма)
	
	Для Каждого Строка Из Форма.Объект.Товары Цикл
		Строка.Цена = 0;
		Строка.Сумма = 0;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка подбора
#Область ОбработкаПодбора

&НаСервере
Процедура ОбработатьПодбор(Знач АдресТоваровВХранилище, КэшированныеЗначения)
	
	СписокТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	
	Для Каждого Товар Из СписокТоваров Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбработкаПодбора

////////////////////////////////////////////////////////////////////////////////
// Обработка изменения реквизитов
#Область ОбработкаИзмененияРеквизитов

&НаСервере
Процедура ОбработатьИзменениеОрганизации()
	
	Отделение = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОтделениеПоУмолчанию(Объект.Отделение, Объект.Организация);
	Если Объект.Отделение <> Отделение Тогда
		Объект.Отделение = Отделение;
		ОбработатьИзменениеОтделения();
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриИзмененииКлючевыхРеквизитовСостояниеЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОтделения()
	
	ОбщегоНазначенияБольничнаяАптека.ИзменитьСкладПриНеобходимости(Объект.Отделение, Объект.Склад, ОсновнойСклад);
	ОбработатьИзменениеСклада();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСклада()
	
	Если Склад = Объект.Склад Тогда
		Возврат;
	КонецЕсли;
	
	Склад = Объект.Склад;
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(Объект, ПараметрыУчетаНоменклатуры);
	
	Если Не Объект.ПриходоватьТоварыПоСебестоимостиСписания Тогда
		Объект.ВидЦены = Справочники.Склады.УчетныйВидЦены(Объект.Склад);
	КонецЕсли;
	
	Объект.МестоХранения = Неопределено;
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьКолонкиТабличнойЧасти(Объект.Товары, Неопределено, "МестоХранения");
	ОбработатьИзменениеМестаХранения();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМестаХранения()
	
	УстановитьВидимостьМестХранения();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСтатьиДоходов(КэшированныеЗначения)
	
	ПланыВидовХарактеристик.СтатьиДоходов.ОбработатьИзменениеСтатьиДоходов(Объект, Объект);
	
	ЗаполнитьСлужебныеРеквизиты(КэшированныеЗначения);
	УстановитьДоступность(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСтатьиРасходов(КэшированныеЗначения)
	
	ПланыВидовХарактеристик.СтатьиРасходов.ОбработатьИзменениеСтатьиРасходов(Объект, Объект);
	
	ЗаполнитьСлужебныеРеквизиты(КэшированныеЗначения);
	УстановитьДоступность(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("Номенклатура"                , ТекущаяСтрока.НоменклатураОприходование);
	ДанныеСтроки.Вставить("Коэффициент"                 , ТекущаяСтрока.КоэффициентОприходование);
	ДанныеСтроки.Вставить("КоличествоВЕдиницахИзмерения", ТекущаяСтрока.КоличествоВЕдиницахИзмерения);
	ДанныеСтроки.Вставить("Количество"  , 0);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ДанныеСтроки, СтруктураДействий, КэшированныеЗначения);
	ТекущаяСтрока.КоличествоОприходование  = ДанныеСтроки.Количество;
	
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРазбиенияСтроки(НоваяСтрока, ТекущаяСтрока) Экспорт
	
	ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	ПриИзмененииКоличестваВСтрокеСпискаТовары(НоваяСтрока);
	
	Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьЕдиницыИзмерения(ТекущаяСтрока, ТекущаяЕдиницаИзмерения)
	
	Если ТекущаяСтрока.Номенклатура <> ТекущаяСтрока.НоменклатураОприходование
	 Или ТекущаяСтрока.ЕдиницаИзмерения = ТекущаяСтрока.ЕдиницаИзмеренияОприходование Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяЕдиницаИзмерения = Элементы.ТоварыЕдиницаИзмеренияОприходование Тогда
		
		// Изменение единицы измерения списания.
		ТекущаяСтрока.ЕдиницаИзмерения = ТекущаяСтрока.ЕдиницаИзмеренияОприходование;
		ТекущаяСтрока.Коэффициент      = ТекущаяСтрока.КоэффициентОприходование;
		ТекущаяСтрока.Количество       = ТекущаяСтрока.КоличествоОприходование;
		
	ИначеЕсли ТекущаяЕдиницаИзмерения = Элементы.ТоварыЕдиницаИзмерения Тогда
		
		// Изменение единицы измерения оприходования.
		ТекущаяСтрока.ЕдиницаИзмеренияОприходование = ТекущаяСтрока.ЕдиницаИзмерения;
		ТекущаяСтрока.КоэффициентОприходование      = ТекущаяСтрока.Коэффициент;
		ТекущаяСтрока.КоличествоОприходование       = ТекущаяСтрока.Количество;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработкаИзмененияРеквизитов

////////////////////////////////////////////////////////////////////////////////
// Буфер обмена товарами
#Область БуферОбменаТоварами

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ТаблицаТовары = Элементы.Товары;
	Если ОбработкаТабличнойЧастиКлиент.ВозможноКопированиеСтрок(ТаблицаТовары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиВБуферОбмена(ТаблицаТовары.Имя);
		ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(ТаблицаТовары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ВставитьТоварыИзБуфераОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБуфераОбмена(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ОткрытьБуферОбмена(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиВБуферОбмена(Знач ИмяТабличнойЧасти)
	
	ОбработкаТабличнойЧастиСервер.СкопироватьВыделенныеСтрокиВБуферОбмена(Объект, Объект[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары = Неопределено)
	
	ТаблицаТовары = Объект.Товары;
	КоличествоТоваровДоВставки = ТаблицаТовары.Количество();
	
	ВставитьТоварыИзБуфераОбменаСервер(ВыбранныеТовары);
	
	КоличествоВставленных = ТаблицаТовары.Количество() - КоличествоТоваровДоВставки;
	ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьТоварыИзБуфераОбменаСервер(Знач ВыбранныеТовары = Неопределено)
	
	ТабличнаяЧасть = Объект.Товары;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ДанныеВставлены = ОбработкаТабличнойЧастиСервер.ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары, ТабличнаяЧасть, СтруктураДействий);
	Если ДанныеВставлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ЕстьДанныеВБуфереОбмена)
	
	Элементы = Форма.Элементы;
	Элементы.ТоварыБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыКонтекстноеМенюБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыБуферОбмена.Доступность = ЕстьДанныеВБуфереОбмена;
	
КонецПроцедуры

#КонецОбласти // БуферОбменаТоварами

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти // СтандартныеПодсистемы
