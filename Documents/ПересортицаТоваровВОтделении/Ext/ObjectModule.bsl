#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладеВОтделении") Тогда
		ИнвентаризацияТоваровВОтделении = ДанныеЗаполнения;
		ЗаполнитьДокументНаОснованииИнвентаризацииТоваровНаСкладе();
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
	ЗаполнитьПоЗначениямАвтозаполнения();
	
	ОбщегоНазначенияБольничнаяАптека.ЗаполнитьРеквизитыПоСкладу(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьДокумент();
	
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
	
	ОбщегоНазначенияБольничнаяАптека.ЗаполнитьРеквизитыПоСкладу(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	ПараметрыПроверки = ОбработкаТабличнойЧастиСервер.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.Суффиксы.Добавить("");
	ПараметрыПроверки.Суффиксы.Добавить("Оприходование");
	ОбработкаТабличнойЧастиСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, НепроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	ОбработкаТабличнойЧастиСервер.ПроверитьЗаполнениеИсточникаФинансирования(ЭтотОбъект, НепроверяемыеРеквизиты, Отказ);
	
	СкладыСервер.ПроверитьВедениеСкладскогоУчетаВОтделении(ЭтотОбъект, Отказ);
	
	ПараметрыУчетаНоменклатуры = ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект);
	ЗапасыСервер.ПроверитьЗаполнениеСерийНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры, НепроверяемыеРеквизиты, Отказ);
	ЗапасыСервер.ПроверитьЗаполнениеПартийНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры, НепроверяемыеРеквизиты, Отказ);
	
	Если ПриходоватьТоварыПоСебестоимостиСписания Тогда
		НепроверяемыеРеквизиты.Добавить("Товары.Цена");
		НепроверяемыеРеквизиты.Добавить("Товары.Сумма");
		НепроверяемыеРеквизиты.Добавить("СтатьяРасходов");
		НепроверяемыеРеквизиты.Добавить("СтатьяДоходов");
	КонецЕсли;
	
	ШаблонОшибки = НСтр("ru='Списываемый товар совпадает с приходуемым в строке %НомерСтроки% списка ""Товары""'");
	Для Каждого ТекущаяСтрока Из Товары Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
		   И ТекущаяСтрока.Номенклатура = ТекущаяСтрока.НоменклатураОприходование
		   И ТекущаяСтрока.СерияНоменклатуры = ТекущаяСтрока.СерияНоменклатурыОприходование
		   И ТекущаяСтрока.Партия = ТекущаяСтрока.ПартияОприходование Тогда
			
			ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%НомерСтроки%", ТекущаяСтрока.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущаяСтрока.НомерСтроки, "НомерСтроки");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	ПланыВидовХарактеристик.СтатьиДоходов.ПроверитьЗаполнениеАналитик(ЭтотОбъект,, НепроверяемыеРеквизиты, Отказ);
	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(ЭтотОбъект,, НепроверяемыеРеквизиты, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеБольничнаяАптека.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ПараметрыОкругления = ОбработкаТабличнойЧастиСервер.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыОкругления.Суффиксы.Добавить("");
	ПараметрыОкругления.Суффиксы.Добавить("Оприходование");
	ОбработкаТабличнойЧастиСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	Если ПриходоватьТоварыПоСебестоимостиСписания Тогда
		Для Каждого СтрокаТаблицы Из Товары Цикл
			Если СтрокаТаблицы.Цена <> 0 Или СтрокаТаблицы.Сумма <> 0 Тогда
				СтрокаТаблицы.Цена = 0;
				СтрокаТаблицы.Сумма = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОбработкаТабличнойЧастиСервер.ЗаполнитьИсточникФинансирования(ЭтотОбъект);
		Если ЗначениеЗаполнено(МестоХранения) Тогда
			Для Каждого ТекущаяСтрока Из Товары Цикл
				Если ТекущаяСтрока.МестоХранения <> МестоХранения Тогда
					ТекущаяСтрока.МестоХранения = МестоХранения;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЗапасыСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение документа
#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент()
	
	Автор = Пользователи.ТекущийПользователь();
	Ответственный = Пользователи.ТекущийПользователь();
	
	ЗаполнитьПоляПоУмолчанию();
	
КонецПроцедуры

Процедура ЗаполнитьПоляПоУмолчанию()
	
	Организация = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Отделение = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОтделениеПоУмолчанию(Отделение, Организация);
	Склад = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьСкладОтделенияПоУмолчанию(Склад, Отделение);
	ВидЦены = Справочники.Склады.УчетныйВидЦены(Склад);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗначениямАвтозаполнения()
	
	ОбщегоНазначенияБольничнаяАптека.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "Организация, Склад");
	ОбщегоНазначенияБольничнаяАптека.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "Отделение", "Организация");
	
	ЗаполняемыеПоля = Новый Структура;
	ЗаполняемыеПоля.Вставить("ПриходоватьТоварыПоСебестоимостиСписания");
	ЗаполняемыеПоля.Вставить("СтатьяДоходов");
	ЗаполняемыеПоля.Вставить("СтатьяРасходов");
	ЗаполняемыеПоля = ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(ЗаполняемыеПоля);
	ОбщегоНазначенияБольничнаяАптека.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, ЗаполняемыеПоля, "Организация, Склад");
	Если Не ПриходоватьТоварыПоСебестоимостиСписания И ЗначениеЗаполнено(СтатьяДоходов) И ЗначениеЗаполнено(СтатьяРасходов) Тогда
		ОбщегоНазначенияБольничнаяАптека.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "АналитикаДоходов", "Организация, Склад, СтатьяДоходов");
		ОбщегоНазначенияБольничнаяАптека.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "АналитикаРасходов", "Организация, Склад, СтатьяРасходов");
	Иначе
		ПриходоватьТоварыПоСебестоимостиСписания = Истина;
		СтатьяДоходов = Неопределено;
		СтатьяРасходов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	ОбщегоНазначенияБольничнаяАптека.ПроверитьЗаполнениеПодразделенияОрганизации(ЭтотОбъект, "Отделение");
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииИнвентаризацииТоваровНаСкладе()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Документ.Ссылка                  КАК Ссылка,
	|	Документ.Организация             КАК Организация,
	|	Документ.Склад                   КАК Склад,
	|	Документ.МестоХранения           КАК МестоХранения,
	|	Документ.ИсточникФинансирования  КАК ИсточникФинансирования,
	|	НЕ Документ.Проведен             КАК ЕстьОшибкиПроведен,
	|	Документ.Статус                  КАК Статус,
	|	ВЫБОР
	|		КОГДА Документ.Статус В (&ДоступныеСтатусы)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                            КАК ЕстьОшибкиСтатус
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладеВОтделении КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Инвентаризация
	|");
	
	Запрос.УстановитьПараметр("Инвентаризация", ИнвентаризацияТоваровВОтделении);
	ДоступныеСтатусы = Новый Массив;
	ДоступныеСтатусы.Добавить(Перечисления.СтатусыИнвентаризацииТоваров.Выполнено);
	Запрос.УстановитьПараметр("ДоступныеСтатусы", ДоступныеСтатусы);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(
		Шапка.Ссылка,
		Шапка.ЕстьОшибкиПроведен,
		Шапка.Статус,
		Шапка.ЕстьОшибкиСтатус,
		ДоступныеСтатусы);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка);
	
КонецПроцедуры

#КонецОбласти // ИнициализацияИЗаполнение

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

Функция СписокРегистровДляКонтроля() Экспорт
	
	РегистрыДляКонтроля = Новый Массив;
	
	// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения
	РегистрыДляКонтроля.Добавить(Движения.СебестоимостьТоваров);
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		//РегистрыДляКонтроля.Добавить(Движения.СвободныеОстатки);
		РегистрыДляКонтроля.Добавить(Движения.ТоварыКОформлениюИзлишковНедостач);
	КонецЕсли;
	
	Возврат РегистрыДляКонтроля;
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли