
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем ПредыдущиеРеквизитыСтроки; //используется для отвязки строки перемещения от строки заказа

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ПодключаемоеОборудованиеСервер.НастроитьФормуДляИспользованияПодключаемогоОборудования(ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриСозданииНаСервере(ЭтотОбъект);
	
	// БуферОбменаТоварами
	УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, Не ОбработкаТабличнойЧастиСервер.БуферОбменаПустой());
	// Конец БуферОбменаТоварами
	
	// ЭлектроннаяПодпись
	ЭлектроннаяПодписьБольничнаяАптека.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаЭлектронныеПодписи);
	// Конец ЭлектроннаяПодпись
	
	// ИнтеграцияСМобильнымПриложением
	ИнтеграцияСМобильнымПриложением.СоздатьКомандуЗагрузкиДанныхИзМобильногоПриложенияНаФорме(ЭтотОбъект, "Товары", Элементы.ТоварыГруппаЗаполнить.Имя);
	// Конец ИнтеграцияСМобильнымПриложением
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриЧтенииНаСервер_ФормаДокумента(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ПредыдущиеРеквизитыСтроки = Новый Структура;
	ПредыдущиеРеквизитыСтроки.Вставить("Номенклатура");
	ПредыдущиеРеквизитыСтроки.Вставить("СерияНоменклатуры");
	ПредыдущиеРеквизитыСтроки.Вставить("ЕдиницаИзмерения");
	ПредыдущиеРеквизитыСтроки.Вставить("Коэффициент");
	ПредыдущиеРеквизитыСтроки.Вставить("Количество");
	ПредыдущиеРеквизитыСтроки.Вставить("КоличествоВЕдиницахИзмерения");
	ПредыдущиеРеквизитыСтроки.Вставить("КодСтроки");
	ПредыдущиеРеквизитыСтроки.Вставить("НоменклатураЗаказа");
	ПредыдущиеРеквизитыСтроки.Вставить("ЕдиницаИзмеренияЗаказа");
	ПредыдущиеРеквизитыСтроки.Вставить("КоэффициентЕдиницыЗаказа");
	ПредыдущиеРеквизитыСтроки.Вставить("КоличествоВЕдиницахЗаказа");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если ПодключаемоеОборудованиеКлиент.ОбрабатыватьОповещение(ЭтотОбъект, Источник) Тогда
		Если ПодключаемоеОборудованиеКлиент.ОбработатьПолучениеДанныхОтСканераШтрихкода(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбработатьШтрихкоды(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ВведенШтрихкод" И Источник = УникальныйИдентификатор Тогда
		ОбработатьШтрихкоды(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
	КонецЕсли;
	
	Если Источник = "РегистрацияШтрихкодов"
	   И ИмяСобытия = "ЗарегистрированыШтрихкоды"
	   И Параметр.КлючВладельца = УникальныйИдентификатор Тогда
		Если Параметр.ЗарегистрированныеШтрихкоды.Количество() > 0 Тогда
			ОбновитьСтрокиНенайденныхШтрихКодов(Параметр.ЗарегистрированныеШтрихкоды);
		КонецЕсли;
	КонецЕсли;
	
	// БуферОбменаТоварами
	Если ОбработкаТабличнойЧастиКлиент.ОбрабатыватьОповещениеОтБуфераОбмена(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ДоступностьБуфераОбмена = ОбработкаТабличнойЧастиКлиент.ОпределитьДоступностьВставкиИзБуфераОбменаПоСобытию(ИмяСобытия);
		УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, ДоступностьБуфераОбмена);
	КонецЕсли;
	// Конец БуферОбменаТоварами
	
	// ИнтеграцияМДЛП
	Если (ИмяСобытия = "ИзменениеСостоянияМДЛП" Или ИмяСобытия = "Запись_УведомлениеОПеремещенииМДЛП")
	   И (Не Параметр.Свойство("Основание") Или Параметр.Основание = Объект.Ссылка) Тогда
		СформироватьТекстУведомленияМДЛП();
	КонецЕсли;
	Если ИмяСобытия = "ВыполненОбменМДЛП" Тогда
		СформироватьТекстУведомленияМДЛП();
	КонецЕсли;
	// Конец ИнтеграцияМДЛП
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптекаКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ПодборТоваровКлиент.ОбработатьПодборТоваровВДокументСписания(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодбор(ВыбранноеЗначение.АдресТоваровВХранилище, КэшированныеЗначения);
	ИначеЕсли ПодборТоваровКлиент.ОбработатьПодборТоваровПоОтбору(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодбор(ВыбранноеЗначение.АдресТоваровВХранилище, КэшированныеЗначения);
	ИначеЕсли ПодборТоваровКлиент.ОбработатьПодборТоваровПоЗаказуВДокументСписания(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодборИзЗаказа(ВыбранноеЗначение.АдресТоваровВХранилище, КэшированныеЗначения);
	Иначе
		// БуферОбменаТоварами
		Если ОбработкаТабличнойЧастиКлиент.НужноОбработатьВставкуИзБуфераОбмена(ЭтотОбъект, ИсточникВыбора) Тогда
			ВставитьТоварыИзБуфераОбмена(ВыбранноеЗначение);
		КонецЕсли;
		// Конец БуферОбменаТоварами
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОценкаПроизводительностиБольничнаяАптекаКлиент.НачатьЗамерПроведенияДокумента(Объект.Ссылка, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	НастройкаФормБольничнаяАптека.ИзменитьЗаголовокПоХозяйственнойОперации(ЭтотОбъект);
	
	// ИнтеграцияМДЛП
	СформироватьТекстУведомленияМДЛП();
	// Конец ИнтеграцияМДЛП
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеремещениеПоЗаказуПриИзменении(Элемент)
	
	Если Объект.ПеремещениеПоЗаказу Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Организация"     , Объект.Организация);
		ПараметрыОтбора.Вставить("СкладОтправитель", Объект.СкладОтправитель);
		ПараметрыОтбора.Вставить("СкладПолучатель" , Объект.СкладПолучатель);
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("Отбор", ПараметрыОтбора);
		ПараметрыФормыВыбора.Вставить("Регистратор", Объект.Ссылка);
		
		Оповестить = Новый ОписаниеОповещения("ПеремещениеПоЗаказуУстановленоЗаказВыбран", ЭтотОбъект);
		ОткрытьФорму("Документ.ЗаказНаПеремещение.Форма.ФормаВыбораРаспоряжения", ПараметрыФормыВыбора, ЭтотОбъект,,,, Оповестить);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ПеремещениеПоЗаказуСнятоОтвязкаПодтверждена", ЭтотОбъект);
		Если Объект.Товары.Количество() > 0 Тогда
			ПоказатьВопрос(Оповещение, НСтр("ru='Строки в списке ""Товары"" перестанут быть связанными со строками заказа. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить()
	
	ОбработкаТабличнойЧастиКлиент.ПоказатьВводШтрихкода(УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодбор(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ"              , Объект.Ссылка);
	ПараметрыПодбора.Вставить("Дата"                  , Объект.Дата);
	ПараметрыПодбора.Вставить("Организация"           , Объект.Организация);
	ПараметрыПодбора.Вставить("МестоХраненияОстатка"  , "Склад");
	ПараметрыПодбора.Вставить("Склад"                 , Объект.СкладОтправитель);
	ПараметрыПодбора.Вставить("ИсточникФинансирования", Объект.ИсточникФинансирования);
	ПараметрыПодбора.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ТоварыНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	ПодборТоваровКлиент.ОткрытьПодборТоваровВДокументСписания(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТоварыПоЗаказу(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ"                , Объект.Ссылка);
	ПараметрыПодбора.Вставить("Дата"                    , Объект.Дата);
	ПараметрыПодбора.Вставить("РаспоряжениеНаОформление", Объект.ЗаказНаПеремещение);
	ПараметрыПодбора.Вставить("Организация"             , Объект.Организация);
	ПараметрыПодбора.Вставить("МестоХраненияОстатка"    , "Склад");
	ПараметрыПодбора.Вставить("Склад"                   , Объект.СкладОтправитель);
	ПараметрыПодбора.Вставить("ИсточникФинансирования"  , Объект.ИсточникФинансирования);
	ПараметрыПодбора.Вставить("АдресТоваровВХранилище"  , ПодготовитьДанныеДляПодбораПоЗаказу());
	ПараметрыПодбора.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ТоварыНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	ПодборТоваровКлиент.ОткрытьПодборТоваровПоЗаказуВДокументСписания(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтбору(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Склад", Объект.СкладОтправитель);
	ПараметрыПодбора.Вставить("ИсточникФинансирования", Объект.ИсточникФинансирования);
	ПодборТоваровКлиент.ОткрытьПодборТоваровПоОтбору(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьНенайденныеШтрихкоды(Команда)
	
	ОбновитьСтрокиНенайденныхШтрихКодов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНенайденныеШтрихкоды(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьНенайденныеШтрихкоды(Объект.Товары, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗагрузкуДанныхИзТСД", ЭтотОбъект);
	ОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(Оповещение, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Необходимо выбрать строку, для которой необходимо получить вес.'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьПолучениеВеса", ЭтотОбъект, ТекущаяСтрока);
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(Оповещение, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтвязатьОтЗаказа(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		КоличествоОтвязанных = 0;
		Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
			СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
			Если ЗначениеЗаполнено(СтрокаТаблицы.НоменклатураЗаказа) Тогда
				СтрокаТаблицы.КодСтроки = 0;
				СтрокаТаблицы.НоменклатураЗаказа = Неопределено;
				СтрокаТаблицы.ЕдиницаИзмеренияЗаказа = Неопределено;
				СтрокаТаблицы.КоэффициентЕдиницыЗаказа = 0;
				СтрокаТаблицы.КоличествоВЕдиницахЗаказа = 0;
				ОбновитьОтклоненияОтЗаказаВСтроке(СтрокаТаблицы, ИспользоватьРаспоряженияНаОформление И Объект.ПеремещениеПоЗаказу);
				КоличествоОтвязанных = КоличествоОтвязанных + 1;
			КонецЕсли;
		КонецЦикла;
		
		ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
		ОповеститьОбОкончанииОтвязкиСтрок(КоличествоОтвязанных);
		
	Иначе
		ТекстПредупреждения = НСтр("ru='Выберите строки, которые необходимо отвязать от заказа.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("ПослеРазбиенияСтроки", ЭтотОбъект, ТекущаяСтрока);
	ОбработкаТабличнойЧастиКлиент.РазбитьСтрокуТЧ(Объект.Товары, ТекущаяСтрока, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМестоХранения(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"МестоХранения",
		НСтр("ru='Место хранения'"),
		"Справочник.МестаХранения.ФормаВыбора",
		Новый Структура("Отбор", Новый Структура("Владелец", Объект.СкладОтправитель)));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсточникФинансирования(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"ИсточникФинансирования",
		НСтр("ru='Источник финансирования'"),
		"Справочник.ИсточникиФинансирования.ФормаВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	// ИнтеграцияСМобильнымПриложением
	Оповестить = Новый ОписаниеОповещения("ОбработатьЗагрузкуДанныхИзТСД", ЭтотОбъект);
	ИнтеграцияСМобильнымПриложениемКлиент.ВыполнитьКомандуЗагрузкиДанныхИзМобильногоПриложения(ЭтотОбъект, Команда, Оповестить);
	// Конец ИнтеграцияСМобильнымПриложением
	
	ОбщегоНазначенияБольничнаяАптекаКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды для списка "Электронные подписи"
#Область ЭлектроннаяПодпись

&НаКлиенте
Процедура Подписать(Команда)
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПодписатьДокументЗавершение", ЭтотОбъект);
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ПодписатьОбъектВФорме(ЭтотОбъект, ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ОткрытьПодпись(Команда)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ОткрытьПодпись(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_Проверить(Команда)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ПроверитьПодписи(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ПроверитьВсе(Команда)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ПроверитьПодписи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_УдалитьПодпись(Команда)
	
	УдалитьПодписи();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_СохранитьПодпись(Команда)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.СохранитьПодпись(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ОбновитьСписокПодписей(Команда)
	
	ЗаполнитьСписокПодписей();
	
	Коллекция = ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ТаблицаПодписей(ЭтотОбъект).ПолучитьЭлементы();
	Элемент = ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ЭлементТаблицаПодписей(ЭтотОбъект);
	Для Каждого Строка Из Коллекция Цикл
		Элемент.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ЭлектроннаяПодпись

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Шапка
#Область Шапка

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ОбработатьИзменениеХозяйственнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)
	
	Если Склад <> Объект.СкладОтправитель Тогда
		ОбработатьИзменениеСклада();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	
	Если СкладПолучатель <> Объект.СкладПолучатель Тогда
		ОбработатьИзменениеСкладаПолучателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстУведомленияМДЛПОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПКлиент.ТекстУведомленияМДЛПОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

#КонецОбласти // Шапка

////////////////////////////////////////////////////////////////////////////////
// Список "Товары"
#Область Товары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекущаяСтрока.КодСтроки = 0;
		ТекущаяСтрока.НоменклатураЗаказа = Неопределено;
		ТекущаяСтрока.ЕдиницаИзмеренияЗаказа = Неопределено;
		ТекущаяСтрока.КоэффициентЕдиницыЗаказа = 0;
		ТекущаяСтрока.КоличествоВЕдиницахЗаказа = 0;
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ИспользоватьРаспоряженияНаОформление И Объект.ПеремещениеПоЗаказу);
		ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ЗаполнитьЗначенияСвойств(ПредыдущиеРеквизитыСтроки, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	ВопросПользователюПриИзмененииРеквизитаСтроки(
		Новый ОписаниеОповещения("ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), ТекущаяСтрока.СерияНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьПартиюПоВладельцу(), ТекущаяСтрока.Партия);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ТекущаяСтрока.Штрихкод = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элемент.Родитель.ТекущиеДанные;
	ОтборПартий = Новый Структура;
	ОтборПартий.Вставить("Документ"     , Объект.Ссылка);
	ОтборПартий.Вставить("Организация"  , Объект.Организация);
	ОтборПартий.Вставить("Склад"        , Объект.СкладОтправитель);
	
	ПараметрыВыбораПартии = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыВыбораПартии(ОтборПартий, ТекущаяСтрока);
	
	СтатусыУказанияПартий = ЗапасыКлиентСерверПовтИсп.СтатусыУказанияПартий();
	ПараметрыВыбораПартии.МожноСоздаватьПартию = ТекущаяСтрока.СтатусУказанияПартийОтправитель = СтатусыУказанияПартий.СтатусПартииНеУказываются;
	
	ОбработкаТабличнойЧастиКлиент.ВыбратьПартиюНоменклатуры(ЭтотОбъект, Элемент, ПараметрыВыбораПартии, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // Товары

////////////////////////////////////////////////////////////////////////////////
// Список "Электронные подписи"
#Область ЭлектроннаяПодпись

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ОткрытьПодпись(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ПриАктивизацииСтроки(Элемент)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.УстановитьДоступностьКомандСпискаПодписей(ЭтотОбъект, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ОткрытьПодпись(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ЭлектроннаяПодпись

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.СкладОтправитель));
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	
	Склад = Объект.СкладОтправитель;
	СкладПолучатель = Объект.СкладПолучатель;
	ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада");
	УстановитьДоступностьЭлементовПоТипуСклада();
	
	УправлениеЭлементамиФормы();
	
	ИспользоватьРаспоряженияНаОформление = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение");
	Элементы.ГруппаЗаказ.Видимость = ИспользоватьРаспоряженияНаОформление;
	УстановитьВидимостьЭлементовПоЗаказу();
	ОбновитьФормуПоЗаказу();
	
	// ИнтеграцияМДЛП
	СформироватьТекстУведомленияМДЛП();
	// Конец ИнтеграцияМДЛП
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСерийНоменклатуры(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПартий(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеИсточниковФинансирования(ЭтотОбъект);
	
	ЗаказыСервер.УстановитьОформлениеСтокиСверхЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоТипуСклада()
	
	ЭтоРозничныйМагазин = (ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин
	                   Или ТипСкладаПолучателя = Перечисления.ТипыСкладов.РозничныйМагазин);
	
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсточникФинансирования", "ТолькоПросмотр", ЭтоРозничныйМагазин);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыИсточникФинансирования", "Видимость", Не ЭтоРозничныйМагазин);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЗаполнитьИсточникФинансирования", "Доступность", Не ЭтоРозничныйМагазин);
	
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыСерияНоменклатуры", "Видимость", ПараметрыУчетаНоменклатуры.ИспользоватьСерии);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПартия", "Видимость", ПараметрыУчетаНоменклатуры.ИспользоватьПартии);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ЭтоПередачаТоваровМеждуОбособленнымиПодразделениями = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами);
	
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОрганизацияПолучатель",
		"Видимость",
		ЭтоПередачаТоваровМеждуОбособленнымиПодразделениями);
	
	Элементы.Организация.Заголовок =
		?(ЭтоПередачаТоваровМеждуОбособленнымиПодразделениями,
			НСтр("ru = 'Организация-отправитель'"),
			НСтр("ru = 'Организация'"));
	
	НастройкаФормБольничнаяАптека.ИзменитьЗаголовокПоХозяйственнойОперации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитВВыделенныхСтроках(ИмяРеквизита, ПредставлениеРеквизита, ИмяФормыВыборка, ПараметрыФормы = Неопределено)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	ЗаполнениеВозможно = ОбработкаТабличнойЧастиКлиент.ПроверитьВозможностьЗаполненияРеквизитаВТабличнойЧасти(
		Объект.Товары, ВыделенныеСтроки, НСтр("ru='Товары'"), ПредставлениеРеквизита);
	Если ЗаполнениеВозможно Тогда
		
		ПараметрыЗаполнения = Новый Структура("ИмяРеквизита, ПредставлениеРеквизита", ИмяРеквизита, ПредставлениеРеквизита);
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьРеквизитВВыделенныхСтрокахЗавершение", ЭтотОбъект, ПараметрыЗаполнения);
		ОткрытьФорму(ИмяФормыВыборка, ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитВВыделенныхСтрокахЗавершение(Значение, ПараметрыЗаполнения) Экспорт
	
	Если Значение <> Неопределено Тогда
		ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
		ЗаполненоСтрок = ОбработкаТабличнойЧастиКлиент.ЗаполнитьРеквизитВВыделенныхСтроках(
			Объект.Товары, ВыделенныеСтроки, ПараметрыЗаполнения.ИмяРеквизита, Значение);
		ОбработкаТабличнойЧастиКлиент.ПоказатьОповещениеОЗаполненииРеквизитаВВыделенныхСтроках(
			Значение, ЗаполненоСтрок, ВыделенныеСтроки.Количество(), ПараметрыЗаполнения.ПредставлениеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

// ИнтеграцияМДЛП

&НаСервере
Процедура СформироватьТекстУведомленияМДЛП()
	
	ИнтеграцияМДЛП.СформироватьТекстУведомленияМДЛП(ЭтотОбъект);
	
КонецПроцедуры

// Конец ИнтеграцияМДЛП

////////////////////////////////////////////////////////////////////////////////
// Заказ
#Область Заказ

&НаКлиенте
Процедура ВопросПользователюПриИзмененииРеквизитаСтроки(ОписаниеОповещения, ТекущаяСтрока)
	
	// Если текущая строка не связана с заказом
	Если ТекущаяСтрока.КодСтроки = 0 Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	// Если ни один из ключевых реквизитов не изменился
	Если ТекущаяСтрока.Номенклатура = ПредыдущиеРеквизитыСтроки.Номенклатура Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ТекстВопроса = НСтр("ru='Редактируемая строка перестанет быть связанной со строкой заказа. Продолжить?'");
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВопросПользователюПриИзмененииРеквизитаСтрокиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПользователюПриИзмененииРеквизитаСтрокиВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	// Если пользователь подтвердил изменение значения ключевого реквизита
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДополнительныеПараметры.ТекущаяСтрока.КодСтроки = 0;
		ДополнительныеПараметры.ТекущаяСтрока.НоменклатураЗаказа = Неопределено;
		ДополнительныеПараметры.ТекущаяСтрока.ЕдиницаИзмеренияЗаказа = Неопределено;
		ДополнительныеПараметры.ТекущаяСтрока.КоэффициентЕдиницыЗаказа = 0;
		ДополнительныеПараметры.ТекущаяСтрока.КоличествоВЕдиницахЗаказа = 0;
		ОбновитьОтклоненияОтЗаказаВСтроке(ДополнительныеПараметры.ТекущаяСтрока, ИспользоватьРаспоряженияНаОформление И Объект.ПеремещениеПоЗаказу);
		ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Истина);
		
	Иначе
		
		// Если пользователь отказался менять связанную строку, возвращаем старые значения
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.ТекущаяСтрока, ПредыдущиеРеквизитыСтроки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоЗаказу()
	
	СкрываемыеЭлементы = Новый Массив();
	СкрываемыеЭлементы.Добавить("ТоварыОтвязатьОтЗаказа");
	СкрываемыеЭлементы.Добавить("ТоварыПодобратьТоварыПоЗаказу");
	СкрываемыеЭлементы.Добавить("ТоварыКодСтроки");
	
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, СкрываемыеЭлементы, "Видимость", ИспользоватьРаспоряженияНаОформление И Объект.ПеремещениеПоЗаказу);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеПоЗаказуУстановленоЗаказВыбран(Заказ, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		Объект.ПеремещениеПоЗаказу = Ложь;
		Возврат;
	КонецЕсли;
	
	Объект.ЗаказНаПеремещение = Заказ;
	СвязатьСЗаказомСервер();
	
КонецПроцедуры

&НаСервере
Процедура СвязатьСЗаказомСервер()
	
	УстановитьВидимостьЭлементовПоЗаказу();
	ОбновитьФормуПоЗаказу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеПоЗаказуСнятоОтвязкаПодтверждена(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ЗаказНаПеремещение = Неопределено;
	ОтвязатьОтЗаказаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОтвязатьОтЗаказаСервер()
	
	Объект.ПеремещениеПоЗаказу = Ложь;
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		ТекущаяСтрока.КодСтроки = 0;
		ТекущаяСтрока.НоменклатураЗаказа = Неопределено;
		ТекущаяСтрока.ЕдиницаИзмеренияЗаказа = Неопределено;
		ТекущаяСтрока.КоэффициентЕдиницыЗаказа = 0;
		ТекущаяСтрока.КоличествоВЕдиницахЗаказа = 0;
	КонецЦикла;
	
	УстановитьВидимостьЭлементовПоЗаказу();
	ОбновитьФормуПоЗаказу();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ПеремещениеПоЗаказу)
	
	Если ПеремещениеПоЗаказу Тогда
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.КодСтроки) Тогда
			ТекущаяСтрока.РасхождениеЗаказ = 1;
			ТекущаяСтрока.КартинкаРасхождениеЗаказ = 1;
		Иначе
			ТекущаяСтрока.РасхождениеЗаказ = 0;
			ТекущаяСтрока.КартинкаРасхождениеЗаказ = ?(ТекущаяСтрока.СтрокаОтсутствуетВЗаказе, 2, 0);
		КонецЕсли;
	Иначе
		ТекущаяСтрока.РасхождениеЗаказ = 0;
		ТекущаяСтрока.КартинкаРасхождениеЗаказ = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОкончанииОтвязкиСтрок(КоличествоОтработанныхСтрок, СтрокиОтвязаны = Истина)
	
	Если СтрокиОтвязаны Тогда
		ТекстОповещения = НСтр("ru='В документе от заказа отвязано строк (%%Количество%%).'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Количество%%", КоличествоОтработанныхСтрок);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки отвязаны'"),
			,
			ТекстОповещения,
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки не отвязаны'"),
			,
			НСтр("ru='Ни одна строка не была отвязана.'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПоЗаказу()
	
	РассчитатьСостояниеЗаказа();
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСостояниеЗаказа()
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ИспользоватьРаспоряженияНаОформление И Объект.ПеремещениеПоЗаказу);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗависимыеРеквизитыФормыПоЗаказу(КоличествоРасхождений, НадписьРасхождениеЗаказ, КартинкаРасхождениеЗаказ)
	
	Если КоличествоРасхождений > 0 Тогда
		КартинкаРасхождениеЗаказ.Картинка = БиблиотекаКартинок.ПревышениеЗаказа;
		НадписьРасхождениеЗаказ = СтрЗаменить(НСтр("ru='Строк сверх заказа: %КоличествоРасхождений%'"), "%КоличествоРасхождений%", КоличествоРасхождений);
	Иначе
		КартинкаРасхождениеЗаказ.Картинка = Новый Картинка();
		НадписьРасхождениеЗаказ = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляПодбораПоЗаказу()
	
	ДанныеЗаказа = Документы.ЗаказНаПеремещение.ПолучитьРезультатЗапросаПоОстаткам(Объект.ЗаказНаПеремещение, Объект.Ссылка).Выгрузить();
	ДанныеЗаказа.Колонки.Добавить("ИсточникФинансированияЗаказа", Новый ОписаниеТипов("СправочникСсылка.ИсточникиФинансирования"));
	ДанныеЗаказа.ЗаполнитьЗначения(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаказНаПеремещение, "ИсточникФинансирования"), "ИсточникФинансированияЗаказа");
	Товары = Объект.Товары.Выгрузить();
	Товары.Колонки.Добавить("Заказ");
	Для Каждого Товар Из Товары Цикл
		Если ЗначениеЗаполнено(Товар.КодСтроки) Тогда
			Товар.Заказ = Объект.ЗаказНаПеремещение;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеПодбораПоЗаказу = Новый Структура("ДанныеЗаказа, Товары", ДанныеЗаказа, Товары);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеПодбораПоЗаказу);
	
КонецФункции

&НаСервере
Процедура ОбработатьПодборИзЗаказа(Знач АдресТоваровВХранилище, КэшированныеЗначения)
	
	СписокТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	Объект.Товары.Загрузить(СписокТоваров);
	
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(Объект, ПараметрыУчетаНоменклатуры);
	
	ОбновитьФормуПоЗаказу();
	
КонецПроцедуры

#КонецОбласти // Заказ

////////////////////////////////////////////////////////////////////////////////
// Контроль несогласованных изменений
#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура Подключаемый_ПриИзменении_КонтрольНесогласованныхИзменений(Элемент)
	
	КонтрольНесогласованныхИзмененийКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_КонтрольНесогласованныхИзменений(Элемент)
	
	КонтрольНесогласованныхИзмененийКлиент.Нажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команды_КонтрольНесогласованныхИзменений(Команда)
	
	КонтрольНесогласованныхИзмененийКлиент.Команда(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_КонтрольНесогласованныхИзменений(Элемент, Отказ)
	
	КонтрольНесогласованныхИзмененийКлиент.ПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_КонтрольНесогласованныхИзменений(Элемент, Отказ)
	
	КонтрольНесогласованныхИзмененийКлиент.ПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_КонтрольНесогласованныхИзменений(Элемент, Отказ, Копирование, Родитель, Группа)
	
	КонтрольНесогласованныхИзмененийКлиент.ПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	// ЭлектроннаяПодпись
	СписокЭлементов = ЭлектроннаяПодписьБольничнаяАптека.ИменаЭлементовПодписываемыхДанных(ЭтотОбъект);
	// Конец ЭлектроннаяПодпись
	
	СписокЭлементов.Добавить(Элементы.ИсточникФинансирования.Имя);
	
	СписокЭлементов.Добавить(Элементы.ТоварыПолучитьВес.Имя);
	
	СписокЭлементов.Добавить(Элементы.ТоварыКомандаПодбор.Имя);
	СписокЭлементов.Добавить(Элементы.ТоварыДобавитьТоварыПоОтбору.Имя);
	СписокЭлементов.Добавить(Элементы.ТоварыПодобратьТоварыПоЗаказу.Имя);
	СписокЭлементов.Добавить(Элементы.ТоварыЗаполнитьИсточникФинансирования.Имя);
	
	СписокЭлементов.Добавить(Элементы.ТоварыОтвязатьОтЗаказа.Имя);
	
	СписокЭлементов.Добавить(Элементы.ТоварыПерезаполнитьНенайденныеШтрихкоды.Имя);
	СписокЭлементов.Добавить(Элементы.ТоварыОбработатьНенайденныеШтрихкоды.Имя);
	
	// БуферОбменаТоварами
	СписокЭлементов.Добавить(Элементы.ТоварыБуферОбменаВставить.Имя);
	СписокЭлементов.Добавить(Элементы.ТоварыКонтекстноеМенюБуферОбменаВставить.Имя);
	СписокЭлементов.Добавить(Элементы.ТоварыБуферОбмена.Имя);
	// Конец БуферОбменаТоварами
	
	ИзмененияЗапрещены = Объект.ПодписанЭП;
	КонтрольНесогласованныхИзменений.НастроитьКонтрольИзмененияДанных(ЭтотОбъект, СписокЭлементов, ИзмененияЗапрещены);
	
КонецПроцедуры

#КонецОбласти // КонтрольНесогласованныхИзменений

////////////////////////////////////////////////////////////////////////////////
// Электронная подпись
#Область ЭлектроннаяПодпись

&НаКлиенте
Процедура ПодписатьДокументЗавершение(Результат, НеИспользуется) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Прочитать();
	ЗаполнитьСписокПодписей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодписей()
	
	ЭлектроннаяПодписьБольничнаяАптека.ЗаполнитьПодписи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписи()
	
	Если ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ЭлементТаблицаПодписей(ЭтотОбъект).ВыделенныеСтроки.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Удалить выделенные подписи?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выделенную подпись?'");
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УдалитьПодписиЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписиЗавершение(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПодписиИОбновитьСписок();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодписиИОбновитьСписок()
	
	ЭлектроннаяПодписьБольничнаяАптека.УдалитьПодписиИОбновитьСписок(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ЭлектроннаяПодпись

////////////////////////////////////////////////////////////////////////////////
// Обработка штрихкодов
#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияСДобавленнымиСтроками = Новый Структура;
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ДействияСИзмененнымиСтроками = Новый Структура;
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ИзменятьКоличество = Не ТолькоПросмотр И Не Объект.ПодписанЭП;
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиШтрихкодов(ДанныеШтрихкодов, ДействияСДобавленнымиСтроками, ДействияСИзмененнымиСтроками);
	ПараметрыДействия.ИзменятьКоличество = ИзменятьКоличество;
	ПараметрыДействия.ПараметрыУчетаНоменклатуры = ПараметрыУчетаНоменклатуры;
	
	ОбработатьШтрихкодыНаСервере(ПараметрыДействия, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиКлиент.СообщитьОНеизвестныхШтрихкодах(ПараметрыДействия);
	
	Если ПараметрыДействия.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = ПараметрыДействия.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыНаСервере(ПараметрыДействия, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиСервер.ОбработатьШтрихкоды(ЭтотОбъект, Объект, ПараметрыДействия, КэшированныеЗначения);
	РассчитатьСостояниеЗаказа();
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокиНенайденныхШтрихКодов(ЗарегистрированныеШтрихкоды = Неопределено)
	
	Если Не ОбработкаТабличнойЧастиКлиент.ЕстьНенайденныеШтрихкоды(Объект.Товары) Тогда
		Возврат;
	КонецЕсли;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияСИзмененнымиСтроками = Новый Структура;
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиНенайденныхШтрихкодов();
	ПараметрыДействия.ДействияСИзмененнымиСтроками = ДействияСИзмененнымиСтроками;
	Если ЗарегистрированныеШтрихкоды <> Неопределено Тогда
		ПараметрыДействия.ЗарегистрированныеШтрихкоды = ЗарегистрированныеШтрихкоды;
	КонецЕсли;
	
	ОбновитьДанныеНенайденныхШтрихКодовНаСервере(ПараметрыДействия, КэшированныеЗначения);
	
	Если ПараметрыДействия.Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.СообщитьОНеизвестныхШтрихкодах(ПараметрыДействия);
	ОбработкаТабличнойЧастиКлиент.СообщитьОРезультатеОбновленияДанныхПоШтрихкодам(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНенайденныхШтрихКодовНаСервере(ПараметрыДействия, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиСервер.ОбновитьДанныеНенайденныхШтрихКодов(Объект, ПараметрыДействия, КэшированныеЗначения);
	РассчитатьСостояниеЗаказа();
	
КонецПроцедуры

#КонецОбласти // ОбработкаШтрихкодов

////////////////////////////////////////////////////////////////////////////////
// Обработка подбора
#Область ОбработкаПодбора

&НаСервере
Процедура ОбработатьПодбор(Знач АдресТоваровВХранилище, КэшированныеЗначения)
	
	СписокТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	
	КэшированныеЗначения = Неопределено;
	
	Для Каждого СтрокаТовара Из СписокТоваров Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбновитьОтклоненияОтЗаказаВСтроке(НоваяСтрока, ИспользоватьРаспоряженияНаОформление И Объект.ПеремещениеПоЗаказу);
		
	КонецЦикла;
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	
КонецПроцедуры

#КонецОбласти // ОбработкаПодбора

////////////////////////////////////////////////////////////////////////////////
// Обработка изменения реквизитов
#Область ОбработкаИзмененияРеквизитов

&НаСервере
Процедура ОбработатьИзменениеХозяйственнойОперации()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами Тогда
		
		Если Не Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация) Тогда
			Объект.Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Организация) 
		   И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(Объект.Организация, Объект.ОрганизацияПолучатель)
		 Или Не Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.ОрганизацияПолучатель) Тогда
			Объект.ОрганизацияПолучатель = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСклада()
	
	Если Склад = Объект.СкладОтправитель Тогда
		Возврат;
	КонецЕсли;
	
	Склад = Объект.СкладОтправитель;
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.СкладОтправитель));
	
	Если ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		
		РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СкладОтправитель, "ТипСклада, ИсточникФинансирования, УчетныйВидЦены");
		ТипСклада = РеквизитыСклада.ТипСклада;
		Если ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
			Объект.ИсточникФинансирования = РеквизитыСклада.ИсточникФинансирования;
			ИсточникФинансированияСклада = РеквизитыСклада.ИсточникФинансирования;
		Иначе
			ИсточникФинансированияСклада = Неопределено;
		КонецЕсли;
		
		Если ТипСкладаПолучателя = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
			Если Объект.ИсточникФинансирования <> ИсточникФинансированияСкладаПолучателя Тогда
				Объект.СкладПолучатель = Неопределено;
				ОбработатьИзменениеСкладаПолучателя();
			КонецЕсли;
		КонецЕсли;
		
		Объект.ВидЦены = Справочники.ВидыЦен.ВидЦеныПоУмолчанию(РеквизитыСклада.УчетныйВидЦены);
		
	Иначе
		ТипСклада = Неопределено;
		ИсточникФинансированияСклада = Неопределено;
	КонецЕсли;
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(Объект, ПараметрыУчетаНоменклатуры);
	
	УстановитьДоступностьЭлементовПоТипуСклада();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСкладаПолучателя()
	
	Если СкладПолучатель = Объект.СкладПолучатель Тогда
		Возврат;
	КонецЕсли;
	
	СкладПолучатель = Объект.СкладПолучатель;
	
	Если ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
		
		РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СкладПолучатель, "ТипСклада, ИсточникФинансирования");
		ТипСкладаПолучателя = РеквизитыСклада.ТипСклада;
		Если ТипСкладаПолучателя = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
		
			ИсточникФинансированияСкладаПолучателя = РеквизитыСклада.ИсточникФинансирования;
			Если ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин
			   И Объект.ИсточникФинансирования <> ИсточникФинансированияСкладаПолучателя Тогда
				Объект.СкладПолучатель = Неопределено;
				ОбработатьИзменениеСкладаПолучателя();
			Иначе
				Объект.ИсточникФинансирования = РеквизитыСклада.ИсточникФинансирования;
			КонецЕсли;
			
		Иначе
			ИсточникФинансированияСкладаПолучателя = Неопределено;
		КонецЕсли;
		
	Иначе
		ТипСкладаПолучателя = Неопределено;
		ИсточникФинансированияСкладаПолучателя = Неопределено;
	КонецЕсли;
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(Объект, ПараметрыУчетаНоменклатуры);
	
	УстановитьДоступностьЭлементовПоТипуСклада();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОрганизации()
	
	Если ЗначениеЗаполнено(Объект.Организация)
	   И ЗначениеЗаполнено(Объект.ОрганизацияПолучатель)
	   И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами
	   И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизационнойСтруктуре(Объект.Организация, Объект.ОрганизацияПолучатель) Тогда
		Объект.ОрганизацияПолучатель = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриИзмененииКлючевыхРеквизитовСостояниеЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗагрузкуДанныхИзТСД(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеВеса(РезультатВыполнения, ТекущаяСтрока) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекущаяСтрока.КоличествоВЕдиницахИзмерения = РезультатВыполнения.Вес;
		ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоВЕдиницахЗаказа());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРазбиенияСтроки(НоваяСтрока, ТекущаяСтрока) Экспорт
	
	ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	ПриИзмененииКоличестваВСтрокеСпискаТовары(НоваяСтрока);
	
	Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	
КонецПроцедуры

#КонецОбласти // ОбработкаИзмененияРеквизитов

////////////////////////////////////////////////////////////////////////////////
// Буфер обмена товарами
#Область БуферОбменаТоварами

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ТаблицаТовары = Элементы.Товары;
	Если ОбработкаТабличнойЧастиКлиент.ВозможноКопированиеСтрок(ТаблицаТовары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиВБуферОбмена(ТаблицаТовары.Имя);
		ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(ТаблицаТовары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ВставитьТоварыИзБуфераОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБуфераОбмена(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ОткрытьБуферОбмена(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиВБуферОбмена(Знач ИмяТабличнойЧасти)
	
	ОбработкаТабличнойЧастиСервер.СкопироватьВыделенныеСтрокиВБуферОбмена(Объект, Объект[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары = Неопределено)
	
	ТаблицаТовары = Объект.Товары;
	КоличествоТоваровДоВставки = ТаблицаТовары.Количество();
	
	ВставитьТоварыИзБуфераОбменаСервер(ВыбранныеТовары);
	
	КоличествоВставленных = ТаблицаТовары.Количество() - КоличествоТоваровДоВставки;
	ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьТоварыИзБуфераОбменаСервер(Знач ВыбранныеТовары = Неопределено)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ДанныеВставлены = ОбработкаТабличнойЧастиСервер.ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары, Объект.Товары, СтруктураДействий);
	Если ДанныеВставлены Тогда
		Модифицированность = Истина;
		
		РассчитатьСостояниеЗаказа();
		ОбновитьЗависимыеРеквизитыФормыПоЗаказу(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ЕстьДанныеВБуфереОбмена)
	
	Элементы = Форма.Элементы;
	Элементы.ТоварыБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыКонтекстноеМенюБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыБуферОбмена.Доступность = ЕстьДанныеВБуфереОбмена;
	
КонецПроцедуры

#КонецОбласти // БуферОбменаТоварами

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти // СтандартныеПодсистемы
