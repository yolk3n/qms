
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПВызовСервера.ПриПолученииФормыДокумента(
		ПустаяСсылка(), ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбмене

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДанныеКвитанции) Экспорт
	
	ОперацияКвитанции = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКвитанции, "ОперацияКвитанции");
	Если ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.Получение_ПеремещениеЛП Тогда
		ДанныеКвитанции.Вставить("ЗавершитьПриОтказе", Истина);
	КонецЕсли;
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДанныеКвитанции);
	
КонецФункции

Процедура ОбновитьСостояниеПодтверждения(ДокументОбъект, Операция, Сообщение, СтатусОбработки, ОтклоненныеНомера = Неопределено) Экспорт
	
	ПараметрыОбновления = ИнтеграцияМДЛП.СостояниеПодтверждения(Операция, Сообщение, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.СостояниеПодтверждения = ПараметрыОбновления.Состояние;
	Если ДокументОбъект.Операция = Перечисления.ОперацииПеремещенияМДЛП.ПриходныйОрдер
	   И ДокументОбъект.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ Тогда
		ДокументОбъект.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче;
	КонецЕсли;
	
	Если ДокументОбъект.СостояниеПодтверждения <> Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ
	   И ЗначениеЗаполнено(ОтклоненныеНомера) Тогда
		
		Для Каждого Номер Из ОтклоненныеНомера Цикл
			НомерУпаковки = Номер.Ключ;
			Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
			Если Строка = Неопределено Тогда
				Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
			КонецЕсли;
			Строка.Отклонено = Истина;
			Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(Номер.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Определить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОРозничнойПродажеМДЛП - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Основание");
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПеремещенииГЛО(Основание);
	КонецЕсли;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящее = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	
	Операция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Операция");
	Если Операция = Перечисления.ОперацииПеремещенияМДЛП.ПриходныйОрдер Тогда
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.Получение_ПеремещениеЛП_ГЛО);
	Иначе
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПеремещениеЛП_ГЛО);
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус информирования по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияМДЛП - Статус по-умолчанию.
//
Функция СтатусИнформированияПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыИнформированияМДЛП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные;
	
КонецФункции

// Возвращает запрос для получения статуса оформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ основание.
// 
// Возвращаемое значение:
//  Запрос - Запрос для получения статуса оформления.
//
Функция ЗапросСтатусаОформления(ДокументОснование) Экспорт
	
	Запрос = ИнтеграцияМДЛППереопределяемый.ЗапросСтатусаОформленияУведомленияОПеремещенииГЛО(ДокументОснование);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПанельМаркировкиМДЛП

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПодтвердитеПолучение);
	Если Все Или Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеОбмен);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации);
	
	Возврат Действия;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
	Если Все Или ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	КонецЕсли;
	
	Возврат Действия;
	
КонецФункции

Процедура ПриЗаполненииДокументовПанелиМаркировкиМДЛП(ТаблицаДокументы) Экспорт
	
	Описание = ИнтеграцияМДЛП.ДобавитьДокументНаПанельМаркировки(
		ТаблицаДокументы,
		ПустаяСсылка().Метаданные(),
		НСтр("ru = 'Перемещение между местами деятельности в рамках ГЛО'"),
		ИнтеграцияМДЛПКлиентСервер.ПанельМаркировкаРазделСклад());
	
	Описание.Оформите    = Истина;
	Описание.Отработайте = Истина;
	Описание.Ожидайте    = Истина;
	
	Описание.Порядок = 50;
	
КонецПроцедуры

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОформите() Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.УведомлениеОПеремещенииГЛОТекстЗапросаОформите();
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОтработайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОтработайте(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОжидайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОжидайте(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического списка формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСписока() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаФормДокументов(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического Списка к оформлению формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	ТекстЗапроса = ИнтеграцияМДЛППереопределяемый.УведомлениеОПеремещенииГЛОТекстЗапросаДинамическогоСпискаКОформлению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщениеМДЛП

Функция СообщениеКПередаче(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат УведомлениеОПеремещенииМаркированныхТоваров(ДокументСсылка);
	
КонецФункции

Функция ОпределитьДокументыДляЗагрузки(ДанныеДокумента, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПеремещениеЛП_ГЛО Тогда
		Возврат ОпределитьУведомлениеОПеремещении(ДанныеДокумента);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьВходящееСообщение(ДанныеДокумента, Операция, ДокументСсылка) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПеремещениеЛП_ГЛО Тогда
		ЗагрузитьУведомлениеОПеремещении(ДанныеДокумента, ДокументСсылка);
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестная операция %1'"), Операция);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает данные для заполнения представления документа.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * КомандаСоздать - Строка - Представление документа, если документ требуется создать.
//  * ИмяКомандыСоздать - Строка - Имя команды "Создать".
//  * ИмяКомандыОткрыть - Строка - Имя команды "Открыть".
//  * ДокументОтсутствуетНетПравНаСоздание - Строка - Представление документа, если документ не создан.
//  * Представление - Строка - Представление документа.
//  * НесколькоДокументовПредставление - Строка - Представление документа, если их несколько.
//
Функция ПредставлениеДокумента() Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияМДЛП.ПустоеПредставлениеДокумента();
	ВозвращаемоеЗначение.КомандаСоздать                       = НСтр("ru = 'Создать уведомление о перемещении ГЛО (МДЛП)'");
	ВозвращаемоеЗначение.ИмяКомандыСоздать                    = "СоздатьУведомлениеОПеремещенииГЛОМДЛП";
	ВозвращаемоеЗначение.ИмяКомандыОткрыть                    = "ОткрытьУведомлениеОПеремещенииГЛОМДЛП";
	ВозвращаемоеЗначение.ДокументОтсутствуетНетПравНаСоздание = НСтр("ru = 'Уведомление о перемещении ГЛО (МДЛП) не создано'");
	ВозвращаемоеЗначение.Представление                        = НСтр("ru = 'Уведомление о перемещении ГЛО (МДЛП): %1'");
	ВозвращаемоеЗначение.НесколькоДокументовПредставление     = НСтр("ru = 'Уведомление о перемещении ГЛО (МДЛП) (%1)'");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПоддерживаетЗагрузкуУведомлений() Экспорт
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УведомлениеОПеремещенииМаркированныхТоваров(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПеремещениеЛП_ГЛО;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена               КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                                     КАК Ссылка,
	|	Шапка.Дата                                       КАК Дата,
	|	Шапка.Основание                                  КАК Основание,
	|	Шапка.МестоДеятельности.Идентификатор            КАК ИдентификаторОрганизации,
	|	Шапка.МестоДеятельностиПолучатель.Идентификатор  КАК ИдентификаторПолучателя,
	|	Шапка.НомерДокумента                             КАК НомерДокумента,
	|	Шапка.ДатаДокумента                              КАК ДатаДокумента,
	|	Шапка.НомерКонтракта                             КАК НомерКонтракта,
	|	Шапка.ИсточникФинансирования                     КАК ИсточникФинансирования,
	|	Шапка.НомерГосударственногоКонтракта             КАК НомерГосударственногоКонтракта,
	|	Шапка.ДатаГосударственногоКонтракта              КАК ДатаГосударственногоКонтракта
	|	
	|ИЗ
	|	Документ.УведомлениеОПеремещенииГЛОМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Шапка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN                               КАК GTIN,
	|	НомераУпаковок.НомерКиЗ                   КАК НомерКиЗ,
	|	ВЫБОР
	|		КОГДА Товары.КоличествоУпаковок = Товары.Количество
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК Число(15,2))
	|	КОНЕЦ                    КАК Цена,
	|	ВЫРАЗИТЬ(Товары.СуммаНДС / Товары.Количество КАК Число(15, 2)) КАК СуммаНДС
	|ИЗ
	|	Документ.УведомлениеОПеремещенииГЛОМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПеремещенииГЛОМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки                        КАК НомерКиЗ,
	|	НомераУпаковок.Цена                                 КАК ЦенаОстальныхПозиций,
	|	НомераУпаковок.СуммаНДС                             КАК СуммаНДСОстальныхПозиций,
	|	ВЫБОР
	|		КОГДА Состав.GTIN ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                               КАК УказанСостав,
	|	Состав.GTIN                                         КАК GTIN,
	|	Состав.НомерСерии                                   КАК НомерСерии,
	|	ЕСТЬNULL(Состав.Цена    , НомераУпаковок.Цена)      КАК Цена,
	|	ЕСТЬNULL(Состав.СуммаНДС, НомераУпаковок.СуммаНДС)  КАК СуммаНДС
	|ИЗ
	|	Документ.УведомлениеОПеремещенииГЛОМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПеремещенииГЛОМДЛП.СоставТранспортныхУпаковок КАК Состав
	|	ПО
	|		Состав.Ссылка = НомераУпаковок.Ссылка
	|		И Состав.ИдентификаторСтроки = НомераУпаковок.ИдентификаторСтроки
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ЦенаОстальныхПозиций),
	|	МАКСИМУМ(СуммаНДСОстальныхПозиций),
	|	МАКСИМУМ(Цена),
	|	МАКСИМУМ(СуммаНДС),
	|	МАКСИМУМ(УказанСостав)
	|ПО
	|	НомерКиЗ
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Результат[2].Пустой()) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "move_state_dispatch";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "receiver_id", Шапка.ИдентификаторПолучателя , СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_num", Шапка.НомерДокумента, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_date", Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "source", ИнтеграцияМДЛП.КодЗначенияПеречисления(Шапка.ИсточникФинансирования), СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_num", СокрЛП(Шапка.НомерКонтракта), СообщениеКПередаче);
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_gos_num", СокрЛП(Шапка.НомерГосударственногоКонтракта), СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_gos_date", Формат(Шапка.ДатаГосударственногоКонтракта, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
	
	Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
	Для Каждого Строка Из Товары Цикл
		НоваяСтрока = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.order_details, "union");
		
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sgtin"    , Строка.НомерКИЗ, СообщениеКПередаче);
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Строка.Цена    , СообщениеКПередаче);
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Строка.СуммаНДС, СообщениеКПередаче);
		
		Уведомление.order_details.union.Добавить(НоваяСтрока);
	КонецЦикла;
	Пока Упаковки.Следующий() Цикл
		НоваяСтрока = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.order_details, "union");
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "sscc_detail") Тогда
			НоваяСтрока.sscc_detail = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(НоваяСтрока, "sscc_detail");
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока.sscc_detail, "sscc", Упаковки.НомерКИЗ, СообщениеКПередаче);
			Если Упаковки.УказанСостав Тогда
				СоставУпаковки = Упаковки.Выбрать();
				Пока СоставУпаковки.Следующий() Цикл
					СтрокаСостава = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(НоваяСтрока.sscc_detail, "detail");
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "gtin"         , СоставУпаковки.GTIN, СообщениеКПередаче);
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "series_number", СоставУпаковки.НомерСерии, СообщениеКПередаче);
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "cost"         , СоставУпаковки.Цена, СообщениеКПередаче);
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "vat_value"    , СоставУпаковки.СуммаНДС, СообщениеКПередаче);
					НоваяСтрока.sscc_detail.detail.Добавить(СтрокаСостава);
				КонецЦикла;
				Если Упаковки.ЦенаОстальныхПозиций <> 0 Тогда
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Упаковки.ЦенаОстальныхПозиций, СообщениеКПередаче);
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Упаковки.СуммаНДСОстальныхПозиций, СообщениеКПередаче);
				Иначе
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , 0.01, СообщениеКПередаче);
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", 0, СообщениеКПередаче);
				КонецЕсли;
			Иначе
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Упаковки.Цена, СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Упаковки.СуммаНДС, СообщениеКПередаче);
			КонецЕсли;
		Иначе
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sscc"     , Упаковки.НомерКИЗ, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Упаковки.Цена, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Упаковки.СуммаНДС, СообщениеКПередаче);
		КонецЕсли;
		
		Уведомление.order_details.union.Добавить(НоваяСтрока);
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция ОпределитьУведомлениеОПеремещении(ДанныеДокумента)
	
	Если ИнтеграцияМДЛП.СообщениеПринято(ДанныеДокумента.Квитанция) Тогда
		
		ИдентификаторПолучателя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "receiver_id");
		
		Организация = Неопределено;
		МестоДеятельности = Неопределено;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторПолучателя, Организация, МестоДеятельности);
		
		Если ЗначениеЗаполнено(МестоДеятельности) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МестоДеятельности, "ВестиУчетВЭтойИБ") Тогда
			Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПолучитьСсылку());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Неопределено);
	
КонецФункции

Процедура ЗагрузитьУведомлениеОПеремещении(ДанныеДокумента, ДокументСсылка)
	
	Если ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОтправителя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	ИдентификаторПолучателя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "receiver_id");
	НомерДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_num");
	ДатаДокумента = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_date"));
	
	НомерКонтракта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "contract_num");
	ИсточникФинансирования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "source");
	Если ИсточникФинансирования <> Неопределено Тогда
		ИсточникФинансирования = Перечисления.ИсточникиФинансированияМДЛП.Получить(ИсточникФинансирования - 1);
	КонецЕсли;
	НомерГосударственногоКонтракта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "contract_gos_num");
	ДатаГосударственногоКонтракта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "contract_gos_date");
	Если ЗначениеЗаполнено(ДатаГосударственногоКонтракта) Тогда
		ДатаГосударственногоКонтракта = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаГосударственногоКонтракта);
	КонецЕсли;
	
	Документ = СоздатьДокумент();
	Документ.УстановитьСсылкуНового(ДокументСсылка);
	Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
	ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОтправителя,, Документ.МестоДеятельности);
	ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторПолучателя, Документ.Организация, Документ.МестоДеятельностиПолучатель);
	Документ.НомерДокумента = НомерДокумента;
	Документ.ДатаДокумента = ДатаДокумента;
	Документ.НомерКонтракта = НомерКонтракта;
	Документ.ИсточникФинансирования = ИсточникФинансирования;
	Документ.Операция = Перечисления.ОперацииПеремещенияМДЛП.ПриходныйОрдер;
	Документ.НомерГосударственногоКонтракта = НомерГосударственногоКонтракта;
	Документ.ДатаГосударственногоКонтракта  = ДатаГосударственногоКонтракта;
	
	Для Каждого Товар Из ДанныеДокумента.order_details.union Цикл
		
		Если Товар.sgtin <> Неопределено Тогда
			
			GTIN = Лев(Товар.sgtin, 14);
			Цена = Товар.cost;
			НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN, Цена, НомерСерии", GTIN, Цена, ""));
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаТовара = Документ.Товары.Добавить();
				СтрокаТовара.GTIN = GTIN;
				СтрокаТовара.Цена = Цена;
				СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			Иначе
				СтрокаТовара = НайденныеСтроки[0];
			КонецЕсли;
			
			СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
			СтрокаТовара.СуммаНДС   = СтрокаТовара.СуммаНДС + ?(Товар.vat_value = Неопределено, 0, Товар.vat_value);
			СтрокаТовара.Сумма      = СтрокаТовара.Сумма + СтрокаТовара.Цена;
			
			СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
			СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
			СтрокаУпаковки.НомерКИЗ = Товар.sgtin;
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Товар, "sscc_detail") И Товар.sscc_detail <> Неопределено Тогда
			
			СтрокаУпаковки = Документ.ТранспортныеУпаковки.Добавить();
			СтрокаУпаковки.НомерУпаковки = Товар.sscc_detail.sscc;
			СтрокаУпаковки.Цена          = Товар.cost;
			СтрокаУпаковки.СуммаНДС      = Товар.vat_value;
			СтрокаУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			
			Для Каждого СоставУпаковки Из Товар.sscc_detail.detail Цикл
				СтрокаСостава = Документ.СоставТранспортныхУпаковок.Добавить();
				СтрокаСостава.ИдентификаторСтроки = СтрокаУпаковки.ИдентификаторСтроки;
				СтрокаСостава.GTIN       = СоставУпаковки.GTIN;
				СтрокаСостава.НомерСерии = СоставУпаковки.series_number;
				СтрокаСостава.Цена       = СоставУпаковки.cost;
				СтрокаСостава.СуммаНДС   = СоставУпаковки.vat_value;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОПеремещении(Документ);
	
	Если ИнтеграцияМДЛП.СообщениеПринято(ДанныеДокумента.Квитанция) Тогда
		Документ.Проведен = Истина;
		// Упаковки будут зарезервированы при проведении
		Документ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче;
	Иначе
		ВызватьИсключение НСтр("ru = 'Сообщение о перемещении было отклонено МДЛП и не требует загрузки'");
	КонецЕсли;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	
КонецПроцедуры

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерий(ПустаяСсылка().Метаданные(), Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//  ПараметрыУказанияСерий - Структура
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПустаяСсылка().Метаданные(), ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции Подключаемые.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДокументыДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОПеремещенииМДЛП КАК ДокументыДляОбработки
	|ГДЕ
	|	ДокументыДляОбработки.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииПеремещенияМДЛП.ПустаяСсылка)
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.УведомлениеОПеремещенииМДЛП";
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать объект: %Объект% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Выборка.Ссылка.Метаданные(),
									Выборка.Ссылка,
									ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Или ЗначениеЗаполнено(Объект.Операция) Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Объект.Операция = Перечисления.ОперацииПеремещенияМДЛП.Перемещение;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать: %Объект% по причине: %Причина%'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли