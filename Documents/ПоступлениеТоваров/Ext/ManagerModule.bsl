#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Имена реквизитов, от значений которых зависят параметры учета номенклатуры
//
// Возвращаемое значение:
//   Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУчетаНоменклатуры() Экспорт
	
	Возврат "Склад";
	
КонецФункции

// Возвращает параметры учета для номенклатуры, указанной в документе
//
// Параметры
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
// Возвращаемое значение
//   Структура - Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУчетаНоменклатуры
//
Функция ПараметрыУчетаНоменклатуры(Объект) Экспорт
	
	ПараметрыУчета = ЗапасыСервер.ПараметрыУчетаНоменклатуры();
	ПараметрыУчета.ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ПараметрыУчетаНаСкладе = СкладыСервер.ПараметрыУчетаНоменклатуры(Объект.Склад);
	ПараметрыУчета.ИспользоватьСерии = ПараметрыУчетаНаСкладе.ИспользоватьСерииНоменклатуры;
	ПараметрыУчета.ИспользоватьПартии = ПараметрыУчетаНаСкладе.ИспользоватьПартии;
	ПараметрыУчета.Склад = Объект.Склад;
	
	Возврат ПараметрыУчета;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания параметров учета номенклатуры
//
// Параметры
//   ПараметрыУчетаНоменклатуры - Структура - состав полей задается в функции ЗапасыСервер.ПараметрыУчетаНоменклатуры
//
// Возвращаемое значение
//   Строка - текст запроса
//
Функция ТекстЗапросаРасчетаСтатусовУчетаНоменклатуры(ПараметрыУчетаНоменклатуры) Экспорт
	
	Возврат ЗапасыСервер.ТекстЗапросаРасчетаСтатусовУчетаНоменклатуры(ПараметрыУчетаНоменклатуры);
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьИменаРеквизитовПоТипуОперации(ХозяйственнаяОперация, ВсеРеквизиты, РеквизитыОперации) Экспорт
	
	ВсеРеквизиты = Новый Массив;
	ВсеРеквизиты.Добавить("ПодотчетноеЛицо");
	ВсеРеквизиты.Добавить("ПринятьНДСКВычету");
	ВсеРеквизиты.Добавить("Контрагент");
	ВсеРеквизиты.Добавить("ДоговорКонтрагента");
	ВсеРеквизиты.Добавить("НалогообложениеНДС");
	ВсеРеквизиты.Добавить("ПредъявленСчетФактура");
	ВсеРеквизиты.Добавить("НомерВходящегоСчетаФактуры");
	ВсеРеквизиты.Добавить("ДатаВходящегоСчетаФактуры");
	
	РеквизитыОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		РеквизитыОперации.Добавить("ПодотчетноеЛицо");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Тогда
		РеквизитыОперации.Добавить("ПринятьНДСКВычету");
		РеквизитыОперации.Добавить("Контрагент");
		РеквизитыОперации.Добавить("ДоговорКонтрагента");
		РеквизитыОперации.Добавить("НалогообложениеНДС");
		РеквизитыОперации.Добавить("ПредъявленСчетФактура");
		РеквизитыОперации.Добавить("НомерВходящегоСчетаФактуры");
		РеквизитыОперации.Добавить("ДатаВходящегоСчетаФактуры");
	Иначе
		РеквизитыОперации.Добавить("Контрагент");
		РеквизитыОперации.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведение
#Область Проведение

// Инициализирует таблицы значений, содержащие данные для проведения документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицыДвиженийДляПроведения(ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	ОсновныеДанныеДокумента = ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства);
	
	ИнициализироватьКлючиАналитикиВидаУчета(ОсновныеДанныеДокумента);
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(ОсновныеДанныеДокумента);
	
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтТаблицаТовары());
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаТоварыНаСкладах(), Метаданные.РегистрыНакопления.ТоварыНаСкладах);
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаСвободныеОстатки(), Метаданные.РегистрыНакопления.СвободныеОстатки);
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтТаблицаТоварыСебестоимость());
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаЗакупки(), Метаданные.РегистрыНакопления.Закупки);
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаСебестоимостьТоваров(), Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаЗаказыПоставщикам(), Метаданные.РегистрыНакопления.ЗаказыПоставщикам);
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаДанныеПоступленийДляПроектаПоМониторингуЦен(), Метаданные.РегистрыНакопления.ДанныеПоступленийДляПроектаПоМониторингуЦен);
	
	Запрос = Новый Запрос(ПроведениеБольничнаяАптека.ПолучитьТекстЗапросаДвижений(ДополнительныеСвойства, Регистры));
	
	Для Каждого ДанныеДокумента Из ОсновныеДанныеДокумента Цикл
		Запрос.УстановитьПараметр(ДанныеДокумента.Ключ, ДанныеДокумента.Значение);
	КонецЦикла;
	
	ПроведениеБольничнаяАптека.ЗаполнитьТаблицыДвижений(ДополнительныеСвойства, Запрос.ВыполнитьПакет(), Регистры);
	
КонецПроцедуры

Функция ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства)
	
	ЗапрашиваемыеДанные = Новый Структура;
	ЗапрашиваемыеДанные.Вставить("Ссылка");
	ЗапрашиваемыеДанные.Вставить("Период", "Дата");
	ЗапрашиваемыеДанные.Вставить("Организация");
	ЗапрашиваемыеДанные.Вставить("Склад");
	ЗапрашиваемыеДанные.Вставить("ПодразделениеОрганизации");
	ЗапрашиваемыеДанные.Вставить("ИсточникФинансирования");
	ЗапрашиваемыеДанные.Вставить("Контрагент");
	ЗапрашиваемыеДанные.Вставить("ДоговорКонтрагента");
	ЗапрашиваемыеДанные.Вставить("Валюта");
	ЗапрашиваемыеДанные.Вставить("ПоступлениеПоЗаказу");
	ЗапрашиваемыеДанные.Вставить("ЗаказПоставщику");
	ЗапрашиваемыеДанные.Вставить("ХозяйственнаяОперация");
	ЗапрашиваемыеДанные.Вставить("ПринятьНДСКВычету");
	ЗапрашиваемыеДанные.Вставить("ПодотчетноеЛицо");
	
	ОсновныеДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроведениеБольничнаяАптека.ПолучитьСсылкуНаДокументДляПроведения(ДополнительныеСвойства),
		ЗапрашиваемыеДанные);
	
	ОсновныеДанныеДокумента.Вставить("ВестиУчетПоИсточникамФинансирования", ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования"));
	ОсновныеДанныеДокумента.Вставить("ПоступлениеПоСпецификации", Ложь);
	ОсновныеДанныеДокумента.Вставить("Спецификация", Документы.СпецификацияКДоговору.ПустаяСсылка());
	
	Если Не ОсновныеДанныеДокумента.ВестиУчетПоИсточникамФинансирования Тогда
		ОсновныеДанныеДокумента.ИсточникФинансирования = Справочники.ИсточникиФинансирования.ПустаяСсылка();
	КонецЕсли;
	
	Если ОсновныеДанныеДокумента.ПоступлениеПоЗаказу Тогда
		ТипЗаказа = ТипЗнч(ОсновныеДанныеДокумента.ЗаказПоставщику);
		Если ТипЗаказа = Тип("ДокументСсылка.СпецификацияКДоговору") Тогда
			ОсновныеДанныеДокумента.Вставить("Спецификация", ОсновныеДанныеДокумента.ЗаказПоставщику);
			ОсновныеДанныеДокумента.Вставить("ЗаказПоставщику", Документы.ЗаказПоставщику.ПустаяСсылка());
			ОсновныеДанныеДокумента.Вставить("ПоступлениеПоСпецификации", Истина);
		Иначе
			ОсновныеДанныеДокумента.Вставить("Спецификация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновныеДанныеДокумента.ЗаказПоставщику, "СпецификацияКДоговору"));
		КонецЕсли;
	КонецЕсли;
	
	СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ОсновныеДанныеДокумента.Валюта, ОсновныеДанныеДокумента.Период);
	КоэффициентПересчетаВВалютуРегл = СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
	ОсновныеДанныеДокумента.Вставить("КоэффициентПересчетаВВалютуРегл", КоэффициентПересчетаВВалютуРегл);
	
	ЗапасыСервер.ПриПодготовкеОсновныхДанныхДляПроведения(ДополнительныеСвойства, ОсновныеДанныеДокумента);
	
	Возврат ОсновныеДанныеДокумента;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаТовары()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                        КАК НомерСтроки,
	|	&Организация                                     КАК Организация,
	|	&Склад                                           КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.МестаХранения.ПустаяСсылка)  КАК МестоХранения,
	|	ТаблицаТовары.КодСтроки                          КАК КодСтроки,
	|	ТаблицаТовары.НоменклатураЗаказа                 КАК НоменклатураЗаказа,
	|	ТаблицаТовары.Номенклатура                       КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (&СтатусУчетПоСериям, &СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                            КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартий В (&СтатусУчетПоПартиям, &СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                            КАК Партия,
	|	&ИсточникФинансирования                          КАК ИсточникФинансирования,
	|	ТаблицаТовары.Количество                         КАК Количество,
	|	ТаблицаТовары.ЕдиницаИзмерения                   КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.ЦенаПроизводителя                  КАК ЦенаПроизводителя,
	|	ТаблицаТовары.Сумма                              КАК Сумма,
	|	ТаблицаТовары.СтавкаНДС                          КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС                           КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаСНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаСНДСРегл,
	|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаНДСРегл,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (&СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                            КАК СерияНоменклатурыДляСебестоимости,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартий В (&СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                            КАК ПартияДляСебестоимости
	|ПОМЕСТИТЬ ВтТаблицаТовары
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыНаСкладах()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Организация               КАК Организация,
	|	ТаблицаТовары.Склад                     КАК Склад,
	|	ТаблицаТовары.МестоХранения             КАК МестоХранения,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры         КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия                    КАК Партия,
	|	ТаблицаТовары.ИсточникФинансирования    КАК ИсточникФинансирования,
	|	ТаблицаТовары.Количество                КАК Количество
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСвободныеОстатки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Организация               КАК Организация,
	|	ТаблицаТовары.Склад                     КАК Склад,
	|	ТаблицаТовары.МестоХранения             КАК МестоХранения,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры         КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия                    КАК Партия,
	|	ТаблицаТовары.ИсточникФинансирования    КАК ИсточникФинансирования,
	|	ТаблицаТовары.Количество                КАК ВНаличии
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаТоварыСебестоимость()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                                 КАК НомерСтроки,
	|	ТаблицаТовары.Организация                                 КАК Организация,
	|	ТаблицаТовары.Склад                                       КАК Склад,
	|	ТаблицаТовары.Номенклатура                                КАК Номенклатура,
	|	ТаблицаТовары.НоменклатураЗаказа                          КАК НоменклатураЗаказа,
	|	ТаблицаТовары.СерияНоменклатурыДляСебестоимости           КАК СерияНоменклатуры,
	|	ТаблицаТовары.ПартияДляСебестоимости                      КАК Партия,
	|	ТаблицаТовары.ИсточникФинансирования                      КАК ИсточникФинансирования,
	|	ТаблицаТовары.СтавкаНДС                                   КАК СтавкаНДС,
	|	ТаблицаТовары.Количество                                  КАК Количество,
	|	ТаблицаТовары.ЦенаПроизводителя                           КАК ЦенаПроизводителя,
	|	ТаблицаТовары.СуммаСНДСРегл                               КАК Стоимость,
	|	ТаблицаТовары.СуммаСНДСРегл - ТаблицаТовары.СуммаНДСРегл  КАК СтоимостьБезНДС,
	|	ТаблицаТовары.СуммаНДСРегл                                КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ПринятьНДСКВычету
	|			ТОГДА ТаблицаТовары.СуммаСНДСРегл - ТаблицаТовары.СуммаНДСРегл
	|		ИНАЧЕ ТаблицаТовары.СуммаСНДСРегл
	|	КОНЕЦ                                                     КАК СтоимостьРегл
	|ПОМЕСТИТЬ ВтТаблицаТоварыСебестоимость
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗакупки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                 КАК НомерСтроки,
	|	&Период                                   КАК Период,
	|	&ХозяйственнаяОперация                    КАК ХозяйственнаяОперация,
	|	ТаблицаТовары.Организация                 КАК Организация,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|			ТОГДА &ПодотчетноеЛицо
	|		ИНАЧЕ &Контрагент
	|	КОНЕЦ                                     КАК Контрагент,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ &ДоговорКонтрагента
	|	КОНЕЦ                                     КАК ДоговорКонтрагента,
	|	АналитикаУчетаНоменклатуры.КлючАналитики  КАК АналитикаУчетаНоменклатуры,
	|	&Ссылка                                   КАК ДокументЗакупки,
	|	ТаблицаТовары.ИсточникФинансирования      КАК ИсточникФинансирования,
	|	&ПодразделениеОрганизации                 КАК ПодразделениеОрганизации,
	|	ТаблицаТовары.СтавкаНДС                   КАК СтавкаНДС,
	|	ТаблицаТовары.Склад                       КАК Склад,
	|	&ЗаказПоставщику                          КАК ЗаказПоставщику,
	|	&Спецификация                             КАК Спецификация,
	|	&Ссылка                                   КАК ДокументДвижения,
	|	ТаблицаТовары.НоменклатураЗаказа          КАК НоменклатураЗаказа,
	|	ТаблицаТовары.Количество                  КАК Количество,
	|	ТаблицаТовары.Стоимость                   КАК Сумма,
	|	ТаблицаТовары.СтоимостьБезНДС             КАК СуммаБезНДС,
	|	ТаблицаТовары.СуммаНДС                    КАК СуммаНДС,
	|	ТаблицаТовары.Стоимость                   КАК Стоимость,
	|	ТаблицаТовары.СтоимостьБезНДС             КАК СтоимостьБезНДС,
	|	ТаблицаТовары.СтоимостьРегл               КАК СтоимостьРегл
	|ИЗ
	|	ВтТаблицаТоварыСебестоимость КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|		ПО
	|			ТаблицаТовары.Номенклатура = АналитикаУчетаНоменклатуры.Номенклатура
	|			И ТаблицаТовары.СерияНоменклатуры = АналитикаУчетаНоменклатуры.СерияНоменклатуры
	|			И ТаблицаТовары.Партия = АналитикаУчетаНоменклатуры.Партия
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСебестоимостьТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                   КАК НомерСтроки,
	|	&Период                                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	АналитикаУчетаНоменклатуры.КлючАналитики    КАК АналитикаУчетаНоменклатуры,
	|	АналитикаВидаУчета.КлючАналитики            КАК АналитикаВидаУчета,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)  КАК РазделУчета,
	|	ТаблицаТовары.Количество                    КАК Количество,
	|	ТаблицаТовары.Стоимость                     КАК Стоимость,
	|	ТаблицаТовары.СтоимостьБезНДС               КАК СтоимостьБезНДС,
	|	ТаблицаТовары.СтоимостьРегл                 КАК СтоимостьРегл,
	|	&ХозяйственнаяОперация                      КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                КАК КорАналитикаВидаУчета,
	|	НЕОПРЕДЕЛЕНО                                КАК КорРазделУчета,
	|	0                                           КАК КорКоличество
	|ИЗ
	|	ВтТаблицаТоварыСебестоимость КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|		ПО
	|			ТаблицаТовары.Номенклатура = АналитикаУчетаНоменклатуры.Номенклатура
	|			И ТаблицаТовары.СерияНоменклатуры = АналитикаУчетаНоменклатуры.СерияНоменклатуры
	|			И ТаблицаТовары.Партия = АналитикаУчетаНоменклатуры.Партия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчета
	|		ПО
	|			ТаблицаТовары.Организация = АналитикаВидаУчета.Организация
	|			И ТаблицаТовары.Склад = АналитикаВидаУчета.Склад
	|			И ТаблицаТовары.ИсточникФинансирования = АналитикаВидаУчета.ИсточникФинансирования
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаказыПоставщикам()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1                                        КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)   КАК ВидДвижения,
	|	&Период                                  КАК Период,
	|	&ЗаказПоставщику                         КАК ЗаказПоставщику,
	|	&Спецификация                            КАК Спецификация,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.НоменклатураЗаказа = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Номенклатура
	|		ИНАЧЕ ТаблицаТовары.НоменклатураЗаказа
	|	КОНЕЦ                                    КАК Номенклатура,
	|	ТаблицаТовары.КодСтроки                  КАК КодСтроки,
	|	ТоварыЗаказа.КодСтрокиСпецификации       КАК КодСтрокиСпецификации,
	|	0                                        КАК ПоСпецификации,
	|	ТаблицаТовары.Количество                 КАК Заказано,
	|	ТаблицаТовары.Количество                 КАК КОформлению
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказПоставщику.Товары КАК ТоварыЗаказа
	|		ПО
	|			ТоварыЗаказа.Ссылка = &ЗаказПоставщику
	|			И ТоварыЗаказа.КодСтроки = ТаблицаТовары.КодСтроки
	|			И ВЫБОР
	|				КОГДА ТаблицаТовары.НоменклатураЗаказа = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					ТОГДА ТоварыЗаказа.Номенклатура = ТаблицаТовары.Номенклатура
	|				ИНАЧЕ ТоварыЗаказа.Номенклатура = ТаблицаТовары.НоменклатураЗаказа
	|			КОНЕЦ
	|ГДЕ
	|	&ПоступлениеПоЗаказу
	|	И НЕ &ПоступлениеПоСпецификации
	|	И ТаблицаТовары.КодСтроки <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                        КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	&Период                                  КАК Период,
	|	&ЗаказПоставщику                         КАК ЗаказПоставщику,
	|	&Спецификация                            КАК Спецификация,
	|	ТаблицаТовары.Номенклатура               КАК Номенклатура,
	|	0                                        КАК КодСтроки,
	|	0                                        КАК КодСтрокиСпецификации,
	|	0                                        КАК ПоСпецификации,
	|	0                                        КАК Заказано,
	|	ТаблицаТовары.Количество                 КАК КОформлению
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ПоступлениеПоЗаказу
	|	И НЕ &ПоступлениеПоСпецификации
	|	И ТаблицаТовары.КодСтроки = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3                                        КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)   КАК ВидДвижения,
	|	&Период                                  КАК Период,
	|	&ЗаказПоставщику                         КАК ЗаказПоставщику,
	|	&Спецификация                            КАК Спецификация,
	|	ТаблицаТовары.Номенклатура               КАК Номенклатура,
	|	0                                        КАК КодСтроки,
	|	0                                        КАК КодСтрокиСпецификации,
	|	0                                        КАК ПоСпецификации,
	|	0                                        КАК Заказано,
	|	ТаблицаТовары.Количество                 КАК КОформлению
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ПоступлениеПоЗаказу
	|	И НЕ &ПоступлениеПоСпецификации
	|	И ТаблицаТовары.КодСтроки = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4                                        КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	&Период                                  КАК Период,
	|	НЕОПРЕДЕЛЕНО                             КАК ЗаказПоставщику,
	|	&Спецификация                            КАК Спецификация,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.НоменклатураЗаказа = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Номенклатура
	|		ИНАЧЕ ТаблицаТовары.НоменклатураЗаказа
	|	КОНЕЦ                                    КАК Номенклатура,
	|	0                                        КАК КодСтроки,
	|	ТаблицаТовары.КодСтроки                  КАК КодСтрокиСпецификации,
	|	0                                        КАК ПоСпецификации,
	|	0                                        КАК Заказано,
	|	ТаблицаТовары.Количество                 КАК КОформлению
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ПоступлениеПоСпецификации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5                                        КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)   КАК ВидДвижения,
	|	&Период                                  КАК Период,
	|	НЕОПРЕДЕЛЕНО                             КАК ЗаказПоставщику,
	|	&Спецификация                            КАК Спецификация,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.НоменклатураЗаказа = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Номенклатура
	|		ИНАЧЕ ТаблицаТовары.НоменклатураЗаказа
	|	КОНЕЦ                                    КАК Номенклатура,
	|	0                                        КАК КодСтроки,
	|	ТаблицаТовары.КодСтроки                  КАК КодСтрокиСпецификации,
	|	ТаблицаТовары.Количество                 КАК ПоСпецификации,
	|	0                                        КАК Заказано,
	|	ТаблицаТовары.Количество                 КАК КОформлению
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ПоступлениеПоСпецификации
	|	И ТаблицаТовары.КодСтроки <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6                                        КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)   КАК ВидДвижения,
	|	&Период                                  КАК Период,
	|	НЕОПРЕДЕЛЕНО                             КАК ЗаказПоставщику,
	|	&Спецификация                            КАК Спецификация,
	|	ТаблицаТовары.Номенклатура               КАК Номенклатура,
	|	0                                        КАК КодСтроки,
	|	0                                        КАК КодСтрокиСпецификации,
	|	0                                        КАК ПоСпецификации,
	|	0                                        КАК Заказано,
	|	ТаблицаТовары.Количество                 КАК КОформлению
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ПоступлениеПоСпецификации
	|	И ТаблицаТовары.КодСтроки = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныеПоступленийДляПроектаПоМониторингуЦен()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки             КАК НомерСтроки,
	|	&Период                               КАК Период,
	|	ТаблицаТовары.Организация             КАК Организация,
	|	&ПодразделениеОрганизации             КАК ПодразделениеОрганизации,
	|	&Контрагент                           КАК Поставщик,
	|	&Ссылка                               КАК ДокументПоступления,
	|	ТаблицаТовары.Номенклатура            КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры       КАК СерияНоменклатуры,
	|	ТаблицаТовары.ИсточникФинансирования  КАК ИсточникФинансирования,
	|	ТаблицаТовары.Количество              КАК Количество,
	|	ТаблицаТовары.СуммаСНДСРегл           КАК Стоимость,
	|	ТаблицаТовары.СуммаНДСРегл            КАК НДС,
	|	ТаблицаТовары.ЕдиницаИзмерения        КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.ЦенаПроизводителя       КАК ЦенаПроизводителя
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Реквизиты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (&СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартий В (&СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия
	|ПОМЕСТИТЬ втТаблицаАналитики
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СерияНоменклатуры,
	|	Партия
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("СтатусУчетСебестоимостиПоСериям", Реквизиты.СтатусУчетСебестоимостиПоСериям);
	Запрос.УстановитьПараметр("СтатусУчетСебестоимостиПоПартиям", Реквизиты.СтатусУчетСебестоимостиПоПартиям);
	Запрос.Выполнить();
	
	Справочники.КлючиАналитикиУчетаНоменклатуры.ИнициализироватьКлючиАналитики(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиВидаУчета(Реквизиты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&Склад КАК Склад,
	|	&ИсточникФинансирования КАК ИсточникФинансирования
	|ПОМЕСТИТЬ втТаблицаАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Склад,
	|	ИсточникФинансирования
	|";
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Склад", Реквизиты.Склад);
	Запрос.УстановитьПараметр("ИсточникФинансирования", Реквизиты.ИсточникФинансирования);
	Запрос.Выполнить();
	
	Справочники.КлючиАналитикиВидаУчета.ИнициализироватьКлючиАналитики(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

#КонецОбласти // Проведение

////////////////////////////////////////////////////////////////////////////////
// Печать
#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандыПечати(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыПечати);
	
КонецПроцедуры

// Возвращает список доступных печатных форм документа
//
Функция ДоступныеПечатныеФормы() Экспорт
	
	ПечатныеФормы = УправлениеПечатьюБольничнаяАптека.СоздатьКоллекциюДоступныхПечатныхФорм();
	
	Обработки.ПечатьПриходныйОрдер0504207.ДобавитьПечатнуюФорму(ПечатныеФормы);
	Обработки.ПечатьМ4.ДобавитьПечатнуюФорму(ПечатныеФормы);
	Обработки.ПечатьТОРГ12.ДобавитьПечатнуюФорму(ПечатныеФормы);
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	МенеджерПечати      = МетаданныеДокумента.ПолноеИмя();
	МетаданныеМакетов   = МетаданныеДокумента.Макеты;
	
	ПечатнаяФорма = УправлениеПечатьюБольничнаяАптека.ДобавитьПечатнуюФорму(ПечатныеФормы, "ВедомостьНаОприходование", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_Накладная.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_Накладная);
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюБольничнаяАптека.ДобавитьПечатнуюФорму(ПечатныеФормы, "ВедомостьНаОприходованиеАптека", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_Накладная.Представление() + " " + НСтр("ru='(Аптека)'");
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_НакладнаяАптека);
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюБольничнаяАптека.ДобавитьПечатнуюФорму(ПечатныеФормы, "ТОРГ4", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_ТОРГ4.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_ТОРГ4);
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюБольничнаяАптека.ДобавитьПечатнуюФорму(ПечатныеФормы, "АП3", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_АП3.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_АП3);
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = Обработки.ПечатьАктОПриемеПередаче0510448.ДобавитьПечатнуюФорму(ПечатныеФормы);
	ПечатнаяФорма.ДополнительныеПараметры.ВыводитьРаздел4 = Истина;
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюБольничнаяАптека.ДобавитьПечатнуюФорму(ПечатныеФормы, "АП73", МенеджерПечати);
	ПечатнаяФорма.Представление = НСтр("ru='Форма №АП-73 (Стеллажная карточка)'");
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_АП73);
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюБольничнаяАптека.ДобавитьПечатнуюФорму(ПечатныеФормы, "ПротоколСогласованияЦен", МенеджерПечати);
	ПечатнаяФорма.Представление = НСтр("ru='Протокол согласования цен'");
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_ПротоколСогласованияЦен);
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Обработки.ПечатьЭтикетокИЦенников.ДоступныеПечатныеФормы() , ПечатныеФормы);
	
	Возврат ПечатныеФормы;
	
КонецФункции


Функция ПолучитьТекстЗапросаДанныеДляПечати()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Документ.Ссылка                                            КАК Ссылка,
	|	Документ.Номер                                             КАК НомерДокумента,
	|	Документ.Дата                                              КАК ДатаДокумента,
	|	Документ.НомерВходящегоДокумента                           КАК НомерВходящегоДокумента,
	|	Документ.ДатаВходящегоДокумента                            КАК ДатаВходящегоДокумента,
	|	Документ.Организация                                       КАК Организация,
	|	Документ.Контрагент                                        КАК Контрагент,
	|	Документ.ДоговорКонтрагента                                КАК Договор,
	|	ВЫБОР
	|		КОГДА Документ.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                                      КАК УчитыватьНДС,
	|	Документ.Контрагент                                        КАК Отправитель,
	|	ВЫБОР
	|		КОГДА Документ.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Документ.Контрагент
	|		ИНАЧЕ Документ.Грузоотправитель
	|	КОНЕЦ                                                      КАК Грузоотправитель,
	|	ВЫБОР 
	|		КОГДА Документ.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Документ.Организация
	|		ИНАЧЕ Документ.Грузополучатель
	|	КОНЕЦ                                                      КАК Грузополучатель,
	|	Документ.Организация                                       КАК Получатель,
	|	Документ.ПодразделениеОрганизации                          КАК Подразделение,
	|	Документ.ПодразделениеОрганизации.Представление            КАК ПредставлениеПодразделения,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)                   КАК СкладОтправитель,
	|	Документ.Склад                                             КАК Склад,
	|	Документ.Склад                                             КАК СкладПолучатель,
	|	Документ.Склад.Представление                               КАК СкладПредставление,
	|	ВЫБОР
	|		КОГДА ВестиУчетПоИсточникамФинансирования.Значение
	|			ТОГДА Документ.ИсточникФинансирования
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ИсточникиФинансирования.ПустаяСсылка)
	|	КОНЕЦ                                                      КАК ИсточникФинансирования,
	|	Неопределено                                               КАК БанковскийСчет,
	|	""""                                                       КАК АдресДоставки,
	|	Документ.Валюта                                            КАК Валюта,
	|	Документ.ЦенаВключаетНДС                                   КАК ЦенаВключаетНДС,
	|	Документ.ПринятьНДСКВычету                                 КАК ПринятьНДСКВычету,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)                  КАК ВидЦены,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)           КАК Исполнитель,
	|	""""                                                       КАК ИсполнительДолжность,
	|	Неопределено                                               КАК ОтпускРазрешил,
	|	Неопределено                                               КАК ОтпускПроизвел,
	|	""""                                                       КАК ДоверенностьНомер,
	|	""""                                                       КАК ДоверенностьДата,
	|	""""                                                       КАК ДоверенностьВыдана,
	|	""""                                                       КАК ДоверенностьЛицо,
	|	Документ.Товары.(
	|		НомерСтроки                      КАК НомерСтроки,
	|		Номенклатура                     КАК Номенклатура,
	|		Номенклатура.НаименованиеПолное  КАК ТоварНаименование,
	|		Номенклатура.Код                 КАК ТоварКод,
	|		СерияНоменклатуры                КАК Серия,
	|		ЕСТЬNULL(СерияНоменклатуры.Номер, """")                     КАК СерийныйНомер,
	|		ЕСТЬNULL(СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1,1,1,0,0,0)) КАК СрокГодности,
	|		Партия                           КАК Партия,
	|		ЕдиницаИзмерения                 КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмерения.КодОКЕИ         КАК КодПоОКЕИ,
	|		КоличествоВЕдиницахИзмерения     КАК Количество,
	|		КоличествоВЕдиницахИзмерения     КАК КоличествоШтук,
	|		0                                КАК КоличествоМест,
	|		ЦенаПроизводителя                КАК ЦенаПроизводителя,
	|		Цена                             КАК Цена,
	|		Сумма                            КАК Сумма,
	|		СтавкаНДС                        КАК СтавкаНДС,
	|		СуммаНДС                         КАК СуммаНДС,
	|		Анализ                           КАК Анализ,
	|		ЛОЖЬ                             КАК ЭтоВозвратнаяТара
	|	)
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК Документ,
	|	Константа.ИспользоватьИсточникиФинансирования КАК ВестиУчетПоИсточникамФинансирования
	|
	|ГДЕ
	|	Документ.Ссылка В (&ТекущийДокумент)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаПоГруппамБухУчета()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаГруппБухУчета.Документ                   КАК Документ,
	|	ТаблицаГруппБухУчета.ГруппаБухгалтерскогоУчета  КАК ГруппаБухгалтерскогоУчета,
	|	СУММА(ТаблицаГруппБухУчета.Сумма)               КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка                                  КАК Документ,
	|		ТаблицаТовары.Номенклатура.ВидНоменклатуры.ГруппаБухгалтерскогоУчета  КАК ГруппаБухгалтерскогоУчета,
	|		ТаблицаТовары.Сумма + ВЫБОР
	|			КОГДА (НЕ ТаблицаТовары.Ссылка.ЦенаВключаетНДС)
	|				ТОГДА ТаблицаТовары.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ                                                 КАК Сумма
	|	ИЗ
	|		Документ.ПоступлениеТоваров.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка В(&ТекущийДокумент)) КАК ТаблицаГруппБухУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ,
	|	ГруппаБухгалтерскогоУчета
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаПоДействующемуВеществу()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ОписанияЭлементаКЛП.ДействующиеВеществаМНН, ЕСТЬNULL(ОписанияЭлементаРЛС.ДействующиеВеществаМНН, ЗНАЧЕНИЕ(Справочник.ДействующиеВеществаМНН.ПустаяСсылка))) КАК ДействующиеВеществаМНН
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.КЛП КАК ОписанияЭлементаКЛП
	|		ПО
	|			ТаблицаТовары.Номенклатура.ЭтоЛекарственноеСредство
	|			И ТаблицаТовары.Номенклатура.ЭлементКАТ ССЫЛКА Справочник.КЛП
	|			И ОписанияЭлементаКЛП.Ссылка = ТаблицаТовары.Номенклатура.ЭлементКАТ
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.РегистрЛекарственныхСредств КАК ОписанияЭлементаРЛС
	|		ПО
	|			ТаблицаТовары.Номенклатура.ЭтоЛекарственноеСредство
	|			И ТаблицаТовары.Номенклатура.ЭлементКАТ ССЫЛКА Справочник.РегистрЛекарственныхСредств
	|			И ОписанияЭлементаРЛС.Ссылка = ТаблицаТовары.Номенклатура.ЭлементКАТ
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&ТекущийДокумент)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьКурсыВалютДокументов(МассивДокументов)
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Документ.Дата, ДЕНЬ) КАК Дата,
	|	Документ.Валюта КАК Валюта
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивДокументов)
	|	И Документ.Валюта <> &ВалютаРегламентированногоУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.Валюта,
	|	НАЧАЛОПЕРИОДА(Документ.Дата, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюта,
	|	Дата
	|");
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаКурсовВалют.Колонки.Добавить("Курс", Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаКурсовВалют.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		КурсыВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата);
		НоваяСтрока.Курс = КурсыВалюты.Курс;
		НоваяСтрока.Кратность = КурсыВалюты.Кратность;
		
	КонецЦикла;
	
	Возврат ТаблицаКурсовВалют;
	
КонецФункции

Функция КоэффициентПересчетаВалюты(ДанныеПечати, ТаблицаКурсовВалют, ВалютаРегламентированногоУчета)
	
	КоэффициентПересчета = 1;
	Если ДанныеПечати.Валюта <> ВалютаРегламентированногоУчета Тогда
		
		СтруктураПоиска = Новый Структура("Валюта, Дата", ДанныеПечати.Валюта, НачалоДня(ДанныеПечати.ДатаДокумента));
		Массив = ТаблицаКурсовВалют.НайтиСтроки(СтруктураПоиска);
		Если Массив.Количество() > 0 Тогда
			КоэффициентПересчета = ?(Массив[0].Кратность <> 0, Массив[0].Курс / Массив[0].Кратность, 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КоэффициентПересчета;
	
КонецФункции

#Область ПечатьВедомость

Функция ПечатьВедомостьНаОприходование(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_Накладная);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	МассивВыводимыхОбластей = Новый Массив;
	
	ИмяОбластьШапка  = "ШапкаТаблицыСКодом";
	ИмяОбластьСтрока = "СтрокаСКодом";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДанныеДляПечати();
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабличныйДокумент, Макет);
		
		// Получение параметров для заполнения
		ПараметрыИзШапки = ПолучитьПараметрыШапкиВедомостьНаОприходование(Шапка);
		
		// Вывод области Заголовок
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Заголовок", ПараметрыИзШапки);
		
		// Вывод области РеквизитыШапки
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "РеквизитыШапки", ПараметрыИзШапки);
		
		// Вывод области ШапкаТаблицы
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, ИмяОбластьШапка, ПараметрыИзШапки);
		
		// Инициализация итогов по документу
		ПараметрыИтого = Новый Структура;
		ПараметрыИтого.Вставить("Сумма"   , 0);
		ПараметрыИтого.Вставить("СуммаНДС", 0);
		
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		КлючиПараметров = ФормированиеПечатныхФормБольничнаяАптека.ПолучитьИменаКолонокТаблицы(ВыборкаСтрокТовары);
		
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластьСтрока);
		
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		НомерСтроки = 0;
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ДанныеСтроки = Новый Структура(КлючиПараметров);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыборкаСтрокТовары);
			
			ТоварНаименование = ОбщегоНазначенияБольничнаяАптека.ПолучитьПредставлениеНоменклатурыДляПечати(
				ВыборкаСтрокТовары.ТоварНаименование,
				ВыборкаСтрокТовары.Серия,
				ВыборкаСтрокТовары.Партия);
			
			ДанныеСтроки.Вставить("ТоварНаименование", ТоварНаименование);
			
			ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Итого"));
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("СуммаПрописью"));
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Подписи"));
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть(ИмяОбластьШапка));
			КонецЕсли;
			
			// Вывод области Строка
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			ФормированиеПечатныхФормБольничнаяАптека.РассчитатьИтоги(ДанныеСтроки, ПараметрыИтого);
			
		КонецЦикла;
		
		// Вывод области Итого
		ПараметрыИтого.Вставить("НДС", ?(Шапка.ЦенаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Сумма НДС'")) + ":");
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Итого", ПараметрыИтого);
		
		// Вывод области СуммаПрописью
		СуммаКПрописи = ПараметрыИтого.Сумма + ?(Шапка.ЦенаВключаетНДС, 0, ПараметрыИтого.СуммаНДС);
		ФорматированнаяСумма = ОбщегоНазначенияБольничнаяАптека.ФорматСумм(СуммаКПрописи, Шапка.Валюта);
		ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Всего наименований %1, на сумму %2'"), КоличествоСтрок, ФорматированнаяСумма);
		
		ПараметрыСуммаПрописью = Новый Структура;
		ПараметрыСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		ПараметрыСуммаПрописью.Вставить("СуммаПрописью" , РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.Валюта));
		
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "СуммаПрописью", ПараметрыСуммаПрописью);
		
		// Вывод области Подписи
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Подписи", ПараметрыИзШапки);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиВедомостьНаОприходование(Шапка)
	
	КлючиПараметров = ФормированиеПечатныхФормБольничнаяАптека.ПолучитьИменаКолонокТаблицы(Шапка);
	
	Параметры = Новый Структура(КлючиПараметров);
	ЗаполнитьЗначенияСвойств(Параметры, Шапка);
	
	// Данные заголовка
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента);
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Накладная № %1 от %2'"), НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"));
	
	СведенияОПолучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.ДатаДокумента);
	ПолучательПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПолучателе, "ПолноеНаименование,");
	
	СведенияОбОтправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Отправитель, Шапка.ДатаДокумента);
	ОтправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОтправителе, "ПолноеНаименование,");
	
	Параметры.Вставить("ТекстЗаголовка"          , ТекстЗаголовка);
	Параметры.Вставить("ПолучательПредставление" , ПолучательПредставление);
	Параметры.Вставить("ОтправительПредставление", ОтправительПредставление);
	
	// Данные шапки таблицы
	Параметры.Вставить("ИмяКолонкиКодов", НСтр("ru = 'Код'"));
	
	// Данные подписей документа
	МОЛ = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(Шапка.Склад, Шапка.ДатаДокумента);
	
	Параметры.Вставить("Получил", МОЛ.ФИО);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти // ПечатьВедомость

#Область ПечатьВедомостьАптека

Функция ПечатьВедомостьНаОприходованиеАптека(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_НакладнаяАптека);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	МассивВыводимыхОбластей = Новый Массив;
	
	ВалютаПечати = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ТаблицаКурсовВалют = ПолучитьКурсыВалютДокументов(МассивОбъектов);
	
	ИмяОбластьШапка    = "ШапкаТаблицыСКодом";
	ИмяОбластьСтрока   = "СтрокаСКодом";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДанныеДляПечати() + ";" + ПолучитьТекстЗапросаПоГруппамБухУчета();
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатыЗапроса[0].Выбрать();
	
	ГруппыБухУчета = РезультатыЗапроса[1].Выгрузить();
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабличныйДокумент, Макет);
		
		КоэффициентПересчета = КоэффициентПересчетаВалюты(Шапка, ТаблицаКурсовВалют, ВалютаПечати);
		
		// Получение параметров для заполнения
		ПараметрыИзШапки = ПолучитьПараметрыШапкиВедомостьНаОприходованиеАптека(Шапка);
		
		// Вывод области Заголовок
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Заголовок", ПараметрыИзШапки);
		
		// Вывод области РеквизитыШапки
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "РеквизитыШапки", ПараметрыИзШапки);
		
		// Вывод области ШапкаТаблицы
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, ИмяОбластьШапка, ПараметрыИзШапки);
		
		// Инициализация итогов по документу
		ПараметрыИтого = Новый Структура;
		ПараметрыИтого.Вставить("СуммаСНДС"  , 0);
		ПараметрыИтого.Вставить("СуммаНДС"   , 0);
		ПараметрыИтого.Вставить("СуммаБезНДС", 0);
		
		ТаблицаРасшифровкиНДС = Новый ТаблицаЗначений;
		ТаблицаРасшифровкиНДС.Колонки.Добавить("СтавкаНДС");
		ТаблицаРасшифровкиНДС.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число"));
		
		// Формирование области Строка
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		КлючиПараметров = ФормированиеПечатныхФормБольничнаяАптека.ПолучитьИменаКолонокТаблицы(ВыборкаСтрокТовары);
		
		МассивСтрокТаблицы = Новый Массив;
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		НомерСтроки = 0;
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ДанныеСтроки = Новый Структура(КлючиПараметров);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыборкаСтрокТовары);
			
			ТоварНаименование = ОбщегоНазначенияБольничнаяАптека.ПолучитьПредставлениеНоменклатурыДляПечати(
				ВыборкаСтрокТовары.ТоварНаименование,
				ВыборкаСтрокТовары.Серия,
				ВыборкаСтрокТовары.Партия);
				
			ДанныеСтроки.Вставить("ТоварНаименование", ТоварНаименование);
			
			СуммаСНДС   = Окр((ВыборкаСтрокТовары.Сумма + ?(Шапка.ЦенаВключаетНДС, 0, ВыборкаСтрокТовары.СуммаНДС)) * КоэффициентПересчета, 2);
			СуммаНДС    = Окр(ВыборкаСтрокТовары.СуммаНДС * КоэффициентПересчета, 2);
			СуммаБезНДС = СуммаСНДС - СуммаНДС;
			
			Если Шапка.ЦенаВключаетНДС Тогда
				ЦенаБезНДС = ?(ВыборкаСтрокТовары.Количество = 0, 0, СуммаБезНДС / ВыборкаСтрокТовары.Количество);
				ЦенаСНДС   = ВыборкаСтрокТовары.Цена * КоэффициентПересчета;
			Иначе
				ЦенаБезНДС = ВыборкаСтрокТовары.Цена * КоэффициентПересчета;
				ЦенаСНДС   = ?(ВыборкаСтрокТовары.Количество = 0, 0, СуммаСНДС / ВыборкаСтрокТовары.Количество);
			КонецЕсли;
			
			ДанныеСтроки.Вставить("ЦенаСНДС"   , ЦенаСНДС);
			ДанныеСтроки.Вставить("ЦенаБезНДС" , ЦенаБезНДС);
			ДанныеСтроки.Вставить("НДС"        , ЦенаСНДС - ЦенаБезНДС);
			ДанныеСтроки.Вставить("СуммаСНДС"  , СуммаСНДС);
			ДанныеСтроки.Вставить("СуммаНДС"   , СуммаНДС);
			ДанныеСтроки.Вставить("СуммаБезНДС", СуммаБезНДС);
			
			ФормированиеПечатныхФормБольничнаяАптека.ДобавитьОбластьВМассивПоОписанию(Макет, ИмяОбластьСтрока, МассивСтрокТаблицы, ДанныеСтроки);
			
			ФормированиеПечатныхФормБольничнаяАптека.РассчитатьИтоги(ДанныеСтроки, ПараметрыИтого);
			
			РасшифровкаНДС = ТаблицаРасшифровкиНДС.Добавить();
			ЗаполнитьЗначенияСвойств(РасшифровкаНДС, ДанныеСтроки);
			
		КонецЦикла;
		
		ТаблицаРасшифровкиНДС.Свернуть("СтавкаНДС", "СуммаНДС");
		
		МассивОбластейПодвала = Новый Массив;
		
		// Формирование области Итого
		ПараметрыИтого.Вставить("НДС", НСтр("ru = 'В том числе НДС'") + ":");
		ФормированиеПечатныхФормБольничнаяАптека.ДобавитьОбластьВМассивПоОписанию(Макет, "Итого", МассивОбластейПодвала, ПараметрыИтого);
		
		// Формирование области РасшифровкаНДС
		Для Каждого РасшифровкаНДС Из ТаблицаРасшифровкиНДС Цикл
			РасшифровкаНДС.СтавкаНДС = НСтр("ru = 'В том числе НДС'") + ": " + РасшифровкаНДС.СтавкаНДС;
			ФормированиеПечатныхФормБольничнаяАптека.ДобавитьОбластьВМассивПоОписанию(Макет, "РасшифровкаНДС", МассивОбластейПодвала, РасшифровкаНДС);
		КонецЦикла;
		
		// Формирование области СуммаПрописью
		СуммаКПрописи = ПараметрыИтого.СуммаСНДС;
		ФорматированнаяСумма = ОбщегоНазначенияБольничнаяАптека.ФорматСумм(СуммаКПрописи, Шапка.Валюта);
		ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Всего наименований %1, на сумму %2'"), КоличествоСтрок, ФорматированнаяСумма);
		
		ПараметрыСуммаПрописью = Новый Структура;
		ПараметрыСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		ПараметрыСуммаПрописью.Вставить("СуммаПрописью" , РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.Валюта));
		
		ФормированиеПечатныхФормБольничнаяАптека.ДобавитьОбластьВМассивПоОписанию(Макет, "СуммаПрописью", МассивОбластейПодвала, ПараметрыСуммаПрописью);
		
		// Формирование области ШапкаИтоговПоГруппам
		ФормированиеПечатныхФормБольничнаяАптека.ДобавитьОбластьВМассивПоОписанию(Макет, "ШапкаИтоговПоГруппам", МассивОбластейПодвала, ПараметрыСуммаПрописью);
		
		// Формирование области ИтогПоГруппе
		МассивГруппБухУчета = ГруппыБухУчета.НайтиСтроки(Новый Структура("Документ", Шапка.Ссылка));
		
		Для Каждого ГруппаБухУчета Из МассивГруппБухУчета Цикл
			Если ГруппаБухУчета.Сумма > 0 Тогда
				
				ПараметрыИтогПоГруппе = Новый Структура;
				ПараметрыИтогПоГруппе.Вставить("Группа", ?(ЗначениеЗаполнено(ГруппаБухУчета.ГруппаБухгалтерскогоУчета), ГруппаБухУчета.ГруппаБухгалтерскогоУчета, НСтр("ru = 'Вне групп'")));
				ПараметрыИтогПоГруппе.Вставить("Сумма" , ОбщегоНазначенияБольничнаяАптека.ФорматСумм(ГруппаБухУчета.Сумма));
				
				ФормированиеПечатныхФормБольничнаяАптека.ДобавитьОбластьВМассивПоОписанию(Макет, "ИтогПоГруппе", МассивОбластейПодвала, ПараметрыИтогПоГруппе);
				
			КонецЕсли;
		КонецЦикла;
		
		// Формирование области Подписи
		ФормированиеПечатныхФормБольничнаяАптека.ДобавитьОбластьВМассивПоОписанию(Макет, "Подписи", МассивОбластейПодвала, ПараметрыИзШапки);
		
		// Вывод области Строка
		ГраницаОбластейСтрока = МассивСтрокТаблицы.ВГраница();
		Для ИндексОбласти = 0 По ГраницаОбластейСтрока Цикл
			
			ОбластьСтрока = МассивСтрокТаблицы[ИндексОбласти];
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			Если ИндексОбласти = ГраницаОбластейСтрока Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВыводимыхОбластей, МассивОбластейПодвала);
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, ИмяОбластьШапка, ПараметрыИзШапки);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
		КонецЦикла;
		
		// Вывод областей подвала
		Для Каждого ОбластьПодвала Из МассивОбластейПодвала Цикл
			ТабличныйДокумент.Вывести(ОбластьПодвала);
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиВедомостьНаОприходованиеАптека(Шапка)
	
	КлючиПараметров = ФормированиеПечатныхФормБольничнаяАптека.ПолучитьИменаКолонокТаблицы(Шапка);
	
	Параметры = Новый Структура(КлючиПараметров);
	ЗаполнитьЗначенияСвойств(Параметры, Шапка);
	
	// Данные заголовка
	НомерДокумента = СокрЛП(?(ЗначениеЗаполнено(Шапка.НомерВходящегоДокумента), Шапка.НомерВходящегоДокумента, ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента)));
	ДатаДокумента  = Формат(?(ЗначениеЗаполнено(Шапка.ДатаВходящегоДокумента), Шапка.ДатаВходящегоДокумента, Шапка.ДатаДокумента), "ДЛФ=DD");
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Накладная № %1 от %2'"), НомерДокумента, ДатаДокумента);
	
	СведенияОПолучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.ДатаДокумента);
	ПолучательПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПолучателе, "ПолноеНаименование,");
	
	СведенияОбОтправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Отправитель, Шапка.ДатаДокумента);
	ОтправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОтправителе, "ПолноеНаименование,");
	
	Параметры.Вставить("ТекстЗаголовка"          , ТекстЗаголовка);
	Параметры.Вставить("ПолучательПредставление" , ПолучательПредставление);
	Параметры.Вставить("ОтправительПредставление", ОтправительПредставление);
	
	// Данные шапки таблицы
	Параметры.Вставить("ИмяКолонкиКодов", НСтр("ru = 'Код'"));
	
	// Данные подписей документа
	МОЛ = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(Шапка.Склад, Шапка.ДатаДокумента);
	
	Параметры.Вставить("Получил", МОЛ.ФИО);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти // ПечатьВедомостьАптека

#Область ПечатьТОРГ4

Функция ПечатьТОРГ4(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_ТОРГ4);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	ВалютаПечати       = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ТаблицаКурсовВалют = ПолучитьКурсыВалютДокументов(МассивОбъектов);
	
	МассивВыводимыхОбластей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДанныеДляПечати();
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Получение параметров для заполнения
		ПараметрыИзШапки = ПолучитьПараметрыШапкиТОРГ4(Шапка);
		
		// Вывод области Заголовок
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьСоШтрихкодом(ТабличныйДокумент, Макет, "Заголовок", ПараметрыИзШапки);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Вывод области ШапкаТаблицы
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ШапкаТаблицы", ПараметрыИзШапки);
		
		// Инициализация итогов
		ПараметрыИтогоПоСтранице = ПолучитьОписаниеИтоговТОРГ4();
		ПараметрыИтогоПоАкту     = ПолучитьОписаниеИтоговТОРГ4();
		
		// Формирование многострочной части
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		КлючиПараметров = ФормированиеПечатныхФормБольничнаяАптека.ПолучитьИменаКолонокТаблицы(ВыборкаСтрокТовары);
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		НомерСтроки = 0;
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ДанныеСтроки = Новый Структура(КлючиПараметров);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыборкаСтрокТовары);
			
			КоэффициентПересчета = КоэффициентПересчетаВалюты(Шапка, ТаблицаКурсовВалют, ВалютаПечати);
			
			ТоварНаименование = ОбщегоНазначенияБольничнаяАптека.ПолучитьПредставлениеНоменклатурыДляПечати(
				ВыборкаСтрокТовары.ТоварНаименование,
				ВыборкаСтрокТовары.Серия,
				ВыборкаСтрокТовары.Партия);
			
			СуммаСНДС = Окр((ВыборкаСтрокТовары.Сумма + ?(Шапка.ЦенаВключаетНДС, 0, ВыборкаСтрокТовары.СуммаНДС)) * КоэффициентПересчета, 2);
			
			Если Шапка.ЦенаВключаетНДС Тогда
				Цена = ВыборкаСтрокТовары.Цена * КоэффициентПересчета;
			Иначе
				Цена = ?(ВыборкаСтрокТовары.Количество = 0, 0, СуммаСНДС / ВыборкаСтрокТовары.Количество);
			КонецЕсли;
			
			ДанныеСтроки.Вставить("ТоварНаименование", ТоварНаименование);
			ДанныеСтроки.Вставить("Цена"             , Цена);
			ДанныеСтроки.Вставить("Сумма"            , СуммаСНДС);
			
			ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("ИтогоПоСтранице"));
			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("ИтогоПоСтранице"));
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("ИтогоПоАкту"));
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("ЧленыКомиссии"));
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Подписи"));
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
				
				// Вывод области ИтогоПоСтранице
				ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ИтогоПоСтранице", ПараметрыИтогоПоСтранице);
				ФормированиеПечатныхФормБольничнаяАптека.ОбнулитьИтоги(ПараметрыИтогоПоСтранице);
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				// Вывод области ШапкаТаблицы
				ПараметрыИзШапки.НомерСтраницы = ПараметрыИзШапки.НомерСтраницы + 1;
				ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ШапкаТаблицы", ПараметрыИзШапки);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			ФормированиеПечатныхФормБольничнаяАптека.РассчитатьИтоги(ДанныеСтроки, ПараметрыИтогоПоСтранице);
			ФормированиеПечатныхФормБольничнаяАптека.РассчитатьИтоги(ДанныеСтроки, ПараметрыИтогоПоАкту);
			
		КонецЦикла;
		
		// Вывод области ИтогоПоСтранице
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ИтогоПоСтранице", ПараметрыИтогоПоСтранице);
		
		// Вывод области ИтогоПоАкту
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ИтогоПоАкту", ПараметрыИтогоПоАкту);
		
		// Вывод области ЧленыКомиссии
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ЧленыКомиссии");
		
		// Вывод области Подписи
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Подписи", ПараметрыИзШапки);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиТОРГ4(Шапка)
	
	КлючиПараметров = ФормированиеПечатныхФормБольничнаяАптека.ПолучитьИменаКолонокТаблицы(Шапка);
	
	Параметры = Новый Структура(КлючиПараметров);
	ЗаполнитьЗначенияСвойств(Параметры, Шапка);
	
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента);
	
	СведенияОбОтправителе    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Отправитель, Шапка.ДатаДокумента);
	ОтправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОтправителе);
	ОтправительОписание      = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОтправителе, "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	
	СведенияОГрузоотправителе     = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	ГрузоотправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	
	СведенияОПолучателе     = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.ДатаДокумента);
	ПолучательПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПолучателе);
	
	ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Шапка.Организация, Шапка.ДатаДокумента);
	
	РеквизитыСопроводительногоДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'сопроводительный документ № %1 от %2'"), НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"));
	
	МОЛ = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(Шапка.Склад, Шапка.ДатаДокумента);
	
	// Данные области Заголовок
	Параметры.Вставить("НомерДокумента"                     , НомерДокумента);
	Параметры.Вставить("ОтправительПредставление"           , ОтправительПредставление);
	Параметры.Вставить("ОтправительОписание"                , ОтправительОписание);
	Параметры.Вставить("ОтправительОКПО"                    , СведенияОбОтправителе.КодПоОКПО);
	Параметры.Вставить("ГрузоотправительПредставление"      , ГрузоотправительПредставление);
	Параметры.Вставить("ГрузоотправительОКПО"               , СведенияОГрузоотправителе.КодПоОКПО);
	Параметры.Вставить("ПолучательПредставление"            , ПолучательПредставление);
	Параметры.Вставить("ПолучательОКПО"                     , СведенияОПолучателе.КодПоОКПО);
	Параметры.Вставить("РуководительФИО"                    , ОтветственныеЛица.РуководительНаименование);
	Параметры.Вставить("РуководительДолжность"              , ОтветственныеЛица.РуководительДолжность);
	Параметры.Вставить("РеквизитыСопроводительногоДокумента", РеквизитыСопроводительногоДокумента);
	
	// Инициализация данных шапки таблицы
	Параметры.Вставить("НомерСтраницы", 1);
	
	// Данные области Подписи
	Параметры.Вставить("МОЛФИО"      , МОЛ.ФИО);
	Параметры.Вставить("МОЛДолжность", МОЛ.Должность);
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьОписаниеИтоговТОРГ4()
	
	ОписаниеИтого = Новый Структура;
	ОписаниеИтого.Вставить("КоличествоМест", 0);
	ОписаниеИтого.Вставить("КоличествоШтук", 0);
	ОписаниеИтого.Вставить("МассаБрутто"   , 0);
	ОписаниеИтого.Вставить("МассаНетто"    , 0);
	ОписаниеИтого.Вставить("Сумма"         , 0);
	
	Возврат ОписаниеИтого;
	
КонецФункции

#КонецОбласти // ПечатьТОРГ4

#Область ПечатьАП3

Функция ПечатьАП3(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_АП3);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	МассивВыводимыхОбластей = Новый Массив;
	
	ВалютаПечати       = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ТаблицаКурсовВалют = ПолучитьКурсыВалютДокументов(МассивОбъектов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДанныеДляПечати();
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		КоэффициентПересчета = КоэффициентПересчетаВалюты(Шапка, ТаблицаКурсовВалют, ВалютаПечати);
		
		// Получение параметров для заполнения
		ПараметрыИзШапки = ПолучитьПараметрыШапкиАП3(Шапка);
		
		// Вывод области Заголовок
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьСоШтрихкодом(ТабличныйДокумент, Макет, "Заголовок", ПараметрыИзШапки);
		
		// Вывод области ШапкаТаблицы
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ШапкаТаблицы", ПараметрыИзШапки);
		
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		КлючиПараметров = ФормированиеПечатныхФормБольничнаяАптека.ПолучитьИменаКолонокТаблицы(ВыборкаСтрокТовары);
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		НомерСтроки = 0;
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ДанныеСтроки = Новый Структура(КлючиПараметров);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыборкаСтрокТовары);
			
			ТоварНаименование = ОбщегоНазначенияБольничнаяАптека.ПолучитьПредставлениеНоменклатурыДляПечати(
				ВыборкаСтрокТовары.ТоварНаименование,
				ВыборкаСтрокТовары.Серия,
				ВыборкаСтрокТовары.Партия);
			
			СуммаСНДС = Окр((ВыборкаСтрокТовары.Сумма + ?(Шапка.ЦенаВключаетНДС, 0, ВыборкаСтрокТовары.СуммаНДС)) * КоэффициентПересчета, 2);
			Если Шапка.ЦенаВключаетНДС Тогда
				Цена  = ВыборкаСтрокТовары.Цена * КоэффициентПересчета;
			Иначе
				Цена  = ?(ВыборкаСтрокТовары.Количество = 0, 0, СуммаСНДС / ВыборкаСтрокТовары.Количество);
			КонецЕсли;
			
			ДанныеСтроки.Вставить("ТоварНаименование", ТоварНаименование);
			ДанныеСтроки.Вставить("Цена"             , Цена);
			ДанныеСтроки.Вставить("Сумма"            , СуммаСНДС);
			
			ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			Если КоличествоСтрок = НомерСтроки Тогда
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Подписи"));
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				// Вывод области ШапкаТаблицы
				ПараметрыИзШапки.НомерСтраницы = ПараметрыИзШапки.НомерСтраницы + 1;
				ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ШапкаТаблицы", ПараметрыИзШапки);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
		КонецЦикла;
		
		// Вывод области Подписи
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Подписи", ПараметрыИзШапки);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиАП3(Шапка)
	
	КлючиПараметров = ФормированиеПечатныхФормБольничнаяАптека.ПолучитьИменаКолонокТаблицы(Шапка);
	
	Параметры = Новый Структура(КлючиПараметров);
	ЗаполнитьЗначенияСвойств(Параметры, Шапка);
	
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента);
	
	СведенияОбОтправителе    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Отправитель, Шапка.ДатаДокумента);
	ОтправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОтправителе, "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	
	СведенияОПолучателе     = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.ДатаДокумента);
	ПолучательПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПолучателе, "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
	
	// Данные области Заголовок
	Параметры.Вставить("НомерДокумента"          , НомерДокумента);
	Параметры.Вставить("ОтправительПредставление", ОтправительПредставление);
	Параметры.Вставить("ПолучательПредставление" , ПолучательПредставление);
	
	// Инициализация данных шапки таблицы
	Параметры.Вставить("НомерСтраницы", 1);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти // ПечатьАП3

Функция ПечатьАП73(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ВалютаПечати = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваров_АП73";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеТоваров.ПФ_MXL_АП73");
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	ТаблицаКурсовВалют = ПолучитьКурсыВалютДокументов(МассивОбъектов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДанныеДляПечати() + ";" + ПолучитьТекстЗапросаПоДействующемуВеществу();
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатыЗапроса[0].Выбрать();
	
	ТаблицаДействующихВеществ = РезультатыЗапроса[1].Выгрузить();
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		КоэффициентПересчета = КоэффициентПересчетаВалюты(Шапка, ТаблицаКурсовВалют, ВалютаПечати);
		
		// Выводим общие реквизиты шапки
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Контрагент,  Шапка.ДатаДокумента,, Шапка.БанковскийСчет);
		
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование");
		ПредставлениеПоставщика  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование");
		
		Если ЗначениеЗаполнено(Шапка.НомерВходящегоДокумента) Тогда
			НомерНакладной = Шапка.НомерВходящегоДокумента;
			ДатаНакладной = Формат(Шапка.ДатаВходящегоДокумента, "ДЛФ=D");
		Иначе
			НомерНакладной = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента);
			ДатаНакладной = Формат(Шапка.ДатаДокумента, "ДЛФ=D");
		КонецЕсли;
		
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Сумма = Окр((ВыборкаСтрокТовары.Сумма + ?(Шапка.ЦенаВключаетНДС, 0, ВыборкаСтрокТовары.СуммаНДС)) * КоэффициентПересчета, 2);
			Если Шапка.ЦенаВключаетНДС Тогда
				Цена  = ВыборкаСтрокТовары.Цена * КоэффициентПересчета;
			Иначе
				Цена  = ?(ВыборкаСтрокТовары.Количество = 0, 0, Сумма / ВыборкаСтрокТовары.Количество);
			КонецЕсли;
			
			ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
			
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабДокумент, Макет, ОбластьШапка);
			
			ТабДокумент.Вывести(ОбластьШапка);
			
			ОбластьШапкаТабл = Макет.ПолучитьОбласть("ШапкаТабл");
			ТабДокумент.Вывести(ОбластьШапкаТабл);
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			
			ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьСтрока.Параметры.Наименование					=ВыборкаСтрокТовары.ТоварНаименование;
			ОбластьСтрока.Параметры.КодЛекарства					=ВыборкаСтрокТовары.ТоварКод;
			ОбластьСтрока.Параметры.ЦенаРозничная					=Цена;
			ОбластьСтрока.Параметры.ЦенаОптовая						=Цена;
			
			ТабДокумент.Вывести(ОбластьСтрока);   
			
			ОбластьПодвал=Макет.ПолучитьОбласть("ПодвалИзТЗ");
			ОбластьПодвал.Параметры.Заполнить(Шапка);
			ОбластьПодвал.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			ОбластьПодвал.Параметры.Поставщик = ПредставлениеПоставщика;
			ОбластьПодвал.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
			ОбластьПодвал.Параметры.НомерНакладной = НомерНакладной;
			ОбластьПодвал.Параметры.ДатаНакладной = ДатаНакладной;
			ОбластьПодвал.Параметры.ЦенаЗаУпаковку = Цена;
			ОбластьПодвал.Параметры.ПоступившееКоличество = ВыборкаСтрокТовары.Количество;
			
			СтрокаТаблицы = ТаблицаДействующихВеществ.Найти(ВыборкаСтрокТовары.Номенклатура, "Номенклатура");
			ОбластьПодвал.Параметры.ТорговоеНазваниеЛекарственногоСредства = 
				?(СтрокаТаблицы = Неопределено, "", СтрокаТаблицы.ДействующиеВеществаМНН);
			
			ТабДокумент.Вывести(ОбластьПодвал); 
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьПротоколСогласованияЦен(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ВалютаПечати = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваров_ПротоколСогласованияЦен";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПоступлениеТоваров.ПФ_MXL_ПротоколСогласованияЦен");
	
	// Создаем массив для проверки вывода
	МассивВыводимыхОбластей = Новый Массив;
	
	ТаблицаКурсовВалют = ПолучитьКурсыВалютДокументов(МассивОбъектов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДанныеДляПечати();
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		КоэффициентПересчета = КоэффициентПересчетаВалюты(Шапка, ТаблицаКурсовВалют, ВалютаПечати);
		
		// Выводим шапку накладной
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента);
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Контрагент,  Шапка.ДатаДокумента,, Шапка.БанковскийСчет);
		ПолучательПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
		ПоставщикПредставление  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаДокумента");
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабДокумент, Макет, ОбластьШапка);
		
		ОбластьШапка.Параметры.Заполнить(Шапка);
		ОбластьШапка.Параметры.ПолучательПредставление = ПолучательПредставление;
		ОбластьШапка.Параметры.ПоставщикПредставление  = ПоставщикПредставление;
		ОбластьШапка.Параметры.НакладнаяПредставление  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'приложение к накладной № %1 от %2'"), НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"));
		ТабДокумент.Вывести(ОбластьШапка);
		
		// Выводим заголовок таблицы
		ШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабДокумент.Вывести(ШапкаТаблицы);
		
		НомерСтроки = 0;
		
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		ВыборкаСтрокТовары 	= Шапка.Товары.Выбрать();
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если ВыборкаСтрокТовары.ЦенаПроизводителя = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
			ОбластьСтрока.Параметры.Серия = ВыборкаСтрокТовары.Серия;
			
			ЦенаПроизводителя = Окр(ВыборкаСтрокТовары.ЦенаПроизводителя * КоэффициентПересчета, 2);
			
			ЦенаПроизводителя61ФЗ = 0;
			ВалютаПроизводителя61ФЗ = "";
			ЦенаПроизводителя61ФЗВал = 0;
			
			Сумма = Окр((ВыборкаСтрокТовары.Сумма + ?(Шапка.ЦенаВключаетНДС, - ВыборкаСтрокТовары.СуммаНДС, 0)) * КоэффициентПересчета, 2);
			
			Реквизиты = Справочники.Номенклатура.ПолучитьРеквизитыНоменклатуры(ВыборкаСтрокТовары.Номенклатура);
			Если Реквизиты.ЭтоЛекарственноеСредство Тогда
				
				ЭлементКАТ = Реквизиты.ЭлементКАТ;
				Производитель = ЭлементКАТ.ФирмаПроизводитель;
				ТоварНаименование = ЭлементКАТ;
				
				ДанныеЦен = РегистрыСведений.ЦеныЛекарственныхСредствЖНВЛП.ПолучитьПоследнее(Шапка.ДатаДокумента, Новый Структура("КАТ", ЭлементКАТ));
				Если Не ЗначениеЗаполнено(ДанныеЦен.ДатаИсключения) Или ДанныеЦен.ДатаИсключения > Шапка.ДатаДокумента Тогда
					ЦенаПроизводителя61ФЗ = ДанныеЦен.ЦенаРуб;
					Если ДанныеЦен.Валюта <> ВалютаПечати Тогда
						ВалютаПроизводителя61ФЗ = ДанныеЦен.Валюта;
						ЦенаПроизводителя61ФЗВал = ДанныеЦен.Цена;
					КонецЕсли;
				КонецЕсли;
				
				Упаковка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементКАТ, "Упаковка");
				Если Не Упаковка.Пустая() И Упаковка <> ВыборкаСтрокТовары.ЕдиницаИзмерения Тогда
					
					КоэффициентЕдиницы = НоменклатураСервер.КоэффициентЕдиницыИзмерения(ВыборкаСтрокТовары.Номенклатура, ВыборкаСтрокТовары.ЕдиницаИзмерения);
					КоэффициентУпаковки = НоменклатураСервер.КоэффициентЕдиницыИзмерения(ВыборкаСтрокТовары.Номенклатура, Упаковка);
					Количество = ВыборкаСтрокТовары.Количество * КоэффициентЕдиницы / КоэффициентУпаковки;
					
					Цена = ?(Количество = 0, 0, Сумма / Количество);
					ЦенаПроизводителя = ЦенаПроизводителя * КоэффициентУпаковки / КоэффициентЕдиницы;
					
				Иначе
					
					Количество = ВыборкаСтрокТовары.Количество;
					Цена = ВыборкаСтрокТовары.Цена;
					
				КонецЕсли;
				
			Иначе
				
				Производитель = "";
				ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование;
				Количество = ВыборкаСтрокТовары.Количество;
				Цена = ВыборкаСтрокТовары.Цена;
				
			КонецЕсли;
			
			ОбластьСтрока.Параметры.ЦенаПроизводителя = ЦенаПроизводителя;
			ОбластьСтрока.Параметры.ТоварНаименование = ТоварНаименование;
			ОбластьСтрока.Параметры.Производитель = Производитель;
			
			ОбластьСтрока.Параметры.ЦенаПроизводителя61ФЗ = ЦенаПроизводителя61ФЗ;
			ОбластьСтрока.Параметры.ВалютаПроизводителя61ФЗ = ВалютаПроизводителя61ФЗ;
			ОбластьСтрока.Параметры.ЦенаПроизводителя61ФЗВал = ЦенаПроизводителя61ФЗВал;
			
			Если Шапка.ЦенаВключаетНДС Тогда
				ЦенаБезНДС  = ?(Количество = 0, 0, Сумма / Количество);
			Иначе
				ЦенаБезНДС  = Цена * КоэффициентПересчета;
			КонецЕсли;
			ОбластьСтрока.Параметры.ЦенаБезНДС	= ЦенаБезНДС;
			
			ОптоваяНадбавка = ЦенаБезНДС - ЦенаПроизводителя;
			ОптоваяСтавка = ОптоваяНадбавка / ЦенаПроизводителя * 100;
			
			ОбластьСтрока.Параметры.ОптоваяНадбавка = ОптоваяНадбавка;
			ОбластьСтрока.Параметры.ОптоваяСтавка 	= ОптоваяСтавка;
			
			ТабДокумент.Вывести(ОбластьСтрока);
			
		КонецЦикла;
		
		// Выводим подвал документа
		ТабДокумент.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеДляПечати();
	Запрос.УстановитьПараметр("ИспользоватьИсточникиФинансирования", ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования"));
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("РезультатПоШапке"         , РезультатыЗапросов[РезультатыЗапросов.ВГраница() - 1]);
	ДанныеДляПечати.Вставить("РезультатПоТабличнойЧасти", РезультатыЗапросов[РезультатыЗапросов.ВГраница()]);
	ДанныеДляПечати.Вставить("ТаблицаКурсовВалют"       , ПолучитьКурсыВалютДокументов(МассивОбъектов));
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ТекстЗапросаДанныеДляПечати()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Документ.Ссылка                                            КАК Ссылка,
	|	Документ.Номер                                             КАК НомерДокумента,
	|	Документ.Дата                                              КАК ДатаДокумента,
	|	Документ.НомерВходящегоДокумента                           КАК НомерВходящегоДокумента,
	|	Документ.ДатаВходящегоДокумента                            КАК ДатаВходящегоДокумента,
	|	Документ.Организация                                       КАК Организация,
	|	Документ.Контрагент                                        КАК Контрагент,
	|	Документ.ДоговорКонтрагента                                КАК Договор,
	|	ВЫБОР
	|		КОГДА Документ.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                                      КАК УчитыватьНДС,
	|	Документ.Контрагент                                        КАК Отправитель,
	|	ВЫБОР
	|		КОГДА Документ.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Документ.Контрагент
	|		ИНАЧЕ Документ.Грузоотправитель
	|	КОНЕЦ                                                      КАК Грузоотправитель,
	|	ВЫБОР 
	|		КОГДА Документ.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Документ.Организация
	|		ИНАЧЕ Документ.Грузополучатель
	|	КОНЕЦ                                                      КАК Грузополучатель,
	|	Документ.Организация                                       КАК Получатель,
	|	Документ.ПодразделениеОрганизации                          КАК Подразделение,
	|	Документ.ПодразделениеОрганизации.Представление            КАК ПредставлениеПодразделения,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)                   КАК СкладОтправитель,
	|	Документ.Склад                                             КАК Склад,
	|	Документ.Склад                                             КАК СкладПолучатель,
	|	Документ.Склад.Представление                               КАК СкладПредставление,
	|	ВЫБОР
	|		КОГДА &ИспользоватьИсточникиФинансирования
	|			ТОГДА Документ.ИсточникФинансирования
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ИсточникиФинансирования.ПустаяСсылка)
	|	КОНЕЦ                                                      КАК ИсточникФинансирования,
	|	Неопределено                                               КАК БанковскийСчет,
	|	""""                                                       КАК АдресДоставки,
	|	Документ.Валюта                                            КАК Валюта,
	|	Документ.ЦенаВключаетНДС                                   КАК ЦенаВключаетНДС,
	|	Документ.ПринятьНДСКВычету                                 КАК ПринятьНДСКВычету,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)                  КАК ВидЦены,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)           КАК Исполнитель,
	|	""""                                                       КАК ИсполнительДолжность,
	|	Неопределено                                               КАК ОтпускРазрешил,
	|	Неопределено                                               КАК ОтпускПроизвел,
	|	""""                                                       КАК ДоверенностьНомер,
	|	""""                                                       КАК ДоверенностьДата,
	|	""""                                                       КАК ДоверенностьВыдана,
	|	""""                                                       КАК ДоверенностьЛицо
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В (&ТекущийДокумент)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка                            КАК Документ,
	|	Товары.НомерСтроки                       КАК НомерСтроки,
	|	Товары.Номенклатура                      КАК Номенклатура,
	|	Товары.Номенклатура.НаименованиеПолное   КАК ТоварНаименование,
	|	Товары.Номенклатура.Код                  КАК ТоварКод,
	|	Товары.СерияНоменклатуры                 КАК СерияНоменклатуры,
	|	ЕСТЬNULL(СерияНоменклатуры.Номер, """")                     КАК СерийныйНомер,
	|	ЕСТЬNULL(СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1,1,1,0,0,0)) КАК СрокГодности,
	|	Партия                                   КАК Партия,
	|	Товары.ЕдиницаИзмерения                  КАК ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмерения.КодОКЕИ          КАК КодПоОКЕИ,
	|	Товары.КоличествоВЕдиницахИзмерения      КАК Количество,
	|	Товары.Количество                        КАК КоличествоБазовых,
	|	Товары.Коэффициент                       КАК Коэффициент,
	|	Товары.КоличествоВЕдиницахИзмерения      КАК КоличествоШтук,
	|	0                                        КАК КоличествоМест,
	|	Товары.ЦенаПроизводителя                 КАК ЦенаПроизводителя,
	|	Товары.Цена                              КАК Цена,
	|	Товары.Сумма                             КАК Сумма,
	|	Товары.СтавкаНДС                         КАК СтавкаНДС,
	|	Товары.СуммаНДС                          КАК СуммаНДС,
	|	Товары.СуммаСНДС                         КАК СуммаСНДС,
	|	Товары.Анализ                            КАК Анализ,
	|	ЛОЖЬ                                     КАК ЭтоВозвратнаяТара
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В (&ТекущийДокумент)
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Документ
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Печать этикеток, ценников и стеллажных карточек
#Область ПечатьЭтикетокИЦенников

Функция ТекстЗапросаДанныеДляПечатиЭтикетокИЦенников()
	
	Возврат "
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаТоваров.НомерСтроки)                 КАК Порядок,
	|	ТаблицаТоваров.Ссылка.Дата                          КАК ДатаДокумента,
	|	ТаблицаТоваров.Ссылка.Организация                   КАК Организация,
	|	ТаблицаТоваров.Ссылка.Склад                         КАК Склад,
	|	ТаблицаТоваров.Ссылка.Контрагент                    КАК Поставщик,
	|	ТаблицаТоваров.Ссылка.ИсточникФинансирования        КАК ИсточникФинансирования,
	|	ТаблицаТоваров.Номенклатура                         КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерий = &СтатусСерииНеУказываются
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТоваров.СерияНоменклатуры
	|	КОНЕЦ                                               КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияПартий = &СтатусПартииНеУказываются
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТоваров.Партия
	|	КОНЕЦ                                               КАК Партия,
	|	ТаблицаТоваров.ЕдиницаИзмерения                     КАК Упаковка,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.ЦенаВключаетНДС
	|			ТОГДА ТаблицаТоваров.Цена
	|		ИНАЧЕ (ТаблицаТоваров.Сумма + ТаблицаТоваров.СуммаНДС) / ТаблицаТоваров.КоличествоВЕдиницахИзмерения
	|	КОНЕЦ КАК ЧИСЛО(15, 2))                             КАК Цена,
	|	СУММА(ТаблицаТоваров.КоличествоВЕдиницахИзмерения)  КАК Количество
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка.Дата,
	|	ТаблицаТоваров.Ссылка.ИсточникФинансирования,
	|	ТаблицаТоваров.Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерий = &СтатусСерииНеУказываются
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТоваров.СерияНоменклатуры
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияПартий = &СтатусПартииНеУказываются
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТоваров.Партия
	|	КОНЕЦ,
	|	ТаблицаТоваров.ЕдиницаИзмерения,
	|	ТаблицаТоваров.Ссылка.Организация,
	|	ТаблицаТоваров.Ссылка.Склад,
	|	ТаблицаТоваров.Ссылка.Контрагент,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ТаблицаТоваров.Ссылка.ЦенаВключаетНДС
	|			ТОГДА ТаблицаТоваров.Цена
	|		ИНАЧЕ (ТаблицаТоваров.Сумма + ТаблицаТоваров.СуммаНДС) / ТаблицаТоваров.КоличествоВЕдиницахИзмерения
	|	КОНЕЦ КАК ЧИСЛО(15, 2))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Организация  КАК Организация,
	|	Документ.Склад        КАК Склад
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивДокументов)
	|";
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище
//
Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеДляПечатиЭтикетокИЦенников();
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	ЗапасыСервер.УстановитьСтатусыПараметровУчетаВПараметрахЗапроса(Запрос);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивСкладов     = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1,МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад", ?(МассивСкладов.Количество() = 1,МассивСкладов[0], МассивСкладов));
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище
//
Функция ПолучитьДанныеДляПечатиЦенников(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеДляПечатиЭтикетокИЦенников();
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	ЗапасыСервер.УстановитьСтатусыПараметровУчетаВПараметрахЗапроса(Запрос);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивСкладов     = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1,МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад", ?(МассивСкладов.Количество() = 1,МассивСкладов[0], МассивСкладов));
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище
//
Функция ПолучитьДанныеДляПечатиСтеллажныхКарточек(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеДляПечатиЭтикетокИЦенников();
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	ЗапасыСервер.УстановитьСтатусыПараметровУчетаВПараметрахЗапроса(Запрос);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивСкладов     = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1,МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад", ?(МассивСкладов.Количество() = 1,МассивСкладов[0], МассивСкладов));
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат СтруктураРезультат;
	
КонецФункции

#КонецОбласти // ПечатьЭтикетокИЦенников

#КонецОбласти // Печать

////////////////////////////////////////////////////////////////////////////////
// Команды формы
#Область КомандыФормы

// Заполняет список команд ввода на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииБольничнаяАптека.ДобавитьКомандыСозданияНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
КонецПроцедуры

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	МенюОтчетыБольничнаяАптека.ДобавитьОбщиеКоманды(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыОтчетов, НастройкиФормы);
	
	Отчеты.КонтрольОстаточныхСроковГодностиПриПоступлении.ДобавитьКомандуОтчета(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти // КомандыФормы

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Загрузка из файла.
#Область ЗагрузкаИзФайла

Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(ПараметрыЗагрузкиИзФайла) Экспорт
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
//
// Параметры:
//  ПолноеИмяТабличнойЧасти  - Строка    - полное имя табличной части, в которую загружаются данные.
//  СписокНеоднозначностей    - Массив   - Массив для заполнения с неоднозначными данными.
//  ИмяКолонки                - Строка   - Имя колонки, в который возникла неоднозначность.
//  ЗагружаемыеЗначенияСтрока - Строка   - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Если ИмяКолонки = "Номенклатура" Тогда
		Неоднозначности = ДополнительныеПараметры.ПодобраннаяНоменклатура.Получить(ОбщегоНазначения.ЗначениеВСтрокуXML(ЗагружаемыеЗначенияСтрока));
		Если Неоднозначности <> Неопределено Тогда
			СписокНеоднозначностей = Неоднозначности;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//  АдресЗагружаемыхДанных    - Строка - адрес временного хранилища с таблицей значений, в которой
//                                       находятся загруженные данные из файла. Состав колонок:
//    * Идентификатор - Число - порядковый номер строки;
//    * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//  АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                       являющейся копией табличной части документа, 
//                                       которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//  СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений, для которых в ИБ имеется несколько подходящих вариантов.
//    * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность;
//    * Идентификатор - Число  - идентификатор строки, в которой была обнаружена неоднозначность.
//  ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//  ДополнительныеПараметры   - Структура со свойствами:
//    * Контрагент                 - Справочники.Контрагенты - владелец номенклатуры поставщика.
//    * АдресПерезагружаемыхДанных - Строка - адрес временного хранилища с таблицей значений,
//                                            в которой будут помещены данные для повторного сопоставления
//                                            (см. процедуру СопоставитьПерезагружаемыеДанные).
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	УдалитьСтрокиСНезаполненнымиПолями(ЗагружаемыеДанные, "НоменклатураНаименование, КоличествоВЕдиницахИзмерения, Цена");
	
	Если ЗагружаемыеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьШтрихкоды               = ЕстьДанныеКОбработке(ЗагружаемыеДанные, "Штрихкод");
	ЕстьДанныеНоменклатуры      = ЕстьДанныеКОбработке(ЗагружаемыеДанные, "Артикул, НоменклатураНаименование");
	ЕстьДанныеСерийНоменклатуры = ЕстьДанныеКОбработке(ЗагружаемыеДанные, "СерийныйНомер, СрокГодности");
	
	ПараметрыСопоставления = Новый Структура;
	ПараметрыСопоставления.Вставить("ИспользоватьНоменклатуруПоставщиков", ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков"));
	ПараметрыСопоставления.Вставить("ВладелецНоменклатурыПоставщика"     , ДополнительныеПараметры.Контрагент);
	ПараметрыСопоставления.Вставить("ДанныеСтавкиНДС"                    , ДанныеСопоставленияСтавкиНДС());
	
	Если ЕстьШтрихкоды Тогда
		ЗагружаемыеШтрихкоды = ВыгрузитьКолонку(ЗагружаемыеДанные, "Штрихкод");
		ПараметрыСопоставления.Вставить("ДанныеПоШтрихкодам", ДанныеСопоставленияПоШтрихкодам(ЗагружаемыеШтрихкоды, ПараметрыСопоставления));
	КонецЕсли;
	
	Если ЕстьДанныеНоменклатуры Тогда
		ПараметрыСопоставления.Вставить("ДанныеНоменклатуры", ДанныеСопоставленияНоменклатуры(ПараметрыСопоставления));
	КонецЕсли;
	
	Товары = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ПодобраннаяНоменклатура = Новый Соответствие;
	ПерезагружаемыеДанные = ЗагружаемыеДанные.СкопироватьКолонки("Идентификатор, Артикул, НоменклатураНаименование, СерийныйНомер, СрокГодности");
	
	Для Каждого ЗагружаемаяСтрока Из ЗагружаемыеДанные Цикл
		
		Товар = Товары.Добавить();
		Товар.Идентификатор                = ЗагружаемаяСтрока.Идентификатор;
		Товар.КоличествоВЕдиницахИзмерения = ЗагружаемаяСтрока.КоличествоВЕдиницахИзмерения;
		Товар.Цена                         = ЗагружаемаяСтрока.Цена;
		Товар.ЦенаПроизводителя            = ЗагружаемаяСтрока.ЦенаПроизводителя;
		Товар.Сумма                        = ЗагружаемаяСтрока.Сумма;
		Товар.СуммаНДС                     = ЗагружаемаяСтрока.СуммаНДС;
		Товар.СуммаСНДС                    = ЗагружаемаяСтрока.СуммаСНДС;
		Товар.СтавкаНДС                    = ПараметрыСопоставления.ДанныеСтавкиНДС.Получить(КлючПоиска(ЗагружаемаяСтрока.СтавкаНДС));
		
		Если ЕстьШтрихкоды Тогда
			СопоставитьПоШтрихкоду(ПараметрыСопоставления, ЗагружаемаяСтрока, Товар);
		КонецЕсли;
		
		Если ЕстьДанныеНоменклатуры Тогда
			СопоставитьНоменклатуру(ПараметрыСопоставления, ЗагружаемаяСтрока, Товар, СписокНеоднозначностей, ПодобраннаяНоменклатура);
		КонецЕсли;
		
		ДополнитьПерезагружаемыеДанные(ПараметрыСопоставления, ЗагружаемаяСтрока, Товар, ПерезагружаемыеДанные);
		
	КонецЦикла;
	
	Если ЕстьДанныеСерийНоменклатуры Тогда
		
		ВладельцыСерий = ВыгрузитьКолонку(Товары, "Номенклатура");
		ПараметрыСопоставления.Вставить("ДанныеСерийНоменклатуры", ДанныеСопоставленияСерийНоменклатуры(ВладельцыСерий));
		
		Для Каждого ЗагружаемаяСтрока Из ЗагружаемыеДанные Цикл
			Товар = Товары.Найти(ЗагружаемаяСтрока.Идентификатор, "Идентификатор");
			СопоставитьСериюНоменклатуры(ПараметрыСопоставления, ЗагружаемаяСтрока, Товар);
		КонецЦикла;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
	ПоместитьВоВременноеХранилище(ПерезагружаемыеДанные, ДополнительныеПараметры.АдресПерезагружаемыхДанных);
	
	ДополнительныеПараметры.Вставить("ПодобраннаяНоменклатура", ПодобраннаяНоменклатура);
	
КонецПроцедуры

// Производит попытку повторного сопоставления данных,
// после того как пользователь вручную установит соответствия в форме сопоставления.
//
// Параметры:
//  АдресПерезагружаемыхДанных - Строка - адрес временного хранилища с таблицей значений,
//                                        в которой находятся данные для повторного сопоставления.
//  ТоварыДокумента            - ДанныеФормыКоллекция - табличная часть документа для дозаполнения.
//  ДополнительныеПараметры    - Структура со свойствами:
//    * Контрагент                       - Справочники.Контрагенты - владелец номенклатуры поставщика.
//    * ИдентификаторыЗагруженныхДанных   - Соответствие - соответствие идентификаторов данных повторного сопоставления
//                                                        и идентификаторов строк табличной части Товары.
//    * АдресСоздаваемыхОбъектов         - Строка - адрес коллекции объектов, которая заполняется данными
//                                                  которых не было обнаружено и которые возможно создать в информационной базе.
//    * ПредставленияСоздаваемыхОбъектов - Массив - представления колонок табличной части Товары, значения которых возможно создать в информационной базе.
//
Процедура СопоставитьПерезагружаемыеДанные(АдресПерезагружаемыхДанных, ТоварыДокумента, ДополнительныеПараметры) Экспорт
	
	ПерезагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресПерезагружаемыхДанных);
	
	Если ПерезагружаемыеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьДанныеНоменклатурыПоставщика = ЕстьДанныеКОбработке(ПерезагружаемыеДанные, "Артикул, НоменклатураНаименование");
	ЕстьДанныеСерийНоменклатуры      = ЕстьДанныеКОбработке(ПерезагружаемыеДанные, "СерийныйНомер, СрокГодности");
	
	ПараметрыСопоставления = Новый Структура;
	
	Если ЕстьДанныеНоменклатурыПоставщика Тогда
		ПараметрыСопоставления.Вставить("ИспользоватьНоменклатуруПоставщиков"   , ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков"));
		ПараметрыСопоставления.Вставить("ВладелецНоменклатурыПоставщика"        , ДополнительныеПараметры.Контрагент);
		ПараметрыСопоставления.Вставить("ДанныеНоменклатурыПоставщика"          , ДанныеСопоставленияНоменклатурыПоставщика(ПараметрыСопоставления));
		ПараметрыСопоставления.Вставить("ПравоДобавленияНоменклатурыПоставщиков", ПравоДоступа("Добавление", Метаданные.Справочники.НоменклатураКонтрагентов));
	КонецЕсли;
	
	Если ЕстьДанныеСерийНоменклатуры Тогда
		ВладельцыСерий = ВыгрузитьКолонку(ТоварыДокумента, "Номенклатура");
		ПараметрыСопоставления.Вставить("ДанныеСерийНоменклатуры"         , ДанныеСопоставленияСерийНоменклатуры(ВладельцыСерий));
		ПараметрыСопоставления.Вставить("ПравоДобавленияСерииНоменклатуры", ПравоДоступа("Добавление", Метаданные.Справочники.СерииНоменклатуры));
	КонецЕсли;
	
	СоздаваемыеОбъекты = Новый ТаблицаЗначений;
	СоздаваемыеОбъекты.Колонки.Добавить("Идентификатор");
	СоздаваемыеОбъекты.Колонки.Добавить("НоменклатураПоставщика");
	СоздаваемыеОбъекты.Колонки.Добавить("СерияНоменклатуры");
	
	Для Каждого ЗагружаемаяСтрока Из ПерезагружаемыеДанные Цикл
		
		Идентификатор = ДополнительныеПараметры.ИдентификаторыЗагруженныхДанных.Получить(ЗагружаемаяСтрока.Идентификатор);
		
		Товар = ТоварыДокумента.НайтиСтроки(Новый Структура("НомерСтроки", Идентификатор))[0];
		
		Если ЕстьДанныеНоменклатурыПоставщика Тогда
			СопоставитьНоменклатуруПоставщика(ПараметрыСопоставления, ЗагружаемаяСтрока, Товар, СоздаваемыеОбъекты);
		КонецЕсли;
		
		Если ЕстьДанныеСерийНоменклатуры Тогда
			СопоставитьСериюНоменклатуры(ПараметрыСопоставления, ЗагружаемаяСтрока, Товар, СоздаваемыеОбъекты);
			Товар.СерияЗабракована = Справочники.СерииНоменклатуры.СерияЗабракована(Товар.СерияНоменклатуры);
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СоздаваемыеОбъекты, ДополнительныеПараметры.АдресСоздаваемыхОбъектов);
	
	МетаданныеТоваров = Метаданные.Документы.ПоступлениеТоваров.ТабличныеЧасти.Товары.Реквизиты;
	Если ЕстьДанныеКОбработке(СоздаваемыеОбъекты, "НоменклатураПоставщика") Тогда
		ДополнительныеПараметры.ПредставленияСоздаваемыхОбъектов.Добавить(МетаданныеТоваров.НоменклатураПоставщика.Представление());
	КонецЕсли;
	Если ЕстьДанныеКОбработке(СоздаваемыеОбъекты, "СерияНоменклатуры") Тогда
		ДополнительныеПараметры.ПредставленияСоздаваемыхОбъектов.Добавить(МетаданныеТоваров.СерияНоменклатуры.Представление());
	КонецЕсли;
	
КонецПроцедуры

// Создает значения колонок табличной части Товары
// если загружаемого объекта не было обнаружено в информационной базе.
//
// Параметры:
//  АдресСоздаваемыхОбъектов - Строка - адрес коллекции объектов,
//                             которых не было обнаружено и которые возможно создать в информационной базе.
//  ТоварыДокумента          - ДанныеФормыКоллекция - табличная часть документа для дозаполнения.
//
Процедура СоздатьЗагружаемыеОбъекты(АдресСоздаваемыхОбъектов, ТоварыДокумента) Экспорт
	
	СоздаваемыеОбъекты = ПолучитьИзВременногоХранилища(АдресСоздаваемыхОбъектов);
	
	Если СоздаваемыеОбъекты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СозданныеОбъекты = Новый Соответствие;
	
	Для Каждого СтрокаСоздаваемыхОбъектов Из СоздаваемыеОбъекты Цикл
		
		Товар = ТоварыДокумента.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаСоздаваемыхОбъектов.Идентификатор))[0];
		
		Для Каждого Колонка Из СоздаваемыеОбъекты.Колонки Цикл
			
			Если Колонка.Имя = "Идентификатор" Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеОбъекта = СтрокаСоздаваемыхОбъектов[Колонка.Имя];
			
			Если Не ЗначениеЗаполнено(ОписаниеОбъекта) Тогда
				Продолжить;
			КонецЕсли;
			
			КлючСозданногоОбъекта = ОбщегоНазначения.ЗначениеВСтрокуXML(ОписаниеОбъекта);
			СсылкаОбъекта = СозданныеОбъекты.Получить(КлючСозданногоОбъекта);
			Если СсылкаОбъекта = Неопределено Тогда
				
				Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Товар[Колонка.Имя]);
				НовыйОбъект = Менеджер.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(НовыйОбъект, ОписаниеОбъекта);
				
				Если НовыйОбъект.ПроверитьЗаполнение() Тогда
					
					НовыйОбъект.Записать();
					СсылкаОбъекта = НовыйОбъект.Ссылка;
					
					СозданныеОбъекты.Вставить(КлючСозданногоОбъекта, СсылкаОбъекта);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Товар[Колонка.Имя] = СсылкаОбъекта;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных информационной базы для сопоставления
#Область ПолучениеДанныхИнформационнойБазыДляСопоставления

Функция ДанныеСопоставленияПоШтрихкодам(Знач ЗагружаемыеШтрихкоды, Знач ПараметрыСопоставления)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШтрихкодыНоменклатуры.Штрихкод                                   КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура                               КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(НоменклатураПоставщиков.Ссылка,
	|		ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)))  КАК НоменклатураПоставщика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.НоменклатураКонтрагентов КАК НоменклатураПоставщиков
	|		ПО
	|			НоменклатураПоставщиков.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И НЕ НоменклатураПоставщиков.ПометкаУдаления
	|			И НоменклатураПоставщиков.Владелец = &ВладелецНоменклатурыПоставщика
	|			И &ИспользоватьНоменклатуруПоставщиков
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод В (&Штрихкоды)
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыНоменклатуры.Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИспользоватьНоменклатуруПоставщиков", ПараметрыСопоставления.ИспользоватьНоменклатуруПоставщиков);
	Запрос.УстановитьПараметр("ВладелецНоменклатурыПоставщика"     , ПараметрыСопоставления.ВладелецНоменклатурыПоставщика);
	Запрос.УстановитьПараметр("Штрихкоды"                          , ЗагружаемыеШтрихкоды);
	
	ДанныеПоШтрихкодам = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

Функция ДанныеСопоставленияНоменклатуры(ПараметрыСопоставления)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.Код                            КАК Код,
	|	Данные.Артикул                        КАК Артикул,
	|	Данные.Артикул                        КАК АртикулПоиск,
	|	Данные.Наименование                   КАК Наименование,
	|	Данные.Наименование                   КАК НаименованиеПоиск,
	|	Данные.НаименованиеПолное             КАК НаименованиеПолное,
	|	Данные.НаименованиеПолное             КАК НаименованиеПолноеПоиск,
	|	Данные.Ссылка                         КАК Номенклатура,
	|	НоменклатураПоставщиков.Артикул       КАК АртикулПоставщика,
	|	НоменклатураПоставщиков.Артикул       КАК АртикулПоставщикаПоиск,
	|	НоменклатураПоставщиков.Ссылка        КАК НоменклатураПоставщика,
	|	НоменклатураПоставщиков.Наименование  КАК НоменклатураПоставщикаПоиск
	|ИЗ
	|	Справочник.Номенклатура КАК Данные
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.НоменклатураКонтрагентов КАК НоменклатураПоставщиков
	|		ПО
	|			НоменклатураПоставщиков.Номенклатура = Данные.Ссылка
	|			И НЕ НоменклатураПоставщиков.ПометкаУдаления
	|			И НоменклатураПоставщиков.Владелец = &ВладелецНоменклатурыПоставщика
	|			И &ИспользоватьНоменклатуруПоставщиков
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВладелецНоменклатурыПоставщика"     , ПараметрыСопоставления.ВладелецНоменклатурыПоставщика);
	Запрос.УстановитьПараметр("ИспользоватьНоменклатуруПоставщиков", ПараметрыСопоставления.ИспользоватьНоменклатуруПоставщиков);
	
	ДанныеНоменклатуры = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекущаяСтрока Из ДанныеНоменклатуры Цикл
		ТекущаяСтрока.Код                         = КлючПоиска(ТекущаяСтрока.Код);
		ТекущаяСтрока.АртикулПоиск                = КлючПоиска(ТекущаяСтрока.АртикулПоиск);
		ТекущаяСтрока.НаименованиеПоиск           = КлючПоиска(ТекущаяСтрока.НаименованиеПоиск);
		ТекущаяСтрока.НаименованиеПолноеПоиск     = КлючПоиска(ТекущаяСтрока.НаименованиеПолноеПоиск);
		ТекущаяСтрока.АртикулПоставщикаПоиск      = КлючПоиска(ТекущаяСтрока.АртикулПоставщикаПоиск);
		ТекущаяСтрока.НоменклатураПоставщикаПоиск = КлючПоиска(ТекущаяСтрока.НоменклатураПоставщикаПоиск);
	КонецЦикла;
	
	Возврат ДанныеНоменклатуры;
	
КонецФункции

Функция ДанныеСопоставленияСтавкиНДС()
	
	ДанныеСтавкиНДС = Новый Соответствие;
	Для Каждого Значение Из Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления Цикл
		ДанныеСтавкиНДС.Вставить(КлючПоиска(Значение.Синоним), Перечисления.СтавкиНДС[Значение.Имя]);
	КонецЦикла;
	
	Возврат ДанныеСтавкиНДС;
	
КонецФункции

Функция ДанныеСопоставленияНоменклатурыПоставщика(ПараметрыСопоставления)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураПоставщиков.Артикул       КАК АртикулПоставщика,
	|	НоменклатураПоставщиков.Артикул       КАК АртикулПоставщикаПоиск,
	|	НоменклатураПоставщиков.Ссылка        КАК НоменклатураПоставщика,
	|	НоменклатураПоставщиков.Наименование  КАК НоменклатураПоставщикаПоиск
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураПоставщиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.Номенклатура КАК Данные
	|		ПО
	|			Данные.Ссылка = НоменклатураПоставщиков.Номенклатура
	|ГДЕ
	|	&ИспользоватьНоменклатуруПоставщиков
	|	И НЕ НоменклатураПоставщиков.ПометкаУдаления
	|	И НоменклатураПоставщиков.Владелец = &ВладелецНоменклатурыПоставщика
	|	И Данные.Ссылка ЕСТЬ NULL
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИспользоватьНоменклатуруПоставщиков", ПараметрыСопоставления.ИспользоватьНоменклатуруПоставщиков);
	Запрос.УстановитьПараметр("ВладелецНоменклатурыПоставщика"     , ПараметрыСопоставления.ВладелецНоменклатурыПоставщика);
	
	ДанныеНоменклатурыПоставщиков = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекущаяСтрока Из ДанныеНоменклатурыПоставщиков Цикл
		ТекущаяСтрока.АртикулПоставщикаПоиск = КлючПоиска(ТекущаяСтрока.АртикулПоставщикаПоиск);
		ТекущаяСтрока.НоменклатураПоставщикаПоиск = КлючПоиска(ТекущаяСтрока.НоменклатураПоставщикаПоиск);
	КонецЦикла;
	
	Возврат ДанныеНоменклатурыПоставщиков;
	
КонецФункции

Функция ДанныеСопоставленияСерийНоменклатуры(ВладельцыСерий)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеНоменклатуры.Ссылка                                                   КАК Владелец,
	|	СерииНоменклатуры.Ссылка                                                    КАК СерияНоменклатуры,
	|	СерииНоменклатуры.Номер                                                     КАК СерийныйНомер,
	|	СерииНоменклатуры.Номер                                                     КАК СерийныйНомерПоиск,
	|	ВЫБОР
	|		КОГДА ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии = ЗНАЧЕНИЕ(Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоЧасов) ТОГДА
	|			СерииНоменклатуры.ГоденДо
	|		КОГДА ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии = ЗНАЧЕНИЕ(Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоДней) ТОГДА
	|			НАЧАЛОПЕРИОДА(СерииНоменклатуры.ГоденДо, ДЕНЬ)
	|	КОНЕЦ                                                                       КАК СрокГодности,
	|	ЕСТЬNULL(СерииНоменклатуры.ПометкаУдаления, ИСТИНА)                         КАК ПометкаУдаления,
	|	ЕСТЬNULL(ВидНоменклатуры.ИспользоватьНомерСерии, ЛОЖЬ)                      КАК ИспользоватьНомерСерии,
	|	ЕСТЬNULL(ВидНоменклатуры.ИспользоватьСрокГодностиСерии, ЛОЖЬ)               КАК ИспользоватьСрокГодностиСерии,
	|	ЕСТЬNULL(ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии, НЕОПРЕДЕЛЕНО)  КАК ТочностьУказанияСрокаГодностиСерии
	|ИЗ
	|	Справочник.Номенклатура КАК ДанныеНоменклатуры
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО
	|			СерииНоменклатуры.Владелец = ДанныеНоменклатуры.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО
	|			ВидыНоменклатуры.Ссылка = ДанныеНоменклатуры.ВидНоменклатуры
	|ГДЕ
	|	ДанныеНоменклатуры.Ссылка В (&ВладельцыСерий)
	|	И ЕСТЬNULL(ВидНоменклатуры.ИспользоватьСерии, ЛОЖЬ)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВладельцыСерий", ВладельцыСерий);
	
	ДанныеСерийНоменклатуры = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекущаяСтрока Из ДанныеСерийНоменклатуры Цикл
		ТекущаяСтрока.СерийныйНомерПоиск = КлючПоиска(ТекущаяСтрока.СерийныйНомерПоиск);
	КонецЦикла;
	
	Возврат ДанныеСерийНоменклатуры;
	
КонецФункции

#КонецОбласти // ПолучениеДанныхИнформационнойБазыДляСопоставления

////////////////////////////////////////////////////////////////////////////////
// Сопоставление данных из файла и данных информационной базы
#Область СопоставлениеДанных

Процедура СопоставитьПоШтрихкоду(ПараметрыСопоставления, Знач ЗагружаемаяСтрока, Товар)
	
	СтрокаПоискаШтрихкод = КлючПоиска(ЗагружаемаяСтрока.Штрихкод);
	Если ПустаяСтрока(СтрокаПоискаШтрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоШтрихкодам = ПараметрыСопоставления.ДанныеПоШтрихкодам;
	
	КолонкиЗаполнения = "Номенклатура, НоменклатураПоставщика";
	Отбор = Новый Структура("Штрихкод", СтрокаПоискаШтрихкод);
	НайденныеСтроки = ДанныеПоШтрихкодам.Скопировать(Отбор, КолонкиЗаполнения);
	
	Товар.Штрихкод = СтрокаПоискаШтрихкод;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Товар, НайденныеСтроки[0]);
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьНоменклатуру(ПараметрыСопоставления, Знач ЗагружаемаяСтрока, Товар, СписокНеоднозначностей, ПодобраннаяНоменклатура)
	
	Если ЗначениеЗаполнено(Товар.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьНоменклатуруПоставщиков = ПараметрыСопоставления.ИспользоватьНоменклатуруПоставщиков;
	ДанныеНоменклатуры                  = ПараметрыСопоставления.ДанныеНоменклатуры;
	
	СтрокаПоискаАртикул      = КлючПоиска(ЗагружаемаяСтрока.Артикул);
	СтрокаПоискаНоменклатура = КлючПоиска(ЗагружаемаяСтрока.НоменклатураНаименование);
	
	НайденныеСтроки = Новый ТаблицаЗначений;
	КолонкиЗаполнения = "Номенклатура, НоменклатураПоставщика";
	Если ЗначениеЗаполнено(СтрокаПоискаАртикул) Тогда
		
		Отбор = Новый Структура("АртикулПоиск, НаименованиеПоиск", СтрокаПоискаАртикул, СтрокаПоискаНоменклатура);
		НайденныеСтроки = ДанныеНоменклатуры.Скопировать(Отбор, КолонкиЗаполнения);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Отбор = Новый Структура("АртикулПоиск, НаименованиеПолноеПоиск", СтрокаПоискаАртикул, СтрокаПоискаНоменклатура);
			НайденныеСтроки = ДанныеНоменклатуры.Скопировать(Отбор, КолонкиЗаполнения);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Отбор = Новый Структура("АртикулПоиск", СтрокаПоискаАртикул);
				НайденныеСтроки = ДанныеНоменклатуры.Скопировать(Отбор, КолонкиЗаполнения);
				Если ИспользоватьНоменклатуруПоставщиков И НайденныеСтроки.Количество() = 0 Тогда
					Отбор = Новый Структура("АртикулПоставщикаПоиск, НоменклатураПоставщикаПоиск", СтрокаПоискаАртикул, СтрокаПоискаНоменклатура);
					НайденныеСтроки = ДанныеНоменклатуры.Скопировать(Отбор, КолонкиЗаполнения);
					Если НайденныеСтроки.Количество() = 0 Тогда
						Отбор = Новый Структура("АртикулПоставщикаПоиск", СтрокаПоискаАртикул);
						НайденныеСтроки = ДанныеНоменклатуры.Скопировать(Отбор, КолонкиЗаполнения);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаПоискаНоменклатура) Тогда
		
		Отбор = Новый Структура("НаименованиеПоиск", СтрокаПоискаНоменклатура);
		НайденныеСтроки = ДанныеНоменклатуры.Скопировать(Отбор, КолонкиЗаполнения);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Отбор = Новый Структура("НаименованиеПолноеПоиск", СтрокаПоискаНоменклатура);
			НайденныеСтроки = ДанныеНоменклатуры.Скопировать(Отбор, КолонкиЗаполнения);
			Если ИспользоватьНоменклатуруПоставщиков И НайденныеСтроки.Количество() = 0 Тогда
				Отбор = Новый Структура("НоменклатураПоставщикаПоиск", СтрокаПоискаНоменклатура);
				НайденныеСтроки = ДанныеНоменклатуры.Скопировать(Отбор, КолонкиЗаполнения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() = 1 Тогда
		ЗаполнитьЗначенияСвойств(Товар, НайденныеСтроки[0]);
	ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
		
		ПохожаяНоменклатура = ВыгрузитьКолонку(НайденныеСтроки, "Номенклатура");
		Если ПохожаяНоменклатура.Количество() = 1 Тогда
			
			// Для одной номенклатуры создано несколько элементов справочника "Номенклатура поставщика".
			// Заполнение данными первой попавшейся найденной строки.
			ЗаполнитьЗначенияСвойств(Товар, НайденныеСтроки[0]);
			
		Иначе
			
			// Найдены различные элементы справочника номенклатура для загружаемой строки.
			// Добавление вариантов выбора номенклатуры для пользователя.
			// (см. процедуру "ЗаполнитьСписокНеоднозначностей").
			Неоднозначность = СписокНеоднозначностей.Добавить();
			Неоднозначность.Колонка       = "Номенклатура";
			Неоднозначность.Идентификатор = ЗагружаемаяСтрока.Идентификатор;
			
			ПараметрыПоиска = Новый Структура("Штрихкод, Артикул, НоменклатураНаименование");
			ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ЗагружаемаяСтрока);
			ПодобраннаяНоменклатура.Вставить(ОбщегоНазначения.ЗначениеВСтрокуXML(ПараметрыПоиска), ПохожаяНоменклатура);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьНоменклатуруПоставщика(ПараметрыСопоставления, Знач ЗагружаемаяСтрока, Товар, СоздаваемыеОбъекты = Неопределено)
	
	СтрокаПоискаАртикул      = КлючПоиска(ЗагружаемаяСтрока.Артикул);
	СтрокаПоискаНоменклатура = КлючПоиска(ЗагружаемаяСтрока.НоменклатураНаименование);
	
	Если ПустаяСтрока(СтрокаПоискаНоменклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНоменклатурыПоставщика = ПараметрыСопоставления.ДанныеНоменклатурыПоставщика;
	
	НайденныеСтроки = Новый Массив;
	Если ЗначениеЗаполнено(СтрокаПоискаАртикул) Тогда
		Отбор = Новый Структура("АртикулПоставщикаПоиск, НоменклатураПоставщикаПоиск", СтрокаПоискаАртикул, СтрокаПоискаНоменклатура);
		НайденныеСтроки = ДанныеНоменклатурыПоставщика.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Отбор = Новый Структура("АртикулПоставщикаПоиск", СтрокаПоискаАртикул);
			НайденныеСтроки = ДанныеНоменклатурыПоставщика.НайтиСтроки(Отбор);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтрокаПоискаНоменклатура) Тогда
		Отбор = Новый Структура("НоменклатураПоставщикаПоиск", СтрокаПоискаНоменклатура);
		НайденныеСтроки = ДанныеНоменклатурыПоставщика.НайтиСтроки(Отбор);
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Товар.НоменклатураПоставщика = НайденныеСтроки[0].НоменклатураПоставщика;
	КонецЕсли;
	
	Если СоздаваемыеОбъекты <> Неопределено
	   И Не ЗначениеЗаполнено(Товар.НоменклатураПоставщика)
	   И ПараметрыСопоставления.ПравоДобавленияНоменклатурыПоставщиков Тогда
		
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("Владелец"        , ПараметрыСопоставления.ВладелецНоменклатурыПоставщика);
		ОписаниеОбъекта.Вставить("Номенклатура"    , Товар.Номенклатура);
		ОписаниеОбъекта.Вставить("ЕдиницаИзмерения", Товар.ЕдиницаИзмерения);
		ОписаниеОбъекта.Вставить("Наименование"    , ЗагружаемаяСтрока.НоменклатураНаименование);
		ОписаниеОбъекта.Вставить("Артикул"         , ЗагружаемаяСтрока.Артикул);
		
		СтрокаСоздаваемыхОбъектов = СоздаваемыеОбъекты.Добавить();
		СтрокаСоздаваемыхОбъектов.Идентификатор          = Товар.НомерСтроки;
		СтрокаСоздаваемыхОбъектов.НоменклатураПоставщика = ОписаниеОбъекта;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьСериюНоменклатуры(ПараметрыСопоставления, Знач ЗагружаемаяСтрока, Товар, СоздаваемыеОбъекты = Неопределено)
	
	Если ЗначениеЗаполнено(Товар.СерияНоменклатуры)
	 Или Не ЗначениеЗаполнено(Товар.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	СерийныйНомер = СтрЗаменить(ЗагружаемаяСтрока.СерийныйНомер, " ", "");
	
	ИсходныйСрокГодности = СокрЛП(ЗагружаемаяСтрока.СрокГодности);
	ОписаниеДата = Новый ОписаниеТипов("Дата");
	СрокГодности = ОписаниеДата.ПривестиЗначение(ИсходныйСрокГодности);
	Если Не ЗначениеЗаполнено(СрокГодности) Тогда
		ЧастиСрокаГодности = СтрРазделить(ИсходныйСрокГодности, ". :", Ложь);
		Если ЧастиСрокаГодности.Количество() > 2 Тогда
			СрокГодности = ОписаниеДата.ПривестиЗначение(ЧастиСрокаГодности[2] + ЧастиСрокаГодности[1] + ЧастиСрокаГодности[0]);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(СерийныйНомер) И Не ЗначениеЗаполнено(СрокГодности) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Владелец", Товар.Номенклатура);
	НайденныеДанные = ПараметрыСопоставления.ДанныеСерийНоменклатуры.НайтиСтроки(Отбор);
	Если НайденныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементДанных = НайденныеДанные[0];
	ИспользоватьНомерСерии = ЭлементДанных.ИспользоватьНомерСерии;
	Если ИспользоватьНомерСерии И ПустаяСтрока(СерийныйНомер) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьСрокГодностиСерии = ЭлементДанных.ИспользоватьСрокГодностиСерии;
	Если ИспользоватьСрокГодностиСерии Тогда
		Если Не ЗначениеЗаполнено(СрокГодности) Тогда
			Возврат;
		КонецЕсли;
		Если ЭлементДанных.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней Тогда
			СрокГодности = НачалоДня(СрокГодности);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементДанных Из НайденныеДанные Цикл
		
		Если ЭлементДанных.ПометкаУдаления
		 Или ИспользоватьНомерСерии И ЭлементДанных.СерийныйНомерПоиск <> ВРег(СерийныйНомер)
		 Или ИспользоватьСрокГодностиСерии И ЭлементДанных.СрокГодности <> СрокГодности Тогда
			Продолжить;
		КонецЕсли;
		
		Товар.СерияНоменклатуры = ЭлементДанных.СерияНоменклатуры;
		Прервать;
		
	КонецЦикла;
	
	Если СоздаваемыеОбъекты <> Неопределено
	   И Не ЗначениеЗаполнено(Товар.СерияНоменклатуры)
	   И ПараметрыСопоставления.ПравоДобавленияСерииНоменклатуры Тогда
		
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("Владелец", Товар.Номенклатура);
		ОписаниеОбъекта.Вставить("Номер"   , ЗагружаемаяСтрока.СерийныйНомер);
		ОписаниеОбъекта.Вставить("ГоденДо" , СрокГодности);
		
		СтрокаСоздаваемыхОбъектов = СоздаваемыеОбъекты.Найти(Товар.НомерСтроки, "Идентификатор");
		Если СтрокаСоздаваемыхОбъектов = Неопределено Тогда
			СтрокаСоздаваемыхОбъектов = СоздаваемыеОбъекты.Добавить();
			СтрокаСоздаваемыхОбъектов.Идентификатор = Товар.НомерСтроки;
		КонецЕсли;
		
		СтрокаСоздаваемыхОбъектов.СерияНоменклатуры = ОписаниеОбъекта;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СопоставлениеДанных

////////////////////////////////////////////////////////////////////////////////
// Общие методы сопоставления данных
#Область ОбщиеМетодыСопоставленияДанных

Процедура ДополнитьПерезагружаемыеДанные(ПараметрыСопоставления, ЗагружаемаяСтрока, Товар, ПерезагружаемыеДанные)
	
	ОписаниеДанных = Новый Структура;
	
	Если ПараметрыСопоставления.ИспользоватьНоменклатуруПоставщиков И Не ЗначениеЗаполнено(Товар.Номенклатура) Тогда
		Если Не ПустаяСтрока(ЗагружаемаяСтрока.Артикул) Тогда
			ОписаниеДанных.Вставить("Артикул", ЗагружаемаяСтрока.Артикул);
		КонецЕсли;
		Если Не ПустаяСтрока(ЗагружаемаяСтрока.НоменклатураНаименование) Тогда
			ОписаниеДанных.Вставить("НоменклатураНаименование", ЗагружаемаяСтрока.НоменклатураНаименование);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ЗагружаемаяСтрока.СерийныйНомер) Тогда
		ОписаниеДанных.Вставить("СерийныйНомер", ЗагружаемаяСтрока.СерийныйНомер);
	КонецЕсли;
	Если Не ПустаяСтрока(ЗагружаемаяСтрока.СрокГодности) Тогда
		ОписаниеДанных.Вставить("СрокГодности", ЗагружаемаяСтрока.СрокГодности);
	КонецЕсли;
	
	Если ОписаниеДанных.Количество() > 0 Тогда
		СтрокаДогружаемыхДанных = ПерезагружаемыеДанные.Добавить();
		СтрокаДогружаемыхДанных.Идентификатор = Товар.Идентификатор;
		ЗаполнитьЗначенияСвойств(СтрокаДогружаемыхДанных, ОписаниеДанных);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСтрокиСНезаполненнымиПолями(Таблица, Знач Поля)
	
	Поля = СтрРазделить(Поля, ", ", Ложь);
	
	Граница = Таблица.Количество() - 1;
	Для Индекс = 0 По Граница Цикл
		СтрокаТаблицы = Таблица[Граница - Индекс];
		Для Каждого Поле Из Поля Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы[Поле]) Тогда
				Таблица.Удалить(СтрокаТаблицы);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьДанныеКОбработке(ПроверяемыйОбъект, Знач Поля)
	
	Поля = СтрРазделить(Поля, ", ", Ложь);
	
	Для Каждого СтрокаТаблицы Из ПроверяемыйОбъект Цикл
		Для Каждого Поле Из Поля Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы[Поле]) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыгрузитьКолонку(КоллекцияСтрок, ИмяКолонки)
	
	МассивЗначений = Новый Массив;
	
	УникальныеЗначения = Новый Соответствие;
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		Значение = СтрокаКоллекции[ИмяКолонки];
		Если Не ЗначениеЗаполнено(Значение) Или УникальныеЗначения[Значение] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивЗначений.Добавить(Значение);
		УникальныеЗначения.Вставить(Значение, Истина);
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

Функция КлючПоиска(СтрокаПоиска)
	
	Возврат ВРег(СтрЗаменить(СтрокаПоиска, " ", ""));
	
КонецФункции

#КонецОбласти // ОбщиеМетодыСопоставленияДанных

#КонецОбласти // ЗагрузкаИзФайла

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти // СтандартныеПодсистемы

////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ
#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьНалогообложениеНДСДанныеДляОбновления(Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваров
	|ГДЕ
	|	НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	И НЕ ПометкаУдаления
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ЗаполнитьНалогообложениеНДСОтложено(Параметры) Экспорт
	
	МетаданныеОбъекта = ПустаяСсылка().Метаданные();
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Документ = Выборка.Ссылка.ПолучитьОбъект();
			
			Если Документ = Неопределено
			 Или ЗначениеЗаполнено(Документ.НалогообложениеНДС) Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если Документ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Тогда
				Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			ИначеЕсли ЗначениеЗаполнено(Документ.ХозяйственнаяОперация) Тогда
				Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
			Иначе
				Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Документ);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,
				Выборка.Ссылка,
				ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти // ОбновлениеИнформационнойБазы

#КонецЕсли

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Склад)
	|	И ЗначениеРазрешено(ПодразделениеОрганизации)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти
