
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ПодборТоваровКлиент.ОбработатьПодборТоваровВДокументСписания(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодбор(ВыбранноеЗначение.АдресТоваровВХранилище, КэшированныеЗначения);
	ИначеЕсли ПодборТоваровКлиент.ОбработатьПодборТоваровПоОтбору(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодбор(ВыбранноеЗначение.АдресТоваровВХранилище, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОценкаПроизводительностиБольничнаяАптекаКлиент.НачатьЗамерПроведенияДокумента(Объект.Ссылка, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНДЫ ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПодбор(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ"              , Объект.Ссылка);
	ПараметрыПодбора.Вставить("Дата"                  , Объект.Дата);
	ПараметрыПодбора.Вставить("Организация"           , Объект.Организация);
	ПараметрыПодбора.Вставить("Склад"                 , Объект.Склад);
	ПараметрыПодбора.Вставить("ИсточникФинансирования", Объект.ИсточникФинансирования);
	ПараметрыПодбора.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ТоварыНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	Отбор = Новый Структура;
	ПользовательскийОтбор = Новый Массив;
	//Если ЗначениеЗаполнено(Объект.Склад) Тогда
	//	ПользовательскийОтбор.Добавить(Новый Структура("Ключ, Значение, Представление", "МестоХранения", Объект.МестоХранения, НСтр("ru = 'Показывать наличие на складе без учета постов'")));
	//КонецЕсли;
	
	Если Отбор.Количество() > 0 Тогда
		ПараметрыПодбора.Вставить("Отбор", Отбор);
	КонецЕсли;
	Если ПользовательскийОтбор.Количество() > 0 Тогда
		ПараметрыПодбора.Вставить("ПользовательскийОтбор", ПользовательскийОтбор);
	КонецЕсли;
	
	ПодборТоваровКлиент.ОткрытьПодборТоваровВДокументСписания(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтбору(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ"              , Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация"           , Объект.Организация);
	ПараметрыПодбора.Вставить("МестоХраненияОстатка"  , "Отделение");
	ПараметрыПодбора.Вставить("Склад"                 , Объект.Склад);
	ПараметрыПодбора.Вставить("ИсточникФинансирования", Объект.ИсточникФинансирования);
	ПодборТоваровКлиент.ОткрытьПодборТоваровПоОтбору(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	// ИнтеграцияСМобильнымПриложением
	Оповестить = Новый ОписаниеОповещения("ОбработатьЗагрузкуДанныхИзТСД", ЭтотОбъект);
	ИнтеграцияСМобильнымПриложениемКлиент.ВыполнитьКомандуЗагрузкиДанныхИзМобильногоПриложения(ЭтотОбъект, Команда, Оповестить);
	// Конец ИнтеграцияСМобильнымПриложением
	
	ОбщегоНазначенияБольничнаяАптекаКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры


#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Шапка
#Область Шапка


#КонецОбласти // Шапка

////////////////////////////////////////////////////////////////////////////////
// Список "Товары"
#Область Товары

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(Ид)
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Ид);   
	ТекущаяСтрока.ЕдиницаИзмерения=ТекущаяСтрока.Номенклатура.ОсновнаяЕдиницаУчета;
	Если ТекущаяСтрока.КоличествоВЕдиницахИзмерения=0 Тогда
		ТекущаяСтрока.КоличествоВЕдиницахИзмерения=1;
	КонецЕсли;                                                                        
	ТекущаяСтрока.Цена=ПолучитьЦенуНоменклатуры(ТекущаяСтрока.Номенклатура);
	ТекущаяСтрока.Сумма=ТекущаяСтрока.Цена*ТекущаяСтрока.КоличествоВЕдиницахИзмерения;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;   
	ТоварыНоменклатураПриИзмененииНаСервере(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	//Вставка Соколов
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена* ТекущаяСтрока.КоличествоВЕдиницахИзмерения;
	///Соколов
	ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти // Товары


#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	Склад = Объект.Склад;
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	ОсновнойСклад = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьСкладОтделенияПоУмолчанию(Неопределено, Объект.Отделение);
	
	Объект.Автор=ПараметрыСеанса.ТекущийПользователь;
	Объект.Ответственный=ПараметрыСеанса.ТекущийПользователь;
	Объект.Склад=сок_Сервер.ПолучитьСкладАптека();
	Объект.ИсточникФинансирования=Справочники.ИсточникиФинансирования.НайтиПоНаименованию("Платные");
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	//ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСерийНоменклатуры(ЭтотОбъект);
	//ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПартий(ЭтотОбъект);
	
	//ОбработкаТабличнойЧастиСервер.УстановитьОформлениеИсточниковФинансирования(ЭтотОбъект);
	//
	//ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(ЭтотОбъект, Новый Структура("Товары"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	//ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьСлужебныеРеквизиты(Объект.Товары);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Контроль несогласованных изменений
//#Область КонтрольНесогласованныхИзменений

//&НаКлиенте
//Процедура Подключаемый_ПриИзменении_КонтрольНесогласованныхИзменений(Элемент)
//	
//	КонтрольНесогласованныхИзмененийКлиент.ПриИзменении(ЭтотОбъект, Элемент);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_Нажатие_КонтрольНесогласованныхИзменений(Элемент)
//	
//	КонтрольНесогласованныхИзмененийКлиент.Нажатие(ЭтотОбъект, Элемент);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_Команды_КонтрольНесогласованныхИзменений(Команда)
//	
//	КонтрольНесогласованныхИзмененийКлиент.Команда(ЭтотОбъект, Команда);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ПередНачаломИзменения_КонтрольНесогласованныхИзменений(Элемент, Отказ)
//	
//	КонтрольНесогласованныхИзмененийКлиент.ПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ПередУдалением_КонтрольНесогласованныхИзменений(Элемент, Отказ)
//	
//	КонтрольНесогласованныхИзмененийКлиент.ПередУдалением(ЭтотОбъект, Элемент, Отказ);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ПередНачаломДобавления_КонтрольНесогласованныхИзменений(Элемент, Отказ, Копирование, Родитель, Группа)
//	
//	КонтрольНесогласованныхИзмененийКлиент.ПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
//	
//КонецПроцедуры

//&НаСервере
//Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
//	
//	// ЭлектроннаяПодпись
//	СписокЭлементов = ЭлектроннаяПодписьБольничнаяАптека.ИменаЭлементовПодписываемыхДанных(ЭтотОбъект);
//	// Конец ЭлектроннаяПодпись
//	
//	СписокЭлементов.Добавить(Элементы.ИсточникФинансирования.Имя);
//	
//	СписокЭлементов.Добавить(Элементы.ТоварыПолучитьВес.Имя);
//	
//	СписокЭлементов.Добавить(Элементы.ТоварыКомандаПодбор.Имя);
//	СписокЭлементов.Добавить(Элементы.ТоварыЗаполнитьИсточникФинансирования.Имя);
//	
//	СписокЭлементов.Добавить(Элементы.ТоварыПерезаполнитьНенайденныеШтрихкоды.Имя);
//	СписокЭлементов.Добавить(Элементы.ТоварыОбработатьНенайденныеШтрихкоды.Имя);
//	
//	// БуферОбменаТоварами
//	СписокЭлементов.Добавить(Элементы.ТоварыБуферОбменаВставить.Имя);
//	СписокЭлементов.Добавить(Элементы.ТоварыКонтекстноеМенюБуферОбменаВставить.Имя);
//	СписокЭлементов.Добавить(Элементы.ТоварыБуферОбмена.Имя);
//	// Конец БуферОбменаТоварами
//	
//	ИзмененияЗапрещены = Объект.ПодписанЭП;
//	КонтрольНесогласованныхИзменений.НастроитьКонтрольИзмененияДанных(ЭтотОбъект, СписокЭлементов, ИзмененияЗапрещены);
//	
//КонецПроцедуры

//#КонецОбласти // КонтрольНесогласованныхИзменений

////////////////////////////////////////////////////////////////////////////////
// Электронная подпись

////////////////////////////////////////////////////////////////////////////////
// Обработка штрихкодов
////////////////////////////////////////////////////////////////////////////////
// Обработка подбора
#Область ОбработкаПодбора

&НаСервере
Процедура ОбработатьПодбор(Знач АдресТоваровВХранилище, КэшированныеЗначения)
	
	СписокТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	
	Для Каждого Товар Из СписокТоваров Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар);
		ТоварыНоменклатураПриИзмененииНаСервере(НоваяСтрока.ПолучитьИдентификатор());
		
		//ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбработкаПодбора

////////////////////////////////////////////////////////////////////////////////
// Обработка изменения реквизитов

////////////////////////////////////////////////////////////////////////////////
// Буфер обмена товарами

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды



#КонецОбласти // СтандартныеПодсистемы

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	//Вставка Соколов
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена* ТекущаяСтрока.КоличествоВЕдиницахИзмерения;
	///Соколов
	ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
КонецПроцедуры


&НаСервере
Функция ПолучитьЦенуНоменклатуры(Номенклатура)
	Запрос=Новый	 Запрос;
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Запрос.Текст=
	"ВЫБРАТЬ
	|	НаценкиКСебестоимостиСрезПоследних.МинимальнаяСумма КАК МинимальнаяСумма,
	|	НаценкиКСебестоимостиСрезПоследних.МаксимальнаяСумма КАК МаксимальнаяСумма,
	|	НаценкиКСебестоимостиСрезПоследних.Наценка КАК Наценка
	|ИЗ
	|	РегистрСведений.НаценкиКСебестоимости.СрезПоследних КАК НаценкиКСебестоимостиСрезПоследних
	|ГДЕ
	|	НаценкиКСебестоимостиСрезПоследних.Использовать";
	Выборка = Запрос.Выполнить().Выгрузить();
	Выборка.Сортировать("МинимальнаяСумма, МаксимальнаяСумма");
	Цена=сок_Сервер.ПоследняяЦенаЗакупки(Номенклатура,ТекущаяДата());
	
	Для Каждого СтрВ из Выборка Цикл
		Если СтрВ.МинимальнаяСумма<=Цена И Цена<СтрВ.МаксимальнаяСумма Тогда
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Себестоимость: "+ЦенаВозврата+" наценка: "+Стр.Наценка);
			Цена=Окр(Цена*(1+СтрВ.Наценка/100),2);
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	Возврат Цена;
КонецФункции

&НаСервере
Процедура ЗаполнитьЦеныНаСервере()     
	Запрос=Новый	 Запрос;
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Запрос.Текст=
	"ВЫБРАТЬ
	|	НаценкиКСебестоимостиСрезПоследних.МинимальнаяСумма КАК МинимальнаяСумма,
	|	НаценкиКСебестоимостиСрезПоследних.МаксимальнаяСумма КАК МаксимальнаяСумма,
	|	НаценкиКСебестоимостиСрезПоследних.Наценка КАК Наценка
	|ИЗ
	|	РегистрСведений.НаценкиКСебестоимости.СрезПоследних КАК НаценкиКСебестоимостиСрезПоследних
	|ГДЕ
	|	НаценкиКСебестоимостиСрезПоследних.Использовать";
	Выборка = Запрос.Выполнить().Выгрузить();
	Выборка.Сортировать("МинимальнаяСумма, МаксимальнаяСумма");
	
	Для Каждого Стр из Объект.Товары Цикл
		Стр.Цена=сок_Сервер.ПоследняяЦенаЗакупки(Стр.Номенклатура,ТекущаяДата());
		
		ПринадлежностьКСпискам = АптечныеТовары.ПолучитьПринадлежностьКСпискам(Стр.номенклатура.ЭлементКАТ);
		Если НЕ ПринадлежностьКСпискам.ЖНВЛП = Перечисления.СпискиЖНВЛП.ПустаяСсылка() Тогда
			Стр.Цена=Окр(Стр.Цена*(1+5/100),2);
		Иначе	
			Стр.Цена=Окр(Стр.Цена*(1+30/100),2);
		Конецесли;	
		
		//Для Каждого СтрВ из Выборка Цикл
		//	Если СтрВ.МинимальнаяСумма<=Стр.Цена И Стр.Цена<СтрВ.МаксимальнаяСумма Тогда
		//		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Себестоимость: "+ЦенаВозврата+" наценка: "+Стр.Наценка);
		//		Стр.Цена=Окр(Стр.Цена*(1+СтрВ.Наценка/100),2);
		//		Прервать;
		//	КонецЕсли;
		//КонецЦикла;	
		Стр.Сумма=Стр.Цена*Стр.КоличествоВЕдиницахИзмерения;
	КонецЦикла;	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьЦены(Команда)
	ЗаполнитьЦеныНаСервере();
КонецПроцедуры

