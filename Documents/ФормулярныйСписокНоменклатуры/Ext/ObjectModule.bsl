#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
// 		НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
// 		Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыФормуляров[НовыйСтатус];
	
	Если ЗначениеНовогоСтатуса = Перечисления.СтатусыФормуляров.НеСогласован Тогда
		
		Если Согласован Тогда
			Согласован = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Согласован = Ложь;
	Статус = Перечисления.СтатусыФормуляров.Утвержден;
	
	ПодписанЭП = Ложь;
	ЭлектронныеПодписи.Очистить();
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ТорговоеНаименование");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ДействующиеВеществаМНН");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ФормаВыпуска");
	
	Если ДатаНачала > ДатаОкончания Тогда
		ТекстСообщения = НСтр("ru='Неверно указан период действия формуляра.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,,	Отказ);
	КонецЕсли;
	
	МетаданныеОбъекта = Метаданные();
	Для Каждого СтрокаЗаказа Из Товары Цикл
		
		Если Не (ЗначениеЗаполнено(СтрокаЗаказа.ДействующиеВеществаМНН)
				Или ЗначениеЗаполнено(СтрокаЗаказа.ТорговоеНаименование)
				Или ЗначениеЗаполнено(СтрокаЗаказа.Номенклатура)) Тогда
				
			ТекстСообщения = НСтр(
				"ru='Не заполнена колонка ""Действующие вещества (МНН)"" или ""Торговое наименование"" или ""Номенклатура"" в строке %НомерСтроки% списка ""%ИмяТабличнойЧасти%""'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаЗаказа.НомерСтроки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяТабличнойЧасти%", МетаданныеОбъекта.ТабличныеЧасти.Товары.Синоним);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект, 
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаЗаказа.НомерСтроки, "ДействующиеВеществаМНН"),
				,
				Отказ);
		КонецЕсли;
			
		Если (ЗначениеЗаполнено(СтрокаЗаказа.ДействующиеВеществаМНН)
				Или ЗначениеЗаполнено(СтрокаЗаказа.ТорговоеНаименование))
		   И Не ЗначениеЗаполнено(СтрокаЗаказа.ФормаВыпуска) Тогда
				
			ТекстСообщения = НСтр("ru='Не заполнена колонка ""Форма выпуска"" в строке %НомерСтроки% списка ""%ИмяТабличнойЧасти%""'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаЗаказа.НомерСтроки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяТабличнойЧасти%", МетаданныеОбъекта.ТабличныеЧасти.Товары.Синоним);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект, 
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаЗаказа.НомерСтроки, "ФормаВыпуска"),,
				Отказ);
				
		КонецЕсли;
			
	КонецЦикла;
	
	
	КлючевыеРеквизиты = Новый Массив;
	КлючевыеРеквизиты.Добавить("Номенклатура");
	КлючевыеРеквизиты.Добавить("ТорговоеНаименование");
	КлючевыеРеквизиты.Добавить("ДействующиеВеществаМНН");
	КлючевыеРеквизиты.Добавить("ФормаВыпуска");
	ОбработкаТабличнойЧастиСервер.ПроверитьНаличиеДублейСтрок(ЭтотОбъект, "Товары", КлючевыеРеквизиты, Отказ);
	
	ПроверитьДублиДокументов(Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	МассивСтатусовНеСогласован = Новый Массив();
	МассивСтатусовНеСогласован.Добавить(Перечисления.СтатусыФормуляров.НеСогласован);
	МассивСтатусовНеСогласован.Добавить(Перечисления.СтатусыФормуляров.НаСогласовании);
	
	ДокументСогласован = Согласован;
	
	ОбщегоНазначенияБольничнаяАптека.ИзменитьПризнакСогласованностиДокумента(
		ЭтотОбъект,
		РежимЗаписи,
		МассивСтатусовНеСогласован);
	
	// Установим дату согласования, если документ согласован
	Если Не ДокументСогласован И Согласован Тогда
		ДатаСогласования = ТекущаяДатаСеанса();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение документа
#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент()
	
	Автор = Пользователи.ТекущийПользователь();
	Ответственный = Пользователи.ТекущийПользователь();
	
	Организация = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	Если ОбщегоНазначенияБольничнаяАптека.ИспользоватьСтатусы(Ссылка) Тогда
		Статус = Перечисления.СтатусыФормуляров.НеСогласован;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

#КонецОбласти // ИнициализацияИЗаполнение

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

Процедура ПроверитьДублиДокументов(Отказ)
	
	МетаданныеОбъекта = Метаданные();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваров", Товары.Выгрузить());
	Запрос.УстановитьПараметр("Период", ДатаНачала);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.ДействующиеВеществаМНН,
	|	ТаблицаТоваров.ТорговоеНаименование,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.ФормаВыпуска
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ПериодыДействияФормуляра.Регистратор КАК Регистратор,
	|	ПериодыДействияФормуляра.НомерСтроки КАК НомерСтрокиРегистратора
	|ИЗ
	|	РегистрСведений.ПериодыДействияФормулярныхСписковЛекарственныхСредств КАК ПериодыДействияФормуляра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаОписанийОтборовНоменклатуры КАК АналитикаОписанийОтборовНоменклатуры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
	|			ПО (ТаблицаТоваров.ТорговоеНаименование = АналитикаОписанийОтборовНоменклатуры.ТорговоеНаименование)
	|				И (ТаблицаТоваров.Номенклатура = АналитикаОписанийОтборовНоменклатуры.Номенклатура)
	|				И (ТаблицаТоваров.ФормаВыпуска = АналитикаОписанийОтборовНоменклатуры.ФормаВыпуска)
	|				И (ТаблицаТоваров.ДействующиеВеществаМНН = АналитикаОписанийОтборовНоменклатуры.ДействующиеВеществаМНН)
	|		ПО ПериодыДействияФормуляра.Номенклатура = АналитикаОписанийОтборовНоменклатуры.КлючАналитики
	|ГДЕ
	|	ПериодыДействияФормуляра.Период = &Период
	|	И ПериодыДействияФормуляра.Регистратор <> &Регистратор
	|	И ПериодыДействияФормуляра.Организация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru='Строка %1 списка ""%2"" повторяет строку %3 из %4.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			Выборка.НомерСтроки,
			МетаданныеОбъекта.ТабличныеЧасти.Товары.Синоним,
			Выборка.НомерСтрокиРегистратора,
			Выборка.Регистратор);
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект, 
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "НомерСтроки"),
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СписокРегистровДляКонтроля() Экспорт
	
	РегистрыДляКонтроля = Новый Массив;
	Возврат РегистрыДляКонтроля;
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли