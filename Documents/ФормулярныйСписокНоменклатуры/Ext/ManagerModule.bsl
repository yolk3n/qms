#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Работа со статусами документа
#Область Статусы

// Проверяет возможность ручного изменения статуса
//
// Возвращаемое значение
//	Булево - Истина -ручное изменение разрешено
//
Функция РазрешеноРучноеИзменениеСтатуса() Экспорт
	
	Возврат Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыФормуляров")
	       Или Пользователи.РолиДоступны("РучноеИзменениеСтатусаФормулярныхСписковНоменклатуры");
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры
// 	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
// 	НовыйСтатус - Строка - Имя нового статуса
// 	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение
// 	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыФормуляров[НовыйСтатус];
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ПОМЕСТИТЬ втДокументы
	|ИЗ
	|	Документ.ФормулярныйСписокНоменклатуры КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|";
	
	ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ * ИЗ втДокументы КАК втДокументы";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры
// 	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
// 	НовыйСтатус - Перечисление - Новый статус
// 	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение
// 	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти // Статусы

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение
#Область Проведение

// Инициализирует таблицы значений, содержащие данные для проведения документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицыДвиженийДляПроведения(ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	ОсновныеДанныеДокумента = ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства);
	
	ИнициализироватьКлючиАналитикиОписанийОтборовНоменклатуры(ОсновныеДанныеДокумента);
	
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтТаблицаТовары());
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтТаблицаОтделения());
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтТаблицаАналитик());
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаПериодыДействияФормулярныхСписковЛекарственныхСредств(), Метаданные.РегистрыСведений.ПериодыДействияФормулярныхСписковЛекарственныхСредств);
	
	Запрос = Новый Запрос(ПроведениеБольничнаяАптека.ПолучитьТекстЗапросаДвижений(ДополнительныеСвойства, Регистры));
	
	Для Каждого ДанныеДокумента Из ОсновныеДанныеДокумента Цикл
		Запрос.УстановитьПараметр(ДанныеДокумента.Ключ, ДанныеДокумента.Значение);
	КонецЦикла;
	
	ПроведениеБольничнаяАптека.ЗаполнитьТаблицыДвижений(ДополнительныеСвойства, Запрос.ВыполнитьПакет(), Регистры);
	
КонецПроцедуры

Функция ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства)
	
	ЗапрашиваемыеДанные = Новый Структура;
	ЗапрашиваемыеДанные.Вставить("Ссылка");
	ЗапрашиваемыеДанные.Вставить("Период", "Дата");
	ЗапрашиваемыеДанные.Вставить("Организация");
	ЗапрашиваемыеДанные.Вставить("ДатаНачала");
	ЗапрашиваемыеДанные.Вставить("ДатаОкончания");
	ЗапрашиваемыеДанные.Вставить("Статус");
	
	ОсновныеДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроведениеБольничнаяАптека.ПолучитьСсылкуНаДокументДляПроведения(ДополнительныеСвойства),
		ЗапрашиваемыеДанные);
	
	Возврат ОсновныеДанныеДокумента;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаТовары()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|	&Организация                            КАК Организация,
	|	ТаблицаТовары.ДействующиеВеществаМНН    КАК ДействующиеВеществаМНН,
	|	ТаблицаТовары.ТорговоеНаименование      КАК ТорговоеНаименование,
	|	ТаблицаТовары.ФормаВыпуска              КАК ФормаВыпуска,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ДоступЗапрещен
	|			ТОГДА 3
	|		ИНАЧЕ 1
	|	КОНЕЦ                                   КАК ДоступЗапрещен,
	|	ТаблицаТовары.КлючСвязиОтделений        КАК КлючСвязиОтделений
	|ПОМЕСТИТЬ ВтТаблицаТовары
	|ИЗ
	|	Документ.ФормулярныйСписокНоменклатуры.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыФормуляров.Утвержден)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаОтделения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаОтделения.Отделение           КАК Отделение,
	|	ТаблицаОтделения.КлючСвязиОтделений  КАК КлючСвязиОтделений
	|ПОМЕСТИТЬ ВтТаблицаОтделения
	|ИЗ
	|	Документ.ФормулярныйСписокНоменклатуры.Отделения КАК ТаблицаОтделения
	|ГДЕ
	|	ТаблицаОтделения.Ссылка = &Ссылка
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыФормуляров.Утвержден)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаАналитик()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки         КАК НомерСтроки,
	|	&ДатаНачала                       КАК Период,
	|	&ДатаОкончания                    КАК ПериодЗавершения,
	|	ТаблицаТовары.Организация         КАК Организация,
	|	АналитикаОтборов.КлючАналитики    КАК Номенклатура,
	|	ТаблицаТовары.ДоступЗапрещен      КАК ДоступЗапрещен,
	|	ТаблицаТовары.КлючСвязиОтделений  КАК КлючСвязиОтделений
	|ПОМЕСТИТЬ ВтТаблицаАналитик
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаОписанийОтборовНоменклатуры КАК АналитикаОтборов
	|		ПО
	|			ТаблицаТовары.ДействующиеВеществаМНН = АналитикаОтборов.ДействующиеВеществаМНН
	|			И ТаблицаТовары.ТорговоеНаименование = АналитикаОтборов.ТорговоеНаименование
	|			И ТаблицаТовары.ФормаВыпуска         = АналитикаОтборов.ФормаВыпуска
	|			И ТаблицаТовары.Номенклатура         = АналитикаОтборов.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПериодыДействияФормулярныхСписковЛекарственныхСредств()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                                  КАК НомерСтроки,
	|	ТаблицаТовары.Период                                       КАК Период,
	|	ТаблицаТовары.ПериодЗавершения                             КАК ПериодЗавершения,
	|	ТаблицаТовары.Организация                                  КАК Организация,
	|	ТаблицаТовары.Номенклатура                                 КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО                                               КАК Отделение,
	|	ТаблицаТовары.ДоступЗапрещен                               КАК ЗначениеДоступа,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыДействияФормуляра.Действует)  КАК СтатусДействия
	|ИЗ
	|	ВтТаблицаАналитик КАК ТаблицаТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                                  КАК НомерСтроки,
	|	ТаблицаТовары.Период                                       КАК Период,
	|	ТаблицаТовары.ПериодЗавершения                             КАК ПериодЗавершения,
	|	ТаблицаТовары.Организация                                  КАК Организация,
	|	ТаблицаТовары.Номенклатура                                 КАК Номенклатура,
	|	ТаблицаОтделения.Отделение                                 КАК Отделение,
	|	ТаблицаТовары.ДоступЗапрещен                               КАК ЗначениеДоступа,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыДействияФормуляра.Действует)  КАК СтатусДействия
	|ИЗ
	|	ВтТаблицаАналитик КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаОтделения КАК ТаблицаОтделения
	|		ПО
	|			ТаблицаТовары.КлючСвязиОтделений = ТаблицаОтделения.КлючСвязиОтделений
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Отделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиОписанийОтборовНоменклатуры(Реквизиты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.ДействующиеВеществаМНН КАК ДействующиеВеществаМНН,
	|	ТаблицаТовары.ТорговоеНаименование КАК ТорговоеНаименование,
	|	ТаблицаТовары.ФормаВыпуска КАК ФормаВыпуска,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втТаблицаАналитики
	|ИЗ
	|	Документ.ФормулярныйСписокНоменклатуры.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ТорговоеНаименование,
	|	ДействующиеВеществаМНН,
	|	ФормаВыпуска
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
	Запрос.Выполнить();
	
	Справочники.КлючиАналитикиОписанийОтборовНоменклатуры.ИнициализироватьКлючиАналитики(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

#КонецОбласти // Проведение

////////////////////////////////////////////////////////////////////////////////
// ЭЛЕКТРОННАЯ ПОДПИСЬ
#Область ЭлектроннаяПодпись

// Возвращает описание ключевых полей для подписи.
//
// Возвращаемое значение:
//  Структура - описание ключевых полей см. ЭлектроннаяПодписьБольничнаяАптека.ПустоеОписаниеКлючевыхПолей().
//
Функция ОписаниеКлючевыхПолей(Версия = Неопределено) Экспорт
	
	МетаданныеОбъекта = ПустаяСсылка().Метаданные();
	
	ОписаниеКлючевыхПолей = ЭлектроннаяПодписьБольничнаяАптека.ПустоеОписаниеКлючевыхПолей();
	
	ПоляШапки = МетаданныеОбъекта.Реквизиты;
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьОписаниеРеквизита(ОписаниеКлючевыхПолей, ПоляШапки.Организация.Имя);
	
	ЭлектроннаяПодписьБольничнаяАптека.ВключитьФайлыВОписаниеКлючевыхПолей(ОписаниеКлючевыхПолей);
	
	// Товары
	ИмяТаблицы = МетаданныеОбъекта.ТабличныеЧасти.Товары.Имя;
	ТаблицаТовары = ЭлектроннаяПодписьБольничнаяАптека.ДобавитьПустоеОписаниеТабличнойЧасти(ОписаниеКлючевыхПолей, ИмяТаблицы);
	
	ПоляТовары = МетаданныеОбъекта.ТабличныеЧасти.Товары.Реквизиты;
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьГруппируемоеПолеТабличнойЧасти(ТаблицаТовары, ПоляТовары.Номенклатура.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьГруппируемоеПолеТабличнойЧасти(ТаблицаТовары, ПоляТовары.ТорговоеНаименование.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьГруппируемоеПолеТабличнойЧасти(ТаблицаТовары, ПоляТовары.ДействующиеВеществаМНН.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьГруппируемоеПолеТабличнойЧасти(ТаблицаТовары, ПоляТовары.ФормаВыпуска.Имя);
	
	// Отделения
	ИмяТаблицы =  МетаданныеОбъекта.ТабличныеЧасти.Отделения.Имя;
	ТаблицаПациентов = ЭлектроннаяПодписьБольничнаяАптека.ДобавитьПустоеОписаниеТабличнойЧасти(ОписаниеКлючевыхПолей, ИмяТаблицы);
	
	ПоляПациенты = МетаданныеОбъекта.ТабличныеЧасти.Отделения.Реквизиты;
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьГруппируемоеПолеТабличнойЧасти(ТаблицаПациентов, ПоляПациенты.Отделение.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьГруппируемоеПолеТабличнойЧасти(ТаблицаПациентов, ПоляПациенты.КлючСвязиОтделений.Имя);
	
	Возврат ОписаниеКлючевыхПолей;
	
КонецФункции

#КонецОбласти // ЭлектроннаяПодпись

////////////////////////////////////////////////////////////////////////////////
// Печать
#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандыПечати(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыПечати);
	
КонецПроцедуры

// Возвращает список доступных печатных форм документа
//
Функция ДоступныеПечатныеФормы() Экспорт
	
	ПечатныеФормы = УправлениеПечатьюБольничнаяАптека.СоздатьКоллекциюДоступныхПечатныхФорм();
	
	Возврат ПечатныеФормы;
	
КонецФункции

#КонецОбласти // Печать

////////////////////////////////////////////////////////////////////////////////
// Команды формы
#Область КомандыФормы

// Заполняет список команд ввода на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииБольничнаяАптека.ДобавитьКомандыСозданияНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	Команда = БизнесПроцессы.ОбработкаВнутреннегоДокумента.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы);
	Команда.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьБизнесПроцессыФормуляров.Имя;
	Команда.Представление = НСтр("ru = 'Согласовать и исполнить'");
	Команда.Порядок = "10";
	Команда.ПараметрыФормы.ЗакрытьФормуВладельцаПоИмени = МетаданныеДокумента.Формы.ФормаДокумента.ПолноеИмя();
	
	Команда = БизнесПроцессы.Согласование.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы);
	Команда.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьБизнесПроцессыФормуляров.Имя;
	Команда.Порядок = "20";
	Команда.ПараметрыФормы.ЗакрытьФормуВладельцаПоИмени = МетаданныеДокумента.Формы.ФормаДокумента.ПолноеИмя();
	
	Команда = БизнесПроцессы.Утверждение.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы);
	Команда.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ИспользоватьБизнесПроцессыФормуляров.Имя;
	Команда.Порядок = "30";
	Команда.ПараметрыФормы.ЗакрытьФормуВладельцаПоИмени = МетаданныеДокумента.Формы.ФормаДокумента.ПолноеИмя();
	
КонецПроцедуры

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	МенюОтчетыБольничнаяАптека.ДобавитьОбщиеКоманды(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыОтчетов, НастройкиФормы);
	
КонецПроцедуры

#КонецОбласти // КомандыФормы

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти // СтандартныеПодсистемы

#КонецЕсли