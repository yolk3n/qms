
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("ДанныеФормы") Тогда
		ВызватьИсключение НСтр("ru = 'Обработка используется только вместе с объектами информационной базы'");
	КонецЕсли;
	
	ДанныеФормы = Параметры.ДанныеФормы;
	
	Организация = ДанныеФормы.Организация;
	Номенклатура = ДанныеФормы.Номенклатура;
	ТорговоеНаименование = ДанныеФормы.ТорговоеНаименование;
	ДействующиеВеществаМНН = ДанныеФормы.ДействующиеВеществаМНН;
	ФормаВыпуска = ДанныеФормы.ФормаВыпуска;
	
	ДоступЗапрещен = ДанныеФормы.ДоступЗапрещен;
	
	Заголовок = НСтр("ru = 'Ввести отделения для строки формуляра'");
	
	Для каждого ТекОтделение Из ДанныеФормы.МассивОтделений Цикл
		ЗаполнитьЗначенияСвойств(Отделения.Добавить(), ТекОтделение);
	КонецЦикла;
	
	ОбновитьПредставлениеИспользованияФормуляра(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Список отделений был изменен.'") + Символы.ПС + НСтр("ru = 'Перенести изменения в документ?'");
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы, ТекстВопроса, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	СохранитьВводОтделений();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	СохранитьВводОтделений();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНОТВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЗначениеДоступаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ДоступЗапрещен <> (ВыбранноеЗначение = "ЗапрещеноВсем") Тогда
		Модифицированность = Истина;
		ДоступЗапрещен = Не ДоступЗапрещен;
		ОбновитьПредставлениеИспользованияФормуляра(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтделенияПриИзменении(Элемент)
	
	ОбновитьПредставлениеИспользованияФормуляра(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СохранитьВводОтделений()
	
	Если Не ПроверитьКорректностьЗаполненияОтделений() Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтделений = Новый Массив();
	
	ЗаполняемыеРеквизиты = "Отделение";
	
	Для Каждого СтрокаОтделения Из Отделения Цикл
		
		ДанныеОтделения = Новый Структура(ЗаполняемыеРеквизиты);
		ЗаполнитьЗначенияСвойств(ДанныеОтделения, СтрокаОтделения, ЗаполняемыеРеквизиты);
		
		МассивОтделений.Добавить(ДанныеОтделения);
		
	КонецЦикла;
	
	Значение = Новый Структура;
	Значение.Вставить("ДоступЗапрещен", ДоступЗапрещен);
	Значение.Вставить("ИзмененныеДанные", МассивОтделений);
	
	Модифицированность = Ложь;
	Закрыть(Значение);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьКорректностьЗаполненияОтделений()
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Для каждого СтрокаОтделение Из Отделения Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаОтделение.Отделение) Тогда
			
			ТекстСообщения = НСтр("ru='Не заполнена колонка ""Отделение"" в строке %НомерСтроки% списка ""%ИмяТабличнойЧасти%""'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Отделения.Индекс(СтрокаОтделение) + 1);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяТабличнойЧасти%", "Отделения");
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстСообщения,
				, 
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Отделения", Отделения.Индекс(СтрокаОтделение) + 1, "Отделение"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НомерСтроки = Отделения.Количество() - 1;
	
	Пока НЕ Отказ И НомерСтроки >= 0 Цикл
		
		ТекущаяСтрока = Отделения.Получить(НомерСтроки);
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = Отделения.НайтиСтроки(Новый Структура("Отделение", ТекущаяСтрока.Отделение));
		Если НайденныеЗначения.Количество() > 1 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Значение повторяется.'"),
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Отделения", Отделения.Индекс(ТекущаяСтрока) + 1, "Отделение"),
				,
				Отказ);
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки - 1;
		
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеИспользованияФормуляра(Контекст)
	
	КоличествоОтделений = Контекст.Отделения.Количество();
	
	Если КоличествоОтделений Тогда
		
		ПрописьЧисла = ЧислоПрописью(КоличествоОтделений,, НСтр("ru = ',,,,,,,,0'"));
		ПрописьЧислаИПредмета = ЧислоПрописью(
			КоличествоОтделений,
			,
			НСтр("ru = '-го отделения,-х отделений,-и отделений,,,,,,0'"));
		ЧислоИПредмет = СтрЗаменить(ПрописьЧислаИПредмета, ПрописьЧисла, Формат(КоличествоОтделений, "ЧГ="));
		Контекст.ЗначениеДоступа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(Контекст.ДоступЗапрещен,
				НСтр("ru = 'Запрещено всем, кроме %1'"),
				НСтр("ru = 'Доступно всем, кроме %1'") ),
			ЧислоИПредмет);
		
	Иначе
		Контекст.ЗначениеДоступа = ?(Контекст.ДоступЗапрещен, НСтр("ru='Запрещено всем'"), НСтр("ru='Доступно всем'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
