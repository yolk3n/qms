
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриСозданииНаСервере(ЭтотОбъект);
	
	// БуферОбменаТоварами
	УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, Не ОбработкаТабличнойЧастиСервер.БуферОбменаПустой() И ФлагДоступностиПоСтатусуСервер());
	// Конец БуферОбменаТоварами
	
	// ЭлектроннаяПодпись
	ЭлектроннаяПодписьБольничнаяАптека.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаЭлектронныеПодписи);
	// Конец ЭлектроннаяПодпись
	
	ИспользоватьСтатусыДокумента = ОбщегоНазначенияБольничнаяАптека.ИспользоватьСтатусы(Объект.Ссылка);
	РазрешеноРучноеИзменениеСтатуса = ОбщегоНазначенияБольничнаяАптека.РазрешеноРучноеИзменениеСтатусаОбъекта(Объект.Ссылка);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Статус",
		"Доступность",
		РазрешеноРучноеИзменениеСтатуса);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетВОтделениях") Тогда
		
		СкрываемыеЭлементы = Новый Массив;
		СкрываемыеЭлементы.Добавить("ТоварыВвестиОтделения");
		СкрываемыеЭлементы.Добавить("ТоварыИспользование");
		
		ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементовФормы(
			Элементы,
			СкрываемыеЭлементы,
			"Видимость",
			Ложь);
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Если Объект.Проведен Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыФормуляров.ПустаяСсылка();
	КонецЕсли;
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаВыбора" Тогда
		ДобавитьНоменклатуруВФормуляр(ВыбранноеЗначение);
	ИначеЕсли ПодборТоваровКлиент.ОбработатьПодборОписанийТоваров(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодбор(ВыбранноеЗначение.АдресТоваровВХранилище);
	Иначе
		// БуферОбменаТоварами
		Если ОбработкаТабличнойЧастиКлиент.НужноОбработатьВставкуИзБуфераОбмена(ЭтотОбъект, ИсточникВыбора) Тогда
			ВставитьТоварыИзБуфераОбмена(ВыбранноеЗначение);
		КонецЕсли;
		// Конец БуферОбменаТоварами
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// БуферОбменаТоварами
	Если ОбработкаТабличнойЧастиКлиент.ОбрабатыватьОповещениеОтБуфераОбмена(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ДоступностьБуфераОбмена = ОбработкаТабличнойЧастиКлиент.ОпределитьДоступностьВставкиИзБуфераОбменаПоСобытию(ИмяСобытия);
		УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, ДоступностьБуфераОбмена);
	КонецЕсли;
	// Конец БуферОбменаТоварами
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОценкаПроизводительностиБольничнаяАптекаКлиент.НачатьЗамерПроведенияДокумента(Объект.Ссылка, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыФормуляров.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	ЗаполнитьПредставлениеИспользованияФормуляра();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Изменить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьЗавершение", ЭтотОбъект);
	МожноИзменитьДокумент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗавершение(МожноИзменить, ДополнительныеПараметры) Экспорт
	
	Если МожноИзменить = Истина Тогда
		
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		
		УстановитьДоступностьЭлементовПоСтатусуСервер();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды Шапки
#Область Шапка

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала    = Объект.ДатаНачала;
	Диалог.Период.ДатаОкончания = Объект.ДатаОкончания;
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		
		Объект.ДатаНачала    = Период.ДатаНачала;
		Объект.ДатаОкончания = Период.ДатаОкончания;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Шапка

////////////////////////////////////////////////////////////////////////////////
// Команды для списка "Товары"
#Область Товары

&НаКлиенте
Процедура КомандаПодбор(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыПодбора.Вставить("МножественныйВыбор", Истина);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ТоварыНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборФОЛС(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыПодбора.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ТоварыНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	ПодборТоваровКлиент.ОткрытьПодборОписанийТоваров(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОтделения(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТолькоПросмотрЭлементов =
		ТолькоПросмотр
		Или Объект.Согласован
		Или Объект.ПодписанЭП
		Или (СтатусДокумента = Объект.Статус
			И СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыФормуляров.НаСогласовании"));
	
	Оповещение = Новый ОписаниеОповещения("ВвестиОтделенияЗавершение", ЭтотОбъект);
	ВзаимодействиеСПользователемКлиент.ВвестиОтделенияВТЧФормуляра(
		ЭтотОбъект,
		Объект.Отделения,
		Элементы.Товары.ТекущиеДанные,
		Объект.Организация,
		ТолькоПросмотрЭлементов,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОтделенияЗавершение(ТекущаяСтрока, ДополнительныеПараметры) Экспорт
	
	ОбновитьПредставлениеИспользованияФормуляра(ЭтотОбъект, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	ОбщегоНазначенияБольничнаяАптекаКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти // Товары

////////////////////////////////////////////////////////////////////////////////
// Команды для списка "ЭП"
#Область ЭП

&НаКлиенте
Процедура Подписать(Команда)
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПодписатьДокументЗавершение", ЭтотОбъект);
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ПодписатьОбъектВФорме(ЭтотОбъект, ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ОткрытьПодпись(Команда)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ОткрытьПодпись(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_Проверить(Команда)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ПроверитьПодписи(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ПроверитьВсе(Команда)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ПроверитьПодписи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_УдалитьПодпись(Команда)
	
	УдалитьПодписи();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_СохранитьПодпись(Команда)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.СохранитьПодпись(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ОбновитьСписокПодписей(Команда)
	
	ЗаполнитьСписокПодписей();
	
	Коллекция = ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ТаблицаПодписей(ЭтотОбъект).ПолучитьЭлементы();
	Элемент = ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ЭлементТаблицаПодписей(ЭтотОбъект);
	Для Каждого Строка Из Коллекция Цикл
		Элемент.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ЭП

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Шапка
#Область Шапка

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Объект.Согласован
	   И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыФормуляров.НеСогласован") Тогда
		Объект.Согласован = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

#КонецОбласти // Шапка

////////////////////////////////////////////////////////////////////////////////
// Список "Товары"
#Область Товары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ТолькоПросмотрЭлементов =
		ТолькоПросмотр
		Или Объект.Согласован
		Или Объект.ПодписанЭП
		Или (СтатусДокумента = Объект.Статус
			И СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыФормуляров.НаСогласовании"));
		
	Если Поле.Имя = Элементы.ТоварыИспользование.Имя Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВвестиОтделенияЗавершение", ЭтотОбъект);
		ВзаимодействиеСПользователемКлиент.ВвестиОтделенияВТЧФормуляра(
			ЭтотОбъект,
			Объект.Отделения,
			Элементы.Товары.ТекущиеДанные,
			Объект.Организация,
			ТолькоПросмотрЭлементов,
			Оповещение);
		
	Иначе
		
		ОбрабатываемыеПоля = "Номенклатура, ТорговоеНаименование, ДействующиеВеществаМНН, ФормаВыпуска";
		ПараметрыВыбораФОЛС = Новый Структура(ОбрабатываемыеПоля);
		ЗаполнитьЗначенияСвойств(ПараметрыВыбораФОЛС, ТекущаяСтрока);
		ПараметрыВыбораФОЛС.Вставить("ТолькоПросмотр", ТолькоПросмотрЭлементов);
		ПараметрыВыбораФОЛС.Вставить("НеЗапрашиватьЕдиницуИзмерения", Истина);
		
		Если ТолькоПросмотрЭлементов Тогда
			ОткрытьФорму("Обработка.ПодборПоФормальнымОписаниямЛекарственныхСредств.Форма.ФормаВыбора", ПараметрыВыбораФОЛС, ЭтотОбъект);
		Иначе
			Оповещение = Новый ОписаниеОповещения("ТоварыВыборЗавершение", ЭтотОбъект, ТекущаяСтрока);
			ОткрытьФорму("Обработка.ПодборПоФормальнымОписаниямЛекарственныхСредств.Форма.ФормаВыбора", ПараметрыВыбораФОЛС, ЭтотОбъект,,,, Оповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыборЗавершение(ДанныеВыбора, ТекущаяСтрока) Экспорт
	
	Если ТипЗнч(ДанныеВыбора) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеВыбора);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти // Товары

////////////////////////////////////////////////////////////////////////////////
// Список "Электронные подписи"
#Область ЭП

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ОткрытьПодпись(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ПриАктивизацииСтроки(Элемент)
	
	ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.УстановитьДоступностьКомандСпискаПодписей(ЭтотОбъект, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлектронныеПодписи_ПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ЭлектроннаяПодписьБольничнаяАптекаКлиент.ОткрытьПодпись(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ЭП

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	ЗаполнитьПредставлениеИспользованияФормуляра();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЗаказыСервер.УстановитьОформлениеОтбораНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	ДоступностьЭлементов = ФлагДоступностиПоСтатусуСервер();
	
	МассивЭлементов = Новый Массив();
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("ДатаНачала");
	МассивЭлементов.Добавить("ДатаОкончания");
	МассивЭлементов.Добавить("Организация");
	
	// Элементы управления, связанные с товарами
	МассивЭлементов.Добавить("Товары");
	
	МассивЭлементов.Добавить("УстановитьИнтервал");
	
	// Элементы управления, связанные с товарами
	МассивЭлементов.Добавить("ТоварыКомандаПодбор");
	МассивЭлементов.Добавить("ТоварыКомандаПодборФОЛС");
	
	// БуферОбменаТоварами
	МассивЭлементов.Добавить("ТоварыБуферОбменаВставить");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюБуферОбменаВставить");
	МассивЭлементов.Добавить("ТоварыБуферОбмена");
	// Конец БуферОбменаТоварами
	
	// ЭлектроннаяПодпись
	СписокЭлементов = ЭлектроннаяПодписьБольничнаяАптека.ИменаЭлементовПодписываемыхДанных(ЭтотОбъект);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭлементов, СписокЭлементов, Истина);
	// Конец ЭлектроннаяПодпись
	
	КонтрольНесогласованныхИзменений.НастроитьКонтрольИзмененияДанных(ЭтотОбъект, МассивЭлементов, Не ДоступностьЭлементов);
	
	Элементы.Изменить.Доступность = Не ДоступностьЭлементов;
	
КонецПроцедуры

&НаСервере
Функция ФлагДоступностиПоСтатусуСервер()
	
	ДоступностьЭлементов = Истина;
	
	Если Объект.ПодписанЭП Тогда
		ДоступностьЭлементов = Ложь;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыФормуляров.НеСогласован Тогда
		ДоступностьЭлементов = Истина;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыФормуляров.НаСогласовании Тогда
		ДоступностьЭлементов = Не Объект.Проведен;
	Иначе
		ДоступностьЭлементов = Не Объект.Согласован;
	КонецЕсли;
	
	Возврат ДоступностьЭлементов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПредставлениеИспользованияФормуляра()
	
	Для каждого СтрокаФормуляра Из Объект.Товары Цикл
		ОбновитьПредставлениеИспользованияФормуляра(ЭтотОбъект, СтрокаФормуляра);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеИспользованияФормуляра(Контекст, ТекущаяСтрока)
	
	КоличествоОтделений = Контекст.Объект.Отделения.НайтиСтроки(
		Новый Структура("КлючСвязиОтделений", ТекущаяСтрока.КлючСвязиОтделений)).Количество();
	
	Если КоличествоОтделений Тогда
		
		ПрописьЧисла = ЧислоПрописью(КоличествоОтделений,, НСтр("ru = ',,,,,,,,0'"));
		ПрописьЧислаИПредмета = ЧислоПрописью(
			КоличествоОтделений,
			,
			НСтр("ru = '-го отделения,-х отделений,-и отделений,,,,,,0'"));
		ЧислоИПредмет = СтрЗаменить(ПрописьЧислаИПредмета, ПрописьЧисла, Формат(КоличествоОтделений, "ЧГ="));
		ТекущаяСтрока.Использование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ТекущаяСтрока.ДоступЗапрещен,
				НСтр("ru = 'Запрещено всем, кроме %1'"),
				НСтр("ru = 'Доступно всем, кроме %1'") ),
			ЧислоИПредмет);
		
	Иначе
		
		ТекущаяСтрока.Использование = ?(ТекущаяСтрока.ДоступЗапрещен, НСтр("ru='Запрещено всем'"), НСтр("ru='Доступно всем'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МожноИзменитьДокумент(Оповещение)
	
	Если Объект.ПодписанЭП Тогда
		ТекстСообщения = НСтр(
			"ru='Документ подписан электронной подписью.
			|Изменение документа запрещено.
			|Чтобы изменить документ нужно удалить подписи документа.
			|'");
		ПоказатьПредупреждение(, ТекстСообщения);
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "";
	Если ИспользоватьСтатусыДокумента И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыФормуляров.НеСогласован") Тогда
		Если Не РазрешеноРучноеИзменениеСтатуса Тогда
			ТекстВопроса = ТекстВопроса + НСтр("ru='Документ будет переведен в статус не согласован.'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		ОповещениеПродолжения = Новый ОписаниеОповещения("МожноИзменитьДокументЗавершение", ЭтотОбъект, Оповещение);
		ПоказатьВопрос(ОповещениеПродолжения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.Отмена);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция МожноИзменитьДокументЗавершение(Ответ, Оповещение) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Если ИспользоватьСтатусыДокумента Тогда
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыФормуляров.НеСогласован");
		КонецЕсли;
		Модифицированность = Истина;
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Контроль несогласованных изменений
#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура Подключаемый_ПриИзменении_КонтрольНесогласованныхИзменений(Элемент)
	
	КонтрольНесогласованныхИзмененийКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_КонтрольНесогласованныхИзменений(Элемент)
	
	КонтрольНесогласованныхИзмененийКлиент.Нажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команды_КонтрольНесогласованныхИзменений(Команда)
	
	КонтрольНесогласованныхИзмененийКлиент.Команда(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_КонтрольНесогласованныхИзменений(Элемент, Отказ)
	
	КонтрольНесогласованныхИзмененийКлиент.ПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_КонтрольНесогласованныхИзменений(Элемент, Отказ)
	
	КонтрольНесогласованныхИзмененийКлиент.ПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_КонтрольНесогласованныхИзменений(Элемент, Отказ, Копирование, Родитель, Группа)
	
	КонтрольНесогласованныхИзмененийКлиент.ПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

#КонецОбласти // КонтрольНесогласованныхИзменений

////////////////////////////////////////////////////////////////////////////////
// Электронная подпись
#Область ЭлектроннаяПодпись

&НаКлиенте
Процедура ПодписатьДокументЗавершение(Результат, НеИспользуется) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Прочитать();
	ЗаполнитьСписокПодписей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодписей()
	
	ЭлектроннаяПодписьБольничнаяАптека.ЗаполнитьПодписи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписи()
	
	Если ЭлектроннаяПодписьБольничнаяАптекаКлиентСервер.ЭлементТаблицаПодписей(ЭтотОбъект).ВыделенныеСтроки.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Удалить выделенные подписи?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выделенную подпись?'");
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УдалитьПодписиЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписиЗавершение(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПодписиИОбновитьСписок();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодписиИОбновитьСписок()
	
	ЭлектроннаяПодписьБольничнаяАптека.УдалитьПодписиИОбновитьСписок(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ЭлектроннаяПодпись

////////////////////////////////////////////////////////////////////////////////
// Обработка подбора
#Область ОбработкаПодбора

&НаСервере
Процедура ДобавитьНоменклатуруВФормуляр(Номенклатура);
	
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ВыбранныеПозиции = Новый Массив();
		ВыбранныеПозиции.Добавить(Номенклатура);
	Иначе
		ВыбранныеПозиции = Номенклатура;
	КонецЕсли;
	
	Для Каждого ВыбраннаяПозиция Из ВыбранныеПозиции Цикл
		
		Строки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ВыбраннаяПозиция));
		Если Строки.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура = ВыбраннаяПозиция;
		
		ОбновитьПредставлениеИспользованияФормуляра(ЭтотОбъект, НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодбор(АдресТоваровВХранилище)
	
	СписокТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	Отбор.Вставить("ТорговоеНаименование", Справочники.ТорговыеНаименования.ПустаяСсылка());
	Отбор.Вставить("ДействующиеВеществаМНН", Справочники.ДействующиеВеществаМНН.ПустаяСсылка());
	Отбор.Вставить("ФормаВыпуска", Справочники.ФормыВыпуска.ПустаяСсылка());
	
	Для Каждого СтрокаТовара Из СписокТоваров Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТовара);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
		
		ОбновитьПредставлениеИспользованияФормуляра(ЭтотОбъект, НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбработкаПодбора

////////////////////////////////////////////////////////////////////////////////
// Буфер обмена товарами
#Область БуферОбменаТоварами

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ТаблицаТовары = Элементы.Товары;
	Если ОбработкаТабличнойЧастиКлиент.ВозможноКопированиеСтрок(ТаблицаТовары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиВБуферОбмена(ТаблицаТовары.Имя);
		ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(ТаблицаТовары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ВставитьТоварыИзБуфераОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБуфераОбмена(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ОткрытьБуферОбмена(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиВБуферОбмена(Знач ИмяТабличнойЧасти)
	
	ОбработкаТабличнойЧастиСервер.СкопироватьВыделенныеСтрокиВБуферОбмена(Объект, Объект[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары = Неопределено)
	
	ТаблицаТовары = Объект.Товары;
	КоличествоТоваровДоВставки = ТаблицаТовары.Количество();
	
	ВставитьТоварыИзБуфераОбменаСервер(ВыбранныеТовары);
	
	КоличествоВставленных = ТаблицаТовары.Количество() - КоличествоТоваровДоВставки;
	ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьТоварыИзБуфераОбменаСервер(Знач ВыбранныеТовары = Неопределено)
	
	Если ВыбранныеТовары = Неопределено Тогда
		Товары = ОбработкаТабличнойЧастиСервер.ПолучитьТекущиеТоварыИзБуфераОбмена();
	Иначе
		Товары = ОбработкаТабличнойЧастиСервер.ПолучитьВыбранныеТоварыИзБуфераОбмена(ВыбранныеТовары);
	КонецЕсли;
	
	Если Товары = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из Товары Цикл
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		ОбновитьПредставлениеИспользованияФормуляра(ЭтотОбъект, ТекущаяСтрока);
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ЕстьДанныеВБуфереОбмена)
	
	Элементы = Форма.Элементы;
	Элементы.ТоварыБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыКонтекстноеМенюБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыБуферОбмена.Доступность = ЕстьДанныеВБуфереОбмена;
	
КонецПроцедуры

#КонецОбласти // БуферОбменаТоварами

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти // СтандартныеПодсистемы
