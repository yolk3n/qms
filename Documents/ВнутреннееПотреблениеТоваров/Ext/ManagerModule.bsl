#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Имена реквизитов, от значений которых зависят параметры учета номенклатуры
//
// Возвращаемое значение:
//   Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУчетаНоменклатуры() Экспорт
	
	Возврат "Склад";
	
КонецФункции

// Возвращает параметры учета для номенклатуры, указанной в документе
//
// Параметры
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
// Возвращаемое значение
//   Структура - Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУчетаНоменклатуры
//
Функция ПараметрыУчетаНоменклатуры(Объект) Экспорт
	
	ПараметрыУчета = ЗапасыСервер.ПараметрыУчетаНоменклатуры();
	ПараметрыУчета.ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ПараметрыУчетаНаСкладе = СкладыСервер.ПараметрыУчетаНоменклатуры(Объект.Склад);
	ПараметрыУчета.ИспользоватьСерии = ПараметрыУчетаНаСкладе.ИспользоватьСерииНоменклатуры;
	ПараметрыУчета.ИспользоватьПартии = ПараметрыУчетаНаСкладе.ИспользоватьПартии;
	ПараметрыУчета.Склад = Объект.Склад;
	
	Возврат ПараметрыУчета;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания параметров учета номенклатуры
//
// Параметры
//   ПараметрыУчетаНоменклатуры - Структура - состав полей задается в функции ЗапасыСервер.ПараметрыУчетаНоменклатуры
//
// Возвращаемое значение
//   Строка - текст запроса
//
Функция ТекстЗапросаРасчетаСтатусовУчетаНоменклатуры(ПараметрыУчетаНоменклатуры) Экспорт
	
	Возврат ЗапасыСервер.ТекстЗапросаРасчетаСтатусовУчетаНоменклатуры(ПараметрыУчетаНоменклатуры);
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Склад)
	|	И ЗначениеРазрешено(ПодразделениеОрганизации)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение
#Область Проведение

// Инициализирует таблицы значений, содержащие данные для проведения документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицыДвиженийДляПроведения(ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	ОсновныеДанныеДокумента = ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства);
	
	ИнициализироватьКлючиАналитикиВидаУчета(ОсновныеДанныеДокумента);
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(ОсновныеДанныеДокумента);
	
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтТаблицаТовары());
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаТоварыНаСкладах(), Метаданные.РегистрыНакопления.ТоварыНаСкладах);
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаСвободныеОстатки(), Метаданные.РегистрыНакопления.СвободныеОстатки);
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтАналитика());
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаСебестоимостьТоваров(), Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаДвиженияНоменклатураДоходыРасходы(), Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы);
	
	Запрос = Новый Запрос(ПроведениеБольничнаяАптека.ПолучитьТекстЗапросаДвижений(ДополнительныеСвойства, Регистры));
	
	Для Каждого ДанныеДокумента Из ОсновныеДанныеДокумента Цикл
		Запрос.УстановитьПараметр(ДанныеДокумента.Ключ, ДанныеДокумента.Значение);
	КонецЦикла;
	
	ПроведениеБольничнаяАптека.ЗаполнитьТаблицыДвижений(ДополнительныеСвойства, Запрос.ВыполнитьПакет(), Регистры);
	
КонецПроцедуры

Функция ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства)
	
	ЗапрашиваемыеДанные = Новый Структура;
	ЗапрашиваемыеДанные.Вставить("Ссылка");
	ЗапрашиваемыеДанные.Вставить("Период", "Дата");
	ЗапрашиваемыеДанные.Вставить("Организация");
	ЗапрашиваемыеДанные.Вставить("Статус");
	ЗапрашиваемыеДанные.Вставить("Склад");
	ЗапрашиваемыеДанные.Вставить("ПодразделениеОрганизации");
	ЗапрашиваемыеДанные.Вставить("ХозяйственнаяОперация");
	
	ОсновныеДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроведениеБольничнаяАптека.ПолучитьСсылкуНаДокументДляПроведения(ДополнительныеСвойства),
		ЗапрашиваемыеДанные);
	
	ОсновныеДанныеДокумента.Вставить("ВестиУчетПоИсточникамФинансирования", ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования"));
	ОсновныеДанныеДокумента.Вставить("ИспользоватьМестаХранения", ПолучитьФункциональнуюОпцию("ИспользоватьМестаХранения", Новый Структура("Склад", ОсновныеДанныеДокумента.Склад)));
	
	ЗапасыСервер.ПриПодготовкеОсновныхДанныхДляПроведения(ДополнительныеСвойства, ОсновныеДанныеДокумента);
	
	Возврат ОсновныеДанныеДокумента;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаТовары()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                               КАК НомерСтроки,
	|	&Организация                                            КАК Организация,
	|	ТаблицаТовары.СтатьяРасходов                            КАК СтатьяРасходов,
	|	ТаблицаТовары.АналитикаРасходов                         КАК АналитикаРасходов,
	|	ВЫБОР
	|		КОГДА &ИспользоватьМестаХранения
	|			ТОГДА ТаблицаТовары.МестоХранения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.МестаХранения.ПустаяСсылка)
	|	КОНЕЦ                                                   КАК МестоХранения,
	|	ТаблицаТовары.Номенклатура                              КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (&СтатусУчетПоСериям, &СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                   КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия                                    КАК Партия,
	|	ВЫБОР
	|		КОГДА &ВестиУчетПоИсточникамФинансирования
	|			ТОГДА ТаблицаТовары.ИсточникФинансирования
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ИсточникиФинансирования.ПустаяСсылка)
	|	КОНЕЦ                                                   КАК ИсточникФинансирования,
	|	ТаблицаТовары.Количество                                КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (&СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                   КАК СерияНоменклатурыДляСебестоимости,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартий В (&СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                   КАК ПартияДляСебестоимости
	|ПОМЕСТИТЬ ВтТаблицаТовары
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТоварыНаСкладах()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Организация               КАК Организация,
	|	&Склад                                  КАК Склад,
	|	ТаблицаТовары.МестоХранения             КАК МестоХранения,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры         КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия                    КАК Партия,
	|	ТаблицаТовары.ИсточникФинансирования    КАК ИсточникФинансирования,
	|	ТаблицаТовары.Количество                КАК Количество
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|
	|ГДЕ
	|	&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихПотребленийТоваров.Отгружено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСвободныеОстатки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1                                       КАК Порядок,
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Организация               КАК Организация,
	|	&Склад                                  КАК Склад,
	|	ТаблицаТовары.МестоХранения             КАК МестоХранения,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры         КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия                    КАК Партия,
	|	ТаблицаТовары.ИсточникФинансирования    КАК ИсточникФинансирования,
	|	0                                       КАК ВНаличии,
	|	ТаблицаТовары.Количество                КАК ВРезервеСоСклада
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихПотребленийТоваров.КОтгрузке)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                       КАК Порядок,
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Организация               КАК Организация,
	|	&Склад                                  КАК Склад,
	|	ТаблицаТовары.МестоХранения             КАК МестоХранения,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры         КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия                    КАК Партия,
	|	ТаблицаТовары.ИсточникФинансирования    КАК ИсточникФинансирования,
	|	ТаблицаТовары.Количество                КАК ВНаличии,
	|	0                                       КАК ВРезервеСоСклада
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихПотребленийТоваров.Отгружено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтАналитика()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.Номенклатура                       КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатурыДляСебестоимости  КАК СерияНоменклатуры,
	|	ТаблицаТовары.ПартияДляСебестоимости             КАК Партия,
	|	ТаблицаТовары.ИсточникФинансирования             КАК ИсточникФинансирования,
	|	АналитикаУчетаНоменклатуры.КлючАналитики         КАК АналитикаУчетаНоменклатуры,
	|	АналитикаВидаУчета.КлючАналитики                 КАК АналитикаВидаУчета,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)  КАК РазделУчета
	|ПОМЕСТИТЬ ВтАналитика
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|		ПО
	|			ТаблицаТовары.Номенклатура                        = АналитикаУчетаНоменклатуры.Номенклатура
	|			И ТаблицаТовары.СерияНоменклатурыДляСебестоимости = АналитикаУчетаНоменклатуры.СерияНоменклатуры
	|			И ТаблицаТовары.ПартияДляСебестоимости            = АналитикаУчетаНоменклатуры.Партия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчета
	|		ПО
	|			АналитикаВидаУчета.Организация                = ТаблицаТовары.Организация
	|			И АналитикаВидаУчета.Склад                    = &Склад
	|			И АналитикаВидаУчета.ИсточникФинансирования   = ТаблицаТовары.ИсточникФинансирования
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	АналитикаВидаУчета,
	|	РазделУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСебестоимостьТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                         КАК НомерСтроки,
	|	&Период                                           КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)            КАК ВидДвижения,
	|	Аналитика.АналитикаУчетаНоменклатуры              КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.АналитикаВидаУчета                      КАК АналитикаВидаУчета,
	|	Аналитика.РазделУчета                             КАК РазделУчета,
	|	ТаблицаТовары.Количество                          КАК Количество,
	|	&ХозяйственнаяОперация                            КАК ХозяйственнаяОперация,
	|	&Ссылка                                           КАК ДокументДвижения,
	|	ТаблицаТовары.СтатьяРасходов                      КАК СтатьяРасходов,
	|	ТаблицаТовары.АналитикаРасходов                   КАК АналитикаРасходов
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			ВтАналитика КАК Аналитика
	|		ПО
	|			ТаблицаТовары.Номенклатура                        = Аналитика.Номенклатура
	|			И ТаблицаТовары.СерияНоменклатурыДляСебестоимости = Аналитика.СерияНоменклатуры
	|			И ТаблицаТовары.ПартияДляСебестоимости            = Аналитика.Партия
	|			И ТаблицаТовары.ИсточникФинансирования            = Аналитика.ИсточникФинансирования
	|ГДЕ
	|	&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихПотребленийТоваров.Отгружено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияНоменклатураДоходыРасходы()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                         КАК НомерСтроки,
	|	&Период                                           КАК Период,
	|	&ХозяйственнаяОперация                            КАК ХозяйственнаяОперация,
	|	Аналитика.АналитикаВидаУчета                      КАК АналитикаВидаУчета,
	|	Аналитика.АналитикаУчетаНоменклатуры              КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.СтатьяРасходов                      КАК СтатьяДоходовРасходов,
	|	ТаблицаТовары.АналитикаРасходов                   КАК АналитикаРасходов,
	|	ТаблицаТовары.Количество                          КАК Количество,
	|	&Ссылка                                           КАК ДокументДвижения
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			ВтАналитика КАК Аналитика
	|		ПО
	|			ТаблицаТовары.Номенклатура                        = Аналитика.Номенклатура
	|			И ТаблицаТовары.СерияНоменклатурыДляСебестоимости = Аналитика.СерияНоменклатуры
	|			И ТаблицаТовары.ПартияДляСебестоимости            = Аналитика.Партия
	|			И ТаблицаТовары.ИсточникФинансирования            = Аналитика.ИсточникФинансирования
	|ГДЕ
	|	&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихПотребленийТоваров.Отгружено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Реквизиты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (&СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартий В (&СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия
	|ПОМЕСТИТЬ втТаблицаАналитики
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СерияНоменклатуры,
	|	Партия
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусУчетСебестоимостиПоСериям", Реквизиты.СтатусУчетСебестоимостиПоСериям);
	Запрос.УстановитьПараметр("СтатусУчетСебестоимостиПоПартиям", Реквизиты.СтатусУчетСебестоимостиПоПартиям);
	Запрос.Выполнить();
	
	Справочники.КлючиАналитикиУчетаНоменклатуры.ИнициализироватьКлючиАналитики(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиВидаУчета(Реквизиты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация КАК Организация,
	|	&Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА &ВестиУчетПоИсточникамФинансирования
	|			ТОГДА ТаблицаТовары.ИсточникФинансирования
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ИсточникиФинансирования.ПустаяСсылка)
	|	КОНЕЦ КАК ИсточникФинансирования
	|ПОМЕСТИТЬ втТаблицаАналитики
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Склад,
	|	ИсточникФинансирования
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Склад", Реквизиты.Склад);
	Запрос.УстановитьПараметр("ВестиУчетПоИсточникамФинансирования", Реквизиты.ВестиУчетПоИсточникамФинансирования);
	Запрос.Выполнить();
	
	Справочники.КлючиАналитикиВидаУчета.ИнициализироватьКлючиАналитики(Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

#КонецОбласти // Проведение

////////////////////////////////////////////////////////////////////////////////
// Электронная подпись
#Область ЭлектроннаяПодпись

// Возвращает описание ключевых полей для подписи.
//
// Возвращаемое значение:
//  Структура - описание ключевых полей см. ЭлектроннаяПодписьБольничнаяАптека.ПустоеОписаниеКлючевыхПолей().
//
Функция ОписаниеКлючевыхПолей(Версия = Неопределено) Экспорт
	
	МетаданныеОбъекта = ПустаяСсылка().Метаданные();
	
	ОписаниеКлючевыхПолей = ЭлектроннаяПодписьБольничнаяАптека.ПустоеОписаниеКлючевыхПолей();
	
	СтандартныеРеквизиты = МетаданныеОбъекта.СтандартныеРеквизиты;
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьОписаниеРеквизита(ОписаниеКлючевыхПолей, СтандартныеРеквизиты.Номер.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьОписаниеРеквизита(ОписаниеКлючевыхПолей, СтандартныеРеквизиты.Дата.Имя);
	
	ПоляШапки = МетаданныеОбъекта.Реквизиты;
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьОписаниеРеквизита(ОписаниеКлючевыхПолей, ПоляШапки.Организация.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьОписаниеРеквизита(ОписаниеКлючевыхПолей, ПоляШапки.ПодразделениеОрганизации.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьОписаниеРеквизита(ОписаниеКлючевыхПолей, ПоляШапки.Склад.Имя);
	
	// Товары
	ИмяТаблицы = МетаданныеОбъекта.ТабличныеЧасти.Товары.Имя;
	ТаблицаТовары = ЭлектроннаяПодписьБольничнаяАптека.ДобавитьПустоеОписаниеТабличнойЧасти(ОписаниеКлючевыхПолей, ИмяТаблицы);
	
	ПоляТовары = МетаданныеОбъекта.ТабличныеЧасти.Товары.Реквизиты;
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьГруппируемоеПолеТабличнойЧасти(ТаблицаТовары, ПоляТовары.Номенклатура.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьГруппируемоеПолеТабличнойЧасти(ТаблицаТовары, ПоляТовары.СерияНоменклатуры.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьГруппируемоеПолеТабличнойЧасти(ТаблицаТовары, ПоляТовары.Партия.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьГруппируемоеПолеТабличнойЧасти(ТаблицаТовары, ПоляТовары.ИсточникФинансирования.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьГруппируемоеПолеТабличнойЧасти(ТаблицаТовары, ПоляТовары.ЕдиницаИзмерения.Имя);
	
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьПолеРесурсаТабличнойЧасти(ТаблицаТовары, ПоляТовары.КоличествоВЕдиницахИзмерения.Имя);
	ЭлектроннаяПодписьБольничнаяАптека.ДобавитьПолеРесурсаТабличнойЧасти(ТаблицаТовары, ПоляТовары.Количество.Имя);
	
	Возврат ОписаниеКлючевыхПолей;
	
КонецФункции

#КонецОбласти // ЭлектроннаяПодпись

////////////////////////////////////////////////////////////////////////////////
// Печать
#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандыПечати(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыПечати);
	
КонецПроцедуры

// Возвращает список доступных печатных форм документа
//
Функция ДоступныеПечатныеФормы() Экспорт
	
	ПечатныеФормы = УправлениеПечатьюБольничнаяАптека.СоздатьКоллекциюДоступныхПечатныхФорм();
	
	Обработки.ПечатьВедомостьВыдачиНФА.ДобавитьПечатнуюФорму(ПечатныеФормы);
	Обработки.ПечатьВедомостьВыдачиНФА_0504210.ДобавитьПечатнуюФорму(ПечатныеФормы);
	Обработки.ПечатьАктСписания0504230.ДобавитьПечатнуюФорму(ПечатныеФормы);
	Обработки.ПечатьАктСписания0510460.ДобавитьПечатнуюФорму(ПечатныеФормы);
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	МенеджерПечати      = МетаданныеДокумента.ПолноеИмя();
	МетаданныеМакетов   = МетаданныеДокумента.Макеты;
	
	ПечатнаяФорма = УправлениеПечатьюБольничнаяАптека.ДобавитьПечатнуюФорму(ПечатныеФормы, "ВедомостьНаСписание", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_Накладная.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_Накладная);
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	ПечатнаяФорма = УправлениеПечатьюБольничнаяАптека.ДобавитьПечатнуюФорму(ПечатныеФормы, "АктСписанияТоваров", МенеджерПечати);
	ПечатнаяФорма.Представление = НСтр("ru='Акт списания товаров (форма АП-20)'");
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_АктСписанияТоваров);
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция ПечатьВедомостьНаСписание(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_Накладная);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	МассивВыводимыхОбластей = Новый Массив;
	
	ВалютаПечати = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ПолучатьЦены");
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати);
	
	Шапка = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабличныйДокумент, Макет);
		
		// Получение параметров для заполнения
		ПараметрыИзШапки = ПолучитьПараметрыШапкиВедомостьНаСписание(Шапка);
		
		// Вывод области Заголовок
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Заголовок", ПараметрыИзШапки);
		
		// Вывод области РеквизитыШапки
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "РеквизитыШапки", ПараметрыИзШапки);
		
		// Вывод области ШапкаТаблицы
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "ШапкаТаблицы", ПараметрыИзШапки);
		
		// Инициализация итогов по документу
		ПараметрыИтого = Новый Структура;
		ПараметрыИтого.Вставить("Сумма", 0);
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		ВыборкаПоДокументам.Сбросить();
		ПараметрыПоиска = Новый Структура("Документ", Шапка.Ссылка);
		Если ВыборкаПоДокументам.НайтиСледующий(ПараметрыПоиска) Тогда
			ВыборкаСтрокТовары = ВыборкаПоДокументам.Выбрать();
			
			КлючиПараметров = ФормированиеПечатныхФормБольничнаяАптека.ПолучитьИменаКолонокТаблицы(ВыборкаСтрокТовары);
			
			КоличествоСтрок = ВыборкаСтрокТовары.Количество();
			НомерСтроки = 0;
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				НомерСтроки = НомерСтроки + 1;
				
				ДанныеСтроки = Новый Структура(КлючиПараметров);
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыборкаСтрокТовары);
				
				ТоварНаименование = ОбщегоНазначенияБольничнаяАптека.ПолучитьПредставлениеНоменклатурыДляПечати(
					ВыборкаСтрокТовары.ТоварНаименование,
					ВыборкаСтрокТовары.СерияНоменклатуры,
					ВыборкаСтрокТовары.Партия);
				
				ДанныеСтроки.Вставить("ТоварНаименование" , ТоварНаименование);
				
				ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
				Если НомерСтроки = КоличествоСтрок Тогда
					МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Итого"));
					МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Подписи"));
				КонецЕсли;
				
				Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицы"));
				КонецЕсли;
				
				// Вывод области Строка
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				
				ФормированиеПечатныхФормБольничнаяАптека.РассчитатьИтоги(ДанныеСтроки, ПараметрыИтого);
				
			КонецЦикла;
		КонецЕсли;
		
		// Вывод области Итого
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Итого", ПараметрыИтого);
		
		// Вывод области СуммаПрописью
		ФорматированнаяСумма = ОбщегоНазначенияБольничнаяАптека.ФорматСумм(ПараметрыИтого.Сумма, ВалютаПечати);
		ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Всего выпущено наименований %1, на сумму %2'"), КоличествоСтрок, ФорматированнаяСумма);
		
		ПараметрыСуммаПрописью = Новый Структура;
		ПараметрыСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		ПараметрыСуммаПрописью.Вставить("СуммаПрописью" , РаботаСКурсамиВалют.СформироватьСуммуПрописью(ПараметрыИтого.Сумма, ВалютаПечати));
		
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "СуммаПрописью", ПараметрыСуммаПрописью);
		
		// Вывод области Подписи
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Подписи", ПараметрыИзШапки);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиВедомостьНаСписание(Шапка)
	
	КлючиПараметров = ФормированиеПечатныхФормБольничнаяАптека.ПолучитьИменаКолонокТаблицы(Шапка);
	
	Параметры = Новый Структура(КлючиПараметров);
	ЗаполнитьЗначенияСвойств(Параметры, Шапка);
	
	// Данные заголовка
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента);
	ШаблонТекстЗаголовка = НСтр("ru = 'Списание товаров № %1 от %2'");
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонТекстЗаголовка, НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"));
	
	СведенияОбОрганизации    = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ОрганизацияПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	
	Параметры.Вставить("ТекстЗаголовка"          , ТекстЗаголовка);
	Параметры.Вставить("ОрганизацияПредставление", ОрганизацияПредставление);
	
	// Данные шапки таблицы
	Параметры.Вставить("ИмяКолонкиКодов", НСтр("ru = 'Код'"));
	
	// Данные подписей документа
	МОЛ = РегистрыСведений.МатериальноОтветственныеЛица.ПолучитьДанныеОтветственного(Шапка.Склад, Шапка.ДатаДокумента);
	
	Параметры.Вставить("Отпустил", МОЛ.ФИО);
	
	Возврат Параметры;
	
КонецФункции

Функция ПечатьАктСписанияТоваров(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.АвтоМасштаб = Истина;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВнутреннееПотреблениеТоваров_АктСписанияТоваров";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВнутреннееПотреблениеТоваров.ПФ_MXL_АктСписанияТоваров");
	
	ВалютаПечати = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ПолучатьЦены");
	ДанныеДляПечати = ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати);
	
	Шапка = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		ОбластьШапка = Макет.ПолучитьОбласть("Заголовок");
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабДокумент, Макет, ОбластьШапка);
		
		ОбластьШапка.Параметры.Заполнить(Шапка);
		ОбластьШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
		ОбластьШапка.Параметры.Дата = Формат(Шапка.ДатаДокумента, "ДЛФ=D");
		ОбластьШапка.Параметры.Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента);
		ТабДокумент.Вывести(ОбластьШапка);
		
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("Шапка");
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		НомерСтроки = 0;
		
		// Инициализация итогов в документе
		СуммаИтого = 0;
		
		// Выводим многострочную часть документа
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		ВыборкаПоДокументам.Сбросить();
		ПараметрыПоиска = Новый Структура("Документ", Шапка.Ссылка);
		Если ВыборкаПоДокументам.НайтиСледующий(ПараметрыПоиска) Тогда
			ВыборкаСтрокТовары = ВыборкаПоДокументам.Выбрать();
			
			КоличествоСтрок = ВыборкаСтрокТовары.Количество();
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
				ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
				ОбластьСтрока.Параметры.ТоварНаименование = ОбщегоНазначенияБольничнаяАптека.ПолучитьПредставлениеНоменклатурыДляПечати(
					ВыборкаСтрокТовары.ТоварНаименование,
					ВыборкаСтрокТовары.СерияНоменклатуры,
					ВыборкаСтрокТовары.Партия);
				
				ТабДокумент.Вывести(ОбластьСтрока);
				
				СуммаИтого = СуммаИтого + ВыборкаСтрокТовары.Сумма;
				
			КонецЦикла;
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.КоличествоПрописью = ЧислоПрописью(НомерСтроки,, НСтр("ru = 'наименование, наименования, наименований,с,,,,,0'"));
		ОбластьМакета.Параметры.СуммаПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаИтого, ВалютаПечати);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати = Неопределено) Экспорт
	
	ПолучатьЦены = Ложь;
	ПолучатьЦеныПоНастройкамСклада = Ложь;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		ПолучатьЦеныПоНастройкамСклада = ПараметрыПечати.Свойство("ПолучатьЦеныПоНастройкамСклада");
		ПолучатьЦены = ПолучатьЦеныПоНастройкамСклада Или ПараметрыПечати.Свойство("ПолучатьЦены");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеДляПечати(ПолучатьЦены, ПолучатьЦеныПоНастройкамСклада);
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	Запрос.УстановитьПараметр("ИспользоватьИсточникиФинансирования", ПолучитьФункциональнуюОпцию("ИспользоватьИсточникиФинансирования"));
	Запрос.УстановитьПараметр("ПолучатьЦеныПоНастройкамСклада", ПолучатьЦеныПоНастройкамСклада);
	ЗапасыСервер.УстановитьСтатусыПараметровУчетаВПараметрахЗапроса(Запрос);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("РезультатПоШапке"          , РезультатыЗапросов[РезультатыЗапросов.ВГраница() - 1]);
	ДанныеДляПечати.Вставить("РезультатПоТабличнойЧасти" , РезультатыЗапросов[РезультатыЗапросов.ВГраница()]);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ТекстЗапросаДанныеДляПечати(ПолучатьЦены = Ложь, ПолучатьЦеныПоНастройкамСклада = Ложь)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Документ.Ссылка                                  КАК Ссылка,
	|	Документ.Номер                                   КАК НомерДокумента,
	|	Документ.Дата                                    КАК ДатаДокумента,
	|	Документ.Организация                             КАК Организация,
	|	Документ.ПодразделениеОрганизации                КАК Подразделение,
	|	Документ.ПодразделениеОрганизации.Представление  КАК ПодразделениеПредставление,
	|	Документ.Склад                                   КАК Склад,
	|	Документ.Склад.Представление                     КАК СкладПредставление,
	|	ВЫБОР
	|		КОГДА &ПолучатьЦеныПоНастройкамСклада
	|			ТОГДА Документ.Склад.УчетныйВидЦены
	|		ИНАЧЕ Документ.ВидЦены
	|	КОНЕЦ                                            КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА &ПолучатьЦеныПоНастройкамСклада
	|			ТОГДА Документ.Склад.ИсточникИнформацииОЦенахДляПечати
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен)
	|	КОНЕЦ                                            КАК ИсточникИнформацииОЦенах,
	|	РасчетСебестоимостиТоваров.ПредварительныйРасчет КАК ПредварительныйРасчет
	|ПОМЕСТИТЬ втШапка
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.РасчетСебестоимостиТоваров КАК РасчетСебестоимостиТоваров
	|	ПО
	|		&ПолучатьЦеныПоНастройкамСклада
	|		И РасчетСебестоимостиТоваров.Дата МЕЖДУ НАЧАЛОПЕРИОДА(Документ.Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(Документ.Дата, МЕСЯЦ)
	|		И РасчетСебестоимостиТоваров.Проведен
	|		И Документ.Организация = РасчетСебестоимостиТоваров.Организация
	|ГДЕ
	|	Документ.Ссылка В (&ТекущийДокумент)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка                            КАК Документ,
	|	Товары.НомерСтроки                       КАК НомерСтроки,
	|	КОНЕЦПЕРИОДА(Шапка.ДатаДокумента, ДЕНЬ)  КАК ДатаПолученияЦены,
	|	Шапка.Организация                        КАК Организация,
	|	Шапка.Склад                              КАК Склад,
	|	Шапка.ВидЦены                            КАК ВидЦены,
	|	Шапка.ИсточникИнформацииОЦенах           КАК ИсточникИнформацииОЦенах,
	|	Шапка.ПредварительныйРасчет              КАК ПредварительныйРасчет,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|	Товары.Номенклатура                     КАК Номенклатура,
	|	Товары.Номенклатура.НаименованиеПолное  КАК ТоварНаименование,
	|	Товары.Номенклатура.Код                 КАК ТоварКод,
	|	Товары.СерияНоменклатуры                КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА Товары.СтатусУказанияСерий В (&СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА Товары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                   КАК СерияНоменклатурыДляСебестоимости,
	|	ЕСТЬNULL(Товары.СерияНоменклатуры.ГоденДо, ДАТАВРЕМЯ(1,1,1,0,0,0))
	|	                                        КАК СрокГодности,
	|	Партия                                  КАК Партия,
	|	ВЫБОР
	|		КОГДА Товары.СтатусУказанияПартий В (&СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА Товары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                   КАК ПартияДляСебестоимости,
	|	Товары.МестоХранения                    КАК МестоХранения,
	|	Товары.ЕдиницаИзмерения                 КАК ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмерения.КодОКЕИ         КАК КодПоОКЕИ,
	|	Товары.КоличествоВЕдиницахИзмерения     КАК Количество,
	|	Товары.Количество                       КАК КоличествоБазовых,
	|	ВЫБОР
	|		КОГДА &ИспользоватьИсточникиФинансирования
	|			ТОГДА Товары.ИсточникФинансирования
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ИсточникиФинансирования.ПустаяСсылка)
	|	КОНЕЦ                                   КАК ИсточникФинансирования,
	|	Товары.Коэффициент                      КАК Коэффициент,
	|	Товары.СтатьяРасходов                   КАК СтатьяРасходов,
	|	Товары.АналитикаРасходов                КАК АналитикаРасходов
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		втШапка КАК Шапка
	|	ПО
	|		Товары.Ссылка = Шапка.Ссылка
	|ГДЕ
	|	Товары.Ссылка В (&ТекущийДокумент)
	|";
	
	ПараметрыПолученияЦен = ФормированиеПечатныхФормБольничнаяАптека.ПараметрыПолученияЦен();
	
	Если ПолучатьЦены Тогда
		
		ПараметрыПолученияЦен.ИспользоватьЦеныПоВидуЦен = Истина;
		Если ПолучатьЦеныПоНастройкамСклада Тогда
			ПараметрыПолученияЦен.ИспользоватьЦеныПоСебестоимости = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = ФормированиеПечатныхФормБольничнаяАптека.ТекстЗапросаСЦенами(ТекстЗапроса, ПараметрыПолученияЦен);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // Печать

////////////////////////////////////////////////////////////////////////////////
// Команды формы
#Область КомандыФормы

// Заполняет список команд ввода на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииБольничнаяАптека.ДобавитьКомандыСозданияНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
КонецПроцедуры

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	МенюОтчетыБольничнаяАптека.ДобавитьОбщиеКоманды(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыОтчетов, НастройкиФормы);
	
КонецПроцедуры

#КонецОбласти // КомандыФормы

////////////////////////////////////////////////////////////////////////////////
// Интеграция РЭМД
#Область ИнтеграцияРЭМД

////////////////////////////////////////////////////////////////////////////////
// Подбор товаров по СЭМД
#Область ПодборТоваровПоСЭМД

Функция ПодготовитьДанныеДляПодбораТоваровПоСЭМД(Знач ТекстСЭМД, Знач ТипСЭМД, ДополнительныеПараметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", "Успешно");
	Результат.Вставить("Ошибки", Новый Массив);
	Результат.Вставить("Данные", Неопределено);
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ТекстСЭМД) Тогда
			ТекстОшибки = НСтр("ru = 'Пустой текст СЭМД'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		РезультатПолученияДанныхВходящегоТекстаСЭМД = ИнтеграцияРЭМДБольничнаяАптека.ПолучитьДанныеТекстаСЭМД(ТекстСЭМД, ТипСЭМД);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Ошибки, РезультатПолученияДанныхВходящегоТекстаСЭМД.Ошибки);
		Если РезультатПолученияДанныхВходящегоТекстаСЭМД.Статус = "Ошибка" Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить данные текста СЭМД'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ДанныеНазначения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПолученияДанныхВходящегоТекстаСЭМД.Данные, "ДанныеНазначения");
		ДанныеПациента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПолученияДанныхВходящегоТекстаСЭМД.Данные, "ДанныеПациента");
		
		Если Не ЗначениеЗаполнено(ДанныеНазначения) Тогда
			ТекстОшибки = НСтр("ru = 'Нет данных назначения.'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДанныеНазначения.КодЕСКЛП     КАК КодЕСКЛП,
		|	ДанныеНазначения.КОформлению  КАК КОформлению
		|ПОМЕСТИТЬ ДанныеНазначения
		|ИЗ
		|	&ДанныеНазначения КАК ДанныеНазначения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеНазначения.КодЕСКЛП          КАК КодЕСКЛП,
		|	ДанныеНазначения.КОформлению       КАК КОформлению,
		|	Справочник.Ссылка                  КАК СМНН,
		|	Справочник.ДействующиеВеществаМНН  КАК ДействующиеВеществаМНН,
		|	Справочник.ФормаВыпуска            КАК ФормаВыпуска
		|ИЗ
		|	ДанныеНазначения КАК ДанныеНазначения
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			Справочник.СМНН КАК Справочник
		|		ПО
		|			Справочник.КодЕСКЛП = ДанныеНазначения.КодЕСКЛП
		|");
		
		Запрос.УстановитьПараметр("ДанныеНазначения", ДанныеНазначения);
		
		ДанныеЗаказа = Запрос.Выполнить().Выгрузить();
		ДанныеЗаказа.Колонки.Добавить("Заказ");
		ДанныеЗаказа.Колонки.Добавить("КодСтроки");
		ДанныеЗаказа.Колонки.Добавить("НоменклатураЗаказа", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиОписанийОтборовНоменклатуры"));
		ДанныеЗаказа.Колонки.Добавить("ЕдиницаИзмеренияЗаказа");
		
		Для Каждого СтрокаЗаказа Из ДанныеЗаказа Цикл
			
			Если ЗначениеЗаполнено(СтрокаЗаказа.СМНН) Тогда
				
				СтрокаЗаказа.Заказ = Неопределено;
				СтрокаЗаказа.КодСтроки = ДанныеЗаказа.Индекс(СтрокаЗаказа) + 1;
				
				ОписаниеФОЛС = Новый Структура;
				ОписаниеФОЛС.Вставить("Номенклатура"          , Неопределено);
				ОписаниеФОЛС.Вставить("ТорговоеНаименование"  , Неопределено);
				ОписаниеФОЛС.Вставить("ДействующиеВеществаМНН", СтрокаЗаказа.ДействующиеВеществаМНН);
				ОписаниеФОЛС.Вставить("ФормаВыпуска"          , СтрокаЗаказа.ФормаВыпуска);
				
				СтрокаЗаказа.НоменклатураЗаказа = Справочники.КлючиАналитикиОписанийОтборовНоменклатуры.ЗначениеКлючаАналитики(ОписаниеФОЛС);
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'В информационной базе не обнаружено элемента справочника международных непатентованных наименований (СМНН) с кодом %1.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаЗаказа.КодЕСКЛП);
				Результат.Ошибки.Добавить(ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеЗаказа.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru = 'В информационной базе не обнаружено ни одного подходящего элемента справочника международных непатентованных наименований (СМНН)'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПациента) Тогда
			РезультатПоискаСозданияПациента = ИнтеграцияРЭМДБольничнаяАптека.НайтиСоздатьПациента(ДанныеПациента);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Ошибки, РезультатПоискаСозданияПациента.Ошибки);
			Если РезультатПоискаСозданияПациента.Статус = "Ошибка" Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось создать пациента.'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		Товары = Новый ТаблицаЗначений;
		
		Результат.Данные = Новый Структура("ДанныеЗаказа, Товары", ДанныеЗаказа, Товары);
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Интеграция РЭМД.Подготовка данных для подбора по СЭМД'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстОшибки = НСтр("ru = 'Не удалось подготовить данные для подбора товаров по СЭМД по причине:'");
		
		ТекстОшибкиКраткий   = ТекстОшибки + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиПодробный = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Результат.Ошибки.Добавить(ТекстОшибкиКраткий);
		Результат.Статус = "Ошибка";
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибкиПодробный);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ПодборТоваровПоСЭМД

////////////////////////////////////////////////////////////////////////////////
// Передача данных в РЭМД
#Область ПередачаДанныхВРЭМД

Функция ПолучитьСвойстваДокументаДляРЭМД(ДокументСсылка, ЗапрашиваемыеРеквизиты) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", "Успешно");
	Результат.Вставить("Ошибки", Новый Массив);
	Результат.Вставить("Данные", Неопределено);
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		ЗапрашиваемыеДанные = ФедеральныеВебСервисыРЭМД.СоздатьСтруктуруДанныхДокумента(ЗапрашиваемыеРеквизиты);
		
		Если ЗапрашиваемыеДанные.Свойство("КодТипаДокументаРЭМД") Или ЗапрашиваемыеДанные.Свойство("Описание") Тогда
			
			// Фиксированные настройки РЭМД. Считаем, что из этого документа можно отправлять только ОтпускПоРецепту60.
			ОписаниеТипаСЭМД = ИнтеграцияРЭМДБольничнаяАптека.ВидыСЭМД().ОтпускПоРецепту.ТипыСЭМД.ОтпускПоРецепту60;
			КодТипаСЭМД = ОписаниеТипаСЭМД.КодПоКлассификатору1520;
			ТипСЭМД = ОписаниеТипаСЭМД.ТипСЭМД;
			
			ЗаполнитьЗначенияСвойств(ЗапрашиваемыеДанные, Новый Структура("КодТипаДокументаРЭМД, Описание", КодТипаСЭМД, Строка(ТипСЭМД)));
			
		КонецЕсли;
		
		Если ЗапрашиваемыеДанные.Свойство("Дата") Или ЗапрашиваемыеДанные.Свойство("Подразделение") Тогда
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Документ.Дата                      КАК Дата,
			|	Документ.ПодразделениеОрганизации  КАК Подразделение
			|ИЗ
			|	Документ.ВнутреннееПотреблениеТоваров КАК Документ
			|ГДЕ
			|	Документ.Ссылка = &Ссылка
			|");
			
			Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Не Выборка.Следующий() Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось получить данные документа'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЗапрашиваемыеДанные, Выборка);
			
		КонецЕсли;
		
		Если ЗапрашиваемыеДанные.Свойство("Пациент") Тогда
			
			// Фиксированные настройки РЭМД. Считаем, что для этого документа входящи СЭМД может быть только ЛьготныйРецепт112.
			ТипВходящегоСЭМД = ИнтеграцияРЭМДБольничнаяАптека.ВидыСЭМД().ЛьготныйРецепт.ТипыСЭМД.ЛьготныйРецепт112.ТипСЭМД;
			РезультатПолученияТекстаСЭМД = ИнтеграцияРЭМДБольничнаяАптека.ПолучитьТекстВходящихСЭМД(ДокументСсылка, ТипВходящегоСЭМД);
			Если РезультатПолученияТекстаСЭМД.Статус = "Ошибка" Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось получить текст входящего СЭМД'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			ТекстВходящегоСЭМД = РезультатПолученияТекстаСЭМД.ТекстСЭМДпоТипамСЭМД[ТипВходящегоСЭМД];
			Если Не ЗначениеЗаполнено(ТекстВходящегоСЭМД) Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось получить текст входящего СЭМД'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			РезультатПолученияДанныхВходящегоТекстаСЭМД = ИнтеграцияРЭМДБольничнаяАптека.ПолучитьДанныеТекстаСЭМД(ТекстВходящегоСЭМД, ТипВходящегоСЭМД);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Ошибки, РезультатПолученияДанныхВходящегоТекстаСЭМД.Ошибки);
			Если РезультатПолученияДанныхВходящегоТекстаСЭМД.Статус = "Ошибка" Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось получить данные текста СЭМД'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			ДанныеПациента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПолученияДанныхВходящегоТекстаСЭМД.Данные, "ДанныеПациента");
			Если Не ЗначениеЗаполнено(ДанныеПациента) Тогда
				ТекстОшибки = НСтр("ru = 'Нет данных пациента.'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			РезультатПоискаСозданияПациента = ИнтеграцияРЭМДБольничнаяАптека.НайтиСоздатьПациента(ДанныеПациента);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Ошибки, РезультатПоискаСозданияПациента.Ошибки);
			Если РезультатПоискаСозданияПациента.Статус = "Ошибка" Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось создать пациента.'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			ЗапрашиваемыеДанные.Пациент = РезультатПоискаСозданияПациента.Пациент;
			
		КонецЕсли;
		
		Результат.Данные = ЗапрашиваемыеДанные;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Интеграция РЭМД.Получение свойств документа для РЭМД'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстОшибки = НСтр("ru = 'Не удалось получить свойства документа ""%1"" для РЭМД по причине:'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументСсылка);
		
		ТекстОшибкиКраткий   = ТекстОшибки + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиПодробный = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Результат.Ошибки.Добавить(ТекстОшибкиКраткий);
		Результат.Статус = "Ошибка";
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибкиПодробный);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьТекстСЭМД(ДокументСсылка, ТипСЭМД) Экспорт
	
	Попытка
		
		ВидыСЭМД = ИнтеграцияРЭМДБольничнаяАптека.ВидыСЭМД();
		Если ИнтеграцияРЭМДБольничнаяАптека.ЭтоОтпускПоРецепту140(ВидыСЭМД, ТипСЭМД) Тогда
			Результат = СформироватьТекстСЭМД_ОтпускПоРецепту140(ДокументСсылка);
		ИначеЕсли ИнтеграцияРЭМДБольничнаяАптека.ЭтоОтпускПоРецепту60(ВидыСЭМД, ТипСЭМД) Тогда
			Результат = СформироватьТекстСЭМД_ОтпускПоРецепту60(ДокументСсылка);
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестный тип СЭМД.'");
		КонецЕсли;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Интеграция РЭМД.Формирование текста СЭМД'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстОшибки = НСтр("ru = 'Не удалось сформировать текст СЭМД по документу ""%1"" для РЭМД по причине:'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументСсылка);
		
		ТекстОшибкиКраткий   = ТекстОшибки + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиПодробный = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Результат = Новый Структура;
		Результат.Вставить("Статус", "Ошибка");
		Результат.Вставить("Ошибки", Новый Массив);
		Результат.Ошибки.Добавить(ТекстОшибкиКраткий);
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибкиПодробный);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьТекстСЭМД_ОтпускПоРецепту140(ДокументСсылка)
	
	Результат = Новый Структура;
	Результат.Вставить("Статус"   , "Успешно");
	Результат.Вставить("Ошибки"   , Новый Массив);
	Результат.Вставить("ТекстСЭМД", "");
	
	Попытка
		
		РезультатПолученияДанныхДокумента = ПолучитьДанныеДокументаДляСЭМД(ДокументСсылка);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Ошибки, РезультатПолученияДанныхДокумента.Ошибки);
		Если РезультатПолученияДанныхДокумента.Статус = "Ошибка" Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить данные документа ""%1"" для СЭМД'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументСсылка);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		// Фиксированные настройки РЭМД. Считаем, что для этого документа входящи СЭМД может быть только ЛьготныйРецепт112.
		ТипВходящегоСЭМД = ИнтеграцияРЭМДБольничнаяАптека.ВидыСЭМД().ЛьготныйРецепт.ТипыСЭМД.ЛьготныйРецепт112.ТипСЭМД;
		РезультатПолученияТекстаСЭМД = ИнтеграцияРЭМДБольничнаяАптека.ПолучитьТекстВходящихСЭМД(ДокументСсылка, ТипВходящегоСЭМД);
		Если РезультатПолученияТекстаСЭМД.Статус = "Ошибка" Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить текст входящего СЭМД'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ТекстВходящегоСЭМД = РезультатПолученияТекстаСЭМД.ТекстСЭМДпоТипамСЭМД[ТипВходящегоСЭМД];
		Если Не ЗначениеЗаполнено(ТекстВходящегоСЭМД) Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить текст входящего СЭМД'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		РезультатПолученияДанныхВходящегоТекстаСЭМД = ИнтеграцияРЭМДБольничнаяАптека.ПолучитьДанныеТекстаСЭМД(ТекстВходящегоСЭМД, ТипВходящегоСЭМД);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Ошибки, РезультатПолученияДанныхВходящегоТекстаСЭМД.Ошибки);
		Если РезультатПолученияДанныхВходящегоТекстаСЭМД.Статус = "Ошибка" Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить данные текста СЭМД'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		РезультатФормированияДанныхСЭМД = СформироватьДанныеСЭМД_ОтпускПоРецепту140(РезультатПолученияДанныхДокумента.Данные, РезультатПолученияДанныхВходящегоТекстаСЭМД.Данные);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Ошибки, РезультатФормированияДанныхСЭМД.Ошибки);
		Если РезультатФормированияДанныхСЭМД.Статус = "Ошибка" Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось сформировать данные СЭМД'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Шаблон = Обработки.ПередачаДанныхДокументовВРЭМД.ПолучитьМакет("СЭМД_ОтпускПоРецепту140").ПолучитьТекст();
		
		Результат.ТекстСЭМД = ОбщиеМеханизмы.ПодставитьДанныеВШаблон(Шаблон, РезультатФормированияДанныхСЭМД.Данные, 2);
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Интеграция РЭМД.Формирование текста СЭМД'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстОшибки = НСтр("ru = 'Не удалось сформировать текст СЭМД по документу ""%1"" для РЭМД по причине:'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументСсылка);
		
		ТекстОшибкиКраткий   = ТекстОшибки + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиПодробный = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Результат.Ошибки.Добавить(ТекстОшибкиКраткий);
		Результат.Статус = "Ошибка";
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибкиПодробный);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДанныеСЭМД_ОтпускПоРецепту140(ДанныеДокумента, ДанныеРецепта)
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", "Успешно");
	Результат.Вставить("Ошибки", Новый Массив);
	Результат.Вставить("Данные", Новый Массив);
	
	Попытка
		
		Менеджер = ИнтеграцияРЭМДБольничнаяАптека;
		
		ДанныеШапки       = ДанныеДокумента.ДанныеШапки;
		ДанныеТоваров     = ДанныеДокумента.ДанныеТоваров;
		ДанныеОрганизации = ДанныеДокумента.ДанныеОрганизации;
		ДанныеСотрудника  = ДанныеДокумента.ДанныеСотрудника;
		
		ДанныеШапкиРецепта      = ДанныеРецепта.ДанныеШапки;
		ДанныеПациентаИзРецепта = ДанныеРецепта.ДанныеПациента;
		
		ДанныеШапкиДляСЭМД = Новый Соответствие;
		ДанныеШапкиДляСЭМД["Пусто"] = "";
		
		OIDДокумента = Менеджер.Документ2OID(ДанныеШапки.ДокументСсылка, ДанныеШапки.Организация);
		ДанныеШапкиДляСЭМД["ДокументRoot"]        = OIDДокумента.root;
		ДанныеШапкиДляСЭМД["ДокументExtension"]   = OIDДокумента.extension + "." + Формат(ДанныеШапки.НомерВерсииДокумента, "ЧГ=0; ЧДЦ=0; ЧН=");
		ДанныеШапкиДляСЭМД["ДокументДата"]        = Менеджер.ДатаВСтрокуСоСмещением(ДанныеШапки.Дата, "ДФ=yyyyMMddHHmm");
		ДанныеШапкиДляСЭМД["ДокументНомерВерсии"] = ВыбратьЗаполненное(Строка(ДанныеШапки.НомерВерсииДокумента), "0");
		
		SetIdДокумента_ = Менеджер.Документ2SetID(ДанныеШапки.ДокументСсылка, ДанныеШапки.Организация);
		ДанныеШапкиДляСЭМД["ДокументSetIdRoot"]      = SetIdДокумента_.root;
		ДанныеШапкиДляСЭМД["ДокументSetIdExtension"] = SetIdДокумента_.extension;
		
		// Пациент
		ДанныеПациентаДляСЭМД = Менеджер.ПолучитьДанныеПациентаДляСЭМД(ДанныеПациентаИзРецепта, ДанныеШапки.Организация);
		
		// Организация
		ДанныеОрганизацииДляСЭМД = Менеджер.ПолучитьДанныеОрганизацииДляСЭМД(ДанныеОрганизации);
		
		// Сотрудник
		ДанныеСотрудникаДляСЭМД = Менеджер.ПолучитьДанныеСотрудникаДляСЭМД(ДанныеСотрудника, ДанныеШапки.Организация);
		ДанныеСотрудникаДляСЭМД["СотрудникДатаПодписи"] = Менеджер.ДатаВСтрокуСоСмещением(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmm");
		
		// Подписант
		ДанныеПодписантаДляСЭМД = Менеджер.ПолучитьДанныеСотрудникаДляСЭМД(ДанныеСотрудника, ДанныеШапки.Организация, "Подписант");
		ДанныеПодписантаДляСЭМД["ПодписантДатаПодписи"] = Менеджер.ДатаВСтрокуСоСмещением(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmm");
		
		// Рецепт
		ДанныеОбОтпускеПоРецепту = Новый Соответствие;
		ДанныеОбОтпускеПоРецепту["РецептДокументRoot"]           = ДанныеШапкиРецепта.ДокументRoot;
		ДанныеОбОтпускеПоРецепту["РецептДокументExtension"]      = ДанныеШапкиРецепта.ДокументExtension;
		ДанныеОбОтпускеПоРецепту["РецептДокументSetIdRoot"]      = ДанныеШапкиРецепта.ДокументSetIdRoot;
		ДанныеОбОтпускеПоРецепту["РецептДокументSetIdExtension"] = ДанныеШапкиРецепта.ДокументSetIdExtension;
		ДанныеОбОтпускеПоРецепту["РецептСерияРецепта"]           = ДанныеШапкиРецепта.СерияРецепта;
		ДанныеОбОтпускеПоРецепту["РецептНомерРецепта"]           = ДанныеШапкиРецепта.НомерРецепта;
		ДанныеОбОтпускеПоРецепту["РецептПризнакДействияРецепта"] = ДанныеШапкиРецепта.ПризнакДействияРецепта;
		
		// Лекарственные препараты
		ОтпускаемыеПрепараты = Новый Соответствие;
		ОтпускаемыеПрепараты["ОтпускаемыеПрепараты"] = Новый Массив;
		ОтпускаемыеПрепараты["ЕстьПрепараты"] = ДанныеТоваров.Количество() > 0;
		
		Префикс = "ЛП_";
		Для Каждого СтрокаТовара Из ДанныеТоваров Цикл
			
			ДанныеТовара = Новый Соответствие;
			ДанныеТовара[Префикс + "Наименование"]                                            = ОбщиеМеханизмы.ЭкранироватьЗначение(СтрокаТовара.Наименование);
			ДанныеТовара[Префикс + "КодЕСКЛП"]                                                = СтрокаТовара.КодЕСКЛП;
			ДанныеТовара[Префикс + "ЛекарственнаяФорма"]                                      = ОбщиеМеханизмы.ЭкранироватьЗначение(СтрокаТовара.ЛекарственнаяФорма);
			ДанныеТовара[Префикс + "Производитель"]                                           = ОбщиеМеханизмы.ЭкранироватьЗначение(СтрокаТовара.Производитель);
			Если ЗначениеЗаполнено(СтрокаТовара.Коэффициент) Тогда
				ДанныеТовара[Префикс + "КоличествоПотребительскихЕдиницВПотребительскойУпаковке"] = Формат(СтрокаТовара.Коэффициент, "ЧРД=.;ЧГ=0");
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТовара.Количество) Тогда
				ДанныеТовара[Префикс + "КоличествоОтпущенногоПрепаратаВПотребительскихУпаковках"] = Формат(СтрокаТовара.Количество, "ЧРД=.;ЧГ=0");
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
				ДанныеТовара[Префикс + "Стоимость"]                                               = Формат(СтрокаТовара.Цена, "ЧРД=.;ЧГ=0");
			КонецЕсли;
			
			Дозировка = СтрШаблон("%1 %2", СтрокаТовара.ДозировкаКоличество, СтрокаТовара.ДозировкаЕдиницаИзмерения);
			Если Не (ЗначениеЗаполнено(СтрокаТовара.ДозировкаКоличество) И ЗначениеЗаполнено(СтрокаТовара.ДозировкаЕдиницаИзмерения))
				И ЗначениеЗаполнено(СтрокаТовара.ДозировкаНеНормализованныеДанные) Тогда
				Дозировка = СтрокаТовара.ДозировкаНеНормализованныеДанные;
			КонецЕсли;
			ДанныеТовара[Префикс + "Дозировка"] = ОбщиеМеханизмы.ЭкранироватьЗначение(Дозировка);
			
			// Данные классификатора
			ДанныеТовара["ЛП_codeSystem"]        = "1.2.643.5.1.13.13.99.2.540";
			ДанныеТовара["ЛП_codeSystemVersion"] = "8.42";
			ДанныеТовара["ЛП_codeSystemName"]    = НСтр("ru = 'Лекарственные препараты. Товарные позиции. ЕСКЛП с кодами КТРУ'");
			
			ОтпускаемыеПрепараты["ОтпускаемыеПрепараты"].Добавить(ДанныеТовара);
			
		КонецЦикла;
		
		// Спец. питание
		ОтпускаемоеСпециализированноеПитание = Новый Соответствие;
		ОтпускаемоеСпециализированноеПитание["ЕстьСпецПитание"] = Ложь;
		
		Результат.Данные.Добавить(ДанныеШапкиДляСЭМД);
		Результат.Данные.Добавить(ДанныеПациентаДляСЭМД);
		Результат.Данные.Добавить(ДанныеОрганизацииДляСЭМД);
		Результат.Данные.Добавить(ДанныеСотрудникаДляСЭМД);
		Результат.Данные.Добавить(ДанныеПодписантаДляСЭМД);
		Результат.Данные.Добавить(ДанныеОбОтпускеПоРецепту);
		Результат.Данные.Добавить(ОтпускаемыеПрепараты);
		Результат.Данные.Добавить(ОтпускаемоеСпециализированноеПитание);
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Интеграция РЭМД.Формирование данных СЭМД'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстОшибки = НСтр("ru = 'Не удалось сформировать данные СЭМД по документу ""%1"" для РЭМД по причине:'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеШапки.ДокументСсылка);
		
		ТекстОшибкиКраткий   = ТекстОшибки + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиПодробный = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Результат.Ошибки.Добавить(ТекстОшибкиКраткий);
		Результат.Статус = "Ошибка";
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибкиПодробный);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьТекстСЭМД_ОтпускПоРецепту60(ДокументСсылка)
	
	Результат = Новый Структура;
	Результат.Вставить("Статус"   , "Успешно");
	Результат.Вставить("Ошибки"   , Новый Массив);
	Результат.Вставить("ТекстСЭМД", "");
	
	Попытка
		
		РезультатПолученияДанныхДокумента = ПолучитьДанныеДокументаДляСЭМД(ДокументСсылка);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Ошибки, РезультатПолученияДанныхДокумента.Ошибки);
		Если РезультатПолученияДанныхДокумента.Статус = "Ошибка" Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить данные документа ""%1"" для СЭМД'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументСсылка);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		// Фиксированные настройки РЭМД. Считаем, что для этого документа входящи СЭМД может быть только ЛьготныйРецепт112.
		ТипВходящегоСЭМД = ИнтеграцияРЭМДБольничнаяАптека.ВидыСЭМД().ЛьготныйРецепт.ТипыСЭМД.ЛьготныйРецепт112.ТипСЭМД;
		РезультатПолученияТекстаСЭМД = ИнтеграцияРЭМДБольничнаяАптека.ПолучитьТекстВходящихСЭМД(ДокументСсылка, ТипВходящегоСЭМД);
		Если РезультатПолученияТекстаСЭМД.Статус = "Ошибка" Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить текст входящего СЭМД'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ТекстВходящегоСЭМД = РезультатПолученияТекстаСЭМД.ТекстСЭМДпоТипамСЭМД[ТипВходящегоСЭМД];
		Если Не ЗначениеЗаполнено(ТекстВходящегоСЭМД) Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить текст входящего СЭМД'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		РезультатПолученияДанныхВходящегоТекстаСЭМД = ИнтеграцияРЭМДБольничнаяАптека.ПолучитьДанныеТекстаСЭМД(ТекстВходящегоСЭМД, ТипВходящегоСЭМД);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Ошибки, РезультатПолученияДанныхВходящегоТекстаСЭМД.Ошибки);
		Если РезультатПолученияДанныхВходящегоТекстаСЭМД.Статус = "Ошибка" Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить данные текста СЭМД'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		РезультатФормированияДанныхСЭМД = СформироватьДанныеСЭМД_ОтпускПоРецепту60(РезультатПолученияДанныхДокумента.Данные, РезультатПолученияДанныхВходящегоТекстаСЭМД.Данные);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.Ошибки, РезультатФормированияДанныхСЭМД.Ошибки);
		Если РезультатФормированияДанныхСЭМД.Статус = "Ошибка" Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось сформировать данные СЭМД'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Шаблон = Обработки.ПередачаДанныхДокументовВРЭМД.ПолучитьМакет("СЭМД_ОтпускПоРецепту60").ПолучитьТекст();
		
		Результат.ТекстСЭМД = ОбщиеМеханизмы.ПодставитьДанныеВШаблон(Шаблон, РезультатФормированияДанныхСЭМД.Данные, 2);
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Интеграция РЭМД.Формирование текста СЭМД'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстОшибки = НСтр("ru = 'Не удалось сформировать текст СЭМД по документу ""%1"" для РЭМД по причине:'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументСсылка);
		
		ТекстОшибкиКраткий   = ТекстОшибки + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиПодробный = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Результат.Ошибки.Добавить(ТекстОшибкиКраткий);
		Результат.Статус = "Ошибка";
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибкиПодробный);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДанныеСЭМД_ОтпускПоРецепту60(ДанныеДокумента, ДанныеРецепта)
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", "Успешно");
	Результат.Вставить("Ошибки", Новый Массив);
	Результат.Вставить("Данные", Новый Массив);
	
	Попытка
		
		Менеджер = ИнтеграцияРЭМДБольничнаяАптека;
		
		ДанныеШапки       = ДанныеДокумента.ДанныеШапки;
		ДанныеТоваров     = ДанныеДокумента.ДанныеТоваров;
		ДанныеОрганизации = ДанныеДокумента.ДанныеОрганизации;
		ДанныеСотрудника  = ДанныеДокумента.ДанныеСотрудника;
		
		ДанныеШапкиРецепта      = ДанныеРецепта.ДанныеШапки;
		ДанныеПациентаИзРецепта = ДанныеРецепта.ДанныеПациента;
		
		ДанныеШапкиДляСЭМД = Новый Соответствие;
		ДанныеШапкиДляСЭМД["Пусто"] = "";
		
		OIDДокумента = Менеджер.Документ2OID(ДанныеШапки.ДокументСсылка, ДанныеШапки.Организация);
		ДанныеШапкиДляСЭМД["ДокументRoot"]        = OIDДокумента.root;
		ДанныеШапкиДляСЭМД["ДокументExtension"]   = OIDДокумента.extension + "." + Формат(ДанныеШапки.НомерВерсииДокумента, "ЧГ=0; ЧДЦ=0; ЧН=");
		ДанныеШапкиДляСЭМД["ДокументДата"]        = Менеджер.ДатаВСтрокуСоСмещением(ДанныеШапки.Дата, "ДФ=yyyyMMddHHmm");
		ДанныеШапкиДляСЭМД["ДокументНомерВерсии"] = ВыбратьЗаполненное(Строка(ДанныеШапки.НомерВерсииДокумента), "0");
		
		SetIdДокумента_ = Менеджер.Документ2SetID(ДанныеШапки.ДокументСсылка, ДанныеШапки.Организация);
		ДанныеШапкиДляСЭМД["ДокументSetIdRoot"]      = SetIdДокумента_.root;
		ДанныеШапкиДляСЭМД["ДокументSetIdExtension"] = SetIdДокумента_.extension;
		
		// Пациент
		ДанныеПациентаДляСЭМД = Менеджер.ПолучитьДанныеПациентаДляСЭМД(ДанныеПациентаИзРецепта, ДанныеШапки.Организация);
		
		// Организация
		ДанныеОрганизацииДляСЭМД = Менеджер.ПолучитьДанныеОрганизацииДляСЭМД(ДанныеОрганизации);
		
		// Сотрудник
		ДанныеСотрудникаДляСЭМД = Менеджер.ПолучитьДанныеСотрудникаДляСЭМД(ДанныеСотрудника, ДанныеШапки.Организация);
		ДанныеСотрудникаДляСЭМД["СотрудникДатаПодписи"] = Менеджер.ДатаВСтрокуСоСмещением(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmm");
		
		// Подписант
		ДанныеПодписантаДляСЭМД = Менеджер.ПолучитьДанныеСотрудникаДляСЭМД(ДанныеСотрудника, ДанныеШапки.Организация, "Подписант");
		ДанныеПодписантаДляСЭМД["ПодписантДатаПодписи"] = Менеджер.ДатаВСтрокуСоСмещением(ТекущаяДатаСеанса(), "ДФ=yyyyMMddHHmm");
		
		// Рецепт
		ДанныеОбОтпускеПоРецепту = Новый Соответствие;
		ДанныеОбОтпускеПоРецепту["РецептДокументRoot"]           = ДанныеШапкиРецепта.ДокументRoot;
		ДанныеОбОтпускеПоРецепту["РецептДокументExtension"]      = ДанныеШапкиРецепта.ДокументExtension;
		ДанныеОбОтпускеПоРецепту["РецептДокументSetIdRoot"]      = ДанныеШапкиРецепта.ДокументSetIdRoot;
		ДанныеОбОтпускеПоРецепту["РецептДокументSetIdExtension"] = ДанныеШапкиРецепта.ДокументSetIdExtension;
		ДанныеОбОтпускеПоРецепту["РецептСерияРецепта"]           = ДанныеШапкиРецепта.СерияРецепта;
		ДанныеОбОтпускеПоРецепту["РецептНомерРецепта"]           = ДанныеШапкиРецепта.НомерРецепта;
		ДанныеОбОтпускеПоРецепту["РецептПризнакДействияРецепта"] = ДанныеШапкиРецепта.ПризнакДействияРецепта;
		
		// Лекарственные препараты
		ОтпускаемыеПрепараты = Новый Соответствие;
		ОтпускаемыеПрепараты["ОтпускаемыеПрепараты"] = Новый Массив;
		ОтпускаемыеПрепараты["ЕстьПрепараты"] = ДанныеТоваров.Количество() > 0;
		
		Префикс = "ЛП_";
		Для Каждого СтрокаТовара Из ДанныеТоваров Цикл
			
			ДанныеТовара = Новый Соответствие;
			ДанныеТовара[Префикс + "Наименование"]                                            = ОбщиеМеханизмы.ЭкранироватьЗначение(СтрокаТовара.Наименование);
			ДанныеТовара[Префикс + "КодЕСКЛП"]                                                = СтрокаТовара.КодЕСКЛП;
			ДанныеТовара[Префикс + "ЛекарственнаяФорма"]                                      = ОбщиеМеханизмы.ЭкранироватьЗначение(СтрокаТовара.ЛекарственнаяФорма);
			ДанныеТовара[Префикс + "Производитель"]                                           = ОбщиеМеханизмы.ЭкранироватьЗначение(СтрокаТовара.Производитель);
			Если ЗначениеЗаполнено(СтрокаТовара.Коэффициент) Тогда
				ДанныеТовара[Префикс + "КоличествоПотребительскихЕдиницВПотребительскойУпаковке"] = Формат(СтрокаТовара.Коэффициент, "ЧРД=.;ЧГ=0");
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТовара.Количество) Тогда
				ДанныеТовара[Префикс + "КоличествоОтпущенногоПрепаратаВПотребительскихУпаковках"] = Формат(СтрокаТовара.Количество, "ЧРД=.;ЧГ=0");
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
				ДанныеТовара[Префикс + "Стоимость"]                                               = Формат(СтрокаТовара.Цена, "ЧРД=.;ЧГ=0");
			КонецЕсли;
			
			Дозировка = СтрШаблон("%1 %2", СтрокаТовара.ДозировкаКоличество, СтрокаТовара.ДозировкаЕдиницаИзмерения);
			Если Не (ЗначениеЗаполнено(СтрокаТовара.ДозировкаКоличество) И ЗначениеЗаполнено(СтрокаТовара.ДозировкаЕдиницаИзмерения))
				И ЗначениеЗаполнено(СтрокаТовара.ДозировкаНеНормализованныеДанные) Тогда
				Дозировка = СтрокаТовара.ДозировкаНеНормализованныеДанные;
			КонецЕсли;
			ДанныеТовара[Префикс + "Дозировка"] = ОбщиеМеханизмы.ЭкранироватьЗначение(Дозировка);
			
			// Данные классификатора
			ДанныеТовара["ЛП_codeSystem"]        = "1.2.643.5.1.13.13.99.2.540";
			ДанныеТовара["ЛП_codeSystemVersion"] = "8.42";
			ДанныеТовара["ЛП_codeSystemName"]    = НСтр("ru = 'Лекарственные препараты. Товарные позиции. ЕСКЛП с кодами КТРУ'");
			
			ОтпускаемыеПрепараты["ОтпускаемыеПрепараты"].Добавить(ДанныеТовара);
			
		КонецЦикла;
		
		// Спец. питание
		ОтпускаемоеСпециализированноеПитание = Новый Соответствие;
		ОтпускаемоеСпециализированноеПитание["ЕстьСпецПитание"] = Ложь;
		
		Результат.Данные.Добавить(ДанныеШапкиДляСЭМД);
		Результат.Данные.Добавить(ДанныеПациентаДляСЭМД);
		Результат.Данные.Добавить(ДанныеОрганизацииДляСЭМД);
		Результат.Данные.Добавить(ДанныеСотрудникаДляСЭМД);
		Результат.Данные.Добавить(ДанныеПодписантаДляСЭМД);
		Результат.Данные.Добавить(ДанныеОбОтпускеПоРецепту);
		Результат.Данные.Добавить(ОтпускаемыеПрепараты);
		Результат.Данные.Добавить(ОтпускаемоеСпециализированноеПитание);
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Интеграция РЭМД.Формирование данных СЭМД'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстОшибки = НСтр("ru = 'Не удалось сформировать данные СЭМД по документу ""%1"" для РЭМД по причине:'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеШапки.ДокументСсылка);
		
		ТекстОшибкиКраткий   = ТекстОшибки + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиПодробный = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Результат.Ошибки.Добавить(ТекстОшибкиКраткий);
		Результат.Статус = "Ошибка";
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибкиПодробный);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеДокументаДляСЭМД(ДокументСсылка)
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", "Успешно");
	Результат.Вставить("Ошибки", Новый Массив);
	Результат.Вставить("Данные", Новый Структура);
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Документ.Ссылка                                                           КАК ДокументСсылка,
		|	Документ.Дата                                                             КАК Дата,
		|	1                                                                         КАК НомерВерсииДокумента,
		
		// Данные организации
		|	Документ.Организация                                                      КАК Организация,
		|	Документ.Организация.КодOID                                               КАК КодOID,
		|	Документ.Организация.Наименование                                         КАК Наименование,
		|	Документ.Организация.ОГРН                                                 КАК ОГРН,
		|	Документ.Организация.КодПоОКПО                                            КАК КодПоОКПО,
		|	Документ.Организация.КодПоОКАТО                                           КАК КодПоОКАТО,
		
		// Данные сотрудника
		|	Документ.Ответственный.ФизическоеЛицо                                     КАК Сотрудник,
		|	Документ.Ответственный.ФизическоеЛицо.Наименование                        КАК ФИО,
		|	Документ.Ответственный.ФизическоеЛицо.СНИЛС                               КАК СНИЛС,
		|	Документ.Ответственный.ФизическоеЛицо.КодДолжностиФРМР                    КАК КодДолжностиФРМР,
		|	Документ.Ответственный.ФизическоеЛицо.ВерсияКлассификатораДолжностейФРМР  КАК ВерсияКлассификатораДолжностейФРМР,
		|	Документ.Ответственный.ФизическоеЛицо.ДолжностьФРМР                       КАК ДолжностьФРМР,
		|	Документ.Ответственный.ФизическоеЛицо.КодДолжности1002                    КАК КодДолжности1002,
		|	Документ.Ответственный.ФизическоеЛицо.Должность1002                       КАК Должность1002,
		|	Документ.Ответственный.ФизическоеЛицо.ВерсияКлассификатораДолжностей1002  КАК ВерсияКлассификатораДолжностей1002
		
		|ПОМЕСТИТЬ втШапка
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров КАК Документ
		|ГДЕ
		|	Документ.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Ссылка                                                                                                 КАК Документ,
		|	Товары.НомерСтроки                                                                                            КАК НомерСтроки,
		|	Товары.Ссылка.ВидЦены                                                                                         КАК ВидЦены,
		|	Товары.Номенклатура                                                                                           КАК Номенклатура,
		|	Товары.СерияНоменклатуры                                                                                      КАК СерияНоменклатуры,
		|	Товары.Партия                                                                                                 КАК Партия,
		|	КОНЕЦПЕРИОДА(Товары.Ссылка.Дата, ДЕНЬ)                                                                        КАК ДатаПолученияЦены,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен)                                           КАК ИсточникИнформацииОЦенах,
		
		|	ЕСТЬNULL(Товары.Номенклатура.ЭлементКАТ.КодЕСКЛП, """")                                                       КАК КодЕСКЛП,
		|	ЕСТЬNULL(Товары.Номенклатура.ЭлементКАТ.ТорговоеНаименование.Наименование, Товары.Номенклатура.Наименование)  КАК Наименование,
		|	ЕСТЬNULL(Товары.Номенклатура.ЭлементКАТ.ФормаВыпуска.Количество, 0)                                           КАК ДозировкаКоличество,
		|	ЕСТЬNULL(Товары.Номенклатура.ЭлементКАТ.ФормаВыпуска.ЕдиницаИзмерения.Наименование, """")                     КАК ДозировкаЕдиницаИзмерения,
		|	ЕСТЬNULL(Товары.Номенклатура.ЭлементКАТ.ФормаВыпуска.НеНормализованныеДанные, """")                           КАК ДозировкаНеНормализованныеДанные,
		|	ЕСТЬNULL(Товары.Номенклатура.ЭлементКАТ.ФормаВыпуска.ЛекарственнаяФорма.Наименование, """")                   КАК ЛекарственнаяФорма,
		|	ЕСТЬNULL(Товары.Номенклатура.ЭлементКАТ.ФирмаПроизводитель.Наименование, """")                                КАК Производитель,
		|	ЕСТЬNULL(Упаковки.Коэффициент, 0)                                                                             КАК Коэффициент,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Упаковки.Коэффициент, 0) > 0
		|			ТОГДА Товары.Количество / Упаковки.Коэффициент
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                                                                         КАК Количество
		|ПОМЕСТИТЬ втТовары
		|ИЗ
		|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Упаковки
		|		ПО
		|			Упаковки.Номенклатура = Товары.Номенклатура
		|			И Упаковки.ЕдиницаИзмерения = Товары.Номенклатура.Упаковка
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.ЭтоЛекарственноеСредство
		|";
		
		ПараметрыПолученияЦен = ФормированиеПечатныхФормБольничнаяАптека.ПараметрыПолученияЦен();
		ПараметрыПолученияЦен.ИспользоватьЦеныПоВидуЦен = Истина;
		
		ТекстЗапроса = ФормированиеПечатныхФормБольничнаяАптека.ТекстЗапросаСЦенами(ТекстЗапроса, ПараметрыПолученияЦен);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
		РезультатыЗапросов = Запрос.ВыполнитьПакет();
		
		РезультатПоШапке          = РезультатыЗапросов[РезультатыЗапросов.ВГраница() - 1];
		РезультатПоТабличнойЧасти = РезультатыЗапросов[РезультатыЗапросов.ВГраница()];
		
		Выборка = РезультатПоШапке.Выбрать();
		Если Не Выборка.Следующий() Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить данные документа ""%1"" для формирования СЭМД'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументСсылка);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ВыборкаПоДокументам = РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Не ВыборкаПоДокументам.НайтиСледующий(Новый Структура("Документ", ДокументСсылка)) Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить данные лекарственных препаратов документа ""%1"" для формирования СЭМД.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументСсылка);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		// Данные шапки
		ДанныеШапки = Новый Структура("ДокументСсылка, Дата, Организация, НомерВерсииДокумента");
		ЗаполнитьЗначенияСвойств(ДанныеШапки, Выборка);
		
		// Данные организации
		ДанныеОрганизации = Новый Структура("Организация, КодOID, Наименование, ОГРН, КодПоОКПО, КодПоОКАТО, Телефон, Адрес, АдресИндекс, АдресКодРегиона, АдресНаименованиеРегиона, АдресИдентификаторАдресногоОбъекта, АдресИдентификаторДома");
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации, Выборка);
		
		ДанныеОрганизации.Телефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ДанныеОрганизации.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, ТекущаяДатаСеанса());
		ТаблицаАдресов = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ДанныеОрганизации.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, ТекущаяДатаСеанса(), Ложь);
		Если ЗначениеЗаполнено(ТаблицаАдресов) Тогда
			СтрокаДанныхАдреса = ТаблицаАдресов[0];
			Если ЗначениеЗаполнено(СтрокаДанныхАдреса.Значение) Тогда
				ЗначениеАдреса = СтрокаДанныхАдреса.Значение;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДанныхАдреса.Значение) Тогда
				ЗначениеАдреса = СтрокаДанныхАдреса.ЗначенияПолей;
			Иначе
				ЗначениеАдреса = СтрокаДанныхАдреса.Представление;
			КонецЕсли;
			ДанныеАдреса = РаботаСАдресами.СведенияОбАдресе(ЗначениеАдреса, Новый Структура("КодыАдреса", Истина));
			ДанныеОрганизации.Адрес                              = ДанныеАдреса.Представление;
			ДанныеОрганизации.АдресИндекс                        = ДанныеАдреса.Индекс;
			ДанныеОрганизации.АдресКодРегиона                    = ДанныеАдреса.КодРегиона;
			ДанныеОрганизации.АдресНаименованиеРегиона           = ДанныеАдреса.Регион;
			ДанныеОрганизации.АдресИдентификаторАдресногоОбъекта = ДанныеАдреса.ИдентификаторАдресногоОбъекта;
			ДанныеОрганизации.АдресИдентификаторДома             = ДанныеАдреса.ИдентификаторДома;
		КонецЕсли;
		
		// Данные сотрудника
		ДанныеСотрудника = Новый Структура("Сотрудник, ФИО, СНИЛС, КодДолжностиФРМР, ДолжностьФРМР, КодДолжности1002, Должность1002, ВерсияКлассификатораДолжностей1002");
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, Выборка);
		
		// Данные товаров
		ДанныеТоваров = Новый Массив;
		ВыборкаСтрокТовары = ВыборкаПоДокументам.Выбрать();
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			КлючиПараметров = ФормированиеПечатныхФормБольничнаяАптека.ПолучитьИменаКолонокТаблицы(ВыборкаСтрокТовары);
			
			ДанныеСтроки = Новый Структура(КлючиПараметров);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыборкаСтрокТовары);
			
			ДанныеТоваров.Добавить(ДанныеСтроки);
			
		КонецЦикла;
		
		Результат.Данные.Вставить("ДанныеШапки"      , ДанныеШапки);
		Результат.Данные.Вставить("ДанныеОрганизации", ДанныеОрганизации);
		Результат.Данные.Вставить("ДанныеСотрудника" , ДанныеСотрудника);
		Результат.Данные.Вставить("ДанныеТоваров"    , ДанныеТоваров);
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Интеграция РЭМД.Получение данных документа для СЭМД'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстОшибки = НСтр("ru = 'Не удалось получить данные по документу ""%1"" для РЭМД по причине:'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументСсылка);
		
		ТекстОшибкиКраткий   = ТекстОшибки + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиПодробный = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Результат.Ошибки.Добавить(ТекстОшибкиКраткий);
		Результат.Статус = "Ошибка";
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибкиПодробный);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ПередачаДанныхВРЭМД

#КонецОбласти // ИнтеграцияРЭМД

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти // СтандартныеПодсистемы

#КонецЕсли