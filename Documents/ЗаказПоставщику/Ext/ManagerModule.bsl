#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Функция формирует результат запроса по неотгруженной части заказа
//
// Параметры
//   Заказ - ссылка на заказ поставщику по которому необходимы остатки.
//   Документ - ссылка на документ поступления (или пустая ссылка)
//
// Возвращаемое значение
//   Результат запроса - результат запроса по неотгруженной части заказа\заявки.
//
Функция ПолучитьРезультатЗапросаПоОстаткам(Заказ, Документ = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Регистратор", Документ);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаЗаказы.Номенклатура        КАК Номенклатура,
	|	ТаблицаЗаказы.КодСтроки           КАК КодСтроки,
	|	СУММА(ТаблицаЗаказы.КОформлению)  КАК Количество
	|ПОМЕСТИТЬ ТаблицаОстатки
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.Номенклатура            КАК Номенклатура,
	|		ЗаказыОстатки.КодСтроки               КАК КодСтроки,
	|		ЗаказыОстатки.КОформлениюОстаток      КАК КОформлению
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(,
	|				ЗаказПоставщику = &Заказ
	|			) КАК ЗаказыОстатки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаказыДвижения.Номенклатура,
	|		ЗаказыДвижения.КодСтроки,
	|		ВЫБОР КОГДА ЗаказыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				-ЗаказыДвижения.КОформлению
	|			ИНАЧЕ
	|				ЗаказыДвижения.КОформлению
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыДвижения
	|	ГДЕ
	|		ЗаказыДвижения.Регистратор = &Регистратор
	|		И ЗаказыДвижения.ЗаказПоставщику = &Заказ
	|		И ЗаказыДвижения.Активность
	|	) КАК ТаблицаЗаказы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаЗаказы.Номенклатура,
	|		ТаблицаЗаказы.КодСтроки
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ТаблицаЗаказы.КОформлению) > 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказТовары.НоменклатураПоставщика        КАК НоменклатураПоставщика,
	|	ТаблицаОстатки.Номенклатура               КАК Номенклатура,
	|	ТаблицаОстатки.КодСтроки                  КАК КодСтроки,
	|	ТаблицаОстатки.Количество                 КАК Количество,
	|	ЗаказТовары.ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
	|	ЗаказТовары.Коэффициент                   КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ТаблицаОстатки.Количество = ЗаказТовары.Количество
	|			ТОГДА ЗаказТовары.КоличествоВЕдиницахИзмерения
	|		КОГДА ЗаказТовары.Коэффициент = 0
	|			ТОГДА 0		
	|		ИНАЧЕ ТаблицаОстатки.Количество / ЗаказТовары.Коэффициент
	|	КОНЕЦ                                     КАК КоличествоВЕдиницахИзмерения,
	|	ЗаказТовары.Цена                          КАК Цена,
	|	ЗаказТовары.Количество                    КАК КоличествоПоДокументу,
	|	ЗаказТовары.КоличествоВЕдиницахИзмерения  КАК КоличествоВЕдиницахИзмеренияПоДокументу,
	|	ЗаказТовары.СтавкаНДС                     КАК СтавкаНДС,
	|	ЗаказТовары.Сумма                         КАК Сумма,
	|	ЗаказТовары.СуммаНДС                      КАК СуммаНДС,
	|	ЗаказТовары.СуммаСНДС                     КАК СуммаСНДС,
	|	ДанныеЗаказа.ЦенаВключаетНДС              КАК ЦенаВключаетНДС,
	|	ДанныеЗаказа.Валюта                       КАК Валюта,
	|	ДанныеЗаказа.Дата                         КАК ДатаДокумента
	|ИЗ
	|	ТаблицаОстатки КАК ТаблицаОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ДанныеЗаказа
	|		ПО
	|			ДанныеЗаказа.Ссылка = &Заказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказТовары
	|		ПО
	|			ТаблицаОстатки.Номенклатура = ЗаказТовары.Номенклатура
	|			И ТаблицаОстатки.КодСтроки = ЗаказТовары.КодСтроки
	|			И ЗаказТовары.Ссылка = &Заказ
	|
	|УПОРЯДОЧИТЬ ПО ЗаказТовары.НомерСтроки
	|";
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить();
	
КонецФункции

// Определяет необходимость контроля закрытия заказа
//
Функция КонтролироватьВыполнениеЗаказа() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа со статусами документа
#Область Статусы

// Проверяет возможность ручного изменения статуса
//
// Возвращаемое значение
//   Булево - Истина -ручное изменение разрешено
//
Функция РазрешеноРучноеИзменениеСтатуса() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
// Вызываются из процедуры ОбщегоНазначенияБольничнаяАптека.УстановитьСтатусОбъектов(...)
//
// Параметры:
//   МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//   НовыйСтатус - Строка - Имя нового статуса
//   ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//   Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПоставщикам[НовыйСтатус];
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ПОМЕСТИТЬ втДокументы
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;";
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику
		|ПОМЕСТИТЬ
		|	ОстаткиПоЗаказам
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику В (&МассивДокументов)) КАК ЗаказыПоставщикамОстатки
		|ГДЕ
		|	ЗаказыПоставщикамОстатки.КОформлениюОстаток > 0
		|;
		|ВЫБРАТЬ
		|	*,
		|	ВЫБОР
		|		КОГДА ОстаткиПоЗаказам.ЗаказПоставщику ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОстаткиПоЗаказу
		|ИЗ
		|	втДокументы КАК втДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ОстаткиПоЗаказам КАК ОстаткиПоЗаказам
		|			ПО
		|				втДокументы.Ссылка = ОстаткиПоЗаказам.ЗаказПоставщику
		|";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ * ИЗ втДокументы КАК втДокументы";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
// Вызываются из процедуры ОбщегоНазначенияБольничнаяАптека.УстановитьСтатусОбъектов(...)
//
// Параметры:
//   ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//   НовыйСтатус - Перечисление - Новый статус
//   ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//   Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа")
	   И ВыборкаПроверки.ЕстьОстаткиПоЗаказу Тогда
		
		ТекстОшибки = НСтр("ru='У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ поставлен не полностью'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка,,, Отказ);
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

#КонецОбласти // Статусы

////////////////////////////////////////////////////////////////////////////////
// Работа с отменой строк документа
#Область ОтменаСтрок

// Возвращает признак использования причин отмены строк заказа
//
// Возвращаемое значение
//   Булево - Истина, если используются причины отмены
//
Функция ИспользоватьПричиныОтмены() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам");
	
КонецФункции

// Возвращает полное имя объекта метаданных причин отмены
//
// Возвращаемое значение
//   Строка
//
Функция ИмяОбъектаПричиныОтмены() Экспорт
	
	Возврат Метаданные.Справочники.ПричиныОтменыЗаказовПоставщикам.ПолноеИмя();
	
КонецФункции

#КонецОбласти // ОтменаСтрок

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ПодразделениеОрганизации)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение
#Область Проведение

// Инициализирует таблицы значений, содержащие данные для проведения документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицыДвиженийДляПроведения(ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	ОсновныеДанныеДокумента = ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства);
	
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаВтТаблицаТовары());
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаЗаказыПоставщикам(), Метаданные.РегистрыНакопления.ЗаказыПоставщикам);
	
	Запрос = Новый Запрос(ПроведениеБольничнаяАптека.ПолучитьТекстЗапросаДвижений(ДополнительныеСвойства, Регистры));
	
	Для Каждого ДанныеДокумента Из ОсновныеДанныеДокумента Цикл
		Запрос.УстановитьПараметр(ДанныеДокумента.Ключ, ДанныеДокумента.Значение);
	КонецЦикла;
	
	ПроведениеБольничнаяАптека.ЗаполнитьТаблицыДвижений(ДополнительныеСвойства, Запрос.ВыполнитьПакет(), Регистры);
	
КонецПроцедуры

Функция ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства)
	
	ЗапрашиваемыеДанные = Новый Структура;
	ЗапрашиваемыеДанные.Вставить("Ссылка");
	ЗапрашиваемыеДанные.Вставить("Период", "Дата");
	ЗапрашиваемыеДанные.Вставить("Организация");
	ЗапрашиваемыеДанные.Вставить("ПодразделениеОрганизации");
	ЗапрашиваемыеДанные.Вставить("Контрагент");
	ЗапрашиваемыеДанные.Вставить("ДоговорКонтрагента");
	ЗапрашиваемыеДанные.Вставить("Спецификация", "СпецификацияКДоговору");
	ЗапрашиваемыеДанные.Вставить("Статус");
	
	ОсновныеДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроведениеБольничнаяАптека.ПолучитьСсылкуНаДокументДляПроведения(ДополнительныеСвойства),
		ЗапрашиваемыеДанные);
		
	ОсновныеДанныеДокумента.Вставить("ЕстьСпецификация", ЗначениеЗаполнено(ОсновныеДанныеДокумента.Спецификация));
	
	Возврат ОсновныеДанныеДокумента;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаТовары()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                 КАК НомерСтроки,
	|	&Организация                              КАК Организация,
	|	ТаблицаТовары.КодСтроки                   КАК КодСтроки,
	|	ТаблицаТовары.КодСтрокиСпецификации       КАК КодСтрокиСпецификации,
	|	ТаблицаТовары.Номенклатура                КАК Номенклатура,
	|	ТаблицаТовары.Количество                  КАК Количество,
	|	ТаблицаТовары.Отменено                    КАК Отменено,
	|	ТаблицаТовары.ПричинаОтмены               КАК ПричинаОтмены
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаказыПоставщикам()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1                                       КАК Порядок,
	|	Товары.НомерСтроки                      КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	Товары.КодСтроки                        КАК КодСтроки,
	|	&Ссылка	                                КАК ЗаказПоставщику,
	|	&Спецификация                           КАК Спецификация,
	|	Товары.КодСтрокиСпецификации            КАК КодСтрокиСпецификации,
	|	Товары.Номенклатура                     КАК Номенклатура,
	|	0                                       КАК ПоСпецификации,
	|	Товары.Количество                       КАК Заказано,
	|	ВЫБОР КОГДА (НЕ Товары.Отменено)
	|			И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)) ТОГДА
	|			Товары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ                                   КАК КОформлению,
	|	НЕОПРЕДЕЛЕНО                            КАК ПричинаОтмены
	|ИЗ
	|	ТаблицаТовары КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                       КАК Порядок,
	|	Товары.НомерСтроки                      КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	Товары.КодСтроки                        КАК КодСтроки,
	|	&Ссылка	                                КАК ЗаказПоставщику,
	|	&Спецификация                           КАК Спецификация,
	|	Товары.КодСтрокиСпецификации            КАК КодСтрокиСпецификации,
	|	Товары.Номенклатура                     КАК Номенклатура,
	|	0                                       КАК ПоСпецификации,
	|	-Товары.Количество                      КАК Заказано,
	|	0                                       КАК КОформлению,
	|	Товары.ПричинаОтмены                    КАК ПричинаОтмены
	|ИЗ
	|	ТаблицаТовары КАК Товары
	|ГДЕ
	|	Товары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3                                       КАК Порядок,
	|	Товары.НомерСтроки                      КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	0                                       КАК КодСтроки,
	|	НЕОПРЕДЕЛЕНО                            КАК ЗаказПоставщику,
	|	&Спецификация                           КАК Спецификация,
	|	Товары.КодСтрокиСпецификации            КАК КодСтрокиСпецификации,
	|	Товары.Номенклатура                     КАК Номенклатура,
	|	Товары.Количество                       КАК ПоСпецификации,
	|	0                                       КАК Заказано,
	|	0                                       КАК КОформлению,
	|	НЕОПРЕДЕЛЕНО                            КАК ПричинаОтмены
	|ИЗ
	|	ТаблицаТовары КАК Товары
	|ГДЕ
	|	&ЕстьСпецификация
	|	И НЕ Товары.Отменено
	|	И Товары.КодСтрокиСпецификации <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // Проведение

////////////////////////////////////////////////////////////////////////////////
// Печать
#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандыПечати(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыПечати);
	
КонецПроцедуры

// Возвращает список доступных печатных форм документа
//
Функция ДоступныеПечатныеФормы() Экспорт
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	МенеджерПечати      = МетаданныеДокумента.ПолноеИмя();
	МетаданныеМакетов   = МетаданныеДокумента.Макеты;
	
	ПечатныеФормы = УправлениеПечатьюБольничнаяАптека.СоздатьКоллекциюДоступныхПечатныхФорм();
	
	ПечатнаяФорма = УправлениеПечатьюБольничнаяАптека.ДобавитьПечатнуюФорму(ПечатныеФормы, "ЗаказПоставщику", МенеджерПечати);
	ПечатнаяФорма.Представление = МетаданныеМакетов.ПФ_MXL_ЗаказПоставщику.Представление();
	ПечатнаяФорма.ПутьКМакету = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(МетаданныеМакетов.ПФ_MXL_ЗаказПоставщику);
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандуПечати(ПечатнаяФорма);
	
	Возврат ПечатныеФормы;
	
КонецФункции

Функция ПолучитьТекстЗапросаДанныеДляПечати()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Документ.Ссылка              КАК Ссылка,
	|	Документ.Номер               КАК НомерДокумента,
	|	Документ.Дата                КАК ДатаДокумента,
	|	Документ.Организация         КАК Организация,
	|	Документ.Организация         КАК Получатель,
	|	Документ.Контрагент          КАК Контрагент,
	|	Документ.Контрагент          КАК Отправитель,
	|	Документ.ДоговорКонтрагента  КАК Договор,
	|	НЕОПРЕДЕЛЕНО                 КАК БанковскийСчет,
	|	НЕОПРЕДЕЛЕНО                 КАК БанковскийСчетТекстКорреспондента,
	|	Документ.ЦенаВключаетНДС     КАК ЦенаВключаетНДС,
	|	Документ.Валюта              КАК Валюта,
	|	Документ.Товары.(
	|		НомерСтроки                      КАК НомерСтроки,
	|		Номенклатура                     КАК Номенклатура,
	|		Номенклатура.НаименованиеПолное  КАК ТоварНаименование,
	|		Номенклатура.Код                 КАК ТоварКод,
	|		ЕдиницаИзмерения                 КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмерения.КодОКЕИ         КАК КодПоОКЕИ,
	|		КоличествоВЕдиницахИзмерения     КАК Количество,
	|		Цена                             КАК Цена,
	|		Сумма                            КАК Сумма,
	|		СтавкаНДС                        КАК СтавкаНДС,
	|		СуммаНДС                         КАК СуммаНДС,
	|		Отменено                         КАК Отменено
	|	)
	|ИЗ
	|	Документ.ЗаказПоставщику КАК Документ
	|
	|ГДЕ
	|	Документ.Ссылка В (&ТекущийДокумент)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПечатьЗаказПоставщику(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	
	ПолноеИмяМакета = ФормированиеПечатныхФормБольничнаяАптека.ПутьКМакету(ПустаяСсылка().Метаданные().Макеты.ПФ_MXL_ЗаказПоставщику);
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ПолноеИмяМакета;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	
	МассивВыводимыхОбластей = Новый Массив;
	
	ИмяОбластьШапка  = "ШапкаТаблицы";
	ИмяОбластьСтрока = "Строка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДанныеДляПечати();
	Запрос.УстановитьПараметр("ТекущийДокумент", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(Шапка.Ссылка, ТабличныйДокумент, Макет);
		
		// Получение параметров для заполнения
		ПараметрыИзШапки = ПолучитьПараметрыШапкиЗаказПоставщику(Шапка);
		
		// Вывод области Заголовок
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Заголовок", ПараметрыИзШапки);
		
		// Вывод области РеквизитыШапки
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "РеквизитыШапки", ПараметрыИзШапки);
		
		// Вывод области ШапкаТаблицы
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, ИмяОбластьШапка, ПараметрыИзШапки);
		
		// Инициализация итогов по документу
		ПараметрыИтого = Новый Структура;
		ПараметрыИтого.Вставить("Сумма"   , 0);
		ПараметрыИтого.Вставить("СуммаНДС", 0);
		
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		
		ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластьСтрока);
		
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		НомерСтроки = 0;
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Итого"));
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("СуммаПрописью"));
				МассивВыводимыхОбластей.Добавить(Макет.ПолучитьОбласть("Подписи"));
			КонецЕсли;
			
			Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивВыводимыхОбластей) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть(ИмяОбластьШапка));
			КонецЕсли;
			
			// Вывод области Строка
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			ФормированиеПечатныхФормБольничнаяАптека.РассчитатьИтоги(ВыборкаСтрокТовары, ПараметрыИтого);
			
		КонецЦикла;
		
		// Вывод области Итого
		ПараметрыИтого.Вставить("НДС", ?(Шапка.ЦенаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Сумма НДС'")) + ":");
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Итого", ПараметрыИтого);
		
		// Вывод области СуммаПрописью
		СуммаКПрописи = ПараметрыИтого.Сумма + ?(Шапка.ЦенаВключаетНДС, 0, ПараметрыИтого.СуммаНДС);
		ФорматированнаяСумма = ОбщегоНазначенияБольничнаяАптека.ФорматСумм(СуммаКПрописи, Шапка.Валюта);
		ШаблонИтоговаяСтрока = НСтр("ru = 'Всего наименований %1, на сумму %2'");
		
		ПараметрыСуммаПрописью = Новый Структура;
		ПараметрыСуммаПрописью.Вставить("ИтоговаяСтрока", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИтоговаяСтрока, КоличествоСтрок, ФорматированнаяСумма));
		ПараметрыСуммаПрописью.Вставить("СуммаПрописью" , РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.Валюта));
		
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "СуммаПрописью", ПараметрыСуммаПрописью);
		
		// Вывод области Подписи
		ФормированиеПечатныхФормБольничнаяАптека.ВывестиОбластьПоИмени(ТабличныйДокумент, Макет, "Подписи", ПараметрыИзШапки);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыШапкиЗаказПоставщику(Шапка)
	
	КлючиПараметров = ФормированиеПечатныхФормБольничнаяАптека.ПолучитьИменаКолонокТаблицы(Шапка);
	
	Параметры = Новый Структура(КлючиПараметров);
	ЗаполнитьЗначенияСвойств(Параметры, Шапка);
	
	// Данные заголовка
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерДокумента);
	ШаблонТекстЗаголовка = НСтр("ru = 'Заказ поставщику № %1 от %2'");
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонТекстЗаголовка, НомерДокумента, Формат(Шапка.ДатаДокумента, "ДЛФ=DD"));
	
	СведенияОПолучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.ДатаДокумента);
	ПолучательПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПолучателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	
	СведенияОбОтправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Отправитель, Шапка.ДатаДокумента);
	ОтправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОтправителе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	
	Параметры.Вставить("ТекстЗаголовка"          , ТекстЗаголовка);
	Параметры.Вставить("ПолучательПредставление" , ПолучательПредставление);
	Параметры.Вставить("ОтправительПредставление", ОтправительПредставление);
	
	// Данные шапки таблицы
	Параметры.Вставить("ИмяКолонкиКодов", НСтр("ru = 'Код'"));
	Параметры.Вставить("ИмяКолонкиТовар", НСтр("ru = 'Товары (работы, услуги)'"));
	
	// Данные подписей
	Параметры.Вставить("РуководительФИО", "");
	Параметры.Вставить("БухгалтерФИО"   , "");
	
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти // Печать

////////////////////////////////////////////////////////////////////////////////
// Формирование отчетов
#Область ФормированиеОтчетов

// Возвращает данные для заполнения отчета Состояние выполнения документов.
//
// Параметры:
//  ВходящиеДокументы - СписокЗначений - ссылки документов Заказ поставщику,
//                                       для которых получается состояние выполнения.
//
// Возвращаемое значение:
//  ДанныеОтчета - Структура - структурированные данные для заполнения отчета.
//
Функция ПолучитьДанныеОтчетаСостоянияВыполненияДокументов(ВходящиеДокументы) Экспорт
	
	ТекстЗапроса = ТекстЗапросаСостоянияВыполненияДокументов();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗаказПоставщику", ВходящиеДокументы);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ПоследнийРезультат = РезультатыЗапросов.ВГраница();
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("Заказано"            , РезультатыЗапросов[ПоследнийРезультат - 3].Выгрузить());
	ДанныеОтчета.Вставить("ВПроцессеПоступления", РезультатыЗапросов[ПоследнийРезультат - 2].Выгрузить());
	ДанныеОтчета.Вставить("Поступило"           , РезультатыЗапросов[ПоследнийРезультат - 1].Выгрузить());
	ДанныеОтчета.Вставить("Отменено"            , РезультатыЗапросов[ПоследнийРезультат    ].Выгрузить());
	
	Возврат ДанныеОтчета;
	
КонецФункции

Функция ТекстЗапросаСостоянияВыполненияДокументов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документы.Ссылка  КАК Документ
	|ПОМЕСТИТЬ Документы
	|ИЗ
	|	Документ.ЗаказПоставщику КАК Документы
	|ГДЕ
	|	Документы.Ссылка В (&ЗаказПоставщику)
	|	И Документы.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	
	// Обороты по заказам
	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОборотыЗаказов.Регистратор      КАК Регистратор,
	|	ОборотыЗаказов.ЗаказПоставщику  КАК ЗаказПоставщику,
	|	ОборотыЗаказов.Номенклатура     КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ОборотыЗаказов.Номенклатура.Упаковка = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ОборотыЗаказов.Номенклатура.ОсновнаяЕдиницаУчета
	|		ИНАЧЕ ОборотыЗаказов.Номенклатура.Упаковка
	|	КОНЕЦ                           КАК ЕдиницаИзмерения,
	|	ОборотыЗаказов.КодСтроки        КАК КодСтроки,
	|	СУММА(ВЫБОР
	|		КОГДА ОборотыЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ОборотыЗаказов.Заказано / Упаковки.Коэффициент
	|		ИНАЧЕ 0
	|	КОНЕЦ)                          КАК Заказано,
	|	СУММА(ВЫБОР
	|		КОГДА ОборотыЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ОборотыЗаказов.КОформлению / Упаковки.Коэффициент
	|		ИНАЧЕ 0
	|	КОНЕЦ)                          КАК КПоступлению,
	|	СУММА(ВЫБОР
	|		КОГДА ОборотыЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ОборотыЗаказов.КОформлению / Упаковки.Коэффициент
	|		ИНАЧЕ 0
	|	КОНЕЦ)                          КАК Принято,
	|	ОборотыЗаказов.ПричинаОтмены    КАК ПричинаОтмены
	|ПОМЕСТИТЬ ОборотыЗаказов
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ОборотыЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК Упаковки
	|		ПО
	|			Упаковки.Номенклатура = ОборотыЗаказов.Номенклатура
	|			И ВЫБОР
	|				КОГДА ОборотыЗаказов.Номенклатура.Упаковка = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|					ТОГДА Упаковки.ЕдиницаИзмерения = ОборотыЗаказов.Номенклатура.ОсновнаяЕдиницаУчета
	|				ИНАЧЕ Упаковки.ЕдиницаИзмерения = ОборотыЗаказов.Номенклатура.Упаковка
	|			КОНЕЦ
	|ГДЕ
	|	ОборотыЗаказов.ЗаказПоставщику В (ВЫБРАТЬ Документ ИЗ Документы)
	|СГРУППИРОВАТЬ ПО
	|	ОборотыЗаказов.Регистратор,
	|	ОборотыЗаказов.ЗаказПоставщику,
	|	ОборотыЗаказов.Номенклатура,
	|	ОборотыЗаказов.КодСтроки,
	|	ОборотыЗаказов.ПричинаОтмены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	
	// Суммы оборотов
	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СуммыЗаказов.Ссылка            КАК ЗаказПоставщику,
	|	СуммыЗаказов.Номенклатура      КАК Номенклатура,
	|	СуммыЗаказов.КодСтроки         КАК КодСтроки,
	|	СУММА(СуммыЗаказов.СуммаСНДС)  КАК Сумма
	|ПОМЕСТИТЬ СуммыЗаказов
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК СуммыЗаказов
	|ГДЕ
	|	СуммыЗаказов.Ссылка В (ВЫБРАТЬ Документ ИЗ Документы)
	|СГРУППИРОВАТЬ ПО
	|	СуммыЗаказов.Ссылка,
	|	СуммыЗаказов.Номенклатура,
	|	СуммыЗаказов.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СуммыПоступлений.Ссылка            КАК ПоступлениеТоваров,
	|	СуммыПоступлений.Номенклатура      КАК Номенклатура,
	|	СуммыПоступлений.КодСтроки         КАК КодСтроки,
	|	СУММА(СуммыПоступлений.СуммаСНДС)  КАК Сумма
	|ПОМЕСТИТЬ СуммыПоступлений
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК СуммыПоступлений
	|ГДЕ
	|	СуммыПоступлений.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Регистратор ИЗ ОборотыЗаказов ГДЕ ОборотыЗаказов.Регистратор ССЫЛКА Документ.ПоступлениеТоваров)
	|СГРУППИРОВАТЬ ПО
	|	СуммыПоступлений.Ссылка,
	|	СуммыПоступлений.Номенклатура,
	|	СуммыПоступлений.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	
	// Расчет показателей
	
	|ВЫБРАТЬ
	|	ОборотыЗаказов.ЗаказПоставщику   КАК ЗаказПоставщику,
	|	ОборотыЗаказов.Номенклатура      КАК Номенклатура,
	|	ОборотыЗаказов.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	ОборотыЗаказов.Заказано          КАК Заказано,
	|	ОборотыЗаказов.КПоступлению      КАК КПоступлению,
	|	ОборотыЗаказов.КПоступлению      КАК ОсталосьПринять,
	|	0                                КАК Принято,
	|	ЕСТЬNULL(СуммыЗаказов.Сумма, 0)  КАК СуммаЗаказано,
	|	0                                КАК СуммаПринято
	|ПОМЕСТИТЬ Заказы
	|ИЗ
	|	ОборотыЗаказов КАК ОборотыЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			СуммыЗаказов КАК СуммыЗаказов
	|		ПО
	|			СуммыЗаказов.ЗаказПоставщику = ОборотыЗаказов.ЗаказПоставщику
	|			И СуммыЗаказов.Номенклатура = ОборотыЗаказов.Номенклатура
	|			И СуммыЗаказов.КодСтроки = ОборотыЗаказов.КодСтроки
	|ГДЕ
	|	ОборотыЗаказов.Регистратор = ОборотыЗаказов.ЗаказПоставщику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОборотыЗаказов.ЗаказПоставщику       КАК ЗаказПоставщику,
	|	ОборотыЗаказов.Номенклатура          КАК Номенклатура,
	|	ОборотыЗаказов.ЕдиницаИзмерения      КАК ЕдиницаИзмерения,
	|	0                                    КАК Заказано,
	|	0                                    КАК КПоступлению,
	|	-ОборотыЗаказов.Принято              КАК ОсталосьПринять,
	|	ОборотыЗаказов.Принято               КАК Принято,
	|	0                                    КАК СуммаЗаказано,
	|	ЕСТЬNULL(СуммыПоступлений.Сумма, 0)  КАК СуммаПринято
	|ИЗ
	|	ОборотыЗаказов КАК ОборотыЗаказов
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			СуммыПоступлений КАК СуммыПоступлений
	|		ПО
	|			СуммыПоступлений.ПоступлениеТоваров = ОборотыЗаказов.Регистратор
	|			И СуммыПоступлений.Номенклатура = ОборотыЗаказов.Номенклатура
	|			И СуммыПоступлений.КодСтроки = ОборотыЗаказов.КодСтроки
	|ГДЕ
	|	ОборотыЗаказов.ЗаказПоставщику <> ОборотыЗаказов.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СводныеДанныеПоЗаказам.ЗаказПоставщику         КАК ЗаказПоставщику,
	|	СводныеДанныеПоЗаказам.Номенклатура            КАК Номенклатура,
	|	СводныеДанныеПоЗаказам.ЕдиницаИзмерения        КАК ЕдиницаИзмерения,
	|	СУММА(СводныеДанныеПоЗаказам.Заказано)         КАК Заказано,
	|	СУММА(СводныеДанныеПоЗаказам.КПоступлению)     КАК КПоступлению,
	|	СУММА(СводныеДанныеПоЗаказам.ОсталосьПринять)  КАК ОсталосьПринять,
	|	СУММА(СводныеДанныеПоЗаказам.Принято)          КАК Принято,
	|	СУММА(СводныеДанныеПоЗаказам.СуммаЗаказано)    КАК СуммаЗаказано,
	|	СУММА(СводныеДанныеПоЗаказам.СуммаПринято)     КАК СуммаПринято
	|ПОМЕСТИТЬ СводныеДанныеПоЗаказам
	|ИЗ
	|	Заказы КАК СводныеДанныеПоЗаказам
	|
	|СГРУППИРОВАТЬ ПО
	|	СводныеДанныеПоЗаказам.ЗаказПоставщику,
	|	СводныеДанныеПоЗаказам.Номенклатура,
	|	СводныеДанныеПоЗаказам.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	
	// Заказано
	
	|ВЫБРАТЬ
	|	СводныеДанныеПоЗаказам.ЗаказПоставщику   КАК Документ,
	|	СводныеДанныеПоЗаказам.Номенклатура      КАК Номенклатура,
	|	СводныеДанныеПоЗаказам.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	СводныеДанныеПоЗаказам.Заказано          КАК Заказано,
	|	СводныеДанныеПоЗаказам.СуммаЗаказано     КАК СуммаЗаказано
	|ИЗ
	|	СводныеДанныеПоЗаказам КАК СводныеДанныеПоЗаказам
	|ГДЕ
	|	СводныеДанныеПоЗаказам.Заказано > 0
	|	И СводныеДанныеПоЗаказам.Принято = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	
	// В процессе поступления
	
	|ВЫБРАТЬ
	|	СводныеДанныеПоЗаказам.ЗаказПоставщику   КАК Документ,
	|	СводныеДанныеПоЗаказам.Номенклатура      КАК Номенклатура,
	|	СводныеДанныеПоЗаказам.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	СводныеДанныеПоЗаказам.КПоступлению      КАК КПоступлению,
	|	СводныеДанныеПоЗаказам.ОсталосьПринять   КАК ОсталосьПринять,
	|	СводныеДанныеПоЗаказам.Принято           КАК Принято
	|ИЗ
	|	СводныеДанныеПоЗаказам КАК СводныеДанныеПоЗаказам
	|ГДЕ
	|	СводныеДанныеПоЗаказам.ОсталосьПринять > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	
	// Поступило полностью
	
	|ВЫБРАТЬ
	|	СводныеДанныеПоЗаказам.ЗаказПоставщику   КАК Документ,
	|	СводныеДанныеПоЗаказам.Номенклатура      КАК Номенклатура,
	|	СводныеДанныеПоЗаказам.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	СводныеДанныеПоЗаказам.Принято           КАК Принято,
	|	СводныеДанныеПоЗаказам.СуммаПринято      КАК СуммаПринято
	|ИЗ
	|	СводныеДанныеПоЗаказам КАК СводныеДанныеПоЗаказам
	|ГДЕ
	|	СводныеДанныеПоЗаказам.ОсталосьПринять <= 0
	|	И СводныеДанныеПоЗаказам.Принято > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	
	// Отменено
	
	|ВЫБРАТЬ
	|	ОтмененныеЗаказы.ЗаказПоставщику   КАК Документ,
	|	ОтмененныеЗаказы.Номенклатура      КАК Номенклатура,
	|	ОтмененныеЗаказы.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	ОтмененныеЗаказы.КодСтроки         КАК КодСтроки,
	|	-ОтмененныеЗаказы.Заказано         КАК Отменено,
	|	ЕСТЬNULL(СуммыЗаказов.Сумма, 0)    КАК СуммаОтменено,
	|	ОтмененныеЗаказы.ПричинаОтмены     КАК ПричинаОтмены
	|ИЗ
	|	ОборотыЗаказов КАК ОтмененныеЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			СуммыЗаказов КАК СуммыЗаказов
	|		ПО
	|			СуммыЗаказов.ЗаказПоставщику = ОтмененныеЗаказы.ЗаказПоставщику
	|			И СуммыЗаказов.Номенклатура = ОтмененныеЗаказы.Номенклатура
	|			И СуммыЗаказов.КодСтроки = ОтмененныеЗаказы.КодСтроки
	|ГДЕ
	|	ОтмененныеЗаказы.Заказано < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	Номенклатура,
	|	ЕдиницаИзмерения
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // ФормированиеОтчетов

////////////////////////////////////////////////////////////////////////////////
// Команды формы
#Область КомандыФормы

// Заполняет список команд ввода на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииБольничнаяАптека.ДобавитьКомандыСозданияНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
КонецПроцедуры

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	МенюОтчетыБольничнаяАптека.ДобавитьОбщиеКоманды(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыОтчетов, НастройкиФормы);
	
	Отчеты.СостояниеВыполненияДокументов.ДобавитьКомандуОтчета(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти // КомандыФормы

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Доступность =
		  Не ТекущиеДелаСервер.ДелоОтключено("ЗаказыПоставщикам")
		И ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам")
		И ПравоДоступа("Редактирование", ПустаяСсылка().Метаданные());
	
	Если Не Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументЗаказПоставщику.Ссылка) КАК ЗаказыПоставщикамВсегоВРаботе,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА СостоянияЗаказовПоставщикам.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаАктуальности >= СостоянияЗаказовПоставщикам.ДатаСобытия ТОГДА
	|			СостоянияЗаказовПоставщикам.Заказ
	|		КОНЕЦ) КАК ЗаказыПоставщикамНаСегодня,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА СостоянияЗаказовПоставщикам.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаАктуальности > СостоянияЗаказовПоставщикам.ДатаСобытия 
	|				И СостоянияЗаказовПоставщикам.Состояние В (
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяСогласование),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПодтверждение),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ГотовКПоступлению),
	|					ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПоступление)) ТОГДА
	|			СостоянияЗаказовПоставщикам.Заказ
	|		КОНЕЦ) КАК ЗаказыПоставщикамПросроченоИсполнение
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДокументЗаказПоставщику
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовПоставщикам КАК СостоянияЗаказовПоставщикам
	|		ПО (СостоянияЗаказовПоставщикам.Заказ = ДокументЗаказПоставщику.Ссылка)}
	|ГДЕ
	|	(НЕ (СостоянияЗаказовПоставщикам.Заказ ЕСТЬ NULL) ИЛИ НЕ ДокументЗаказПоставщику.Проведен)
	|	И ДокументЗаказПоставщику.Ответственный = &Пользователь
	|	И ЕСТЬNULL(СостоянияЗаказовПоставщикам.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.Закрыт)
	|	И (НЕ ДокументЗаказПоставщику.ПометкаУдаления)
	|";
	
	
	ИмяФормы = Метаданные.Документы.ЗаказПоставщику.Формы.ФормаСписка.ПолноеИмя();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ПустаяДата = Дата(1, 1, 1);
	
	Запрос.УстановитьПараметр("ДатаАктуальности", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос);
	
	// Заполнение дел.
	// ЗаказыПоставщикам
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "ЗаказыПоставщикам";
	ДелоРодитель.Представление  = НСтр("ru = 'Заказы поставщикам'");
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.УправлениеЗапасами;
	
	// ЗаказыПоставщикамВсегоВРаботе
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", "ВсеОткрытые");
	ПараметрыОтбора.Вставить("Актуальность", "");
	ПараметрыОтбора.Вставить("ДатаСобытия", ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ТекущийПользователь);
	ПараметрыОтбора.Вставить("Приоритет", "");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаказыПоставщикамВсегоВРаботе";
	Дело.ЕстьДела       = Результат.ЗаказыПоставщикамВсегоВРаботе > 0;
	Дело.Представление  = НСтр("ru = 'Всего заказов в работе'");
	Дело.Количество     = Результат.ЗаказыПоставщикамВсегоВРаботе;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаказыПоставщикам";
	
	// ЗаказыПоставщикамНаСегодня
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", "ВсеОткрытые");
	ПараметрыОтбора.Вставить("Актуальность", "Сегодня");
	ПараметрыОтбора.Вставить("ДатаСобытия", ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ТекущийПользователь);
	ПараметрыОтбора.Вставить("Приоритет", "");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаказыПоставщикамНаСегодня";
	Дело.ЕстьДела       = Результат.ЗаказыПоставщикамНаСегодня > 0;
	Дело.Представление  = НСтр("ru = 'На сегодня'");
	Дело.Количество     = Результат.ЗаказыПоставщикамНаСегодня;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаказыПоставщикам";
	
	// ЗаказыПоставщикамПросроченоИсполнение
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", "ВсеОжидающиеИсполнения");
	ПараметрыОтбора.Вставить("Актуальность", "Просрочен");
	ПараметрыОтбора.Вставить("ДатаСобытия", ПустаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ТекущийПользователь);
	ПараметрыОтбора.Вставить("Приоритет", "");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаказыПоставщикамПросроченоИсполнение";
	Дело.ЕстьДела       = Результат.ЗаказыПоставщикамПросроченоИсполнение > 0;
	Дело.Представление  = НСтр("ru = 'Просрочено исполнение заказов'");
	Дело.Количество     = Результат.ЗаказыПоставщикамПросроченоИсполнение;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаказыПоставщикам";
	
	Если Результат.ЗаказыПоставщикамВсегоВРаботе > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ТекущиеДела

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти // СтандартныеПодсистемы

////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ
#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьНалогообложениеНДСДанныеДляОбновления(Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику
	|ГДЕ
	|	НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	И НЕ ПометкаУдаления
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ЗаполнитьНалогообложениеНДСОтложено(Параметры) Экспорт
	
	МетаданныеОбъекта = ПустаяСсылка().Метаданные();
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Документ = Выборка.Ссылка.ПолучитьОбъект();
			
			Если Документ = Неопределено
			 Или ЗначениеЗаполнено(Документ.НалогообложениеНДС) Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Документ);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,
				Выборка.Ссылка,
				ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти // ОбновлениеИнформационнойБазы

#КонецЕсли