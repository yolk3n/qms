#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Отменяет все строки, по которым не было документально оформлено поступление
//
Функция ОтменитьНепоставленныеСтроки(ПричинаОтмены, Знач ПроверятьОстатки = Ложь) Экспорт
	
	КоличествоОтмененныхСтрок = 0;
	
	Если ПроверятьОстатки Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказыПоставщикамОстатки.КодСтроки           КАК КодСтроки,
		|	ЗаказыПоставщикамОстатки.КОформлениюОстаток  КАК КОформлениюОстаток
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &ЗаказПоставщику) КАК ЗаказыПоставщикамОстатки
		|");
		
		Запрос.УстановитьПараметр("ЗаказПоставщику", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Действия = ОбработкаТабличнойЧастиКлиентСервер;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоУпаковок());
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
		ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(ЭтотОбъект);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
		
		КэшированныеЗначения = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			
			КОформлениюОстаток = Выборка.КОформлениюОстаток;
			
			// Найдем отменяемую строку с нужным кодом строки
			СтрокиКОтмене = Товары.НайтиСтроки(Новый Структура("КодСтроки, Отменено", Выборка.КодСтроки, Ложь));
			Для каждого СтрокаКОтмене Из СтрокиКОтмене Цикл
				
				Если КОформлениюОстаток = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если СтрокаКОтмене.Количество <= КОформлениюОстаток Тогда
					
					СтрокаКОтмене.Отменено = Истина;
					СтрокаКОтмене.ПричинаОтмены = ПричинаОтмены;
					КОформлениюОстаток = КОформлениюОстаток - СтрокаКОтмене.Количество
					
				Иначе
					
					ИндексТекущейСтроки = Товары.Индекс(СтрокаКОтмене);
					НоваяСтрока = Товары.Вставить(ИндексТекущейСтроки + 1);
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКОтмене);
					
					НоваяСтрока.КодСтроки = 0;
					НоваяСтрока.Отменено = Истина;
					НоваяСтрока.ПричинаОтмены = ПричинаОтмены;
					НоваяСтрока.Количество = КОформлениюОстаток;
					
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
					
					ТекКоличество = СтрокаКОтмене.Количество;
					СтрокаКОтмене.Количество = ТекКоличество - КОформлениюОстаток;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаКОтмене, СтруктураДействий, КэшированныеЗначения);
					
					КОформлениюОстаток = 0;
					
				КонецЕсли;
				
				КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого ТекСтрока Из Товары Цикл
			
			Если Не ТекСтрока.Отменено Тогда
				ТекСтрока.Отменено = Истина;
				ТекСтрока.ПричинаОтмены = ПричинаОтмены;
				КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

// Устанавливает статус для объекта документа
//
// Параметры:
// 		НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
// 		Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПоставщикам[НовыйСтатус];
	
	Если ЗначениеНовогоСтатуса = Перечисления.СтатусыТребованийОтделений.НеСогласован Тогда
		
		Если Согласован Тогда
			Согласован = Ложь;
		КонецЕсли;
		
	ИначеЕсли Статус <> Перечисления.СтатусыЗаказовПоставщикам.Подтвержден
			И Статус <> Перечисления.СтатусыЗаказовПоставщикам.КПоступлению
			И Статус <> Перечисления.СтатусыЗаказовПоставщикам.Закрыт
			И (ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден
			ИЛИ ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению
			ИЛИ ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПоставщикам.Закрыт) Тогда
		
		ЗаполнитьДатуПоступления();
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПричинаОтмены = Неопределено;
		Если ДополнительныеПараметры.Свойство("ОтменаНеотработанныхСтрок", ПричинаОтмены) Тогда
			
			ПроверятьОстатки = Статус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению
			               Или Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
			КоличествоСтрок = ОтменитьНепоставленныеСтроки(ПричинаОтмены, ПроверятьОстатки);
			
		КонецЕсли;
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.СпецификацияКДоговору") Тогда
		ЗаполнитьДокументНаОснованииСпецификацииКГосКонтракту(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
	ЗаполнитьПоЗначениямАвтозаполнения();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЖелаемаяДатаПоступления = Дата(1,1,1);
	ДатаПоступления = Дата(1,1,1);
	ДатаСогласования = Дата(1,1,1);
	МаксимальныйКодСтроки = 0;
	Согласован = Ложь;
	Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	НомерПоДаннымПоставщика = "";
	ДатаПоДаннымПоставщика = Дата(1,1,1);
	
	СпецификацияКДоговору = Неопределено;
	Для Каждого ТекущаяСтрока Из Товары Цикл
		
		ТекущаяСтрока.КодСтроки = 0;
		ТекущаяСтрока.ДатаПоступления = Дата(1,1,1);
		ТекущаяСтрока.Отменено = Ложь;
		ТекущаяСтрока.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка();
		
	КонецЦикла;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	ОбработкаТабличнойЧастиСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, НепроверяемыеРеквизиты, Отказ);
	
	// Срок согласования заказа должен быть не меньше даты документа
	Если Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован
	   И ЗначениеЗаполнено(ДатаСогласования) И ДатаСогласования < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Дата согласования должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата, "ДЛФ=DD"));
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаСогласования",
			,
			Отказ);
		
	КонецЕсли;
	
	// Желаемая дата поступления в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Желаемая дата поступления должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаПоступления",
			,
			Отказ);
		
	КонецЕсли;
	
	ВсеСтрокиОтменены = (Товары.НайтиСтроки(Новый Структура("Отменено", Ложь)).Количество() = 0);
	
	Если Не ПоступлениеОднойДатой
	 Или ПоступлениеОднойДатой
	     И Не(Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден
	      Или Статус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению
	      Или Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт)
	 Или ПоступлениеОднойДатой И ВсеСтрокиОтменены Тогда
		НепроверяемыеРеквизиты.Добавить("ДатаПоступления");
	КонецЕсли;
	
	// Дата поступления в шапке должна быть не меньше даты документа
	Если ПоступлениеОднойДатой
	   И ЗначениеЗаполнено(ДатаПоступления)
	   И ДатаПоступления < НачалоДня(Дата)
	   И Не ВсеСтрокиОтменены Тогда
		
		ТекстОшибки = НСтр("ru='Дата поступления должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаПоступления",
			,
			Отказ);
		
	КонецЕсли;
	
	НепроверяемыеРеквизиты.Добавить("Товары.ПричинаОтмены");
	НепроверяемыеРеквизиты.Добавить("Товары.ДатаПоступления");
	
	
	Для Каждого СтрокаТовара Из Товары Цикл
		
		АдресОшибки = " " + НСтр("ru='в строке %1 списка ""Товары""'");
		АдресОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(АдресОшибки, СтрокаТовара.НомерСтроки);
		
		// Дата поступления в списке Товары обязательна к заполнению только для заказов в 
		// статусах Подтвержден, КПоступлению, Закрыт
		Если Не ПоступлениеОднойДатой
		   И (   Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден
		     Или Статус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению
		     Или Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт)
		   И Не СтрокаТовара.Отменено
		   И Не ЗначениеЗаполнено(СтрокаТовара.ДатаПоступления) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата поступления""'");
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТовара.НомерСтроки, "ДатаПоступления"),
				,
				Отказ);
			
		КонецЕсли;
		
		// Дата поступления в списке Товары должна быть не меньше даты документа
		Если Не ПоступлениеОднойДатой И ЗначениеЗаполнено(СтрокаТовара.ДатаПоступления) И СтрокаТовара.ДатаПоступления < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Дата поступления должна быть не меньше даты документа %Дата%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТовара.НомерСтроки, "ДатаПоступления"),
				,
				Отказ);
			
		КонецЕсли;
		
		// Причина отмены обязательна для заполнения в строках с признаком Отменено
		Если СтрокаТовара.Отменено
		   И ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам")
		   И Не ЗначениеЗаполнено(СтрокаТовара.ПричинаОтмены) Тогда
			
			ТекстОшибки = НСтр("ru='Необходимо указать причину отмены'");
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТовара.НомерСтроки, "ПричинаОтмены"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗакупкиСервер.ПроверитьКорректностьЗаполненияНоменклатурыПоставщика(ЭтотОбъект, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеБольничнаяАптека.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбработкаТабличнойЧастиСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");
	
	СуммаДокумента = ПолучитьСуммуЗаказанныхСтрок();
	
	НоваяДатаПоступления = Дата(1,1,1);
	Если Товары.Количество() > 0 Тогда
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам")
		 Или Статус = Перечисления.СтатусыЗаказовПоставщикам.Согласован
		 Или Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден
		 Или Статус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Отменено", Ложь);
			ПодтвержденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
			
			Если ПодтвержденныеСтроки.Количество() > 0 Тогда
				
				ТаблицаПодтвержденныхСтрок = Товары.Выгрузить(ПодтвержденныеСтроки, "ДатаПоступления");
				ТаблицаПодтвержденныхСтрок.Сортировать("ДатаПоступления Возр");
				НоваяДатаПоступления = ТаблицаПодтвержденныхСтрок[0].ДатаПоступления;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаПервогоПоступления = НоваяДатаПоступления;
	
	ДокументСогласован = Согласован;
	
	ОбщегоНазначенияБольничнаяАптека.ИзменитьПризнакСогласованностиДокумента(
		ЭтотОбъект,
		РежимЗаписи,
		Перечисления.СтатусыЗаказовПоставщикам.НеСогласован);
	
	// Установим дату согласования, если документ согласован
	Если Не ДокументСогласован И Согласован Тогда
		ДатаСогласования = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(Товары, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ, РежимПроведения);
	
	РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(Ссылка);
	
	ЗаказыСервер.ВыполнитьКонтрольЗаказаПослеПроведения(Ссылка, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение документа
#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент()
	
	Автор = Пользователи.ТекущийПользователь();
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	Если ОбщегоНазначенияБольничнаяАптека.ИспользоватьСтатусы(Ссылка) Тогда
		Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
	КонецЕсли;
	
	ПоступлениеОднойДатой = Истина;
	
	Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Приоритет);
	Организация = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	ПодразделениеОрганизации = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьПодразделениеПоУмолчанию(ПодразделениеОрганизации, Организация);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗначениямАвтозаполнения()
	
	ОбщегоНазначенияБольничнаяАптека.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "Организация");
	ОбщегоНазначенияБольничнаяАптека.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "ПодразделениеОрганизации", "Организация");
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	ОбщегоНазначенияБольничнаяАптека.ПроверитьЗаполнениеДоговораКонтрагента(ЭтотОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииСпецификацииКГосКонтракту(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                    КАК СпецификацияКДоговору,
	|	ДанныеДокумента.Организация               КАК Организация,
	|	ДанныеДокумента.ПодразделениеОрганизации  КАК ПодразделениеОрганизации,
	|	ДанныеДокумента.Партнер                   КАК Партнер,
	|	ДанныеДокумента.Контрагент                КАК Контрагент,
	|	ДанныеДокумента.ДоговорКонтрагента        КАК ДоговорКонтрагента,
	|	ДанныеДокумента.Валюта                    КАК Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС           КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.НалогообложениеНДС        КАК НалогообложениеНДС,
	|	ДанныеДокумента.ИсточникФинансирования    КАК ИсточникФинансирования,
	|	ДанныеДокумента.Статус                    КАК СтатусДокумента,
	|	НЕ ДанныеДокумента.Проведен               КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Статус В (&ДопустимыеСтатусы)
	|				ИЛИ ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификацийКДоговорам.Закрыт)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                     КАК ЕстьОшибкиСтатус
	|ИЗ
	|	Документ.СпецификацияКДоговору КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументОснование
	|";
	
	ДопустимыеСтатусы = Новый Массив();
	ДопустимыеСтатусы.Добавить(Перечисления.СтатусыСпецификацийКДоговорам.КВыполнению);
	
	Запрос.УстановитьПараметр("ДопустимыеСтатусы", ДопустимыеСтатусы);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(
		Выборка.СпецификацияКДоговору,
		Выборка.ЕстьОшибкиПроведен,
		Выборка.СтатусДокумента,
		Выборка.ЕстьОшибкиСтатус,
		ДопустимыеСтатусы);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
КонецПроцедуры

Процедура ЗаполнитьТоварыПоСпецификации() Экспорт
	
	РезультатЗапроса = Документы.СпецификацияКДоговору.ПолучитьРезультатЗапросаПоОстаткам(СпецификацияКДоговору, Ссылка);
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по документу ""%Спецификация%"" .'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Спецификация%", СпецификацияКДоговору);
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата",      Новый ОписаниеТипов("Дата"));
	ТаблицаКурсовВалют.Колонки.Добавить("Курс",      Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число"));
	
	КурсНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);
	
	КэшированныеЗначения = Неопределено;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияПересчетСумм = Новый Структура;
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(ЭтотОбъект);
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТовара = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара, Выборка,, "КодСтроки");
		СтрокаТовара.КодСтрокиСпецификации = Выборка.КодСтроки;
		
		НеобходимПересчетСумм = (Выборка.Количество <> Выборка.КоличествоПоДокументу);
		
		Если Выборка.ЦенаВключаетНДС <> ЦенаВключаетНДС Тогда
			Если Выборка.ЦенаВключаетНДС Тогда
				СтрокаТовара.Сумма = Выборка.СуммаСНДС - Выборка.СуммаНДС;
			Иначе
				СтрокаТовара.Сумма = Выборка.СуммаСНДС
			КонецЕсли;
			СтрокаТовара.Цена = СтрокаТовара.Сумма / Выборка.КоличествоВЕдиницахИзмеренияПоДокументу;
		КонецЕсли;
		
		Если Выборка.Валюта <> Валюта Тогда
			
			НеобходимПересчетСумм = Истина;
			ПараметрыОтбора = Новый Структура("Валюта,Дата", Выборка.Валюта, НачалоДня(Выборка.Дата));
			КурсыВалюты = ТаблицаКурсовВалют.НайтиСтроки(ПараметрыОтбора);
			
			Если КурсыВалюты.Количество() = 0 Тогда
				КурсВалюты = ТаблицаКурсовВалют.Добавить();
				КурсВалюты.Валюта = Выборка.Валюта;
				КурсВалюты.Дата = НачалоДня(Выборка.Дата);
				
				ПараметрыКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата);
				КурсВалюты.Курс = ПараметрыКурса.Курс;
				КурсВалюты.Кратность = ПараметрыКурса.Кратность;
			Иначе
				КурсВалюты = КурсыВалюты[0];
			КонецЕсли;
			
			СтрокаТовара.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаТовара.Цена, КурсВалюты, КурсНовойВалюты);
			
		КонецЕсли;
		
		Если НеобходимПересчетСумм Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаТовара, ДействияПересчетСумм, КэшированныеЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ИнициализацияИЗаполнение

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

Функция СписокРегистровДляКонтроля() Экспорт
	
	РегистрыДляКонтроля = Новый Массив;
	РегистрыДляКонтроля.Добавить(Движения.ЗаказыПоставщикам);
	
	Возврат РегистрыДляКонтроля;
	
КонецФункции

Функция ПолучитьСуммуЗаказанныхСтрок()
	
	СуммаЗаказанныхСтрок = 0;
	
	НайденныеСтроки           = Товары.НайтиСтроки(Новый Структура("Отменено", Истина));
	КоличествоОтмененныхСтрок = НайденныеСтроки.Количество();
	
	Если КоличествоОтмененныхСтрок > 0 Тогда
		
		ОтмененныеСтроки = Товары.Выгрузить(НайденныеСтроки, "СуммаСНДС, СуммаНДС");
		ОтмененныеСтроки.Свернуть(,"СуммаСНДС, СуммаНДС");
		
		СуммаОтмененныхСтрок    = ОтмененныеСтроки[0].СуммаСНДС;
		СуммаНДСОтмененныхСтрок = ОтмененныеСтроки[0].СуммаНДС;
		
		Если Товары.Количество() <> КоличествоОтмененныхСтрок Тогда
			СуммаЗаказанныхСтрок = ЦенообразованиеБольничнаяАптекаКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС)
			                     - СуммаОтмененныхСтрок;
		Иначе
			СуммаЗаказанныхСтрок = 0;
		КонецЕсли;
		
	Иначе
		СуммаЗаказанныхСтрок = ЦенообразованиеБольничнаяАптекаКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС);
	КонецЕсли;
	
	Возврат СуммаЗаказанныхСтрок;
	
КонецФункции

Процедура ЗаполнитьДатуПоступления()
	
	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПустыеДаты = Ложь;
	Для Каждого ТекущаяСтрока Из Товары Цикл
		Если Не ТекущаяСтрока.Отменено
		   И Не ЗначениеЗаполнено(ТекущаяСтрока.ДатаПоступления) Тогда
			ЕстьПустыеДаты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьПустыеДаты Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления >= НачалоДня(Дата) Тогда
		ДатаПоступления = ЖелаемаяДатаПоступления;
	Иначе
		ДатаПоступления = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		Если Не ТекущаяСтрока.Отменено И (ПоступлениеОднойДатой Или Не ЗначениеЗаполнено(ТекущаяСтрока.ДатаПоступления)) Тогда
			ТекущаяСтрока.ДатаПоступления = ДатаПоступления;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли

//Ян_2023_08_02
Функция ПолучитьРезультатЗапросаПоОстаткам(Спецификация, Документ = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("Регистратор", Документ);
	
	Запрос.Текст="";
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить();
	
КонецФункции
