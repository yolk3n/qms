
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем ПредыдущиеРеквизитыСтроки; //используется для отвязки строки поступления от строки заказа

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", Элементы.ГруппаДополнительныеРеквизиты.Имя);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ПодключаемоеОборудованиеСервер.НастроитьФормуДляИспользованияПодключаемогоОборудования(ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриСозданииНаСервере(ЭтотОбъект);
	НастройкаФормБольничнаяАптека.НастроитьОтображениеИтогов(Элементы.ГруппаЗаказаноОтменено);
	
	// БуферОбменаТоварами
	УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, Не ОбработкаТабличнойЧастиСервер.БуферОбменаПустой());
	// Конец БуферОбменаТоварами
	
	// ИнтеграцияСМобильнымПриложением
	ИнтеграцияСМобильнымПриложением.СоздатьКомандуЗагрузкиДанныхИзМобильногоПриложенияНаФорме(ЭтотОбъект, "Товары", Элементы.ТоварыГруппаЗаполнить.Имя);
	// Конец ИнтеграцияСМобильнымПриложением
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ИспользоватьПричиныОтменыЗаказовПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам");
	Элементы.ТоварыГруппаОтменено.Видимость = ИспользоватьПричиныОтменыЗаказовПоставщикам;
	Элементы.ТоварыОтмененоПричиныОтменыНеИспользуются.Видимость = Не ИспользоватьПричиныОтменыЗаказовПоставщикам;
	
	РазрешеноРучноеИзменениеСтатуса = ОбщегоНазначенияБольничнаяАптека.РазрешеноРучноеИзменениеСтатусаОбъекта(Объект.Ссылка);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Статус", "Доступность", РазрешеноРучноеИзменениеСтатуса);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриЧтенииНаСервер_ФормаДокумента(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если СкрытьОтмененныеСтроки Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ФормаНеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика.Пометка = НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ПредыдущиеРеквизитыСтроки = Новый Структура;
	ПредыдущиеРеквизитыСтроки.Вставить("НоменклатураПоставщика");
	ПредыдущиеРеквизитыСтроки.Вставить("Номенклатура");
	ПредыдущиеРеквизитыСтроки.Вставить("ЕдиницаИзмерения");
	ПредыдущиеРеквизитыСтроки.Вставить("Коэффициент");
	ПредыдущиеРеквизитыСтроки.Вставить("Количество");
	ПредыдущиеРеквизитыСтроки.Вставить("КоличествоВЕдиницахИзмерения");
	ПредыдущиеРеквизитыСтроки.Вставить("КодСтрокиСпецификации");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПоступления.Форма.Форма" Тогда
		ОбработатьПодбор(ВыбранноеЗначение.АдресТоваровВХранилище);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СпецификацияКДоговору.Форма.ПодборПоОстаткам" Тогда
		ОбработатьПодборИзСпецификации(ВыбранноеЗначение.АдресДанныхВХранилище);
	Иначе
		// БуферОбменаТоварами
		Если ОбработкаТабличнойЧастиКлиент.НужноОбработатьВставкуИзБуфераОбмена(ЭтотОбъект, ИсточникВыбора) Тогда
			ВставитьТоварыИзБуфераОбмена(ВыбранноеЗначение);
		КонецЕсли;
		// Конец БуферОбменаТоварами
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	Если ПодключаемоеОборудованиеКлиент.ОбрабатыватьОповещение(ЭтотОбъект, Источник) Тогда
		Если ПодключаемоеОборудованиеКлиент.ОбработатьПолучениеДанныхОтСканераШтрихкода(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбработатьШтрихкоды(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ВведенШтрихкод" И Источник = УникальныйИдентификатор Тогда
		ОбработатьШтрихкоды(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
	КонецЕсли;
	
	Если Источник = "РегистрацияШтрихкодов"
	   И ИмяСобытия = "ЗарегистрированыШтрихкоды"
	   И Параметр.КлючВладельца = УникальныйИдентификатор Тогда
		Если Параметр.ЗарегистрированныеШтрихкоды.Количество() > 0 Тогда
			ОбновитьСтрокиНенайденныхШтрихКодов(Параметр.ЗарегистрированныеШтрихкоды);
		КонецЕсли;
	КонецЕсли;
	
	// БуферОбменаТоварами
	Если ОбработкаТабличнойЧастиКлиент.ОбрабатыватьОповещениеОтБуфераОбмена(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ДоступностьБуфераОбмена = ОбработкаТабличнойЧастиКлиент.ОпределитьДоступностьВставкиИзБуфераОбменаПоСобытию(ИмяСобытия);
		УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, ДоступностьБуфераОбмена);
	КонецЕсли;
	// Конец БуферОбменаТоварами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптекаКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОценкаПроизводительностиБольничнаяАптекаКлиент.НачатьЗамерПроведенияДокумента(Объект.Ссылка, Отказ, ПараметрыЗаписи);
	
	// Если документ проводится, предложим дозаполнить данные, если они некорректны
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Подтвержден")
		 ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.КПоступлению") 
		 ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Закрыт") Тогда
			
			ЗаполнитьПустыеДатыПоступления();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	ОбновитьФормуПоСпецификации();
	РассчитатьСостояниеСпецификации();
	ОбновитьТекущееСостояниеСервер();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика(Команда)
	
	НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика = Не НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика;
	Элементы.ФормаНеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика.Пометка = НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("ПослеРазбиенияСтроки", ЭтотОбъект, ТекущаяСтрока);
	ОбработкаТабличнойЧастиКлиент.РазбитьСтрокуТЧ(Объект.Товары, ТекущаяСтрока, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить()
	
	ОбработкаТабличнойЧастиКлиент.ПоказатьВводШтрихкода(УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗагрузкуДанныхИзТСД", ЭтотОбъект);
	ОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(Оповещение, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтвязатьОтЗаказа(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		КоличествоОтвязанных = 0;
		Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
			СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
			Если СтрокаТаблицы.КодСтрокиСпецификации <> 0 Тогда
				СтрокаТаблицы.КодСтрокиСпецификации = 0;
				ОбновитьОтклоненияОтЗаказаВСтроке(СтрокаТаблицы, Не Объект.СпецификацияКДоговору.Пустая());
				КоличествоОтвязанных = КоличествоОтвязанных + 1;
			КонецЕсли;
		КонецЦикла;
		
		ОбновитьЗависимыеРеквизитыФормыПоСпецификации(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
		ОповеститьОбОкончанииОтвязкиСтрок(КоличествоОтвязанных);
		
	Иначе
		ТекстПредупреждения = НСтр("ru='Выберите строки, которые необходимо отвязать от спецификации.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодбор(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Поставщик", Объект.Контрагент);
	ПараметрыПодбора.Вставить("МестоХраненияОстатка", "Склад");
	ПараметрыПодбора.Вставить("ПодборВПоступление", Истина);
	ПараметрыПодбора.Вставить("РежимПодбораБезРазрезовУчета", Истина);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ТоварыНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	ПодборТоваровКлиент.ОткрытьПодборТоваровВДокументПоступления(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборИзСпецификации(Команда)
	
	СписокКодовСтрок = Новый Массив;
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		Если ТекущаяСтрока.КодСтрокиСпецификации <> 0 Тогда
			Если СписокКодовСтрок.Найти(ТекущаяСтрока.КодСтрокиСпецификации) = Неопределено Тогда
				СписокКодовСтрок.Добавить(ТекущаяСтрока.КодСтрокиСпецификации);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеСтрок = Новый Массив;
	Для Каждого КодСтроки Из СписокКодовСтрок Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("КодСтрокиСпецификации", КодСтроки));
		Количество = 0;
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			Количество = Количество + ТекущаяСтрока.Количество;
		КонецЦикла;
		ДанныеСтрок.Добавить(Новый Структура("КодСтроки, Количество", КодСтроки, Количество));
	КонецЦикла;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	ПараметрыПодбора.Вставить("РаспоряжениеНаОформление", Объект.СпецификацияКДоговору);
	ПараметрыПодбора.Вставить("Валюта", Объект.Валюта);
	ПараметрыПодбора.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыПодбора.Вставить("ДатаДокумента", Объект.Дата);
	ПараметрыПодбора.Вставить("ДанныеСтрок", ДанныеСтрок);
	
	ФормаПодбора = ОткрытьФорму("Документ.СпецификацияКДоговору.Форма.ПодборПоОстаткам", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификации(Команда)
	
	ЗаполнитьПоСпецификацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПоступленияДляВыделенныхСтрок(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() > 0 Тогда
		ЗаполнитьДатуПоступления(Элементы.Товары.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтроки(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Таблица товаров не заполнена.'"));
		Возврат;
	ИначеЕсли Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='В таблице товаров отсутствуют выделенные строки.'"));
		Возврат;
	КонецЕсли;
	
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка");
	Оповещение = Новый ОписаниеОповещения("ОтменитьВыделенныеСтрокиОкончание", ЭтотОбъект);
	Если ИспользоватьПричиныОтменыЗаказовПоставщикам Тогда
		ОткрытьФорму("Справочник.ПричиныОтменыЗаказовПоставщикам.ФормаВыбора",, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, ПричинаОтмены);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтрокиОкончание(ПричинаОтмены, ПараметрыОтмены) Экспорт
	
	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекСтрока);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выделенные строки отменены'"),
		,
		НСтр("ru='Выделенные строки заказа отменены.'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНепоставленныеСтроки(Команда)

	Если Объект.Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Таблица товаров не заполнена.'"));
		Возврат;
	КонецЕсли;
	
	ЕстьНеотмененныеСтроки = Ложь;
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если Не ТекСтрока.Отменено Тогда
			ЕстьНеотмененныеСтроки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьНеотмененныеСтроки Тогда
		ПоказатьПредупреждение(, НСтр("ru='Все строки отменены.'"));
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Тогда
		
		ТекстВопроса = НСтр("ru='Заказ не проведен, поступление по заказу не запланировано. Будут отменены все строки. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ОтменитьНепоставленныеСтрокиПродолжение", ЭтотОбъект, Ложь);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.НеСогласован")
	      Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Согласован")
	      Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Подтвержден") Тогда
		
		ТекстВопроса =
			НСтр("ru='Требование проведено в статусе %Статус%, поступление по требованию не запланировано. Будут отменены все строки. Продолжить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Статус%", Объект.Статус);
		
		Оповещение = Новый ОписаниеОповещения("ОтменитьНепоставленныеСтрокиПродолжение", ЭтотОбъект, Ложь);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОтменитьНепоставленныеСтрокиПродолжение(КодВозвратаДиалога.Да, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНепоставленныеСтрокиПродолжение(Ответ, ПроверятьОстатки) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыТребованийОтделений.ПустаяСсылка");
	Оповещение = Новый ОписаниеОповещения("ОтменитьНепоставленныеСтрокиОкончание", ЭтотОбъект, ПроверятьОстатки);
	Если ИспользоватьПричиныОтменыЗаказовПоставщикам Тогда
		ОткрытьФорму("Справочник.ПричиныОтменыЗаказовПоставщикам.ФормаВыбора",, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, ПричинаОтмены);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНепоставленныеСтрокиОкончание(ПричинаОтмены, ПроверятьОстатки) Экспорт
	
	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрокОтменено = ОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены, ПроверятьОстатки);
	
	Если КоличествоСтрокОтменено = 0 Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки не отменены'"),
			,
			НСтр("ru='По всем строкам заказа оформлено поступление. Строки не могут быть отменены.'"),
			БиблиотекаКартинок.Информация32);
			
	Иначе
		
		РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
		
		Если ПроверятьОстатки Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Строки отменены'"),
				,
				НСтр("ru='Все непоставленные строки заказа отменены.'"),
				БиблиотекаКартинок.Информация32);
		Иначе
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Строки отменены'"),
				,
				НСтр("ru='Все строки заказа отменены.'"),
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОтмененныеСтроки(Команда)
	
	СкрытьОтмененныеСтроки = Не СкрытьОтмененныеСтроки;
	
	Если СкрытьОтмененныеСтроки Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ТоварыСкрытьОтмененныеСтроки.Пометка = СкрытьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьНенайденныеШтрихкоды(Команда)
	ОбновитьСтрокиНенайденныхШтрихКодов();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНенайденныеШтрихкоды(Команда)
	ОбработкаТабличнойЧастиКлиент.ОбработатьНенайденныеШтрихкоды(Объект.Товары, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	// ИнтеграцияСМобильнымПриложением
	Оповестить = Новый ОписаниеОповещения("ОбработатьЗагрузкуДанныхИзТСД", ЭтотОбъект);
	ИнтеграцияСМобильнымПриложениемКлиент.ВыполнитьКомандуЗагрузкиДанныхИзМобильногоПриложения(ЭтотОбъект, Команда, Оповестить);
	// Конец ИнтеграцияСМобильнымПриложением
	
	ОбщегоНазначенияБольничнаяАптекаКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Шапка
#Область Шапка

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизации();
	ОбработкаВыбораВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		ОбработатьИзменениеПодразделения();
		ОбработкаВыбораВалюты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ОбработатьИзменениеКонтрагента();
	ОбработкаВыбораВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговораКонтрагента();
	ОбработкаВыбораВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ОбработкаВыбораВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ОбработатьИзменениеЦенаВключаетНДСНаСервере(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеОднойДатойПриИзменении(Элемент)
	
	ОбработатьИзменениеПоступлениеОднойДатой();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент)
	
	ЗаполнитьДатуПоступленияВТаблице(Объект.ДатаПоступления);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)

	Если Объект.Согласован
	   И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.НеСогласован") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		// В статусе "Подтвержден" - поставим все неотмененные строки в ожидаемое поступление
		// и предложим пользователю заполнить дату поступления в строках, в которых эта дата не заполнена.
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Подтвержден")
		 Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.КПоступлению")
		 Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Закрыт") Тогда
			
			ЗаполнитьПустыеДатыПоступления();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	ОбработатьИзменениеНалогооблаженияНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВходящегоДокументаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ПроверитьНаличиеЗаказовПоДаннымПоставщика(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

#КонецОбласти // Шапка

////////////////////////////////////////////////////////////////////////////////
// Список "Товары"
#Область Товары

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ЗаполнитьЗначенияСвойств(ПредыдущиеРеквизитыСтроки, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока.КодСтроки = 0;
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Не Объект.СпецификацияКДоговору.Пустая());
		ОбновитьЗависимыеРеквизитыФормыПоСпецификации(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбновитьЗависимыеРеквизитыФормыПоСпецификации(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьНоменклатуруПоНоменклатуреПоставщика());
	СтруктураДействий.Вставить(
		Действия.Действие_ПроверитьСопоставленнуюНоменклатуруПоставщика(),
		Действия.ПолучитьПараметрыПроверкиСопоставленнойНоменклатурыПоставщика(
			Объект,
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("СтруктураДействий", СтруктураДействий);
	
	Если ТекущаяСтрока.КодСтроки <> 0 Тогда
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ДополнительныеПараметры.СтруктураДействий.Очистить();
		ВопросПользователюПриИзмененииРеквизитаСтроки(
			Новый ОписаниеОповещения("ТоварыНоменклатураПоставщикаПриИзмененииВопросПользователюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ТекущаяСтрока);
		
	Иначе
		
		ТоварыНоменклатураПоставщикаПриИзмененииВопросПользователюЗавершение(Истина, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПоставщикаПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = ДополнительныеПараметры.СтруктураДействий;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуЗакупки(), Действия.ПолучитьПараметрыЗаполненияЦеныЗакупки(Объект));
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ТекущаяСтрока.Штрихкод = "";
	КонецЕсли;
	
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	ВопросПользователюПриИзмененииРеквизитаСтроки(
		Новый ОписаниеОповещения("ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекущаяСтрока);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре(), Объект.Контрагент);
	СтруктураДействий.Вставить(
		Действия.Действие_ПроверитьСопоставленнуюНоменклатуруПоставщика(),
		Действия.ПолучитьПараметрыПроверкиСопоставленнойНоменклатурыПоставщика(
			Объект,
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуЗакупки(), Действия.ПолучитьПараметрыЗаполненияЦеныЗакупки(Объект));
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ТекущаяСтрока.Штрихкод = "";
	КонецЕсли;
	
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьЦенуЗаУпаковку(), Действия.ПолучитьПараметрыПересчетаЦеныЗаУпаковку(ТекущаяСтрока.Количество));
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
		ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПриИзмененииКоличестваВСтрокеТовары(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Не Объект.СпецификацияКДоговору.Пустая());
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьЦену());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если Не ТекущаяСтрока.Отменено Тогда
		ТекущаяСтрока.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка");
	КонецЕсли;
	
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // Товары

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	Валюта = Объект.Валюта;
	
	ОбновитьФормуПоСпецификации();
	УстановитьВидимостьЭлементовПоСпецификации();
	
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
	УстановитьВидимостьДатПоступления(ЭтотОбъект);
	
	ОбновитьТекущееСостояниеСервер();
	
	ОсновнойСклад = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьСкладПоУмолчанию(Неопределено, Объект.ПодразделениеОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	Справочники.Приоритеты.УстановитьУсловноеОформление(ЭтотОбъект);
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеЦенаВключаетНДС(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСуммаНДС(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСуммНДС(ЭтотОбъект);
	
	ЗаказыСервер.УстановитьОформлениеСостоянияДокумента(ЭтотОбъект, Перечисления.СостоянияЗаказовПоставщикам.Закрыт);
	ЗаказыСервер.УстановитьОформлениеЦеныЗаказа(ЭтотОбъект);
	ЗаказыСервер.УстановитьОформлениеСтокиСверхЗаказа(ЭтотОбъект, "ТоварыКодСтрокиСпецификации", "Объект.Товары.КодСтрокиСпецификации");
	
	ОбязательныеСтатусы = Новый СписокЗначений;
	ОбязательныеСтатусы.Добавить(Перечисления.СтатусыЗаказовПоставщикам.Подтвержден);
	ОбязательныеСтатусы.Добавить(Перечисления.СтатусыЗаказовПоставщикам.КПоступлению);
	ОбязательныеСтатусы.Добавить(Перечисления.СтатусыЗаказовПоставщикам.Закрыт);
	ЗаказыСервер.УстановитьОформлениеДатыПоступления(ЭтотОбъект, Элементы.ДатаПоступления.Имя, ОбязательныеСтатусы, "ВсеСтрокиОтменены");
	ЗаказыСервер.УстановитьОформлениеДатыПоступления(ЭтотОбъект, Элементы.ТоварыДатаПоступления.Имя, ОбязательныеСтатусы, "Объект.Товары.Отменено");
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление, Элементы.Товары);
	
КонецПроцедуры

&НаСервере
Функция ОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены, Знач ПроверятьОстатки = Ложь)
	
	ДокументЗаказа = РеквизитФормыВЗначение("Объект");
	КоличествоОтмененныхСтрок = ДокументЗаказа.ОтменитьНепоставленныеСтроки(ПричинаОтмены, ПроверятьОстатки);
	ЗначениеВРеквизитФормы(ДокументЗаказа, "Объект");
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

&НаСервере
Процедура ОбновитьТекущееСостояниеСервер()
	
	РегистрыСведений.СостоянияЗаказовПоставщикам.ЗаполнитьТекущееСостояние(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогиСтрокЗаказа(Форма);
	
	Товары = Форма.Объект.Товары;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Отменено",Истина);
	
	НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
	КоличествоОтмененныхСтрок = НайденныеСтроки.Количество();
	
	Если КоличествоОтмененныхСтрок > 0 Тогда
		
		СуммаОтменено = 0;
		СуммаНДСОтмененныхСтрок = 0;
		
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
			СуммаОтменено = СуммаОтменено + ТекСтрока.СуммаСНДС;
			СуммаНДСОтмененныхСтрок = СуммаНДСОтмененныхСтрок + ТекСтрока.СуммаНДС;
			
		КонецЦикла;
		
		Если Товары.Количество() <> КоличествоОтмененныхСтрок Тогда
			
			КоличествоЗаказанныхСтрок = Товары.Количество() - КоличествоОтмененныхСтрок;
			СуммаНДСЗаказанныхСтрок   = Товары.Итог("СуммаНДС") - СуммаНДСОтмененныхСтрок;
			СуммаЗаказано = Товары.Итог("СуммаСНДС") - СуммаОтменено;
			
		Иначе
			
			КоличествоЗаказанныхСтрок = 0;
			СуммаЗаказано             = 0;
			СуммаНДСЗаказанныхСтрок   = 0;
			
		КонецЕсли;
		
	Иначе
		
		КоличествоОтмененныхСтрок = 0;
		СуммаОтменено             = 0;
		СуммаНДСОтмененныхСтрок   = 0;
		
		КоличествоЗаказанныхСтрок = Товары.Количество();
		СуммаЗаказано             = Товары.Итог("СуммаСНДС");
		СуммаНДСЗаказанныхСтрок   = Товары.Итог("СуммаНДС");
		
	КонецЕсли;
	
	Форма.СуммаЗаказано = СуммаЗаказано;
	Форма.СуммаНДСЗаказано = СуммаНДСЗаказанныхСтрок;
	Форма.СуммаОтменено = СуммаОтменено;
	Форма.КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок;
	Форма.ВсеСтрокиОтменены = (КоличествоОтмененныхСтрок = Товары.Количество());
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда
		Форма.Элементы.ГруппаСтраницыЗаказано.ТекущаяСтраница = Форма.Элементы.ГруппаЗаказаноБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыЗаказано.ТекущаяСтраница = Форма.Элементы.ГруппаЗаказаноСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеЗаказовПоДаннымПоставщика(НомерПоДаннымПоставщика)
	
	СписокЗаказов = ПолучитьЗаказыПоДаннымПоставщика(Объект.Ссылка, Объект.Контрагент, НомерПоДаннымПоставщика, Объект.Дата);
	
	Если СписокЗаказов.Количество() > 0 Тогда
		
		СписокКнопок = Новый СписокЗначений;
		
		Если СписокЗаказов.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru='В информационной базе уже существует заказ с таким же номером по данным поставщика. Продолжить?'");
			СписокКнопок.Добавить("ОткрытьСписокЗаказов", НСтр("ru = 'Открыть заказ'"));
		Иначе
			ТекстВопроса = НСтр("ru='В информационной базе уже существуют заказы с таким же номером по данным поставщика. Продолжить?'");
			СписокКнопок.Добавить("ОткрытьСписокЗаказов", НСтр("ru = 'Открыть список заказов'"));
		КонецЕсли;
		
		СписокКнопок.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьНаличиеЗаказовПоДаннымПоставщикаОкончание", ЭтотОбъект, СписокЗаказов);
		ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеЗаказовПоДаннымПоставщикаОкончание(Ответ, СписокЗаказов) Экспорт
	
	Если Ответ = "ОткрытьСписокЗаказов" Тогда
		
		Если СписокЗаказов.Количество() > 1 Тогда
			ОткрытьФорму(
				"ОбщаяФорма.ПросмотрСпискаДокументов",
				Новый Структура("СписокДокументов, Заголовок",
					СписокЗаказов,
					НСтр("ru='Заказы поставщиков (%КоличествоДокументов%)'")));
		Иначе
			
			ПараметрыФормы = Новый Структура("Ключ", СписокЗаказов.Получить(0).Значение);
			ОткрытьФорму("Документ.ЗаказПоставщику.ФормаОбъекта", ПараметрыФормы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаказыПоДаннымПоставщика(Знач ТекущийЗаказ, Знач Контрагент, Знач НомерВходящегоДокумента, Знач ДатаВходящегоДокумента)
	
	ДатаВходящегоДокумента = ?(ЗначениеЗаполнено(ДатаВходящегоДокумента), ДатаВходящегоДокумента, ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказПоставщику.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка <> &ТекущийЗаказ
	|	И ЗаказПоставщику.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ЗаказПоставщику.НомерПоДаннымПоставщика = &НомерПоДаннымПоставщика
	|	И ЗаказПоставщику.Контрагент = &Контрагент
	|	И НЕ ЗаказПоставщику.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДобавитьМесяц(ДатаВходящегоДокумента, -3));
	Запрос.УстановитьПараметр("ДатаОкончания", ДобавитьМесяц(ДатаВходящегоДокумента, 3));
	Запрос.УстановитьПараметр("НомерПоДаннымПоставщика", НомерВходящегоДокумента);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ТекущийЗаказ", ТекущийЗаказ);
	
	СписокЗаказов = Новый СписокЗначений;
	СписокЗаказов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокЗаказов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа со спецификацией
#Область Спецификация

&НаКлиенте
Процедура ВопросПользователюПриИзмененииРеквизитаСтроки(ОписаниеОповещения, ТекущаяСтрока)
	
	// Если текущая строка не связана с заказом
	Если ТекущаяСтрока.КодСтроки = 0 Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	// Если ни один из ключевых реквизитов не изменился
	Если ТекущаяСтрока.Номенклатура = ПредыдущиеРеквизитыСтроки.Номенклатура Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ТекстВопроса = НСтр("ru='Редактируемая строка перестанет быть связанной со строкой спецификации. Продолжить?'");
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВопросПользователюПриИзмененииРеквизитаСтрокиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПользователюПриИзмененииРеквизитаСтрокиВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	// Если пользователь подтвердил изменение значения ключевого реквизита
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДополнительныеПараметры.ТекущаяСтрока.КодСтрокиСпецификации = 0;
		ОбновитьОтклоненияОтЗаказаВСтроке(ДополнительныеПараметры.ТекущаяСтрока, Не Объект.СпецификацияКДоговору.Пустая());
		ОбновитьЗависимыеРеквизитыФормыПоСпецификации(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Истина);
		
	Иначе
		
		// Если пользователь отказался менять связанную строку, возвращаем старые значения
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.ТекущаяСтрока, ПредыдущиеРеквизитыСтроки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПоСпецификации()
	
	ЗаполнитьЦеныНоменклатурыСпецификации();
	РассчитатьСостояниеСпецификации();
	ОбновитьЗависимыеРеквизитыФормыПоСпецификации(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоСпецификации()
	
	СкрываемыеЭлементы = Новый Массив();
	СкрываемыеЭлементы.Добавить("ГруппаСпецификацияКДоговору");
	СкрываемыеЭлементы.Добавить("ТоварыОтвязатьОтЗаказа");
	СкрываемыеЭлементы.Добавить("ТоварыКомандаПодборИзСпецификации");
	СкрываемыеЭлементы.Добавить("ТоварыЗаполнитьПоСпецификации");
	СкрываемыеЭлементы.Добавить("ТоварыКодСтрокиСпецификации");
	СкрываемыеЭлементы.Добавить("ТоварыЦенаЗаказа");
	СкрываемыеЭлементы.Добавить("ТоварыКартинкаИзмененияЦены");
	СкрываемыеЭлементы.Добавить("ТоварыПроцентОтклоненияОтЦеныЗаказа");
	
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, СкрываемыеЭлементы, "Видимость", Не Объект.СпецификацияКДоговору.Пустая());
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСостояниеСпецификации()
	
	Если Объект.СпецификацияКДоговору.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Не Объект.СпецификацияКДоговору.Пустая());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ПоступлениеПоЗаказу)
	
	Если Не ПоступлениеПоЗаказу Или ТекущаяСтрока.КодСтрокиСпецификации = 0 Или ТекущаяСтрока.ЦенаЗаказа = 0 Или ТекущаяСтрока.Цена = ТекущаяСтрока.ЦенаЗаказа Тогда
		
		ТекущаяСтрока.ЦенаИзменилась = Ложь;
		ТекущаяСтрока.КартинкаИзмененияЦены = 8;
		ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 0;
		
	ИначеЕсли ТекущаяСтрока.Цена < ТекущаяСтрока.ЦенаЗаказа Тогда
		
		ТекущаяСтрока.ЦенаИзменилась = Истина;
		ТекущаяСтрока.КартинкаИзмененияЦены = 3;
		Если ТекущаяСтрока.Цена <> 0 Тогда
			ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 100 - (ТекущаяСтрока.ЦенаЗаказа * 100 / ТекущаяСтрока.Цена);
		Иначе
			ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 100;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.Цена > ТекущаяСтрока.ЦенаЗаказа Тогда
		
		ТекущаяСтрока.ЦенаИзменилась = Истина;
		ТекущаяСтрока.КартинкаИзмененияЦены = 1;
		Если ТекущаяСтрока.Цена <> 0 Тогда
			ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 100 - (ТекущаяСтрока.ЦенаЗаказа * 100 / ТекущаяСтрока.Цена);
		Иначе
			ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 100;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоступлениеПоЗаказу Тогда
		Если ТекущаяСтрока.КодСтрокиСпецификации = 0 Тогда
			ТекущаяСтрока.РасхождениеЗаказ = 1;
			ТекущаяСтрока.КартинкаРасхождениеЗаказ = 1;
		Иначе
			ТекущаяСтрока.РасхождениеЗаказ = 0;
			ТекущаяСтрока.КартинкаРасхождениеЗаказ = ?(ТекущаяСтрока.СтрокаОтсутствуетВЗаказе, 2, 0);
		КонецЕсли;
	Иначе
		ТекущаяСтрока.РасхождениеЗаказ = 0;
		ТекущаяСтрока.КартинкаРасхождениеЗаказ = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОкончанииОтвязкиСтрок(КоличествоОтработанныхСтрок, СтрокиОтвязаны = Истина)

	Если СтрокиОтвязаны Тогда
		ТекстОповещения = НСтр("ru='В документе от спецификации отвязано строк (%%Количество%%).'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Количество%%", КоличествоОтработанныхСтрок);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки отвязаны'"),
			,
			ТекстОповещения,
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки не отвязаны'"),
			,
			НСтр("ru='Ни одна строка не была отвязана.'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗависимыеРеквизитыФормыПоСпецификации(КоличествоРасхождений, НадписьРасхождениеЗаказ, КартинкаРасхождениеЗаказ)
	
	Если КоличествоРасхождений > 0 Тогда
		КартинкаРасхождениеЗаказ.Картинка = БиблиотекаКартинок.ПревышениеЗаказа;
		НадписьРасхождениеЗаказ = СтрЗаменить(НСтр("ru='Строк сверх заказа: %КоличествоРасхождений%'"), "%КоличествоРасхождений%", КоличествоРасхождений);
	Иначе
		КартинкаРасхождениеЗаказ.Картинка = Новый Картинка();
		НадписьРасхождениеЗаказ = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныНоменклатурыСпецификации()
	
	Если Объект.СпецификацияКДоговору.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Спецификация КАК Спецификация,
	|	Товары.КодСтрокиСпецификации КАК КодСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.КодСтрокиСпецификации <> 0
	|;
	|	
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТоварыЗаказа.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтрокаОтсутствуетВЗаказе,
	|	ТаблицаТовары.Спецификация КАК Спецификация,
	|	ТаблицаТовары.КодСтроки КАК КодСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Заказ.ЦенаВключаетНДС, &ЦенаВключаетНДС) <> &ЦенаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА Заказ.ЦенаВключаетНДС
	|						ТОГДА (ТоварыЗаказа.Сумма - ТоварыЗаказа.СуммаНДС) / ТоварыЗаказа.Количество
	|					ИНАЧЕ (ТоварыЗаказа.Сумма + ТоварыЗаказа.СуммаНДС) / ТоварыЗаказа.Количество
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(ТоварыЗаказа.Цена, 0)
	|	КОНЕЦ
	|	* ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыЗаказа.Коэффициент, 0) = 0
	|			ТОГДА 0 
	|		КОГДА ТоварыЗаказа.Коэффициент = ТаблицаТовары.Коэффициент
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаТовары.Коэффициент / ТоварыЗаказа.Коэффициент
	|	КОНЕЦ
	|	* ВЫБОР
	|		КОГДА &Валюта <> ЕСТЬNULL(Заказ.Валюта, &Валюта)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсВалютыЗаказа.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсВалютыЗаказа.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсВалютыЗаказа.Курс * КурсВалюты.Кратность)
	|						/ (КурсВалюты.Курс * КурсВалютыЗаказа.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЦенаЗаказа
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СпецификацияКДоговору.Товары КАК ТоварыЗаказа
	|		ПО
	|			ТаблицаТовары.Спецификация = ТоварыЗаказа.Ссылка
	|			И ТаблицаТовары.КодСтроки = ТоварыЗаказа.КодСтроки
	|			И ТоварыЗаказа.Номенклатура = ТоварыЗаказа.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СпецификацияКДоговору КАК Заказ
	|		ПО
	|			Заказ.Ссылка = ТаблицаТовары.Спецификация
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &Валюта) КАК КурсВалюты
	|		ПО
	|			ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента) КАК КурсВалютыЗаказа
	|		ПО
	|			КурсВалютыЗаказа.Валюта = Заказ.Валюта
	|		
	|");
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(, "КодСтрокиСпецификации, Номенклатура, ЕдиницаИзмерения, Коэффициент"));
	Запрос.УстановитьПараметр("Спецификация", Объект.СпецификацияКДоговору);
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	
	ЦеныСпецификации = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Спецификация", Объект.СпецификацияКДоговору);
		СтруктураОтбора.Вставить("КодСтроки", ТекущаяСтрока.КодСтрокиСпецификации);
		СтруктураОтбора.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ТекущаяСтрока.ЕдиницаИзмерения);
		НайденныеСтроки = ЦеныСпецификации.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, НайденныеСтроки[0], "ЦенаЗаказа, СтрокаОтсутствуетВЗаказе");
		Иначе
			ТекущаяСтрока.ЦенаЗаказа = 0;
		КонецЕсли;
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Истина);
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти // Спецификация

////////////////////////////////////////////////////////////////////////////////
// Обработка дат поступления
#Область ДатыПоступления

&НаКлиенте
Процедура ЗаполнитьДатуПоступления(МассивВыделенныхСтрок = Неопределено)
	
	ДатаПоступления = ПолучитьЖелаемуюДатуПоступления();
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьДатуПоступленияЗавершение", ЭтотОбъект, МассивВыделенныхСтрок);
	ВзаимодействиеСПользователемКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаПоступления, НСтр("ru='Введите дату поступления'"), ЧастиДаты.Дата, Оповещение)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПоступленияЗавершение(ДатаПоступления, МассивВыделенныхСтрок) Экспорт
	
	Если МассивВыделенныхСтрок = Неопределено Тогда
		
		ЗаполнитьДатуПоступленияВТаблице(ДатаПоступления);
		
	Иначе
		
		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если Не СтрокаТЧ.Отменено Тогда
				СтрокаТЧ.ДатаПоступления = ДатаПоступления;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВзаимодействиеСПользователемКлиент.ОповеститьОбОкончанииЗаполненияДатПоступления(
		ДатаПоступления,
		(МассивВыделенныхСтрок <> Неопределено));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПустыеДатыПоступления()
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьПустыеДатыПоступления() Тогда
			
		ДатаПоступления = ПолучитьЖелаемуюДатуПоступления();
		Если Объект.ПоступлениеОднойДатой Тогда
			Объект.ДатаПоступления = ДатаПоступления;
			ЗаполнитьДатуПоступленияВТаблице(ДатаПоступления);
		Иначе
			Для каждого СтрокаТовара Из Объект.Товары Цикл
				Если Не СтрокаТовара.Отменено И Не ЗначениеЗаполнено(СтрокаТовара.ДатаПоступления) Тогда
					СтрокаТовара.ДатаПоступления = ДатаПоступления;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПоступленияВТаблице(ДатаПоступления)
	
	Для каждого СтрокаТовара Из Объект.Товары Цикл
		Если Не СтрокаТовара.Отменено Тогда
			СтрокаТовара.ДатаПоступления = ДатаПоступления;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьПустыеДатыПоступления()
	
	Для каждого ТекСтрока Из Объект.Товары Цикл
		
		Если Не ТекСтрока.Отменено
		   И Не ЗначениеЗаполнено(ТекСтрока.ДатаПоступления) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЖелаемуюДатуПоступления()
	
	Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= НачалоДня(Объект.Дата) Тогда
		ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
	Иначе
		ДатаПоступления = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	Возврат ДатаПоступления;
	
КонецФункции

&НаКлиенте 
Функция МаксимальнаяДатаПоступления()
	
	МаксимальнаяДатаПоступления = Дата(1,1,1);
	Для Каждого Товар Из Объект.Товары Цикл 
		МаксимальнаяДатаПоступления = Макс(МаксимальнаяДатаПоступления, Товар.ДатаПоступления);
	КонецЦикла;
	
	Возврат МаксимальнаяДатаПоступления
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДатПоступления(Форма)
	
	Форма.Элементы.ТоварыДатаПоступления.Видимость = НЕ Форма.Объект.ПоступлениеОднойДатой;
	Форма.Элементы.ТоварыЗаполнитьДатуПоступленияДляВыделенныхСтрок.Видимость = НЕ Форма.Объект.ПоступлениеОднойДатой;
	Форма.Элементы.ДатаПоступления.Видимость = Форма.Объект.ПоступлениеОднойДатой;
	
КонецПроцедуры

#КонецОбласти // ДатыПоступления

////////////////////////////////////////////////////////////////////////////////
// Обработка штрихкодов
#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияСДобавленнымиСтроками = Новый Структура;
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре(), Объект.Контрагент);
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЦенуЗакупки(), Действия.ПолучитьПараметрыЗаполненияЦеныЗакупки(Объект));
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ДействияСИзмененнымиСтроками = Новый Структура;
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ИзменятьКоличество = Не ТолькоПросмотр И Не Объект.Согласован;
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиШтрихкодов(ДанныеШтрихкодов, ДействияСДобавленнымиСтроками, ДействияСИзмененнымиСтроками);
	ПараметрыДействия.ИзменятьКоличество = ИзменятьКоличество;
	
	ОбработатьШтрихкодыНаСервере(ПараметрыДействия, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиКлиент.СообщитьОНеизвестныхШтрихкодах(ПараметрыДействия);
	
	Если ПараметрыДействия.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = ПараметрыДействия.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыНаСервере(ПараметрыДействия, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиСервер.ОбработатьШтрихкоды(ЭтотОбъект, Объект, ПараметрыДействия, КэшированныеЗначения);
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокиНенайденныхШтрихКодов(ЗарегистрированныеШтрихкоды = Неопределено)
	
	Если Не ОбработкаТабличнойЧастиКлиент.ЕстьНенайденныеШтрихкоды(Объект.Товары) Тогда
		Возврат;
	КонецЕсли;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияСИзмененнымиСтроками = Новый Структура;
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре(), Объект.Контрагент);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЦенуЗакупки(), Действия.ПолучитьПараметрыЗаполненияЦеныЗакупки(Объект));
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиНенайденныхШтрихкодов();
	ПараметрыДействия.ДействияСИзмененнымиСтроками = ДействияСИзмененнымиСтроками;
	Если ЗарегистрированныеШтрихкоды <> Неопределено Тогда
		ПараметрыДействия.ЗарегистрированныеШтрихкоды = ЗарегистрированныеШтрихкоды;
	КонецЕсли;
	
	ОбновитьДанныеНенайденныхШтрихКодовНаСервере(ПараметрыДействия, КэшированныеЗначения);
	
	Если ПараметрыДействия.Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.СообщитьОНеизвестныхШтрихкодах(ПараметрыДействия);
	ОбработкаТабличнойЧастиКлиент.СообщитьОРезультатеОбновленияДанныхПоШтрихкодам(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНенайденныхШтрихКодовНаСервере(ПараметрыДействия, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиСервер.ОбновитьДанныеНенайденныхШтрихКодов(Объект, ПараметрыДействия, КэшированныеЗначения);
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ОбработкаШтрихкодов

////////////////////////////////////////////////////////////////////////////////
// Обработка подбора
#Область ОбработкаПодбора

&НаСервере
Процедура ОбработатьПодбор(Знач АдресТоваровВХранилище)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	КэшированныеЗначения = Неопределено;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Не Объект.СпецификацияКДоговору.Пустая());
		
	КонецЦикла;
	
	ОбновитьЗависимыеРеквизитыФормыПоСпецификации(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодборИзСпецификации(Знач АдресТоваровВХранилище)
	
	КэшированныеЗначения = Неопределено;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("КодСтрокиСпецификации", СтрокаТовара.КодСтроки));
		Если НайденныеСтроки.Количество() = 0 Тогда
			ТекущаяСтрока = Объект.Товары.Добавить();
		ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
			ТекущаяСтрока = НайденныеСтроки[0];
		Иначе
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Объект.Товары.Удалить(НайденнаяСтрока);
			КонецЦикла;
			ТекущаяСтрока = Объект.Товары.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара,, "КодСтроки");
		ТекущаяСтрока.КодСтрокиСпецификации = СтрокаТовара.КодСтроки;
		Если СтрокаТовара.ОстатокПоДокументу <> ТекущаяСтрока.КоличествоВЕдиницахИзмерения Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
		
		ТекущаяСтрока.ЦенаЗаказа = ТекущаяСтрока.Цена;
		ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Не Объект.СпецификацияКДоговору.Пустая());
		
	КонецЦикла;
	
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	ОбновитьЗависимыеРеквизитыФормыПоСпецификации(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоСпецификацииСервер()
	
	Объект.Товары.Очистить();
	
	ДокументЗаказа = РеквизитФормыВЗначение("Объект");
	ДокументЗаказа.ЗаполнитьТоварыПоСпецификации();
	ЗначениеВРеквизитФормы(ДокументЗаказа, "Объект");
	
	ЗаполнитьЦеныНоменклатурыСпецификации();
	РассчитатьСостояниеСпецификации();
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	ОбновитьЗависимыеРеквизитыФормыПоСпецификации(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	
КонецФункции

#КонецОбласти // ОбработкаПодбора

////////////////////////////////////////////////////////////////////////////////
// Обработка изменения реквизитов
#Область ОбработкаИзмененияРеквизитов

&НаСервере
Процедура ОбработатьИзменениеОрганизации()
	
	Подразделение = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьПодразделениеПоУмолчанию(Объект.ПодразделениеОрганизации, Объект.Организация);
	Если Объект.ПодразделениеОрганизации <> Подразделение Тогда
		Объект.ПодразделениеОрганизации = Подразделение;
		ОбработатьИзменениеПодразделения();
	КонецЕсли;
	
	Объект.ДоговорКонтрагента = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьДоговорПоУмолчанию(
		Объект.ДоговорКонтрагента,
		Объект.Контрагент,
		Объект.Организация);
	
	ОбработатьИзменениеДоговораКонтрагента();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПодразделения()
	
	ОбщегоНазначенияБольничнаяАптека.ИзменитьСкладПриНеобходимости(
		Объект.ПодразделениеОрганизации, Объект.Склад, ОсновнойСклад);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеКонтрагента()
	
	Объект.ДоговорКонтрагента = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьДоговорПоУмолчанию(
		Объект.ДоговорКонтрагента,
		Объект.Контрагент,
		Объект.Организация);
	ОбработатьИзменениеДоговораКонтрагента();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеДоговораКонтрагента()
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		РеквизитыДоговора = ЗакупкиСервер.ПолучитьОсновныеРеквизитыДоговора(Объект.ДоговорКонтрагента);
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = РеквизитыДоговора.Организация;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Контрагент;
		КонецЕсли;
		
		Объект.Валюта = РеквизитыДоговора.ВалютаВзаиморасчетов;
		
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриИзмененииКлючевыхРеквизитовСостояниеЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВалюты()
	
	Валюта = Объект.Валюта;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеЦенаВключаетНДСНаСервере(КэшированныеЗначения)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТабличнуюЧасть(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНалогооблаженияНДС()
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТабличнуюЧасть(Объект.Товары, СтруктураДействий, Неопределено);
	
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗагрузкуДанныхИзТСД(Штрихкоды, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(Штрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваВСтрокеТовары(ТекущаяСтрока)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПоступлениеОднойДатой()
	
	Если Объект.ПоступлениеОднойДатой Тогда
		Объект.ДатаПоступления = МаксимальнаяДатаПоступления();
		ЗаполнитьДатуПоступленияВТаблице(Объект.ДатаПоступления);
	КонецЕсли;
	
	УстановитьВидимостьДатПоступления(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРазбиенияСтроки(НоваяСтрока, ТекущаяСтрока) Экспорт
	
	НоваяСтрока.КодСтроки = 0;
	
	ПриИзмененииКоличестваВСтрокеТовары(ТекущаяСтрока);
	ПриИзмененииКоличестваВСтрокеТовары(НоваяСтрока);
	
	Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ОбновитьЗависимыеРеквизитыФормыПоСпецификации(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	
КонецПроцедуры

#КонецОбласти // ОбработкаИзмененияРеквизитов

////////////////////////////////////////////////////////////////////////////////
// Буфер обмена товарами
#Область БуферОбменаТоварами

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ТаблицаТовары = Элементы.Товары;
	Если ОбработкаТабличнойЧастиКлиент.ВозможноКопированиеСтрок(ТаблицаТовары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиВБуферОбмена(ТаблицаТовары.Имя);
		ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(ТаблицаТовары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ВставитьТоварыИзБуфераОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБуфераОбмена(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ОткрытьБуферОбмена(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиВБуферОбмена(Знач ИмяТабличнойЧасти)
	
	ОбработкаТабличнойЧастиСервер.СкопироватьВыделенныеСтрокиВБуферОбмена(Объект, Объект[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары = Неопределено)
	
	ТаблицаТовары = Объект.Товары;
	КоличествоТоваровДоВставки = ТаблицаТовары.Количество();
	
	ВставитьТоварыИзБуфераОбменаСервер(ВыбранныеТовары);
	
	КоличествоВставленных = ТаблицаТовары.Количество() - КоличествоТоваровДоВставки;
	ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьТоварыИзБуфераОбменаСервер(Знач ВыбранныеТовары = Неопределено)
	
	ТабличнаяЧасть = Объект.Товары;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	ДанныеВставлены = ОбработкаТабличнойЧастиСервер.ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары, ТабличнаяЧасть, СтруктураДействий);
	Если ДанныеВставлены Тогда
		Модифицированность = Истина;
		
		РассчитатьСостояниеСпецификации();
		ОбновитьЗависимыеРеквизитыФормыПоСпецификации(ТабличнаяЧасть.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ЕстьДанныеВБуфереОбмена)
	
	Элементы = Форма.Элементы;
	Элементы.ТоварыБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыКонтекстноеМенюБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыБуферОбмена.Доступность = ЕстьДанныеВБуфереОбмена;
	
КонецПроцедуры

#КонецОбласти // БуферОбменаТоварами

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти // СтандартныеПодсистемы
