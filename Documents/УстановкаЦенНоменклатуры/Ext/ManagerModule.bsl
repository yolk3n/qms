#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
#Область ПрограммныйИнтерфейс

// Имена реквизитов, от значений которых зависят параметры учета номенклатуры
//
// Возвращаемое значение:
//   Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУчетаНоменклатуры() Экспорт
	
	Возврат "Ссылка";
	
КонецФункции

// Возвращает параметры учета для номенклатуры, указанной в документе
//
// Параметры
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
// Возвращаемое значение
//   Структура - Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУчетаНоменклатуры
//
Функция ПараметрыУчетаНоменклатуры(Объект) Экспорт
	
	ПараметрыУчета = ЗапасыСервер.ПараметрыУчетаНоменклатуры();
	ПараметрыУчета.ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ПараметрыУчета.ИспользоватьСерии = Истина;
	ПараметрыУчета.ИспользоватьПартии = Истина;
	
	Возврат ПараметрыУчета;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания параметров учета номенклатуры
//
// Параметры
//   ПараметрыУчетаНоменклатуры - Структура - состав полей задается в функции ЗапасыСервер.ПараметрыУчетаНоменклатуры
//
// Возвращаемое значение
//   Строка - текст запроса
//
Функция ТекстЗапросаРасчетаСтатусовУчетаНоменклатуры(ПараметрыУчетаНоменклатуры) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.СтатусУказанияПартий КАК СтатусУказанияПартий
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолитикиУчетаСерий.Ссылка КАК ВидНоменклатуры,
	|	ИСТИНА КАК ВестиУчетПоСериям
	|ПОМЕСТИТЬ ПараметрыУчетаСерий
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ПолитикиУчетаСерий
	|ГДЕ
	|	ПолитикиУчетаСерий.ПолитикаУчетаСерий <> ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаСерий.НеУчитывать)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолитикиУчетаСерий.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолитикиУчетаПартий.Ссылка КАК ВидНоменклатуры,
	|	ИСТИНА КАК ВестиУчетПоПартиям
	|ПОМЕСТИТЬ ПараметрыУчетаПартий
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ПолитикиУчетаПартий
	|ГДЕ
	|	ПолитикиУчетаПартий.ПолитикаУчетаПартий В (ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаПартий.УправлениеОстаткамиПартий), ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУчетаПартий.УчетСебестоимостиПоПартиям))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияПартийСтарый,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПолитикиУчетаСерий.ВестиУчетПоСериям, ЛОЖЬ)
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА &СтатусУчетПоСериям //&СтатусУчетПоСериямСерияНеЗаполнена
	|					ИНАЧЕ &СтатусУчетПоСериям
	|				КОНЕЦ
	|		ИНАЧЕ &СтатусСерииНеУказываются
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПолитикиУчетаПартий.ВестиУчетПоПартиям, ЛОЖЬ)
	|			ТОГДА &СтатусУчетПоПартиям
	|		ИНАЧЕ &СтатусПартииНеУказываются
	|	КОНЕЦ КАК СтатусУказанияПартий,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО
	|			ТоварыДляЗапроса.Номенклатура = Товары.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПараметрыУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО
	|			ПолитикиУчетаСерий.ВидНоменклатуры = ТоварыДляЗапроса.ВидНоменклатуры
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПараметрыУчетаПартий КАК ПолитикиУчетаПартий
	|		ПО
	|			ПолитикиУчетаПартий.ВидНоменклатуры = ТоварыДляЗапроса.ВидНоменклатуры
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Статусы.СтатусУказанияПартий КАК СтатусУказанияПартий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтатусУказанияСерийСтарый
	|	ИЛИ Статусы.СтатусУказанияПартий <> Статусы.СтатусУказанияПартийСтарый
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ВидЦены)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти // ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение
#Область Проведение

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицыДвиженийДляПроведения(ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	ОсновныеДанныеДокумента = ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства);
	
	ПроведениеБольничнаяАптека.ДобавитьТекстЗапросаДвижений(ДополнительныеСвойства, ТекстЗапросаЦеныНоменклатуры(), Метаданные.РегистрыСведений.ЦеныНоменклатуры);
	
	Запрос = Новый Запрос(ПроведениеБольничнаяАптека.ПолучитьТекстЗапросаДвижений(ДополнительныеСвойства, Регистры));
	
	Для Каждого ДанныеДокумента Из ОсновныеДанныеДокумента Цикл
		Запрос.УстановитьПараметр(ДанныеДокумента.Ключ, ДанныеДокумента.Значение);
	КонецЦикла;
	
	ПроведениеБольничнаяАптека.ЗаполнитьТаблицыДвижений(ДополнительныеСвойства, Запрос.ВыполнитьПакет(), Регистры);
	
КонецПроцедуры

Функция ПодготовитьОсновныеДанныеДляПроведения(ДополнительныеСвойства)
	
	ЗапрашиваемыеДанные = Новый Структура;
	ЗапрашиваемыеДанные.Вставить("Ссылка");
	ЗапрашиваемыеДанные.Вставить("Период", "Дата");
	ЗапрашиваемыеДанные.Вставить("ВидЦены");
	ЗапрашиваемыеДанные.Вставить("Валюта", "ВидЦены.ВалютаЦены");
	
	ОсновныеДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроведениеБольничнаяАптека.ПолучитьСсылкуНаДокументДляПроведения(ДополнительныеСвойства),
		ЗапрашиваемыеДанные);
	
	ЗапасыСервер.ПриПодготовкеОсновныхДанныхДляПроведения(ДополнительныеСвойства, ОсновныеДанныеДокумента);
	
	Возврат ОсновныеДанныеДокумента;
	
КонецФункции

Функция ТекстЗапросаЦеныНоменклатуры()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияСерий В (&СтатусУчетПоСериям, &СтатусУчетСебестоимостиПоСериям)
	|			ТОГДА ТаблицаТовары.СерияНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                   КАК СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СтатусУказанияПартий В (&СтатусУчетПоПартиям, &СтатусУчетСебестоимостиПоПартиям)
	|			ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                   КАК Партия,
	|	ТаблицаТовары.ЕдиницаИзмерения          КАК Упаковка,
	|	&ВидЦены                                КАК ВидЦены,
	|	ТаблицаТовары.Цена                      КАК Цена,
	|	&Валюта                                 КАК Валюта,
	|	&Период                                 КАК Период
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // Проведение

////////////////////////////////////////////////////////////////////////////////
// Печать
#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	УправлениеПечатьюБольничнаяАптека.ДобавитьКомандыПечати(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыПечати);
	
КонецПроцедуры

// Возвращает список доступных печатных форм документа
//
Функция ДоступныеПечатныеФормы() Экспорт
	
	ПечатныеФормы = УправлениеПечатьюБольничнаяАптека.СоздатьКоллекциюДоступныхПечатныхФорм();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Обработки.ПечатьЭтикетокИЦенников.ДоступныеПечатныеФормы("Ценники"), ПечатныеФормы);
	
	Возврат ПечатныеФормы;
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище
//
Функция ПолучитьДанныеДляПечатиЦенников(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УстановкаЦенНоменклатурыТовары.Номенклатура КАК Номенклатура,
	|	УстановкаЦенНоменклатурыТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	УстановкаЦенНоменклатурыТовары.Партия КАК Партия,
	|	УстановкаЦенНоменклатурыТовары.ЕдиницаИзмерения КАК Упаковка,
	|	УстановкаЦенНоменклатурыТовары.Цена КАК Цена,
	|	МИНИМУМ(УстановкаЦенНоменклатурыТовары.НомерСтроки) КАК Порядок,
	|	СУММА(1) КАК Количество
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
	|ГДЕ
	|	УстановкаЦенНоменклатурыТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	УстановкаЦенНоменклатурыТовары.Номенклатура,
	|	УстановкаЦенНоменклатурыТовары.СерияНоменклатуры,
	|	УстановкаЦенНоменклатурыТовары.Партия,
	|	УстановкаЦенНоменклатурыТовары.Цена,
	|	УстановкаЦенНоменклатурыТовары.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УстановкаЦенНоменклатуры.ВидЦены КАК ВидЦены
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
	|ГДЕ
	|	УстановкаЦенНоменклатуры.Ссылка В(&МассивДокументов)
	|";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивВидовЦен = ТаблицаРеквизитыДокументов.ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьСклад", Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьВидЦены", ?(МассивВидовЦен.Количество() = 1, МассивВидовЦен[0], Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Ложь);
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат СтруктураРезультат;
	
КонецФункции

#КонецОбласти // Печать

////////////////////////////////////////////////////////////////////////////////
// Команды формы
#Область КомандыФормы

// Заполняет список команд ввода на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании, НастройкиФормы) Экспорт
	
	ВводНаОснованииБольничнаяАптека.ДобавитьКомандыСозданияНаОсновании(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыСоздатьНаОсновании, НастройкиФормы);
	
КонецПроцедуры

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица команд для вывода в подменю. Для изменения.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	МенюОтчетыБольничнаяАптека.ДобавитьОбщиеКоманды(ПустаяСсылка().Метаданные().ПолноеИмя(), КомандыОтчетов, НастройкиФормы);
	
КонецПроцедуры

#КонецОбласти // КомандыФормы

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Загрузка из файла.
#Область ЗагрузкаИзФайла

Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(ПараметрыЗагрузкиИзФайла) Экспорт
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений, для которых в ИБ имеется несколько подходящих вариантов.
//     * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Товары =  ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	ДанныеПоШтрихкодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(ЗагружаемыеДанные.ВыгрузитьКолонку("Штрихкод"));
	ТаблицаНоменклатуры = ЗаполнитьТаблицуНоменклатуры();
	ПодобраннаяНоменклатура = Новый Соответствие;
	
	НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		
		СтрокаПоискаШтрихкод       = СтрЗаменить(СтрокаТаблицы.Штрихкод, " ", "");
		СтрокаПоискаАртикул        = ВРег(СтрЗаменить(СтрокаТаблицы.Артикул, " ", ""));
		СтрокаПоискаНоменклатура   = ВРег(СтрЗаменить(СтрокаТаблицы.НоменклатураНаименование, " ", ""));
		СтрокаПоискаСерия          = ВРег(СтрЗаменить(СтрокаТаблицы.СерияНоменклатуры, " ", ""));
		
		ПохожаяНоменклатура = Новый Массив;
		
		Если ЗначениеЗаполнено(СтрокаПоискаШтрихкод) Тогда
			
			НайденнаяСтрока = ДанныеПоШтрихкодам.Получить(СтрокаПоискаШтрихкод);
			Если НайденнаяСтрока.Количество() > 0 Тогда
				ПохожаяНоменклатура.Добавить(НайденнаяСтрока.Номенклатура);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаПоискаАртикул) Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("АртикулПоиск", СтрокаПоискаАртикул);
			Отбор.Вставить("НаименованиеПоиск", СтрокаПоискаНоменклатура);
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("АртикулПоиск", СтрокаПоискаАртикул);
				Отбор.Вставить("НаименованиеПолноеПоиск", СтрокаПоискаНоменклатура);
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					Отбор = Новый Структура;
					Отбор.Вставить("АртикулПоиск", СтрокаПоискаАртикул);
					НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Отбор);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если ПохожаяНоменклатура.Найти(НайденнаяСтрока.Номенклатура) = Неопределено Тогда
					ПохожаяНоменклатура.Добавить(НайденнаяСтрока.Номенклатура);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаПоискаНоменклатура) Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("НаименованиеПоиск", СтрокаПоискаНоменклатура);
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("НаименованиеПолноеПоиск", СтрокаПоискаНоменклатура);
				НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(Отбор);
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если ПохожаяНоменклатура.Найти(НайденнаяСтрока.Номенклатура) = Неопределено Тогда
					ПохожаяНоменклатура.Добавить(НайденнаяСтрока.Номенклатура);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Товар = Товары.Добавить();
		Товар.Идентификатор = СтрокаТаблицы.Идентификатор;
		Если ПохожаяНоменклатура.Количество() = 1 Тогда
			Товар.Номенклатура = ПохожаяНоменклатура[0];
			Если ЗначениеЗаполнено(СтрокаТаблицы.СерияНоменклатуры) Тогда
				Товар.СерияНоменклатуры = Справочники.СерииНоменклатуры.НайтиПоНаименованию(СтрокаТаблицы.СерияНоменклатуры, Истина,, Товар.Номенклатура);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
				ПараметрыВыбораЕдиницы = Новый Структура("Отбор, СтрокаПоиска", Новый Структура);
				ПараметрыВыбораЕдиницы.Отбор.Вставить("Номенклатура", Товар.Номенклатура);
				ПараметрыВыбораЕдиницы.СтрокаПоиска = СтрокаТаблицы.ЕдиницаИзмерения;
				ДанныеВыбора = Справочники.ЕдиницыИзмерения.ПолучитьДанныеВыбора(ПараметрыВыбораЕдиницы);
				Если ДанныеВыбора.Количество() = 1 Тогда
					Товар.ЕдиницаИзмерения = ДанныеВыбора[0].Значение;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ПохожаяНоменклатура.Количество() > 1 Тогда
			Неоднозначность = СписокНеоднозначностей.Добавить();
			Неоднозначность.Колонка = "Номенклатура";
			Неоднозначность.Идентификатор = СтрокаТаблицы.Идентификатор;
			ПараметрыПоиска = Новый Структура("Штрихкод, Артикул, НоменклатураНаименование");
			ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СтрокаТаблицы);
			ПодобраннаяНоменклатура.Вставить(ОбщегоНазначения.ЗначениеВСтрокуXML(ПараметрыПоиска), ПохожаяНоменклатура);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Партия) Тогда
			Товар.Партия = Справочники.ПартииНоменклатуры.НайтиПоНаименованию(СтрокаТаблицы.Партия, Истина);
		КонецЕсли;
		Товар.Цена = СтрокаТаблицы.Цена;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПодобраннаяНоменклатура", ПодобраннаяНоменклатура);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//  ПолноеИмяТабличнойЧасти  - Строка    - полное имя табличной части, в которую загружаются данные.
//  СписокНеоднозначностей    - Массив   - Массив для заполнения с неоднозначными данными.
//  ИмяКолонки                - Строка   - Имя колонки, в который возникла неоднозначность.
//  ЗагружаемыеЗначенияСтрока - Строка   - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Если ИмяКолонки = "Номенклатура" Тогда
		Неоднозначности = ДополнительныеПараметры.ПодобраннаяНоменклатура.Получить(ОбщегоНазначения.ЗначениеВСтрокуXML(ЗагружаемыеЗначенияСтрока));
		Если Неоднозначности <> Неопределено Тогда
			СписокНеоднозначностей = Неоднозначности;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьТаблицуНоменклатуры()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.Код КАК Код,
	|	Данные.Артикул КАК Артикул,
	|	Данные.Артикул КАК АртикулПоиск,
	|	Данные.Наименование КАК Наименование,
	|	Данные.Наименование КАК НаименованиеПоиск,
	|	Данные.НаименованиеПолное КАК НаименованиеПолное,
	|	Данные.НаименованиеПолное КАК НаименованиеПолноеПоиск,
	|	Данные.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Данные
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекСтрока Из ТаблицаНоменклатуры Цикл
		ТекСтрока.Код = ВРег(СтрЗаменить(ТекСтрока.Код, " ", ""));
		ТекСтрока.АртикулПоиск = ВРег(СтрЗаменить(ТекСтрока.АртикулПоиск, " ", ""));
		ТекСтрока.НаименованиеПоиск = ВРег(СтрЗаменить(ТекСтрока.НаименованиеПоиск, " ", ""));
	КонецЦикла;
	
	Возврат ТаблицаНоменклатуры
	
КонецФункции

#КонецОбласти // ЗагрузкаИзФайла

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти // СтандартныеПодсистемы

#КонецЕсли