#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ЗаполнитьПоПоступлениюТоваров(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
		ЗаполнитьПоПрочемуОприходованиюТоваров(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Согласован = Ложь;
	ДокументОснование = Неопределено;
	
	ИнициализироватьДокумент();
	
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	ПараметрыУчетаНоменклатуры = ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект);
	ЗапасыСервер.ПроверитьЗаполнениеСерийНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры, НепроверяемыеРеквизиты, Отказ);
	ЗапасыСервер.ПроверитьЗаполнениеПартийНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры, НепроверяемыеРеквизиты, Отказ);
	
	КлючевыеРеквизиты = Новый Массив;
	КлючевыеРеквизиты.Добавить("Номенклатура");
	Если ПараметрыУчетаНоменклатуры.ИспользоватьСерии Тогда
		КлючевыеРеквизиты.Добавить("СерияНоменклатуры");
	КонецЕсли;
	Если ПараметрыУчетаНоменклатуры.ИспользоватьПартии Тогда
		КлючевыеРеквизиты.Добавить("Партия");
	КонецЕсли;
	ОбработкаТабличнойЧастиСервер.ПроверитьНаличиеДублейСтрок(ЭтотОбъект, "Товары", КлючевыеРеквизиты, Отказ);
	ПроверитьНаличиеУстановленныхЦен(Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияБольничнаяАптека.ИзменитьПризнакСогласованностиДокумента(ЭтотОбъект, РежимЗаписи);
	
	ЗапасыСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение документа
#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент()
	
	Автор = Пользователи.ТекущийПользователь();
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюТоваров(ДанныеЗаполнения)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Документ.Ссылка       КАК Ссылка,
	|	Документ.Дата         КАК ДатаДокумента,
	|	Документ.Валюта       КАК Валюта,
	|	НЕ Документ.Проведен  КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &ДокументОснование
	|");
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(Шапка.Ссылка, Шапка.ЕстьОшибкиПроведен);
	
	Если Не ЗначениеЗаполнено(ВидЦены) Тогда
		ВидЦены = Константы.ВидЦенПоступления.Получить();
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура       КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры  КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия             КАК Партия,
	|	ТаблицаТовары.ЕдиницаИзмерения   КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ВидЦены.Ссылка ЕСТЬ NULL ИЛИ ВидЦены.ЦенаВключаетНДС = ТаблицаТовары.Ссылка.ЦенаВключаетНДС
	|			ТОГДА ТаблицаТовары.Цена
	|		КОГДА ВидЦены.ЦенаВключаетНДС
	|			ТОГДА ТаблицаТовары.СуммаСНДС / ТаблицаТовары.КоличествоВЕдиницахИзмерения
	|		ИНАЧЕ (ТаблицаТовары.СуммаСНДС - ТаблицаТовары.СуммаНДС) / ТаблицаТовары.КоличествоВЕдиницахИзмерения
	|	КОНЕЦ * ВЫБОР
	|		КОГДА &Валюта = &ВалютаЦены
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(КурсДокумента.Курс, 1) * ЕСТЬNULL(КурсЦены.Кратность, 1) / ЕСТЬNULL(КурсДокумента.Кратность, 1) / ЕСТЬNULL(КурсЦены.Курс, 1)
	|	КОНЕЦ                            КАК Цена
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЦен КАК ВидЦены
	|	ПО
	|		ВидЦены.Ссылка = &ВидЦены
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&ДатаЦен, Валюта = &Валюта) КАК КурсДокумента
	|	ПО
	|		ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&ДатаЦен, Валюта = &ВалютаЦены) КАК КурсЦены
	|	ПО
	|		ИСТИНА
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|";
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("ДатаЦен", Шапка.ДатаДокумента);
	Запрос.УстановитьПараметр("Валюта", Шапка.Валюта);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	ВалютаЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидЦены, "ВалютаЦены");
	Запрос.УстановитьПараметр("ВалютаЦены", ?(ЗначениеЗаполнено(ВалютаЦены), ВалютаЦены, Шапка.Валюта));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить установку цен номенклатуры на основании документа %1'"),
			ДокументОснование);
		ВызватьИсключение Текст;
		
	Иначе
		
		ДокументОснование = ДанныеЗаполнения;
		Товары.Загрузить(РезультатЗапроса.Выгрузить());
		ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
		ПрименитьПравилаОкругленияЦены();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоПрочемуОприходованиюТоваров(ДанныеЗаполнения)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	НЕ Документ.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПрочееОприходованиеТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &ДокументОснование
	|");
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(Выборка.Ссылка, Выборка.ЕстьОшибкиПроведен);
	
	Если Не ЗначениеЗаполнено(ВидЦены) Тогда
		ВидЦены = Константы.ВидЦенПоступления.Получить();
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура       КАК Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры  КАК СерияНоменклатуры,
	|	ТаблицаТовары.Партия             КАК Партия,
	|	ТаблицаТовары.ЕдиницаИзмерения   КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Цена               КАК Цена
	|ИЗ
	|	Документ.ПрочееОприходованиеТоваров.Товары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидЦены
	|		ПО
	|			ВидЦены.Ссылка = &ВидЦены
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|";
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить установку цен номенклатуры на основании документа %1'"),
			ДокументОснование);
		ВызватьИсключение Текст;
		
	Иначе
		
		ДокументОснование = ДанныеЗаполнения;
		Товары.Загрузить(РезультатЗапроса.Выгрузить());
		ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
		ПрименитьПравилаОкругленияЦены();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ИнициализацияИЗаполнение

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

Процедура ПрименитьПравилаОкругленияЦены()
	
	Если ЗначениеЗаполнено(ВидЦены) И Товары.Количество() Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПравилаОкругленияЦены.НижняяГраницаДиапазонаЦен        КАК НижняяГраницаДиапазонаЦен,
		|	ПравилаОкругленияЦены.ТочностьОкругления               КАК ТочностьОкругления,
		|	ПравилаОкругленияЦены.Ссылка.ВариантОкругления         КАК ВариантОкругления
		|ИЗ
		|	Справочник.ВидыЦен.ПравилаОкругленияЦены КАК ПравилаОкругленияЦены
		|ГДЕ
		|	ПравилаОкругленияЦены.Ссылка = &ВидЦены
		|";
		ПравилаОкругленияЦены = Запрос.Выполнить().Выгрузить();
		
		КоличествоСтрок = ПравилаОкругленияЦены.Количество();
		Если КоличествоСтрок Тогда
			Для каждого СтрокаТовара Из Товары Цикл
				Для Индекс = 1 По КоличествоСтрок Цикл
					
					ПравилаОкругления = ПравилаОкругленияЦены[КоличествоСтрок - Индекс];
					Если ПравилаОкругления.НижняяГраницаДиапазонаЦен <= СтрокаТовара.Цена Тогда
						
						Если ЗначениеЗаполнено(ПравилаОкругления.ТочностьОкругления) Тогда
							СтрокаТовара.Цена = ЦенообразованиеБольничнаяАптекаКлиентСервер.ОкруглитьЦену(
								СтрокаТовара.Цена,
								ПравилаОкругления.ТочностьОкругления,
								ПравилаОкругления.ВариантОкругления);
						КонецЕсли;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеУстановленныхЦен(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.СерияНоменклатуры,
	|	ТаблицаТовары.Партия
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЦеныНоменклатуры.Период, ДЕНЬ), ЦеныНоменклатуры.Период, СЕКУНДА)+1 КАК НомерВПределахДня,
	|	ТаблицаТовары.НомерСтроки           КАК НомерСтроки,
	|	ЦеныНоменклатуры.Номенклатура       КАК Номенклатура,
	|	ЦеныНоменклатуры.СерияНоменклатуры  КАК СерияНоменклатуры,
	|	ЦеныНоменклатуры.Партия             КАК Партия,
	|	ЦеныНоменклатуры.ВидЦены            КАК ВидЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ТаблицаТовары
	|		ПО
	|			ЦеныНоменклатуры.Номенклатура = ТаблицаТовары.Номенклатура
	|			И ЦеныНоменклатуры.СерияНоменклатуры = ТаблицаТовары.СерияНоменклатуры
	|			И ЦеныНоменклатуры.Партия = ТаблицаТовары.Партия
	|
	|ГДЕ
	|	ЦеныНоменклатуры.Период = &ДатаДокумента
	|	И ЦеныНоменклатуры.Регистратор <> &УстановкаЦен
	|	И (ЦеныНоменклатуры.Номенклатура, ЦеныНоменклатуры.СерияНоменклатуры, ЦеныНоменклатуры.Партия) В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДокументТовары.Номенклатура,
	|			ДокументТовары.СерияНоменклатуры,
	|			ДокументТовары.Партия
	|		ИЗ
	|			ТаблицаТовары КАК ДокументТовары)
	|	И ЦеныНоменклатуры.ВидЦены = &ВидыЦен
	|;
	|";
		
	Запрос.УстановитьПараметр("УстановкаЦен", Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("ВидыЦен", ВидЦены);
	Запрос.УстановитьПараметр(
		"ТаблицаТовары",
		Товары.Выгрузить(, "НомерСтроки, Номенклатура, СерияНоменклатуры, Партия"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" по виду цен ""%ВидЦен%"" на дату %ДатаДокумента%, номер в пределах дня %НомерВПределахДня% уже установлена'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%Номенклатура%",
			ОбщегоНазначенияБольничнаяАптека.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.Номенклатура, Выборка.СерияНоменклатуры, Выборка.Партия));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидЦен%",         Выборка.ВидЦены);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаДокумента%",     Формат(Дата, "ДЛФ=D"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерВПределахДня%", Выборка.НомерВПределахДня);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "НомерСтроки");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СписокРегистровДляКонтроля() Экспорт
	
	РегистрыДляКонтроля = Новый Массив;
	Возврат РегистрыДляКонтроля;
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли