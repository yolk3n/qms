
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ПодключаемоеОборудованиеСервер.НастроитьФормуДляИспользованияПодключаемогоОборудования(ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриСозданииНаСервере(ЭтотОбъект);
	
	// БуферОбменаТоварами
	УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, Не ОбработкаТабличнойЧастиСервер.БуферОбменаПустой());
	// Конец БуферОбменаТоварами
	
	// ИнтеграцияСМобильнымПриложением
	ИнтеграцияСМобильнымПриложением.СоздатьКомандуЗагрузкиДанныхИзМобильногоПриложенияНаФорме(ЭтотОбъект, "Товары", Элементы.ТоварыГруппаИзменитьСтроки.Имя);
	// Конец ИнтеграцияСМобильнымПриложением
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если ПодключаемоеОборудованиеКлиент.ОбрабатыватьОповещение(ЭтотОбъект, Источник) Тогда
		Если ПодключаемоеОборудованиеКлиент.ОбработатьПолучениеДанныхОтСканераШтрихкода(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбработатьШтрихкоды(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ВведенШтрихкод" И Источник = УникальныйИдентификатор Тогда
		ОбработатьШтрихкоды(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
	КонецЕсли;
	
	// БуферОбменаТоварами
	Если ОбработкаТабличнойЧастиКлиент.ОбрабатыватьОповещениеОтБуфераОбмена(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ДоступностьБуфераОбмена = ОбработкаТабличнойЧастиКлиент.ОпределитьДоступностьВставкиИзБуфераОбменаПоСобытию(ИмяСобытия);
		УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, ДоступностьБуфераОбмена);
	КонецЕсли;
	// Конец БуферОбменаТоварами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ПодборТоваровКлиент.ОбработатьПодборТоваровВДокументСписания(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодбор(ВыбранноеЗначение.АдресТоваровВХранилище, КэшированныеЗначения);
	ИначеЕсли ПодборТоваровКлиент.ОбработатьПодборТоваровПоОтбору(ЭтотОбъект, ИсточникВыбора) Тогда
		ДобавитьТоварыПоОтборуНаСервере(ВыбранноеЗначение.АдресТоваровВХранилище,, КэшированныеЗначения);
	Иначе
		// БуферОбменаТоварами
		Если ОбработкаТабличнойЧастиКлиент.НужноОбработатьВставкуИзБуфераОбмена(ЭтотОбъект, ИсточникВыбора) Тогда
			ВставитьТоварыИзБуфераОбмена(ВыбранноеЗначение);
		КонецЕсли;
		// Конец БуферОбменаТоварами
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОценкаПроизводительностиБольничнаяАптекаКлиент.НачатьЗамерПроведенияДокумента(Объект.Ссылка, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ПоказатьВводШтрихкода(УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗагрузкуДанныхИзТСД", ЭтотОбъект);
	ОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(Оповещение, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	ПараметрыПодбора.Вставить("МестоХраненияОстатка", "Склад");
	ПараметрыПодбора.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыПодбора.Вставить("ВидЦены", Объект.ВидЦены);
	ПараметрыПодбора.Вставить("Валюта", Валюта);
	
	ПодборТоваровКлиент.ОткрытьПодборТоваровВДокументСписания(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтбору(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	ПараметрыПодбора.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПодборТоваровКлиент.ОткрытьПодборТоваровПоОтбору(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	ЗаполнитьПоОснованиюСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "УстановкаЦенНоменклатуры.Товары";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка товаров из файла'");
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДействующиеЦены(Команда)
	
	ОчиститьСообщения();
	Если Объект.ВидЦены.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Поле ""Вид цены"" не заполнено'"),
			,
			"Объект.ВидЦены");
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьДействующиеЦеныЗавершение", ЭтотОбъект);
	ПоказатьВводДаты(Оповещение, Объект.Дата, НСтр("ru='Получить цены на дату:'"), ЧастиДаты.Дата)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДействующиеЦеныЗавершение(ДатаЦен, ДополнительныеПараметры) Экспорт
	
	Если ДатаЦен <> Неопределено Тогда
		Дата = Мин(КонецДня(ДатаЦен), ДатаДляЗапросаЦенНоменклатуры(Объект));
		ЗагрузитьЗначенияБазовыхЦен(Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	ОчиститьСообщения();
	Если Объект.ВидЦены.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Поле ""Вид цены"" не заполнено'"),
			,
			"Объект.ВидЦены");
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект);
	ПоказатьВводДаты(Оповещение, Объект.Дата, НСтр("ru='Получить цены на дату:'"), ЧастиДаты.Дата)
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗавершение(ДатаЦен, ДополнительныеПараметры) Экспорт
	
	Если ДатаЦен <> Неопределено Тогда
		Дата = Мин(КонецДня(ДатаЦен), ДатаДляЗапросаЦенНоменклатуры(Объект));
		ЗагрузитьЗначенияБазовыхЦен(Дата, Валюта, Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦеныНаПроцент(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьЦеныНаПроцентЗавершение", ЭтотОбъект);
	ПоказатьВводЧисла(Оповещение, 0, НСтр("ru='Изменить на процент:'"), 5, 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦеныНаПроцентЗавершение(Процент, ДополнительныеПараметры) Экспорт
	
	Если Процент <> Неопределено И Процент <> 0 Тогда
		ИзменитьЦенуНаПроцентНаСервере(Процент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	// ИнтеграцияСМобильнымПриложением
	Оповестить = Новый ОписаниеОповещения("ОбработатьЗагрузкуДанныхИзТСД", ЭтотОбъект);
	ИнтеграцияСМобильнымПриложениемКлиент.ВыполнитьКомандуЗагрузкиДанныхИзМобильногоПриложения(ЭтотОбъект, Команда, Оповестить);
	// Конец ИнтеграцияСМобильнымПриложением
	
	ОбщегоНазначенияБольничнаяАптекаКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Шапка
#Область Шапка

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокумента(Объект.Дата), Объект.Ссылка);
	Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВПределахДняПриИзменении(Элемент)
	
	Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	
	НастроитьФормуПоВидуЦены();
	
КонецПроцедуры

#КонецОбласти // Шапка

////////////////////////////////////////////////////////////////////////////////
// Список "Товары"
#Область Товары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), ТекущаяСтрока.СерияНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуПродажи(), ПолучитьПараметрыЗаполненияЦены(ЭтотОбъект));
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(), "ЦеноваяГруппа");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьПроцентИзмененияЦены(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуПродажи(), ПолучитьПараметрыЗаполненияЦены(ЭтотОбъект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьПроцентИзмененияЦены(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элемент.Родитель.ТекущиеДанные;
	ОтборПартий = Новый Структура;
	ОтборПартий.Вставить("Документ", Объект.Ссылка);
	
	ПараметрыВыбораПартии = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыВыбораПартии(ОтборПартий, ТекущаяСтрока);
	ОбработкаТабличнойЧастиКлиент.ВыбратьПартиюНоменклатуры(ЭтотОбъект, Элемент, ПараметрыВыбораПартии, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуПродажи(), ПолучитьПараметрыЗаполненияЦены(ЭтотОбъект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьПроцентИзмененияЦены(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуПродажи(), ПолучитьПараметрыЗаполненияЦены(ЭтотОбъект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьПроцентИзмененияЦены(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.Цена = ТекущаяСтрока.СтараяЦена + ТекущаяСтрока.СтараяЦена * ТекущаяСтрока.Процент / 100;
	РассчитатьПроцентИзмененияЦены(ТекущаяСтрока);
	ТекущаяСтрока.ЦенаИзмененаВручную = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	РассчитатьПроцентИзмененияЦены(ТекущаяСтрока);
	ТекущаяСтрока.ЦенаИзмененаВручную = Истина;
	
КонецПроцедуры

#КонецОбласти // Товары

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	Если Объект.Ссылка.Пустая() Тогда
		НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокумента(Объект.Дата), Объект.Ссылка);
		Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
	Иначе
		НомерВПределахДня = ДатаДокумента(Объект.Дата) - НачалоДня(ДатаДокумента(Объект.Дата)) + 1;
	КонецЕсли;
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	
	НастроитьФормуПоВидуЦены();
	
	ЭлементыФормы = Новый Массив;
	ЭлементыФормы.Добавить("Основание");
	ЭлементыФормы.Добавить("ТоварыЗаполнитьПоОснованию");
	
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		ЭлементыФормы,
		"Видимость",
		ЗначениеЗаполнено(Объект.ДокументОснование));
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСерийНоменклатуры(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПартий(ЭтотОбъект);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Товары: оформление цены установленной вручную'");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ЦенаИзмененаВручную");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Новый Шрифт,,, Истина));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоВидуЦены()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВидыЦен.Ссылка                       КАК Ссылка,
	|	ВидыЦен.Идентификатор                КАК ВидЦены,
	|	ВидыЦен.Наименование                 КАК Наименование,
	|	ВидыЦен.ПометкаУдаления              КАК ПометкаУдаления,
	|	ВидыЦен.СпособЗаданияЦены            КАК СпособЗаданияЦены,
	|	ВидыЦен.ВалютаЦены                   КАК Валюта,
	|	ВидыЦен.БазовыйВидЦены.Идентификатор КАК БазовыйВидЦены,
	|	ВидыЦен.Наценка                      КАК Наценка,
	|	ВидыЦен.Формула                      КАК Формула,
	|
	|	ВидыЦен.ПравилаОкругленияЦены.(
	|		НижняяГраницаДиапазонаЦен     КАК НижняяГраницаДиапазонаЦен,
	|		ТочностьОкругления            КАК ТочностьОкругления
	|	),
	|
	|	ВидыЦен.ЦеновыеГруппы.(
	|		ЦеноваяГруппа                 КАК ЦеноваяГруппа,
	|		Формула                       КАК Формула,
	|		БазовыйВидЦены.Идентификатор  КАК БазовыйВидЦены,
	|		Наценка                       КАК Наценка
	|	),
	|
	|	ВидыЦен.ВлияющиеВидыЦен.(
	|		ВидЦены                       КАК ВидЦены,
	|		ВидЦены.Идентификатор         КАК Идентификатор
	|	),
	|
	|	ВидыЦен.ВариантОкругления  КАК ВариантОкругления
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", Объект.ВидЦены);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		ЦеныНазначаютсяВручную = Истина;
		
	Иначе
		
		ТаблицаВидовЦен = РезультатЗапроса.Выгрузить();
		СтрокаВидаЦен = ТаблицаВидовЦен[0];
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаВидаЦен, "ВидЦены, СпособЗаданияЦены, Валюта, ВариантОкругления, БазовыйВидЦены, Наценка, Формула");
		ПравилаОкругленияЦены.Загрузить(СтрокаВидаЦен.ПравилаОкругленияЦены);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы") Тогда
			ЦеновыеГруппы.Загрузить(СтрокаВидаЦен.ЦеновыеГруппы);
		КонецЕсли;
		ВлияющиеВидыЦен.ЗагрузитьЗначения(СтрокаВидаЦен.ВлияющиеВидыЦен.ВыгрузитьКолонку("ВидЦены"));
		ВлияющиеВидыЦенСтрокой = СтрСоединить(СтрокаВидаЦен.ВлияющиеВидыЦен.ВыгрузитьКолонку("Идентификатор"), ",");
		
		ЦеныНазначаютсяВручную = (СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную);
		
	КонецЕсли;
	
	ЗаполнитьСтарыеЦены();
	
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТоварыРассчитать",
		"Видимость",
		Не ЦеныНазначаютсяВручную);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(), "ЦеноваяГруппа");
	
	Справочники.Номенклатура.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(Знач АдресЗагруженныхДанных, КэшированныеЗначения)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл
		
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТаблицы);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка штрихкодов
#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияСДобавленнымиСтроками = Новый Структура;
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЦенуПродажи(), ПолучитьПараметрыЗаполненияЦены(ЭтотОбъект));
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(), "ЦеноваяГруппа");
	
	ДействияСИзмененнымиСтроками = Новый Структура;
	
	ИзменятьКоличество = Не ТолькоПросмотр И Не Объект.Согласован;
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиШтрихкодов(ДанныеШтрихкодов, ДействияСДобавленнымиСтроками, ДействияСИзмененнымиСтроками);
	ПараметрыДействия.ИзменятьКоличество = ИзменятьКоличество;
	ПараметрыДействия.ПропускатьНенайденныеШтрихкоды = Истина;
	ПараметрыДействия.ЕстьКолонкаКоличество = Ложь;
	ПараметрыДействия.ПараметрыУчетаНоменклатуры = ПараметрыУчетаНоменклатуры;
	
	ОбработатьШтрихкодыНаСервере(ПараметрыДействия, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиКлиент.СообщитьОНеизвестныхШтрихкодах(ПараметрыДействия);
	
	Если ПараметрыДействия.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = ПараметрыДействия.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыНаСервере(ПараметрыДействия, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиСервер.ОбработатьШтрихкоды(ЭтотОбъект, Объект, ПараметрыДействия, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти // ОбработкаШтрихкодов

////////////////////////////////////////////////////////////////////////////////
// Обработка подбора
#Область ОбработкаПодбора

&НаСервере
Процедура ОбработатьПодбор(Знач АдресТоваровВХранилище, КэшированныеЗначения)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	СписокПолейПодбора = "Номенклатура, СерияНоменклатуры, Партия, ЕдиницаИзмерения";
	ДобавитьТоварыПоОтборуНаСервере(АдресТоваровВХранилище, ТаблицаТовары.Скопировать(, СписокПолейПодбора), КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТоварыПоОтборуНаСервере(Знач АдресВоВременномХранилище, Знач ТаблицаТовары = Неопределено, КэшированныеЗначения = Неопределено)
	
	Модифицированность = Истина;
	
	Если ТаблицаТовары = Неопределено Тогда
		ТаблицаТовары = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	КонецЕсли;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуПродажи(), ПолучитьПараметрыЗаполненияЦены(ЭтотОбъект));
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(), "ЦеноваяГруппа");
	
	Для Каждого СтрокаТовара Из ТаблицаТовары Цикл
		
		Отбор = Новый Структура("Номенклатура, СерияНоменклатуры, Партия");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТовара);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьПроцентИзмененияЦены(НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбработкаПодбора

////////////////////////////////////////////////////////////////////////////////
// Буфер обмена товарами
#Область БуферОбменаТоварами

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ТаблицаТовары = Элементы.Товары;
	Если ОбработкаТабличнойЧастиКлиент.ВозможноКопированиеСтрок(ТаблицаТовары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиВБуферОбмена(ТаблицаТовары.Имя);
		ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(ТаблицаТовары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ВставитьТоварыИзБуфераОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБуфераОбмена(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ОткрытьБуферОбмена(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиВБуферОбмена(Знач ИмяТабличнойЧасти)
	
	ОбработкаТабличнойЧастиСервер.СкопироватьВыделенныеСтрокиВБуферОбмена(Объект, Объект[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары = Неопределено)
	
	ТаблицаТовары = Объект.Товары;
	КоличествоТоваровДоВставки = ТаблицаТовары.Количество();
	
	ВставитьТоварыИзБуфераОбменаСервер(ВыбранныеТовары);
	
	КоличествоВставленных = ТаблицаТовары.Количество() - КоличествоТоваровДоВставки;
	ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьТоварыИзБуфераОбменаСервер(Знач ВыбранныеТовары = Неопределено)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуПродажи(), ПолучитьПараметрыЗаполненияЦены(ЭтотОбъект));
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(), "ЦеноваяГруппа");
	
	ДанныеВставлены = ОбработкаТабличнойЧастиСервер.ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары, Объект.Товары, СтруктураДействий);
	Если ДанныеВставлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ЕстьДанныеВБуфереОбмена)
	
	Элементы = Форма.Элементы;
	Элементы.ТоварыБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыКонтекстноеМенюБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыБуферОбмена.Доступность = ЕстьДанныеВБуфереОбмена;
	
КонецПроцедуры

#КонецОбласти // БуферОбменаТоварами

&НаКлиентеНаСервереБезКонтекста
Функция ДатаДляЗапросаЦенНоменклатуры(Объект)
	
	Возврат ДатаДокумента(Объект.Дата) - 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДатаДокумента(Знач Дата)
	
	#Если Клиент Тогда
		Возврат ?(ЗначениеЗаполнено(Дата), Дата, ОбщегоНазначенияКлиент.ДатаСеанса());
	#Иначе
		Возврат ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	#КонецЕсли
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьНомерВПределахДня(ДатаДокумента, Ссылка)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	МАКСИМУМ(УстановкаЦенНоменклатуры.Дата) КАК Дата
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
	|ГДЕ
	|	УстановкаЦенНоменклатуры.Ссылка <> &Ссылка
	|	И УстановкаЦенНоменклатуры.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаДокумента, ДЕНЬ)
	|");
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() И Выборка.Дата <> Null Тогда
		Возврат Выборка.Дата - НачалоДня(ДатаДокумента) + 2;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьДатуДокумента(ДатаДокумента, НомерВПределахДня)
	
	Возврат НачалоДня(ДатаДокумента) + НомерВПределахДня - 1;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьЗначенияБазовыхЦен(ДатаДокумента = Неопределено,
									  ВалютаЦены = Неопределено,
									  ПрименитьНаценку = Ложь,
									  ПрименитьОкругление = Ложь,
									  ИмяКолонкиЦена = "Цена",
									  ТолькоВыделенныеСтроки = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТолькоВыделенныеСтроки Тогда
		ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоВыделеннымСтрокам();
	Иначе
		ТаблицаНоменклатуры = Объект.Товары.Выгрузить(, "Номенклатура, СерияНоменклатуры, Партия, ЕдиницаИзмерения");
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура       КАК Номенклатура,
	|	ТаблицаНоменклатуры.СерияНоменклатуры  КАК СерияНоменклатуры,
	|	ТаблицаНоменклатуры.Партия             КАК Партия,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения   КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|ИНДЕКСИРОВАТЬ ПО Номенклатура, СерияНоменклатуры, Партия
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены.Идентификатор  КАК ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Валюта                 КАК Валюта,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура           КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.СерияНоменклатуры      КАК СерияНоменклатуры,
	|	ЦеныНоменклатурыСрезПоследних.Партия                 КАК Партия,
	|	ЦеныНоменклатурыСрезПоследних.Упаковка               КАК Упаковка,
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|	* ВЫБОР
	|		КОГДА &ВалютаДокумента = НЕОПРЕДЕЛЕНО ИЛИ &ВалютаДокумента = ЕСТЬNULL(ВалютаЦены.Валюта, &ВалютаДокумента)
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(ВалютаЦены.Курс, 0) * ЕстьNULL(ВалютаДокумента.Кратность, 0) / ЕСТЬNULL(ВалютаЦены.Кратность, 1) / ЕстьNULL(ВалютаДокумента.Курс, 1)
	|	КОНЕЦ
	|	* ВЫБОР
	|		КОГДА ЦеныНоменклатурыСрезПоследних.Упаковка = ТаблицаНоменклатуры.ЕдиницаИзмерения
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(КоэффициентыУпаковокЦены.Коэффициент, 0) / ЕСТЬNULL(КоэффициентыЕдиницИзмерения.Коэффициент, 1)
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаДокумента,
	|			(Номенклатура, СерияНоменклатуры, Партия) В
	|					(ВЫБРАТЬ
	|						ТаблицаНоменклатуры.Номенклатура   КАК Номенклатура,
	|						ТаблицаНоменклатуры.СерияНоменклатуры КАК СерияНоменклатуры,
	|						ТаблицаНоменклатуры.Партия КАК Партия
	|					ИЗ
	|						ТаблицаНоменклатуры КАК ТаблицаНоменклатуры)
	|				И ВидЦены В(&ВидЦены)) КАК ЦеныНоменклатурыСрезПоследних
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК ВалютаДокумента
	|	ПО
	|		ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента) КАК ВалютаЦены
	|	ПО
	|		ЦеныНоменклатурыСрезПоследних.Валюта = ВалютаЦены.Валюта
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|	ПО
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура = ТаблицаНоменклатуры.Номенклатура
	|		И ЦеныНоменклатурыСрезПоследних.СерияНоменклатуры = ТаблицаНоменклатуры.СерияНоменклатуры
	|		И ЦеныНоменклатурыСрезПоследних.Партия = ТаблицаНоменклатуры.Партия
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК КоэффициентыУпаковокЦены
	|	ПО
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура = КоэффициентыУпаковокЦены.Номенклатура
	|		И ЦеныНоменклатурыСрезПоследних.Упаковка = КоэффициентыУпаковокЦены.ЕдиницаИзмерения
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК КоэффициентыЕдиницИзмерения
	|	ПО
	|		ТаблицаНоменклатуры.Номенклатура = КоэффициентыЕдиницИзмерения.Номенклатура
	|		И ТаблицаНоменклатуры.ЕдиницаИзмерения = КоэффициентыЕдиницИзмерения.ЕдиницаИзмерения
	|");
	
	Запрос.УстановитьПараметр("ВидЦены", ?(ПрименитьНаценку, ВлияющиеВидыЦен.ВыгрузитьЗначения(), Объект.ВидЦены));
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаЦены);
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("ДатаДокумента", ?(ДатаДокумента = Неопределено, ДатаДляЗапросаЦенНоменклатуры(Объект), ДатаДокумента));
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если ТолькоВыделенныеСтроки Тогда
		ТаблицаНоменклатуры = Новый Массив;
		Для каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
			ТаблицаНоменклатуры.Добавить(Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки));
		КонецЦикла;
	Иначе
		ТаблицаНоменклатуры = Объект.Товары;
	КонецЕсли;
	
	Если ПрименитьНаценку Тогда
		ВлияющиеЦены = Новый Структура(ВлияющиеВидыЦенСтрокой);
	Иначе
		ВлияющиеЦены = Новый Структура(ВидЦены);
	КонецЕсли;
	
	Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		Отбор = Новый Структура("Номенклатура, СерияНоменклатуры, Партия");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаНоменклатуры);
		
		Цена = 0;
		
		НайденныеЦены = Выгрузка.НайтиСтроки(Отбор);
		Если НайденныеЦены.Количество() Тогда
			
			Для Каждого КлючЗначение Из ВлияющиеЦены Цикл
				ВлияющиеЦены[КлючЗначение.Ключ] = 0;
			КонецЦикла;
			
			Для Каждого ДанныеЦены Из НайденныеЦены Цикл
				ВлияющиеЦены[ДанныеЦены.ВидЦены] = ДанныеЦены.Цена;
			КонецЦикла;
			
			Если ПрименитьНаценку Тогда
				Цена = ПолучитьЦенуСНаценкой(ВлияющиеЦены, СтрокаНоменклатуры.ЦеноваяГруппа);
			Иначе
				Цена = ВлияющиеЦены[ВидЦены];
			КонецЕсли;
			
			Если ПрименитьОкругление Тогда
				Цена = ПрименитьПравилаОкругленияЦены(Цена);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаНоменклатуры[ИмяКолонкиЦена] = Цена;
		Если ИмяКолонкиЦена = "Цена" Тогда
			СтрокаНоменклатуры.ЦенаИзмененаВручную = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьТаблицуНоменклатурыПоВыделеннымСтрокам()
	
	ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
	Для каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЦикла;
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьПустуюТаблицуНоменклатуры()
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	
	ТаблицаЗначений.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаЗначений.Колонки.Добавить("Партия", Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры"));
	ТаблицаЗначений.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

&НаСервере
Функция ПолучитьЦенуСНаценкой(ВлияющиеЦены, ЦеноваяГруппа)
	
	АлгоритмыЦеновойГруппы = ЦеновыеГруппы.НайтиСтроки(Новый Структура("ЦеноваяГруппа", ЦеноваяГруппа));
	Если АлгоритмыЦеновойГруппы.Количество() > 0 Тогда
		ПараметрыАлгоритма = АлгоритмыЦеновойГруппы[0];
	Иначе
		ПараметрыАлгоритма = ЭтотОбъект;
	КонецЕсли;
	
	Если СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен Тогда
		ФормулаЦены = ПараметрыАлгоритма.Формула;
	Иначе
		ФормулаЦены = "["+ ПараметрыАлгоритма.БазовыйВидЦены + "] * (" + Формат(1 + ПараметрыАлгоритма.Наценка / 100, "ЧРД=.; ЧГ=0") + ")";
	КонецЕсли;
	
	Цена = КонструкторФормулБольничнаяАптекаКлиентСервер.ВычислитьФормулу(ФормулаЦены, ВлияющиеЦены);
	
	Возврат Цена;
	
КонецФункции

&НаСервере
Функция ПрименитьПравилаОкругленияЦены(Цена)
	
	КоличествоСтрок = ПравилаОкругленияЦены.Количество();
	
	Для Индекс = 1 По КоличествоСтрок Цикл
		
		ПравилаОкругления = ПравилаОкругленияЦены[КоличествоСтрок - Индекс];
		
		Если ПравилаОкругления.НижняяГраницаДиапазонаЦен <= Цена Тогда
			
			Если ЗначениеЗаполнено(ПравилаОкругления.ТочностьОкругления) Тогда
				Цена = ЦенообразованиеБольничнаяАптекаКлиентСервер.ОкруглитьЦену(
					Цена,
					ПравилаОкругления.ТочностьОкругления,
					ВариантОкругления);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПравилаОкругления.ВычитатьИзРезультата) Тогда
				Цена = ЦенообразованиеБольничнаяАптекаКлиентСервер.ПрименитьПсихологическоеОкругление(Цена, ПравилаОкругления.ВычитатьИзРезультата);
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Цена;
	
КонецФункции

&НаСервере
Процедура ИзменитьЦенуНаПроцентНаСервере(Процент)
	
	Для Каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаНоменклатуры = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		Цена = СтрокаНоменклатуры.Цена + СтрокаНоменклатуры.Цена * Процент / 100;
		Цена = ПрименитьПравилаОкругленияЦены(Цена);
		
		СтрокаНоменклатуры.Цена = Цена;
		СтрокаНоменклатуры.ЦенаИзмененаВручную = Истина;
		
		РассчитатьПроцентИзмененияЦены(СтрокаНоменклатуры);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюСервер()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Документ.ДокументОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ЗаполнитьСтарыеЦены();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПараметрыЗаполненияЦены(Форма)
	
	ПараметрыЗаполненияЦены = Новый Структура;
	ПараметрыЗаполненияЦены.Вставить("Дата", ДатаДляЗапросаЦенНоменклатуры(Форма.Объект));
	ПараметрыЗаполненияЦены.Вставить("ВидЦены", Форма.Объект.ВидЦены);
	ПараметрыЗаполненияЦены.Вставить("Валюта", Форма.Валюта);
	ПараметрыЗаполненияЦены.Вставить("ИмяКолонкиЦена", "СтараяЦена");
	
	Возврат ПараметрыЗаполненияЦены;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьПроцентИзмененияЦены(ТекущаяСтрока)
	
	Если ТекущаяСтрока.СтараяЦена = 0 Тогда
		ТекущаяСтрока.Процент = 0;
	Иначе
		ТекущаяСтрока.Процент = (ТекущаяСтрока.Цена - ТекущаяСтрока.СтараяЦена) * 100 / ТекущаяСтрока.СтараяЦена;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтарыеЦены()
	
	ЗагрузитьЗначенияБазовыхЦен(,,,, "СтараяЦена", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗагрузкуДанныхИзТСД(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти // СтандартныеПодсистемы
