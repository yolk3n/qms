
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	ТипыДокументов = Новый ФиксированныйМассив(ШтрихкодированиеПечатныхФорм.ТипыОбъектовДинамическогоСписка(Список));
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СписокДоступныхТиповОпераций = Перечисления.ТипыОперацийВводаОстатков.ПолучитьДоступные();
	
	ИнициализироватьТаблицуПоясненийКОперациям();
	ОтборОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОтборОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ВводОстатков" Тогда
		Если Параметр.Свойство("ТипОперации") Тогда
			ОбновитьСтатусыТиповОпераций(Параметр.ТипОперации);
		Иначе
			ОбновитьСтатусыТиповОпераций();
		КонецЕсли;
		Элементы.Список.ТекущаяСтрока = Источник;
	КонецЕсли;
	РазвернутьДеревоОпераций();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ТекущийРаздел = Элементы.ДеревоОпераций.ТекущиеДанные.Раздел;
	ТекущаяОперация = Элементы.ДеревоОпераций.ТекущиеДанные.ОперацияВводаОстатков;
	ОтборОрганизацияПриИзмененииСервер();
	РазвернутьДеревоОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОперацийПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьИзменениеОперации", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОтборПоТипамОпераций.Количество() = 1 Тогда
		ОценкаПроизводительностиБольничнаяАптекаКлиент.НачатьЗамерСозданияФормыОбъекта(ТипыДокументов[0], Отказ, Копирование, ОтборПоТипамОпераций[0].Значение);
	КонецЕсли;
	
	Если Не Копирование Тогда
		Отказ = Истина;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", ОтборОрганизация);
		ПараметрыФормы.Вставить("ОтборПоТипамОпераций", ОтборПоТипамОпераций);
		ОткрытьФорму("Документ.ВводОстатков.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиБольничнаяАптекаКлиент.НачатьЗамерОткрытияФормыОбъекта(ДанныеСтроки.Ссылка, Отказ);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПоляДата(ЭтотОбъект);
	
	ТипыОперацийВводаОстатков = Перечисления.ТипыОперацийВводаОстатков;
	
	// Видимость поля Склад
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Склад.Имя);
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров);
	Операции.Добавить(ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваровВОтделениях);
	Операции.Добавить(ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"ДеревоОпераций.Раздел", ВидСравненияКомпоновкиДанных.НеРавно, "Товары");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"ДеревоОпераций.ОперацияВводаОстатков", ВидСравненияКомпоновкиДанных.НеВСписке, Операции);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Видимость поля Контрагент
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Контрагент.Имя);
	
	Операции = Новый СписокЗначений;
	Операции.Добавить(ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров);
	Операции.Добавить(ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаОтветственноеХранение);
	Операции.Добавить(ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"ДеревоОпераций.Раздел", ВидСравненияКомпоновкиДанных.НеРавно, "Товары");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		"ДеревоОпераций.ОперацияВводаОстатков", ВидСравненияКомпоновкиДанных.НеВСписке, Операции);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоОпераций()
	
	АктивнаяСтрока = Неопределено;
	КоллекцияЭлементовДерева=ДеревоОпераций.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Если Строка.Раздел = ТекущийРаздел И Строка.ОперацияВводаОстатков = ТекущаяОперация Тогда
			АктивнаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
		Элементы.ДеревоОпераций.Развернуть(ИдентификаторСтроки, Истина);
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Для Каждого Элемент Из ПодчиненныеСтроки Цикл
			ИдентификаторСтроки=Элемент.ПолучитьИдентификатор();
			Если Элемент.Раздел = ТекущийРаздел И Элемент.ОперацияВводаОстатков = ТекущаяОперация Тогда
				АктивнаяСтрока = ИдентификаторСтроки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если АктивнаяСтрока <> Неопределено Тогда
		Элементы.ДеревоОпераций.ТекущаяСтрока = АктивнаяСтрока;
	Иначе
		Элементы.ДеревоОпераций.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоответствиеТиповОпераций()
	
	СоответствиеТиповОперацийВводаОстатков = Новый Соответствие;
	
	ТипыОперацийДенежныеСредства = Новый СписокЗначений;
	ТипыОперацийДенежныеСредства.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМПоРозничнойВыручке);
	
	ТипыОперацийТовары = Новый СписокЗначений;
	ТипыОперацийТовары.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров);
	ТипыОперацийТовары.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваровВОтделениях);
	ТипыОперацийТовары.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаОтветственноеХранение);
	ТипыОперацийТовары.Добавить(Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков);
	
	СоответствиеТиповОперацийВводаОстатков.Вставить("ДенежныеСредства", ТипыОперацийДенежныеСредства);
	СоответствиеТиповОперацийВводаОстатков.Вставить("Товары", ТипыОперацийТовары);
	
	Возврат СоответствиеТиповОперацийВводаОстатков;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтатусыТиповОпераций(ТипОперации = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВводОстатков.Ссылка
	|ИЗ
	|	Документ.ВводОстатков КАК ВводОстатков
	|ГДЕ
	|	(&Организация = НЕОПРЕДЕЛЕНО ИЛИ ВводОстатков.Организация = &Организация)
	|	И ВводОстатков.ТипОперации В (&СписокДоступныхТиповОпераций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВводОстатков.ТипОперации         КАК ТипОперации,
	|	КОЛИЧЕСТВО(ВводОстатков.Ссылка)  КАК КоличествоДокументов
	|ПОМЕСТИТЬ ВТДокументыВводаОстатков
	|ИЗ
	|	Документ.ВводОстатков КАК ВводОстатков
	|ГДЕ
	|	(&ТипОперации = НЕОПРЕДЕЛЕНО ИЛИ ВводОстатков.ТипОперации = &ТипОперации)
	|	И
	|	(&Организация = НЕОПРЕДЕЛЕНО ИЛИ ВводОстатков.Организация = &Организация)
	|СГРУППИРОВАТЬ ПО
	|	ВводОстатков.ТипОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеречислениеТипыОперацийВводаОстатков.Ссылка    КАК ОперацияВводаОстатков,
	|	ЕСТЬNULL(ВводОстатков.КоличествоДокументов, 0)  КАК Количество,
	|	ВЫБОР
	|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (&ТипыОперацийДенежныеСредства)
	|			ТОГДА &РазделДенежныеСредства
	|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (&ТипыОперацийТовары)
	|			ТОГДА &РазделТовары
	|	КОНЕЦ                                           КАК Раздел
	|ИЗ
	|	Перечисление.ТипыОперацийВводаОстатков КАК ПеречислениеТипыОперацийВводаОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ВТДокументыВводаОстатков КАК ВводОстатков
	|		ПО
	|			ПеречислениеТипыОперацийВводаОстатков.Ссылка = ВводОстатков.ТипОперации
	|ГДЕ
	|	ПеречислениеТипыОперацийВводаОстатков.Ссылка В (&СписокДоступныхТиповОпераций)
	|ИТОГИ ПО
	|	Раздел
	|";
	
	ТипыОпераций = СоответствиеТиповОпераций();
	Запрос.УстановитьПараметр("ТипыОперацийДенежныеСредства", ТипыОпераций["ДенежныеСредства"]);
	Запрос.УстановитьПараметр("ТипыОперацийТовары"          , ТипыОпераций["Товары"]);
	Запрос.УстановитьПараметр("РазделДенежныеСредства"      , НСтр("ru='Денежные средства'"));
	Запрос.УстановитьПараметр("РазделТовары"                , НСтр("ru='Товары'"));
	
	Запрос.УстановитьПараметр("ТипОперации", ТипОперации);
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда 
		Запрос.УстановитьПараметр("Организация", ОтборОрганизация);
	Иначе
		Запрос.УстановитьПараметр("Организация", Неопределено);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокДоступныхТиповОпераций", СписокДоступныхТиповОпераций);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВсегоДокументов = РезультатЗапроса[0].Выгрузить().Количество();
	
	Если ТипОперации = Неопределено Тогда
		
		Дерево = ДеревоОпераций;
		Дерево.ПолучитьЭлементы().Очистить();
		
		СтрокаВсего = Дерево.ПолучитьЭлементы().Добавить();
		СтрокаВсего.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ПустаяСсылка();
		СтрокаВсего.Количество = ВсегоДокументов;
		ПредставлениеОперации = НСтр("ru='Все документы (%ВсегоДокументов%)'");
		ПредставлениеОперации = СтрЗаменить(ПредставлениеОперации, "%ВсегоДокументов%", ВсегоДокументов);
		СтрокаВсего.ПредставлениеОперации = ПредставлениеОперации;
		СтрокаВсего.СтатусОперации = 2;
		
		ВыборкаРазделы = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРазделы.Следующий() Цикл
			СтрокаГруппы = Дерево.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаГруппы, ВыборкаРазделы);
			СтрокаГруппы.СтатусОперации = 2;
			ВыборкаДетальныеЗаписи = ВыборкаРазделы.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаОперация = СтрокаГруппы.ПолучитьЭлементы().Добавить();
				СтрокаОперация.ОперацияВводаОстатков = ВыборкаДетальныеЗаписи.ОперацияВводаОстатков;
				СтрокаОперация.Количество = ВыборкаДетальныеЗаписи.Количество;
				СтрокаОперация.ПредставлениеОперации = Строка(ВыборкаДетальныеЗаписи.ОперацияВводаОстатков);
				СтрокаОперация.СтатусОперации = 1;
				Если ВыборкаДетальныеЗаписи.Количество > 0 Тогда
					СтрокаОперация.ПредставлениеОперации = СтрокаОперация.ПредставлениеОперации + " ("+ВыборкаДетальныеЗаписи.Количество+")";
					СтрокаОперация.СтатусОперации = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		Дерево = РеквизитФормыВЗначение("ДеревоОпераций");
		ВыборкаРазделы = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРазделы.Следующий() Цикл
			ВыборкаДетальныеЗаписи = ВыборкаРазделы.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = ТипОперации Тогда
					СтрокаОперация = Дерево.Строки.Найти(ВыборкаДетальныеЗаписи.ОперацияВводаОстатков, "ОперацияВводаОстатков", Истина);
					Если СтрокаОперация <> Неопределено Тогда
						СтрокаОперация.Количество = ВыборкаДетальныеЗаписи.Количество;
						СтрокаОперация.ПредставлениеОперации = ВыборкаДетальныеЗаписи.ОперацияВводаОстатков;
						СтрокаОперация.СтатусОперации = 1;
						Если ВыборкаДетальныеЗаписи.Количество > 0 Тогда
							СтрокаОперация.ПредставлениеОперации = СтрокаОперация.ПредставлениеОперации + " (" + ВыборкаДетальныеЗаписи.Количество + ")";
							СтрокаОперация.СтатусОперации = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Раздел", "");
		ПараметрыОтбора.Вставить("ОперацияВводаОстатков", Перечисления.ТипыОперацийВводаОстатков.ПустаяСсылка());
		НайденныеСтроки = Дерево.Строки.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки[0] <> Неопределено Тогда
			СтрокаВсего = НайденныеСтроки[0];
			СтрокаВсего.Количество = ВсегоДокументов;
			ПредставлениеОперации = НСтр("ru='Все документы (%ВсегоДокументов%)'");
			ПредставлениеОперации = СтрЗаменить(ПредставлениеОперации, "%ВсегоДокументов%", ВсегоДокументов);
			СтрокаВсего.ПредставлениеОперации = ПредставлениеОперации;
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(Дерево, "ДеревоОпераций");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЭлементОтбораГруппы()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ТипОперации", ОтборПоТипамОпераций, ВидСравненияКомпоновкиДанных.ВСписке,, Истина)
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстПоясненияИДополнительныеСсылки()
	
	ТекущаяСтрока = Элементы.ДеревоОпераций.ТекущиеДанные;
	УстановитьТекстПояснения(ТекущаяСтрока.Раздел, ТекущаяСтрока.ОперацияВводаОстатков);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстПояснения(Раздел, Операция)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Раздел", Раздел);
	Отбор.Вставить("ОперацияВводаОстатков", Операция);
	
	МассивСтрок = ТекстПояснений.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество()>0 Тогда
		ТекущийТекстПояснения = МассивСтрок[0].Пояснение;
	Иначе
		ТекущийТекстПояснения = НСтр("ru='Вводятся остатки по всем типам операций'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицуПоясненийКОперациям()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПеречислениеТипыОперацийВводаОстатков.Ссылка КАК ОперацияВводаОстатков,
	|	ВЫБОР
	|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМПоРозничнойВыручке))
	|			ТОГДА &ЗаголовокДС
	|		КОГДА ПеречислениеТипыОперацийВводаОстатков.Ссылка В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваровВОтделениях),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаОтветственноеХранение))
	|			ТОГДА &ЗаголовокТовары
	|	КОНЕЦ КАК Раздел
	|ИЗ
	|	Перечисление.ТипыОперацийВводаОстатков КАК ПеречислениеТипыОперацийВводаОстатков
	|
	|ИТОГИ ПО Раздел
	|";
	
	ЗаголовокДС = НСтр("ru='Денежные средства'");
	ЗаголовокТовары = НСтр("ru='Товары'");
	
	Запрос.УстановитьПараметр("ЗаголовокДС", ЗаголовокДС);
	Запрос.УстановитьПараметр("ЗаголовокТовары", ЗаголовокТовары);
	
	ВыборкаРазделы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРазделы.Следующий() Цикл
		НоваяСтрока = ТекстПояснений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаРазделы);
		Если ВыборкаРазделы.Раздел = ЗаголовокДС Тогда
			НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки наличных денежных средств организаций'")
		ИначеЕсли ВыборкаРазделы.Раздел = ЗаголовокТовары Тогда
			НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки товаров организаций'")
		КонецЕсли;
		ВыборкаДетальныеЗаписи = ВыборкаРазделы.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока = ТекстПояснений.Добавить();
			НоваяСтрока.ОперацияВводаОстатков = ВыборкаДетальныеЗаписи.ОперацияВводаОстатков;
			Если ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМПоРозничнойВыручке Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки наличных денежных средств, находящихся в автономных кассах ККМ'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки собственных товаров организаций на складах'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваровВОтделениях Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки собственных товаров организаций на складах отделений'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки возвратной тары, принятой от поставщиков'")
			ИначеЕсли ВыборкаДетальныеЗаписи.ОперацияВводаОстатков = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаОтветственноеХранение Тогда
				НоваяСтрока.Пояснение = НСтр("ru='Вводятся остатки собственных товаров, переданных на ответственное хранение'")
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоТипамОперацийРаздела(ИмяРаздела)
	
	Дерево = РеквизитФормыВЗначение("ДеревоОпераций");
	ГруппаДерева = Дерево.Строки.Найти(ИмяРаздела, "Раздел");
	МассивТиповОпераций  = Новый Массив;
	Если ГруппаДерева <> Неопределено Тогда
		Для Каждого Строка Из ГруппаДерева.Строки Цикл
			МассивТиповОпераций.Добавить(Строка.ОперацияВводаОстатков);
		КонецЦикла;
	КонецЕсли;
	ОтборПоТипамОпераций.ЗагрузитьЗначения(МассивТиповОпераций);
	
КонецПроцедуры

&НаСервере
Процедура ОтборОрганизацияПриИзмененииСервер()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", ОтборОрганизация,,, ЗначениеЗаполнено(ОтборОрганизация));
	ОбновитьСтатусыТиповОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеОперации()
	
	Элемент = Элементы.ДеревоОпераций;
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ОперацияВводаОстатков) Тогда
		ОтборПоТипамОпераций.Очистить();
		ОтборПоТипамОпераций.Добавить(Элемент.ТекущиеДанные.ОперацияВводаОстатков);
		ИзменитьЭлементОтбораГруппы();
	Иначе
		Если ПустаяСтрока(Элемент.ТекущиеДанные.Раздел) Тогда
			ОтборПоТипамОпераций.Очистить();
			ОтборПоТипамОпераций.ЗагрузитьЗначения(СписокДоступныхТиповОпераций.ВыгрузитьЗначения());
			ИзменитьЭлементОтбораГруппы();
		Иначе
			УстановитьОтборПоТипамОперацийРаздела(Элемент.ТекущиеДанные.Раздел);
			ИзменитьЭлементОтбораГруппы();
		КонецЕсли;
	КонецЕсли;
	ТекущийРаздел = Элементы.ДеревоОпераций.ТекущиеДанные.Раздел;
	ТекущаяОперация = Элементы.ДеревоОпераций.ТекущиеДанные.ОперацияВводаОстатков;
	УстановитьТекстПоясненияИДополнительныеСсылки();
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти // СтандартныеПодсистемы
