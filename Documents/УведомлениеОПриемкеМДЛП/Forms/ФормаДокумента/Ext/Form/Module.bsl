
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ОчередьОбработкиШтрихкодов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	КонтрольКодовМаркировкиМДЛП.ПриСозданииНаСервере(ЭтотОбъект, Отказ);
	
	ИнтеграцияМДЛППереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.ТоварыХарактеристика.Имя);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.ТоварыСерия.Имя);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.ТоварыУпаковка.Имя);
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Элементы.СоставТранспортныхУпаковокНоменклатура.Имя);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.СоставТранспортныхУпаковокХарактеристика.Имя, "Элементы.СоставТранспортныхУпаковок.ТекущиеДанные.Номенклатура");
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, Элементы.СоставТранспортныхУпаковокСерия.Имя, "Элементы.СоставТранспортныхУпаковок.ТекущиеДанные.Номенклатура");
	
	ИспользоватьХарактеристики = ИнтеграцияМДЛП.ИспользоватьХарактеристикиНоменклатуры();
	Элементы.ТоварыХарактеристика.Видимость = ИспользоватьХарактеристики;
	Элементы.СоставТранспортныхУпаковокХарактеристика.Видимость = ИспользоватьХарактеристики;
	ИспользоватьСерии = ИнтеграцияМДЛП.ИспользоватьСерииНоменклатуры();
	Элементы.ТоварыСерия.Видимость = ИспользоватьСерии;
	Элементы.ТоварыСгенерироватьСерии.Видимость = ИспользоватьСерии;
	Элементы.СоставТранспортныхУпаковокСерия.Видимость = ИспользоватьСерии;
	Элементы.ТоварыУпаковка.Видимость = ИнтеграцияМДЛП.ИспользоватьУпаковкиНоменклатуры();
	
	ВалютаРегламентированногоУчета = ИнтеграцияМДЛППереопределяемый.ВалютаРегламентированногоУчета();
	Элементы.ТоварыЦена.Заголовок               = СтрЗаменить(НСтр("ru = 'Цена (%Валюта%)'"), "%Валюта%", ВалютаРегламентированногоУчета);
	Элементы.ТранспортныеУпаковкиЦена.Заголовок = СтрЗаменить(НСтр("ru = 'Цена (%Валюта%)'"), "%Валюта%", ВалютаРегламентированногоУчета);
	Элементы.СоставТранспортныхУпаковокЦена.Заголовок = СтрЗаменить(НСтр("ru = 'Цена (%Валюта%)'"), "%Валюта%", ВалютаРегламентированногоУчета);
	
	Если Не ЗначениеЗаполнено(Объект.ИдентификаторОрганизации) Тогда
		Элементы.ИдентификаторОрганизации.Видимость = Ложь;
		Элементы.ЗаполнитьОрганизациюПоИдентификатору.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ИдентификаторКонтрагента.Видимость = ЗначениеЗаполнено(Объект.ИдентификаторКонтрагента);
	Если Не ЗначениеЗаполнено(Объект.ИдентификаторОрганизацииКонтрагента) Тогда
		Элементы.ИдентификаторОрганизацииКонтрагента.Видимость = Ложь;
		Элементы.ЗаполнитьКонтрагентаПоИдентификатору.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ИдентификаторПродавца) Тогда
		Элементы.ИдентификаторПродавца.Видимость = Ложь;
		Элементы.ЗаполнитьПродавцаПоИдентификатору.Видимость = Ложь;
	КонецЕсли;
	
	ДоступноОснование = ИнтеграцияМДЛП.ДоступноОснованиеУведомления(Объект.Ссылка);
	Элементы.Основание.Видимость = ДоступноОснование;
	Элементы.ТекстПоступлениеТоваров.Видимость = ДоступноОснование;
	
	СобытияФормМДЛППереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	КонтрольКодовМаркировкиМДЛП.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	СобытияФормМДЛППереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ТоварыОтображатьВсеНомераУпаковок.Пометка = Не ПоказыватьВсеНомераУпаковок;
	
	// ПодключаемоеОборудование.СканерыШтрихкода
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.УстройстваВвода") Тогда
		ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	КонецЕсли;
	// Конец ПодключаемоеОборудование.СканерыШтрихкода
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОчередьОбработкиШтрихкодов = Новый Массив;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСостоянияМДЛП"
	   И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Прочитать();
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			УстановитьОтборНомеровУпаковок(ТекущиеДанные.ИдентификаторСтроки);
			СобытияФормМДЛПКлиентСервер.ОбновитьЗаголовокКоличествоНомеровУпаковок(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменМДЛП" Тогда
		
		ОбновитьСтатусУведомления();
		ОбновитьПредставленияСостоянияПодтвержденияУпаковок(Объект);
		
	КонецЕсли;
	
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() И Не ТолькоПросмотр Тогда
		Если ИмяСобытия = "ScanData" Тогда
			
			// Штрихкоды помещаются в очередь, т.к. может использоваться сканер с памятью.
			ОчередьОбработкиШтрихкодов.Добавить(ИнтеграцияМДЛПКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
			ПодключитьОбработчикОжидания("ОбработатьШтрихкодыОтложенно", 0.1, Истина);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ПредварительноеСохранениеРезультатовПроверкиИПодбораМДЛП" И Параметр = Объект.Ссылка Тогда
		Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "СохранениеРезультатовВыборочногоКонтроляМДЛП" И Параметр = Объект.Ссылка Тогда
		Прочитать();
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Основание) Тогда
		Объект.Основание = НовыйОбъект;
		Записать();
		ОбновитьТекстПоступлениеТоваров();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
			МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
			МодульОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Документ.УведомлениеОПриемкеМДЛП.Форма.ФормаДокумента.Провести");
		КонецЕсли;
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультатовПроверки) Тогда
		ТекущийОбъект.ДанныеПроверкиИПодбора = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресРезультатовПроверки));
		АдресРезультатовПроверки = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	КонтрольКодовМаркировкиМДЛП.ПриЗаписиНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ОбновитьСтатусУведомления();
	ОбновитьПредставленияСостоянияПодтвержденияУпаковок(Объект);
	ОбновитьТекстПоступлениеТоваров();
	ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект);
	
	КонтрольКодовМаркировкиМДЛП.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	СобытияФормМДЛППереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Основание", Объект.Основание);
	Оповестить("Запись_УведомлениеОПриемкеМДЛП", ПараметрыЗаписи, Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование") Тогда
		МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
		МодульМенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗапроситьИнформациюОбУпаковках" Тогда
		СтандартнаяОбработка = Ложь;
		ЗапроситьИнформациюОбУпаковкахСЗаписью();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВыполнитьПроверку" Тогда
		ДекорацияОтсканироватьПроверитьУпаковкиОбработкаНавигационнойСсылки(
			Элемент, "ОткрытьФормуСканированияИПроверкиУпаковок", СтандартнаяОбработка);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьПолучение"
			И Не ИнтеграцияМДЛПКлиентСервер.ЗавершеныПроверкаИПодбор(Объект.СтатусПроверкиИПодбора) Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ИнтеграцияМДЛПКлиентСервер.ВыполняютсяПроверкаИПодбор(Объект.СтатусПроверкиИПодбора) Тогда
			СообщениеПользователю = НСтр("ru = 'В документе выполняется проверка поступивших товаров.'");
		Иначе
			СообщениеПользователю = НСтр("ru = 'В документе не выполнялась проверка поступивших товаров.'");
		КонецЕсли;
		СообщениеПользователю = СообщениеПользователю + " " + НСтр("ru = 'Отправка подтверждения возможна только после завершения проверки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		
	Иначе
		Если НавигационнаяСсылкаФорматированнойСтроки = "ОтказатьсяОтПриемкиТовара" Тогда
			ТребуетсяПроведение = Ложь;
		Иначе
			ТребуетсяПроведение = Истина;
		КонецЕсли;
		
		ИнтеграцияМДЛПКлиент.ОбработатьНавигационнуюСсылкуСтатуса(
			ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, ТребуетсяПроведение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтсканироватьПроверитьУпаковкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуСканированияИПроверкиУпаковок" Тогда
		
		СтандартнаяОбработка = Ложь;
		Обработчик = Новый ОписаниеОповещения("ОткрытьФормуСканированияИПроверкиУпаковок_ПослеЗаписи", ЭтотОбъект);
		ИнтеграцияМДЛПСлужебныйКлиент.ЗаписатьДокументВФормеПриНеобходимости(Обработчик, ЭтотОбъект, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьДокументПоступления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	ОбновитьТекстПоступлениеТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СоздатьДокументПоступления();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПоступлениеТоваровОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если "ОформитьПоступление" = НавигационнаяСсылкаФорматированнойСтроки Тогда
		
		СтандартнаяОбработка = Ложь;
		СоздатьДокументПоступления();
		
	ИначеЕсли "СвязатьСПоступлением" = НавигационнаяСсылкаФорматированнойСтроки Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбратьДокументПоступления();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовПоОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерКонтрактаПриИзменении(Элемент)
	
	Объект.НомерКонтракта = СокрЛП(Объект.НомерКонтракта);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерГосударственногоКонтрактаПриИзменении(Элемент)
	
	Объект.НомерГосударственногоКонтракта = СокрЛП(Объект.НомерГосударственногоКонтракта);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	УстановитьОтборНомеровУпаковок(?(ТекущиеДанные <> Неопределено, ТекущиеДанные.ИдентификаторСтроки, "ВсеСкрыть"));
	СобытияФормМДЛПКлиентСервер.ОбновитьЗаголовокКоличествоНомеровУпаковок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		УстановитьОтборНомеровУпаковок(ТекущиеДанные.ИдентификаторСтроки);
		СобытияФормМДЛПКлиентСервер.ОбновитьЗаголовокКоличествоНомеровУпаковок(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	СобытияФормМДЛПКлиент.ТоварыПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораНоменклатуры(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	Если Объект.СхемаАкцептования = ПредопределенноеЗначение("Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок") Тогда
		ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок = Истина;
		ПараметрыЗаполнения.ПересчитатьЦену = Истина;
	Иначе
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц   = Истина;
	КонецЕсли;
	ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
	ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораХарактеристики(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	Если Объект.СхемаАкцептования = ПредопределенноеЗначение("Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок") Тогда
		ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок = Истина;
		ПараметрыЗаполнения.ПересчитатьЦену = Истина;
	Иначе
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц   = Истина;
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораСерии(ЭтотОбъект, ТекущаяСтрока, ПараметрыУказанияСерий, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииСерии(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораУпаковки(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	Если Объект.СхемаАкцептования = ПредопределенноеЗначение("Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок") Тогда
		ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок = Истина;
		ПараметрыЗаполнения.ПересчитатьЦену = Истина;
	Иначе
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц = Истина;
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииУпаковки(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц = Истина;
	ПараметрыЗаполнения.ПересчитатьСумму = Истина;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьСумму = Истина;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииЦены(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьЦену = Истина;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииСуммы(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиНомераУпаковок

&НаКлиенте
Процедура НомераУпаковокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана строка с товаром.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
	СтрокиУпаковок = Объект.НомераУпаковок.НайтиСтроки(ПараметрыОтбора);
	
	Если ТекущиеДанные.Количество <= СтрокиУпаковок.Количество() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если Не Копирование Тогда
			ТекущиеДанные.ИдентификаторСтроки = Элементы.Товары.ТекущиеДанные.ИдентификаторСтроки;
		КонецЕсли;
		ТекущиеДанные.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче");
		ТекущиеДанные.СостояниеПолученияИнформации = Неопределено;
		ТекущиеДанные.Статус = "";
		ОбновитьПредставленияСостоянияПодтвержденияУпаковок(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		ОбновитьСтатусЗаполненияУпаковокВСтроке(Элементы.Товары.ТекущиеДанные);
		СобытияФормМДЛПКлиентСервер.ОбновитьЗаголовокКоличествоНомеровУпаковок(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомераУпаковокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	Если СобытияФормМДЛПКлиент.УдалитьСтрокиУпаковокИзТабличнойЧасти(Объект.НомераУпаковок, Элемент.ВыделенныеСтроки) Тогда
		ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект);
		СобытияФормМДЛПКлиентСервер.ОбновитьЗаголовокКоличествоНомеровУпаковок(ЭтотОбъект);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТранспортныеУпаковки

&НаКлиенте
Процедура ТранспортныеУпаковкиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ИнтеграцияМДЛПКлиент.УстановитьОтборСтрок(
			Элементы.СоставТранспортныхУпаковок.ОтборСтрок,
			Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеУпаковкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче");
		ТекущиеДанные.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		ИнтеграцияМДЛПКлиент.УстановитьОтборСтрок(
			Элементы.СоставТранспортныхУпаковок.ОтборСтрок,
			Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки));
		ТекущиеДанные.СостояниеПолученияИнформации = Неопределено;
		ТекущиеДанные.Статус = "";
		ОбновитьПредставленияСостоянияПодтвержденияУпаковок(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеУпаковкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	Если СобытияФормМДЛПКлиент.УдалитьСтрокиУпаковокИзТабличнойЧасти(
			Объект.ТранспортныеУпаковки,
			Элемент.ВыделенныеСтроки,
			Объект.СоставТранспортныхУпаковок,
			Объект.НомераУпаковок,
			Объект.ИерархияГрупповыхУпаковок) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиСоставТранспортныхУпаковок

&НаКлиенте
Процедура СоставТранспортныхУпаковокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.ТранспортныеУпаковки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана транспортная упаковка.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставТранспортныхУпаковокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.ИдентификаторСтроки = Элементы.ТранспортныеУпаковки.ТекущиеДанные.ИдентификаторСтроки;
		Если Копирование Тогда
			ТекущиеДанные.ИдентификаторСтрокиУпаковки = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставТранспортныхУпаковокНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.СоставТранспортныхУпаковок.ТекущиеДанные;
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораНоменклатуры(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставТранспортныхУпаковокНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СоставТранспортныхУпаковок.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ОбработатьУпаковки = Ложь;
	ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
	ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	СобытияФормМДЛПКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставТранспортныхУпаковокХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.СоставТранспортныхУпаковок.ТекущиеДанные;
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораХарактеристики(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставТранспортныхУпаковокСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.СоставТранспортныхУпаковок.ТекущиеДанные;
	СобытияФормМДЛПКлиентПереопределяемый.НачалоВыбораСерии(ЭтотОбъект, ТекущаяСтрока, ПараметрыУказанияСерий, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьОрганизациюПоИдентификатору(Команда)
	
	ЗаполнитьОрганизациюМестоДеятельностиПоИдентификатору();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтрагентаПоИдентификатору(Команда)
	
	ЗаполнитьКонтрагентаМестоДеятельностиПоИдентификатору();
	Если Не ЗначениеЗаполнено(Объект.Грузоотправитель) Тогда
		Обработчик = Новый ОписаниеОповещения("ЗаполнитьКонтрагентаМестоДеятельности_ПослеПолученияДанных", ЭтотОбъект,);
		ОткрытьФорму("Справочник.ОрганизацииМДЛП.Форма.ЗапросДанныхКонтрагента",
			Новый Структура("Идентификатор", Объект.ИдентификаторОрганизацииКонтрагента), ЭтотОбъект,,,, Обработчик);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВсеНомераУпаковок(Команда)
	
	ПоказыватьВсеНомераУпаковок = Не ПоказыватьВсеНомераУпаковок;
	Элементы.ТоварыОтображатьВсеНомераУпаковок.Пометка = Не ПоказыватьВсеНомераУпаковок;
	
	УстановитьОтборНомеровУпаковок(ИдентификаторТекущейСтроки);
	СобытияФормМДЛПКлиентСервер.ОбновитьЗаголовокКоличествоНомеровУпаковок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьСерии(Команда)
	
	Результат = СгенерироватьСерииНаСервере();
	
	СобытияФормМДЛПКлиент.ОповеститьОбОкончанииЗаполненияСерийВДокументе(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьКПередаче(Команда)
	
	КоличествоСтрок = Объект.НомераУпаковок.Количество() + Объект.ТранспортныеУпаковки.Количество();
	Если КоличествоСтрок = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет строк для подтверждения.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭтоПрямаяСхемаАкцептования = Объект.СхемаАкцептования = ПредопределенноеЗначение("Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок");
	
	КоличествоУстановленныхСостоянийКПередаче = 0;
	Для Каждого ТекущаяСтрока Из Объект.НомераУпаковок Цикл
		
		АрбитражНеУстановлен             = ТекущаяСтрока.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.ПустаяСсылка");
		ИнициацияПостановкиВАрбитраж     = ТекущаяСтрока.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.УстановленПередача");
		ИнициацияСнятияАрбитража         = ТекущаяСтрока.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.СнятПередача");
		ПодтверждениеПостановкиВАрбитраж = ТекущаяСтрока.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.УстановленПолучение");
		ПодтверждениеСнятияАрбитража     = ТекущаяСтрока.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.СнятПолучение");
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.СостояниеПодтверждения)
		 Или АрбитражНеУстановлен И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ")
		 Или АрбитражНеУстановлен И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ")
		 Или АрбитражНеУстановлен И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Отказаться")
		 Или АрбитражНеУстановлен И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ") Тогда
			
			// Передач еще не было;
			// Возврат исходного состояния подтверждения в случае, если передача товаров была отклонена ГИСМ;
			// Возврат исходного состояния подтверждения в случае, если подтверждение передачи товаров было отклонена ГИСМ.
			// Возврат исходного состояния подтверждения в случае, если отказ от передачи товаров или подтверждение приемки товаров еще не были выполнены;
			// Возврат исходного состояния подтверждения в случае, если отказ от передачи товаров или подтверждение приемки товаров был отклонен ГИСМ;
			
			Если ЭтоПрямаяСхемаАкцептования Тогда
				ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить");
			Иначе
				ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче");
			КонецЕсли;
			КоличествоУстановленныхСостоянийКПередаче = КоличествоУстановленныхСостоянийКПередаче + 1;
			
		ИначеЕсли ИнициацияПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче")
			  Или ИнициацияПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ")
			  Или ИнициацияПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПоставщиком")
			  Или ПодтверждениеПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем")
			  Или ИнициацияСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено")
			  Или ПодтверждениеСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено") Тогда
			
			// Возврат исходного состояния подтверждения в случае, если постановка в арбитраж еще не была выполнена;
			// возврат исходного состояния подтверждения в случае, если постановка в арбитраж была отклонена ГИСМ;
			// возврат исходного состояния подтверждения в случае, если постановка в арбитраж была отклонена поставщиком;
			// возврат исходного состояния подтверждения в случае, если подтверждение постановки в арбитраж было отклонено нами и мы получили подтверждение от ГИСМ;
			// возврат исходного состояния подтверждения в случае, если снятие арбитража было подтверждено;
			// возврат исходного состояния подтверждения в случае, если подтверждение снятия арбитража было подтверждено;
			ТекущаяСтрока.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.ПустаяСсылка");
			Если ЭтоПрямаяСхемаАкцептования Тогда
				ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить");
			Иначе
				ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ПринятоГИСМ");
			КонецЕсли;
			КоличествоУстановленныхСостоянийКПередаче = КоличествоУстановленныхСостоянийКПередаче + 1;
			
		ИначеЕсли ПодтверждениеПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче")
			  Или ПодтверждениеПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ")
			  Или ПодтверждениеПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Отказаться")
			  Или ПодтверждениеПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ")
			  Или ПодтверждениеСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче")
			  Или ПодтверждениеСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ")
			  Или ПодтверждениеСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Отказаться")
			  Или ПодтверждениеСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ") Тогда
			
			// Возврат исходного состояния подтверждения в случае, если подтверждение постановки в арбитраж еще не было выполнено;
			// возврат исходного состояния подтверждения в случае, если подтверждение постановки в арбитраж было отклонено ГИСМ;
			// Возврат исходного состояния подтверждения в случае, если отказ от подтверждения постановки в арбитраж еще не был выполнен;
			// Возврат исходного состояния подтверждения в случае, если отказ от подтверждения постановки в арбитраж был отклонен ГИСМ;
			// Возврат исходного состояния подтверждения в случае, если подтверждение снятия арбитража еще не было выполнено;
			// возврат исходного состояния подтверждения в случае, если подтверждение снятия арбитража было отклонено ГИСМ;
			// Возврат исходного состояния подтверждения в случае, если отказ от подтверждения снятия арбитража еще не был выполнен;
			// Возврат исходного состояния подтверждения в случае, если отказ от подтверждения снятия арбитража был отклонен ГИСМ;
			ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить");
			КоличествоУстановленныхСостоянийКПередаче = КоличествоУстановленныхСостоянийКПередаче + 1;
			
		ИначеЕсли ИнициацияСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче")
			  Или ИнициацияСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ")
			  Или ИнициацияСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПоставщиком") Тогда
			
			// Исходного состояния, при этой ситуации нет, т.к. можно только повторно инициировать снятие арбитража.
			
		ИначеЕсли ИнициацияПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Отказаться")
			  Или ИнициацияПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ")
			  Или ИнициацияСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Отказаться")
			  Или ИнициацияСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ") Тогда
			
			// Инициировавший постановку или снятие арбитража не может отказаться от операции.
			
		ИначеЕсли ИнициацияПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено")
			  Или ПодтверждениеПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено") Тогда
			
			// Исходное состояние уже установлено.
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из Объект.ТранспортныеУпаковки Цикл
		
		АрбитражНеУстановлен             = ТекущаяСтрока.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.ПустаяСсылка");
		ИнициацияПостановкиВАрбитраж     = ТекущаяСтрока.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.УстановленПередача");
		ИнициацияСнятияАрбитража         = ТекущаяСтрока.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.СнятПередача");
		ПодтверждениеПостановкиВАрбитраж = ТекущаяСтрока.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.УстановленПолучение");
		ПодтверждениеСнятияАрбитража     = ТекущаяСтрока.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.СнятПолучение");
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.СостояниеПодтверждения)
		 Или АрбитражНеУстановлен И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ")
		 Или АрбитражНеУстановлен И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ")
		 Или АрбитражНеУстановлен И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Отказаться")
		 Или АрбитражНеУстановлен И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ") Тогда
			
			// Передач еще не было;
			// Возврат исходного состояния подтверждения в случае, если передача товаров была отклонена ГИСМ;
			// Возврат исходного состояния подтверждения в случае, если подтверждение передачи товаров было отклонена ГИСМ.
			// Возврат исходного состояния подтверждения в случае, если отказ от передачи товаров или подтверждение приемки товаров еще не были выполнены;
			// Возврат исходного состояния подтверждения в случае, если отказ от передачи товаров или подтверждение приемки товаров был отклонен ГИСМ;
			
			Если ЭтоПрямаяСхемаАкцептования Тогда
				ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить");
			Иначе
				ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче");
			КонецЕсли;
			КоличествоУстановленныхСостоянийКПередаче = КоличествоУстановленныхСостоянийКПередаче + 1;
			
		ИначеЕсли ИнициацияПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче")
			  Или ИнициацияПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ")
			  Или ИнициацияПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПоставщиком")
			  Или ПодтверждениеПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем")
			  Или ИнициацияСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено")
			  Или ПодтверждениеСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено") Тогда
			
			// Возврат исходного состояния подтверждения в случае, если постановка в арбитраж еще не была выполнена;
			// возврат исходного состояния подтверждения в случае, если постановка в арбитраж была отклонена ГИСМ;
			// возврат исходного состояния подтверждения в случае, если постановка в арбитраж была отклонена поставщиком;
			// возврат исходного состояния подтверждения в случае, если подтверждение постановки в арбитраж было отклонено нами и мы получили подтверждение от ГИСМ;
			// возврат исходного состояния подтверждения в случае, если снятие арбитража было подтверждено;
			// возврат исходного состояния подтверждения в случае, если подтверждение снятия арбитража было подтверждено;
			ТекущаяСтрока.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.ПустаяСсылка");
			Если ЭтоПрямаяСхемаАкцептования Тогда
				ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить");
			Иначе
				ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ПринятоГИСМ");
			КонецЕсли;
			КоличествоУстановленныхСостоянийКПередаче = КоличествоУстановленныхСостоянийКПередаче + 1;
			
		ИначеЕсли ПодтверждениеПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче")
			  Или ПодтверждениеПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ")
			  Или ПодтверждениеПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Отказаться")
			  Или ПодтверждениеПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ")
			  Или ПодтверждениеСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче")
			  Или ПодтверждениеСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ")
			  Или ПодтверждениеСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Отказаться")
			  Или ПодтверждениеСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ") Тогда
			
			// Возврат исходного состояния подтверждения в случае, если подтверждение постановки в арбитраж еще не было выполнено;
			// возврат исходного состояния подтверждения в случае, если подтверждение постановки в арбитраж было отклонено ГИСМ;
			// Возврат исходного состояния подтверждения в случае, если отказ от подтверждения постановки в арбитраж еще не был выполнен;
			// Возврат исходного состояния подтверждения в случае, если отказ от подтверждения постановки в арбитраж был отклонен ГИСМ;
			// Возврат исходного состояния подтверждения в случае, если подтверждение снятия арбитража еще не было выполнено;
			// возврат исходного состояния подтверждения в случае, если подтверждение снятия арбитража было отклонено ГИСМ;
			// Возврат исходного состояния подтверждения в случае, если отказ от подтверждения снятия арбитража еще не был выполнен;
			// Возврат исходного состояния подтверждения в случае, если отказ от подтверждения снятия арбитража был отклонен ГИСМ;
			ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить");
			КоличествоУстановленныхСостоянийКПередаче = КоличествоУстановленныхСостоянийКПередаче + 1;
			
		ИначеЕсли ИнициацияСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче")
			  Или ИнициацияСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ")
			  Или ИнициацияСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПоставщиком") Тогда
			
			// Исходного состояния, при этой ситуации нет, т.к. можно только повторно инициировать снятие арбитража.
			
		ИначеЕсли ИнициацияПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Отказаться")
			  Или ИнициацияПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ")
			  Или ИнициацияСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Отказаться")
			  Или ИнициацияСнятияАрбитража И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ") Тогда
			
			// Инициировавший постановку или снятие арбитража не может отказаться от операции.
			
		ИначеЕсли ИнициацияПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено")
			  Или ПодтверждениеПостановкиВАрбитраж И ТекущаяСтрока.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено") Тогда
			
			// Исходное состояние уже установлено.
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоУстановленныхСостоянийКПередаче > 0 Тогда
		ОбновитьПредставленияСостоянияПодтвержденияУпаковок(Объект);
		ТекстОповещения = НСтр("ru = 'Отмечено к передаче %1 из %2 строк'");
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОповещения, КоличествоУстановленныхСостоянийКПередаче, КоличествоСтрок);
	Иначе
		ТекстОповещения = НСтр("ru = 'Отсутствуют неотработанные строки или строки с состоянием ""Отклонено ГИСМ""'");
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Отметка к передаче'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстОповещения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоСостояниюПодтверждения(Команда)
	
	СостояниеПодтверждения = Сред(Команда.Имя, СтрДлина("Отбор") + 1);
	ИнтеграцияМДЛПКлиент.УстановитьОтборПоСостояниюПодтверждения(ЭтотОбъект, "НомераУпаковок, ТранспортныеУпаковки", СостояниеПодтверждения, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяВыделенныеУпаковки(Команда)
	
	ОтказатьсяОтВыделенныхСтрок(Элементы.НомераУпаковок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяВыделенныеТранспортныеУпаковки(Команда)
	
	ОтказатьсяОтВыделенныхСтрок(Элементы.ТранспортныеУпаковки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПостановитьВАрбитражВыделенныеУпаковки(Команда)
	
	ПостановитьВАрбитражСтроки(Элементы.НомераУпаковок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПостановитьВАрбитражВыделенныеТранспортныеУпаковки(Команда)
	
	ПостановитьВАрбитражСтроки(Элементы.ТранспортныеУпаковки);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьАрбитражВыделенныхУпаковок(Команда)
	
	СнятьАрбитражСтроки(Элементы.НомераУпаковок);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьАрбитражВыделенныхТранспортныхУпаковок(Команда)
	
	СнятьАрбитражСтроки(Элементы.ТранспортныеУпаковки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтПостановкиСнятияАрбитражаУпаковок(Команда)
	
	ОтказатьсяОтПостановкиСнятияАрбитражаСтроки(Элементы.НомераУпаковок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтПостановкиСнятияАрбитражаТранспортныхУпаковок(Команда)
	
	ОтказатьсяОтПостановкиСнятияАрбитражаСтроки(Элементы.ТранспортныеУпаковки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ТерминалыСбораДанных") Тогда
		МодульОборудованиеТерминалыСбораДанныхКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент");
		МодульОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(
			Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
			УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьИнформациюОКиЗ(Команда)
	
	Если Объект.СхемаАкцептования = ПредопределенноеЗначение("Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок") Тогда
		ЗапроситьИнформациюОбУпаковкахСЗаписью();
	Иначе
		Если Не НеобходимоВыполнитьЗагрузкуИнформацииОбУпаковках(Объект) Тогда
			ЗапроситьИнформациюОбУпаковкахСЗаписью();
		Иначе
			ИнтеграцияМДЛПКлиент.ОбработатьНавигационнуюСсылкуСтатуса(ЭтотОбъект, "ЗапроситьИнформациюОКиЗ", Неопределено, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьИнформациюОВыделенныхПотребительскихУпаковках(Команда)
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый Структура("Поле, Значение", "Организация", Объект.Организация));
	Отбор.Добавить(Новый Структура("Поле, Значение", "МестоДеятельности", Объект.МестоДеятельности));
	
	ДоступныйТранспорт = ТранспортМДЛПВызовСервера.ДоступныеТранспортныеМодули(Отбор);
	Если ДоступныйТранспорт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = Элементы.НомераУпаковок;
	Если Элемент.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет строк для получения информации.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДанныеВыделенныхСтрок = Новый Массив;
	Для Каждого ТекущаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		ТекущиеДанные = Элемент.ДанныеСтроки(ТекущаяСтрока);
		ДанныеВыделенныхСтрок.Добавить(ТекущиеДанные);
	КонецЦикла;
	
	ЗапроситьИнформациюОПотребительскихУпаковках(ДоступныйТранспорт[0].ПараметрыПодключения, ДанныеВыделенныхСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьИнформациюОВыделенныхТранспортныхУпаковках(Команда)
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый Структура("Поле, Значение", "Организация", Объект.Организация));
	Отбор.Добавить(Новый Структура("Поле, Значение", "МестоДеятельности", Объект.МестоДеятельности));
	
	ДоступныйТранспорт = ТранспортМДЛПВызовСервера.ДоступныеТранспортныеМодули(Отбор);
	Если ДоступныйТранспорт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = Элементы.ТранспортныеУпаковки;
	Если Элемент.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет строк для получения информации.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДанныеВыделенныхСтрок = Новый Массив;
	Для Каждого ТекущаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		ТекущиеДанные = Элемент.ДанныеСтроки(ТекущаяСтрока);
		ДанныеВыделенныхСтрок.Добавить(ТекущиеДанные);
	КонецЦикла;
	
	ЗапроситьИнформациюОТранспортныхУпаковках(ДоступныйТранспорт[0].ПараметрыПодключения, ДанныеВыделенныхСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗапросИнформацииОКиЗ(Команда)
	
	ОтменитьЗапросИнформацииОбУпаковках();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИнформациюОКиЗ(Команда)
	
	Если Не Объект.СхемаАкцептования = ПредопределенноеЗначение("Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок") Тогда
		ИнтеграцияМДЛПКлиент.ОбработатьНавигационнуюСсылкуСтатуса(ЭтотОбъект, "ПолучитьКвитанциюОФиксации", Неопределено, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозобновитьПроверкуТоваров(Команда)
	
	ВозобновитьПроверкуТоваровНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьПроверкуТоваров(Команда)
	
	СброситьПроверкуТоваровНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРеестрРешенийОВводеЛПВГражданскийОборот(Команда)
	
	ИнтеграцияМДЛПКлиент.ОткрытьРеестрРешенийОВводеЛПВГражданскийОборот(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормМДЛПКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЕстьПравоИзменение = ПравоДоступа("Изменение",Объект.Ссылка.Метаданные());
	
	Типы = Объект.Ссылка.Метаданные().Реквизиты.Основание.Тип.Типы();
	Для Каждого Тип Из Типы Цикл
		МетаданныеОснования = Метаданные.НайтиПоТипу(Тип);
		Если МетаданныеОснования <> Неопределено И ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОснования) Тогда
			ЕстьПравоСозданияПоступления = ЕстьПравоСозданияПоступления Или ПравоДоступа("Добавление", МетаданныеОснования);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.Операция) И Элементы.Операция.СписокВыбора.НайтиПоЗначению(Объект.Операция) = Неопределено Тогда
		Элементы.Операция.СписокВыбора.Добавить(Объект.Операция);
		Элементы.Операция.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовПоОперации();
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.СоставТранспортныхУпаковок);
	
	ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(Объект, ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка));
	
	ОбновитьСтатусУведомления();
	ОбновитьПредставленияСостоянияПодтвержденияУпаковок(Объект);
	ОбновитьТекстПоступлениеТоваров();
	ОбновитьИнформациюОткрытияФормыСканирования();
	ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект);
	УстановитьВидимостьКомандПолученияИнформацииОбУпаковках();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект,
		Элементы.СоставТранспортныхУпаковокХарактеристика.Имя, "Объект.СоставТранспортныхУпаковок.ХарактеристикиИспользуются");
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект,
		Элементы.СоставТранспортныхУпаковокСерия.Имя, "Объект.СоставТранспортныхУпаковок.СтатусУказанияСерий", "Объект.СоставТранспортныхУпаковок.ТипНоменклатуры");
	
	ИнтеграцияМДЛП.УстановитьУсловноеОформлениеСостоянияПодтверждения(ЭтотОбъект);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НомераУпаковок.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.НомераУпаковок.ИдентификаторСтроки", Новый ПолеКомпоновкиДанных("ИдентификаторТекущейСтроки"), ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставТранспортныхУпаковокЦена.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.ТипДоговора", Перечисления.ТипыДоговоровМДЛП.ПередачаНаБезвозмезднойОснове);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
#Область СостояниеПолученияИнформации
	
	ДанныеЗапрошены = Новый СписокЗначений;
	ДанныеЗапрошены.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.КПередаче);
	ДанныеЗапрошены.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Передано);
	
	НетДанных = Новый СписокЗначений;
	НетДанных.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПустаяСсылка());
	НетДанных.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	
#Область НомераУпаковок
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НомераУпаковокСтатус.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.НомераУпаковок.СостояниеПолученияИнформации", Перечисления.СостоянияПодтвержденияМДЛП.ПустаяСсылка());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<данные не запрашивались>'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НомераУпаковокСтатус.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.НомераУпаковок.СостояниеПолученияИнформации", ДанныеЗапрошены, ВидСравненияКомпоновкиДанных.ВСписке);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<сформирован запрос>'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НомераУпаковокНомерУпаковки.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.НомераУпаковок.СостояниеПолученияИнформации", НетДанных, ВидСравненияКомпоновкиДанных.НеВСписке);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.НомераУпаковокСтатус.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.НомераУпаковок.СостояниеПолученияИнформации", Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияМДЛП);
	
#КонецОбласти
	
#Область ТранспортныеУпаковки
	
	// 
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТранспортныеУпаковкиСтатус.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.ТранспортныеУпаковки.СостояниеПолученияИнформации", Перечисления.СостоянияПодтвержденияМДЛП.ПустаяСсылка());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<данные не запрашивались>'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТранспортныеУпаковкиСтатус.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.ТранспортныеУпаковки.СостояниеПолученияИнформации", ДанныеЗапрошены, ВидСравненияКомпоновкиДанных.ВСписке);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияМДЛП);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<сформирован запрос>'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТранспортныеУпаковкиНомерУпаковки.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.ТранспортныеУпаковки.СостояниеПолученияИнформации", НетДанных, ВидСравненияКомпоновкиДанных.НеВСписке);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТранспортныеУпаковкиСтатус.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Элемент.Отбор,
		"Объект.ТранспортныеУпаковки.СостояниеПолученияИнформации", Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияМДЛП);
	
#КонецОбласти
	
#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусУведомления()
	
	ТекущийСтатус = ИнтеграцияМДЛП.ТекущийСтатусУведомления(Объект.Ссылка);
	СтатусМДЛП = ТекущийСтатус.Статус;
	СтатусПредставление = ИнтеграцияМДЛП.ПредставлениеСтатусаУведомления(ТекущийСтатус);
	РежимОтладки = ОбщегоНазначенияКлиентСервер.РежимОтладки();
	
	Если ИнтеграцияМДЛПКлиентСервер.НеВыполнялисьПроверкаИПодбор(Объект.СтатусПроверкиИПодбора, СтатусМДЛП) Тогда
		РедактированиеФормыНедоступно = Ложь;
	Иначе
		РедактированиеФормыНедоступно = Не РежимОтладки;
	КонецЕсли;
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить(Элементы.ТоварыКоличествоУпаковок.Имя);
	ИменаЭлементов.Добавить(Элементы.ТоварыЦена.Имя);
	ИменаЭлементов.Добавить(Элементы.ТоварыСумма.Имя);
	ИменаЭлементов.Добавить(Элементы.ТоварыСуммаНДС.Имя);
	ИменаЭлементов.Добавить(Элементы.НомераУпаковок.Имя);
	ИменаЭлементов.Добавить(Элементы.ТранспортныеУпаковки.Имя);
	ИменаЭлементов.Добавить(Элементы.СоставТранспортныхУпаковокЦена.Имя);
	ИменаЭлементов.Добавить(Элементы.СоставТранспортныхУпаковокСуммаНДС.Имя);
	ИменаЭлементов.Добавить(Элементы.Операция.Имя);
	ИменаЭлементов.Добавить(Элементы.ТипОперации.Имя);
	ИменаЭлементов.Добавить(Элементы.НомерДокумента.Имя);
	ИменаЭлементов.Добавить(Элементы.ДатаДокумента.Имя);
	ИменаЭлементов.Добавить(Элементы.ТипДоговора.Имя);
	ИменаЭлементов.Добавить(Элементы.ИсточникФинансирования.Имя);
	ИменаЭлементов.Добавить(Элементы.НомерКонтракта.Имя);
	ИменаЭлементов.Добавить(Элементы.НомерГосударственногоКонтракта.Имя);
	ИменаЭлементов.Добавить(Элементы.ДатаГосударственногоКонтракта.Имя);
	
	Если Объект.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок Тогда
		Если ТекущийСтатус.Статус <> Перечисления.СтатусыИнформированияМДЛП.ПринятоИзМДЛП Тогда
			ИменаЭлементов.Добавить(Элементы.Организация.Имя);
			ИменаЭлементов.Добавить(Элементы.МестоДеятельности.Имя);
			ИменаЭлементов.Добавить(Элементы.Грузоотправитель.Имя);
			ИменаЭлементов.Добавить(Элементы.МестоДеятельностиГрузоотправителя.Имя);
			ИменаЭлементов.Добавить(Элементы.ПродавецИмпортногоТовара.Имя);
		КонецЕсли;
		
		Элементы.Товары.ИзменятьСоставСтрок = Ложь;
		Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "ТолькоПросмотр", Не РежимОтладки);
		КонецЦикла;
		Элементы.ТоварыЗагрузитьДанныеИзТСД.Видимость = Ложь;
	Иначе
		ИменаЭлементов.Добавить(Элементы.Организация.Имя);
		ИменаЭлементов.Добавить(Элементы.МестоДеятельности.Имя);
		ИменаЭлементов.Добавить(Элементы.Грузоотправитель.Имя);
		ИменаЭлементов.Добавить(Элементы.МестоДеятельностиГрузоотправителя.Имя);
		ИменаЭлементов.Добавить(Элементы.ПродавецИмпортногоТовара.Имя);
		Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "ТолькоПросмотр", РедактированиеФормыНедоступно);
		КонецЦикла;
		Элементы.Товары.ИзменятьСоставСтрок = Не РедактированиеФормыНедоступно;
		Элементы.ТоварыЗагрузитьДанныеИзТСД.Видимость = Не РедактированиеФормыНедоступно;;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставленияСостоянияПодтвержденияУпаковок(Объект)
	
	Для Каждого ТекущаяСтрока Из Объект.НомераУпаковок Цикл
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Арбитраж) Тогда
			ТекущаяСтрока.ПредставлениеСостоянияПодтверждения = СтрШаблон(НСтр("ru = '%1 (%2)'"), ТекущаяСтрока.Арбитраж, ТекущаяСтрока.СостояниеПодтверждения);
		Иначе
			ТекущаяСтрока.ПредставлениеСостоянияПодтверждения = ТекущаяСтрока.СостояниеПодтверждения;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из Объект.ТранспортныеУпаковки Цикл
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Арбитраж) Тогда
			ТекущаяСтрока.ПредставлениеСостоянияПодтверждения = СтрШаблон(НСтр("ru = '%1 (%2)'"), ТекущаяСтрока.Арбитраж, ТекущаяСтрока.СостояниеПодтверждения);
		Иначе
			ТекущаяСтрока.ПредставлениеСостоянияПодтверждения = ТекущаяСтрока.СостояниеПодтверждения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстПоступлениеТоваров()
	
	Строки = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Объект.Основание) Тогда
		
		КоличествоДокументов = ИнтеграцияМДЛППереопределяемый.ПолучитьКоличествоВозможныхОснованийДляУведомления(Объект);
		
		Если ЕстьПравоСозданияПоступления Тогда
			Строки.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Оформить поступление'"),,,, "ОформитьПоступление"));
			Строки.Добавить("    ");
		КонецЕсли;
		
		Строки.Добавить(
			Новый ФорматированнаяСтрока(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Связать с поступлением (%1)'"), КоличествоДокументов),
				,
				,
				,
				"СвязатьСПоступлением"));
		
	КонецЕсли;
	
	ТекстПоступлениеТоваров = Новый ФорматированнаяСтрока(Строки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект)
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки);
		СтрокиНомеров = Объект.НомераУпаковок.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиНомеров.Количество() = СтрокаТЧ.Количество Тогда
			СтрокаТЧ.СтатусЗаполненияУпаковок = 1;
		Иначе
			СтрокаТЧ.СтатусЗаполненияУпаковок = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусЗаполненияУпаковокВСтроке(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
	СтрокиНомеров = Объект.НомераУпаковок.НайтиСтроки(ПараметрыОтбора);
	
	Если СтрокиНомеров.Количество() = ТекущиеДанные.Количество Тогда
		ТекущиеДанные.СтатусЗаполненияУпаковок = 1;
	Иначе
		ТекущиеДанные.СтатусЗаполненияУпаковок = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНомеровУпаковок(ИдентификаторСтроки)
	
	Если ИдентификаторТекущейСтроки <> ИдентификаторСтроки Тогда
		ИдентификаторТекущейСтроки = ИдентификаторСтроки;
	КонецЕсли;
	
	Если Не ПоказыватьВсеНомераУпаковок Тогда
		ИнтеграцияМДЛПКлиент.УстановитьОтборСтрок(
			Элементы.НомераУпаковок.ОтборСтрок,
			Новый Структура("ИдентификаторСтроки", ИдентификаторТекущейСтроки));
	Иначе
		ИнтеграцияМДЛПКлиент.СнятьОтборСтрок(Элементы.НомераУпаковок.ОтборСтрок, "ИдентификаторСтроки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтВыделенныхСтрок(Элемент)
	
	КоличествоСтрок = Элемент.ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет строк для отказа.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	КоличествоУстановленныхСостоянийКОтказу = 0;
	Для Каждого ТекущаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элемент.ДанныеСтроки(ТекущаяСтрока);
		
		АрбитражНеУстановлен             = ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.ПустаяСсылка");
		ИнициацияПостановкиВАрбитраж     = ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.УстановленПередача");
		ИнициацияСнятияАрбитража         = ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.СнятПередача");
		ПодтверждениеПостановкиВАрбитраж = ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.УстановленПолучение");
		ПодтверждениеСнятияАрбитража     = ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.СнятПолучение");
		
		Если АрбитражНеУстановлен И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ПринятоГИСМ")
		 Или АрбитражНеУстановлен И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить")
		 Или АрбитражНеУстановлен И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ")
		 Или АрбитражНеУстановлен И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ")
		 Или ИнициацияПостановкиВАрбитраж И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче")
		 Или ИнициацияПостановкиВАрбитраж И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ")
		 Или ИнициацияПостановкиВАрбитраж И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПоставщиком")
		 Или ПодтверждениеПостановкиВАрбитраж И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем")
		 Или ИнициацияСнятияАрбитража И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено")
		 Или ПодтверждениеСнятияАрбитража И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено") Тогда
			
			// Отзывать товары можно если
			// информация о приемке была принята ГИСМ
			// или нужно подтвердить приемку товаров
			// или подтверждение приемки было отклонено ГИСМ
			// или сам отказ от товаров был отклонен ГИСМ
			// или инициация постановки в арбитраж еще не была выполнена
			// или инициация постановки в арбитраж была отклонена ГИСМ
			// или инициация постановки в арбитраж была отклонена поставщиком
			// или подтверждение постановки в арбитраж было отклонено нами
			// или наша инициация снятия арбитража была подтверждена поставщиком
			// или подтверждение снятия арбитража было подтверждено нами.
			
			ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.ПустаяСсылка");
			ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Отказаться");
			КоличествоУстановленныхСостоянийКОтказу = КоличествоУстановленныхСостоянийКОтказу + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоУстановленныхСостоянийКОтказу > 0 Тогда
		ОбновитьПредставленияСостоянияПодтвержденияУпаковок(Объект);
		ТекстОповещения = НСтр("ru = 'Состояние ""Отказаться"" установлено для %1 из %2 строк'");
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОповещения, КоличествоУстановленныхСостоянийКОтказу, КоличествоСтрок);
	Иначе
		ТекстОповещения = НСтр("ru = 'Отсутствуют строки от которых можно отказаться'");
	КонецЕсли;
	
	ТекстЗаголовка  = НСтр("ru = 'Отказаться от приемки'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстОповещения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ПостановитьВАрбитражСтроки(Элемент)
	
	КоличествоСтрок = Элемент.ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет строк для постановки в арбитраж.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	КоличествоУстановленныхСостоянийКПостановкеВАрбитраж = 0;
	Для Каждого ТекущаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элемент.ДанныеСтроки(ТекущаяСтрока);
		
		АрбитражНеУстановлен         = ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.ПустаяСсылка");
		ИнициацияПостановкиВАрбитраж = ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.УстановленПередача");
		ИнициацияСнятияАрбитража     = ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.СнятПередача");
		ПодтверждениеСнятияАрбитража = ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.СнятПолучение");
		
		Если АрбитражНеУстановлен И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить")
		 Или АрбитражНеУстановлен И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ")
		 Или АрбитражНеУстановлен И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Отказаться")
		 Или АрбитражНеУстановлен И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ")
		 Или ИнициацияПостановкиВАрбитраж И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ")
		 Или ИнициацияПостановкиВАрбитраж И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПоставщиком")
		 Или ИнициацияСнятияАрбитража И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено")
		 Или ПодтверждениеСнятияАрбитража И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено") Тогда
			
			// Инициировать постановку в арбитраж можно если арбитраж еще не был постановлен и
			// приемка была принята ГИСМ
			// или нужно подтвердить приемку
			// или подтверждение приемки было отклонено ГИСМ
			// или отказ от приемки еще не был выполнен
			// или отказ от приемки был отклонен ГИСМ.
			
			// Инициировать постановку в арбитраж можно повторно если постановка в арбитраж была инициирована, но
			// инициация была отклонена ГИСМ
			// или инициация была отклонена поставщиком.
			// или наша инициация снятия арбитража была подтверждена покупателем
			// или подтверждение снятия арбитража было подтверждено нами.
			
			// Инициатор документооборота не должен быть также инициатором постановки в арбитраж,
			// т.к. на стороне подтверждения нельзя будет опраделить что подтверждается, приемка/отгрузка товаров или постановка в арбитраж.
			// АрбитражНеУстановлен И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ПринятоГИСМ")
			
			// Инициацию или подтверждение постановки или снятия арбитража можно только отклонить. Отзыв - не поддерживаем.
			// ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПокупателем")
			
			ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.УстановленПередача");
			ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче");
			КоличествоУстановленныхСостоянийКПостановкеВАрбитраж = КоличествоУстановленныхСостоянийКПостановкеВАрбитраж + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоУстановленныхСостоянийКПостановкеВАрбитраж > 0 Тогда
		ОбновитьПредставленияСостоянияПодтвержденияУпаковок(Объект);
		ТекстОповещения = НСтр("ru = 'Состояние ""Арбитраж"" установлено для %1 из %2 строк'");
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОповещения, КоличествоУстановленныхСостоянийКПостановкеВАрбитраж, КоличествоСтрок);
	Иначе
		ТекстОповещения = НСтр("ru = 'Отсутствуют строки которые можно постановить в арбитраж'");
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Арбитраж'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстОповещения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьАрбитражСтроки(Элемент)
	
	КоличествоСтрок = Элемент.ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет строк для снятия арбитража.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	КоличествоУстановленныхСостоянийКСнятиюАрбитража = 0;
	Для Каждого ТекущаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элемент.ДанныеСтроки(ТекущаяСтрока);
		
		ИнициацияПостановкиВАрбитраж     = ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.УстановленПередача");
		ИнициацияСнятияАрбитража         = ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.СнятПередача");
		ПодтверждениеПостановкиВАрбитраж = ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.УстановленПолучение");
		ПодтверждениеСнятияАрбитража     = ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.СнятПолучение");
		
		Если ИнициацияПостановкиВАрбитраж И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено")
		 Или ПодтверждениеПостановкиВАрбитраж И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтверждено")
		 Или ИнициацияСнятияАрбитража И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ")
		 Или ИнициацияСнятияАрбитража И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПоставщиком")
		 Или ПодтверждениеСнятияАрбитража И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем") Тогда
			
			// Инициировать снятие арбитража можно если арбитраж постановлен и подтвержден.
			// Инициировать снятие арбитража можно повторно если снятие арбитража было инициировано, но
			// инициация снятия арбитража была отклонена ГИСМ
			// или инициация снятия арбитража была отклонена поставщиком
			// или подтверждение снятия арбитража было отклонено нами.
			
			// Инициацию или подтверждение постановки или снятия арбитража можно только отклонить. Отзыв - не поддерживаем.
			// ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтозваноПокупателем")
			
			ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.СнятПередача");
			ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче");
			КоличествоУстановленныхСостоянийКСнятиюАрбитража = КоличествоУстановленныхСостоянийКСнятиюАрбитража + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоУстановленныхСостоянийКСнятиюАрбитража > 0 Тогда
		ОбновитьПредставленияСостоянияПодтвержденияУпаковок(Объект);
		ТекстОповещения = НСтр("ru = 'Состояние ""Арбитраж"" снято для %1 из %2 строк'");
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОповещения, КоличествоУстановленныхСостоянийКСнятиюАрбитража, КоличествоСтрок);
	Иначе
		ТекстОповещения = НСтр("ru = 'Отсутствуют строки которым можно снять арбитраж'");
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Арбитраж'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстОповещения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтПостановкиСнятияАрбитражаСтроки(Элемент)
	
	КоличествоСтрок = Элемент.ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет строк для отказа.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	КоличествоУстановленныхСостоянийКОтказу = 0;
	Для Каждого ТекущаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элемент.ДанныеСтроки(ТекущаяСтрока);
		
		ПодтверждениеПостановкиВАрбитраж = ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.УстановленПолучение");
		ПодтверждениеСнятияАрбитража     = ДанныеСтроки.Арбитраж = ПредопределенноеЗначение("Перечисление.СостоянияАрбитражаМДЛП.СнятПолучение");
		
		Если ПодтверждениеПостановкиВАрбитраж И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить")
		  Или ПодтверждениеПостановкиВАрбитраж И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ")
		  Или ПодтверждениеПостановкиВАрбитраж И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ")
		  Или ПодтверждениеСнятияАрбитража И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить")
		  Или ПодтверждениеСнятияАрбитража И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ")
		  Или ПодтверждениеСнятияАрбитража И ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ") Тогда
			
			// Отказаться от подтверждения постановки в арбитраж можно если
			// нужно подтвердить постановку в арбитраж
			// или подтверждение постановки в арбитраж было отклонено ГИСМ
			// или сам отказ от подтверждения постановки в арбитраж был отклонен ГИСМ.
			
			// Отозвать подтверждение снятия арбитража можно если
			// нужно подтвердить снятие арбитраж
			// или подтверждение снятия арбитража было отклонено ГИСМ.
			// или сам отказ от подтверждения снятия арбитража был отклонен ГИСМ.
			
			ДанныеСтроки.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Отказаться");
			КоличествоУстановленныхСостоянийКОтказу = КоличествоУстановленныхСостоянийКОтказу + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоУстановленныхСостоянийКОтказу > 0 Тогда
		ОбновитьПредставленияСостоянияПодтвержденияУпаковок(Объект);
		ТекстОповещения = НСтр("ru = 'Состояние ""Арбитраж (Отказаться)"" установлено для %1 из %2 строк'");
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОповещения, КоличествоУстановленныхСостоянийКОтказу, КоличествоСтрок);
	Иначе
		ТекстОповещения = НСтр("ru = 'Отсутствуют строки которые можно пометить к отказу'");
	КонецЕсли;
	
	ТекстЗаголовка  = НСтр("ru = 'Отказаться'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстОповещения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Функция СгенерироватьСерииНаСервере()
	
	Результат = ИнтеграцияМДЛП.ПустойРезультатЗаполненияСерий();
	
	Если Объект.Товары.Количество() <> 0 Тогда 
		ИнтеграцияМДЛППереопределяемый.ЗаполнитьСгенерироватьСерии(Объект, "Товары",, ПараметрыУказанияСерий, Результат);
	КонецЕсли;
	Если Объект.СоставТранспортныхУпаковок.Количество() <> 0 Тогда
		ИнтеграцияМДЛППереопределяемый.ЗаполнитьСгенерироватьСерии(Объект, "СоставТранспортныхУпаковок",, ПараметрыУказанияСерий, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СоздатьДокументПоступления()
	
	Обработчик = Новый ОписаниеОповещения("ОткрытьФормуСозданияДокументаПоступленияТоваровНаОсновании", ЭтотОбъект);
	ИнтеграцияМДЛПСлужебныйКлиент.ЗаписатьДокументВФормеПриНеобходимости(Обработчик, ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСозданияДокументаПоступленияТоваровНаОсновании(ЗаписаноУспешно, ДополнительныеПараметры) Экспорт
	
	Если Не ЗаписаноУспешно Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормМДЛПКлиентПереопределяемый.ОткрытьФормуСозданияДокументаПоступленияТоваровНаОсновании(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументПоступления()
	
	СобытияФормМДЛПКлиентПереопределяемый.ОткрытьФормуВыбораДокументаПоступлениеТоваров(
		ЭтотОбъект, Объект, Новый ОписаниеОповещения("ПослеВыбораДокументаПоступления", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДокументаПоступления(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		
		Если ИнтеграцияМДЛПВызовСервера.ЕстьРасхожденияМеждуУведомлениемИОснованием(Объект.Ссылка, ВыбранныйДокумент) Тогда
			
			ДополнительныеПараметрыВопроса = Новый Структура;
			ДополнительныеПараметрыВопроса.Вставить("ДокументПоступления", ВыбранныйДокумент);
			
			Обработчик = Новый ОписаниеОповещения("ОбработатьОтветОРасхождениях", ЭтотОбъект, ДополнительныеПараметрыВопроса);
			ТекстВопроса = НСтр("ru='В уведомлении есть товары которых нет в выбранном поступлении. Продолжить выбор?'");
			ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОбработатьВыборДокументаПоступления(ВыбранныйДокумент);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветОРасхождениях(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыборДокументаПоступления(ДополнительныеПараметры.ДокументПоступления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДокументаПоступления(ДокументПоступления)
	
	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		
		Объект.Основание = ДокументПоступления;
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ОбновитьТекстПоступлениеТоваров();
	
КонецПроцедуры

#Область ЗаполнениеОрганизацииКонтрагента

&НаСервере
Процедура ЗаполнитьОрганизациюМестоДеятельностиПоИдентификатору()
	
	Объект.Организация = Неопределено;
	Объект.МестоДеятельности = Неопределено;
	ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(
		Объект.ИдентификаторОрганизации, Объект.Организация, Объект.МестоДеятельности);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтрагентаМестоДеятельностиПоИдентификатору()
	
	Объект.Грузоотправитель = Неопределено;
	Объект.МестоДеятельностиГрузоотправителя = Неопределено;
	ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(
		Объект.ИдентификаторКонтрагента, Объект.Грузоотправитель, Объект.МестоДеятельностиГрузоотправителя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтрагентаМестоДеятельности_ПослеПолученияДанных(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьКонтрагентаМестоДеятельностиПоИдентификатору();
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаИПодбор

&НаСервере
Процедура ОбновитьИнформациюОткрытияФормыСканирования()
	
	Элементы.ГруппаСканированиеИПроверкаТоваров.Видимость = Истина;
	Если ИнтеграцияМДЛПКлиентСервер.ВыполняютсяПроверкаИПодбор(Объект.СтатусПроверкиИПодбора) Тогда
		
		Если ЕстьПравоИзменение Тогда
			ТекстНадписи = НСтр("ru = 'Продолжить проверку поступивших товаров'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Истина;
		Иначе
			ТекстНадписи = НСтр("ru = 'Промежуточные результаты проверки товаров'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияМДЛПКлиентСервер.НеВыполнялисьПроверкаИПодбор(Объект.СтатусПроверкиИПодбора, СтатусМДЛП) Тогда
		
		Если ЕстьПравоИзменение Тогда
			ТекстНадписи = НСтр("ru = 'Проверить поступившие товары'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
		Иначе
			Элементы.ГруппаСканированиеИПроверкаТоваров.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияМДЛПКлиентСервер.ЗавершеныПроверкаИПодбор(Объект.СтатусПроверкиИПодбора) Тогда
		
		ТекстНадписи = НСтр("ru = 'Результаты проверки товаров'");
		Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаСканированиеИПроверкаТоваров.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Элементы.ГруппаСканированиеИПроверкаТоваров.Видимость Тогда
		ТекстГиперссылки = "ОткрытьФормуСканированияИПроверкиУпаковок";
		
		СтрокаОткрытиеФормыСканирования = Новый ФорматированнаяСтрока(
			ТекстНадписи,
			Новый Шрифт(,,,,Истина),
			,
			,
			ТекстГиперссылки);
		
		Элементы.ДекорацияОтсканироватьПроверитьУпаковки.Заголовок = СтрокаОткрытиеФормыСканирования;
	КонецЕсли;
	
	Элементы.ВозобновитьПроверкуТоваров.Видимость = ЕстьПравоИзменение И ИнтеграцияМДЛПКлиентСервер.ВозможноВозобновитьПроверкуИПодбор(Объект.СтатусПроверкиИПодбора, СтатусМДЛП);
	Элементы.СброситьПроверкуТоваров.Видимость = ЕстьПравоИзменение И ИнтеграцияМДЛПКлиентСервер.ВозможноСброситьПроверкуИПодбор(Объект.СтатусПроверкиИПодбора, СтатусМДЛП);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСканированияИПроверкиУпаковок_ПослеЗаписи(ЗаписаноУспешно, ДополнительныеПараметры) Экспорт
	
	Если Не ЗаписаноУспешно Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканированияИПроверки = Новый Структура;
	ПараметрыСканированияИПроверки.Вставить("ПроверяемыйДокумент"                     , Объект.Ссылка);
	ПараметрыСканированияИПроверки.Вставить("ДобавлятьОтсутствующиеВДокументе"        , Объект.СхемаАкцептования = ПредопределенноеЗначение("Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок"));
	ПараметрыСканированияИПроверки.Вставить("РежимПодбораСуществующихУпаковок"        , Ложь);
	ПараметрыСканированияИПроверки.Вставить("ИдентификаторОрганизации"                , Объект.ИдентификаторОрганизации);
	ПараметрыСканированияИПроверки.Вставить("ПриЗавершенииСохранятьРезультатыПроверки", Истина);
	ПараметрыСканированияИПроверки.Вставить("РедактированиеФормыНедоступно"           , ИнтеграцияМДЛПКлиентСервер.ЗавершеныПроверкаИПодбор(Объект.СтатусПроверкиИПодбора));
	ПараметрыСканированияИПроверки.Вставить("РежимПросмотра"                          , Не ЕстьПравоИзменение Или ИнтеграцияМДЛПКлиентСервер.ЗавершеныПроверкаИПодбор(Объект.СтатусПроверкиИПодбора));
	ПараметрыСканированияИПроверки.Вставить("СниматьБлокировкуОбъектаПередЗаписьюПромежуточныхРезультатов", Истина);
	
	Если ИнтеграцияМДЛПКлиентСервер.ЗавершеныПроверкаИПодбор(Объект.СтатусПроверкиИПодбора)
	 Или ИнтеграцияМДЛПКлиентСервер.ВыполняютсяПроверкаИПодбор(Объект.СтатусПроверкиИПодбора) Тогда
		ПараметрыСканированияИПроверки.Вставить("АдресПредварительноСохраненныхРезультатовПроверки", АдресДанныхПроверки());
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("СканированиеИПроверкаУпаковокПослеЗакрытия", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПроверкаИПодборУпаковокМДЛП.Форма", ПараметрыСканированияИПроверки, ЭтотОбъект,,,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхПроверки()
	
	Прочитать();
	РедактируемыйОбъект = РеквизитФормыВЗначение("Объект");
	ДанныеХранилища = РедактируемыйОбъект.ДанныеПроверкиИПодбора.Получить();
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеХранилища, УникальныйИдентификатор);
	
КонецФункции 

&НаКлиенте
Процедура СканированиеИПроверкаУпаковокПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьОкончаниеПроверкиИПодбора(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОкончаниеПроверкиИПодбора(Знач АдресВременногоХранилища)
	
	Результат = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	АдресРезультатовПроверки = Результат.АдресДанныхРезультатаПроверки;
	
	НачатьТранзакцию();
	
	Попытка
		
		Если Объект.СтатусПроверкиИПодбора <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "СтатусПроверкиИПодбора") Тогда
			Прочитать();
		КонецЕсли;
		
		РасставитьСостоянияПодтвержденияПоРезультатамПроверки(Результат.РезультатПроверки);
		
		Объект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораМДЛП.Завершено;
		
		Если Не Записать() Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка записи документа.'");
		КонецЕсли;
		
		Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
		Статусы.Принят = СтатусМДЛП;
		ДальнейшиеДействия = Документы.УведомлениеОПриемкеМДЛП.ПолучитьДальнейшиеДействияПоДокументу(Объект.Ссылка, Объект.Операция);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Статусы.ПринятДействия, ДальнейшиеДействия);
		ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусы(Объект.Ссылка, Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято, Статусы);
		РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(Объект.Ссылка, ПараметрыОбновления);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сохранить результаты проверки в документе: %1 по причине: %2'"), 
			Объект.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ВозобновитьПроверкуТоваровНаСервере()
	
	Отказ = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		Объект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораМДЛП.Выполняется;
		
		Отказ = Не Записать();
		Если Отказ Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка записи документа.'");
		КонецЕсли;
	
		Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
		Статусы.Принят = СтатусМДЛП;
		ДальнейшиеДействия = Документы.УведомлениеОПриемкеМДЛП.ПолучитьДальнейшиеДействияПоДокументу(Объект.Ссылка, Объект.Операция);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Статусы.ПринятДействия, ДальнейшиеДействия);
		ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусы(Объект.Ссылка, Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято, Статусы);
		РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(Объект.Ссылка, ПараметрыОбновления);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось возобновитьПроверку товаров в документе: %1 по причине: %2'"), 
			Объект.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура СброситьПроверкуТоваровНаСервере()
	
	Отказ = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		Объект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораМДЛП.НеВыполнялось;
		
		Отказ = Не Записать();
		Если Отказ Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка записи документа.'");
		КонецЕсли;
		
		Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
		Статусы.Принят = СтатусМДЛП;
		ДальнейшиеДействия = Документы.УведомлениеОПриемкеМДЛП.ПолучитьДальнейшиеДействияПоДокументу(Объект.Ссылка, Объект.Операция);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Статусы.ПринятДействия, ДальнейшиеДействия);
		ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусы(Объект.Ссылка, Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято, Статусы);
		РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(Объект.Ссылка, ПараметрыОбновления);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось возобновитьПроверку товаров в документе: %1 по причине: %2'"), 
			Объект.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура РасставитьСостоянияПодтвержденияПоРезультатамПроверки(РезультатПроверки)
	
	ДоступныеСостояния = Новый Массив;
	ДоступныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПустаяСсылка());
	ДоступныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.НеТребуется);
	ДоступныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.КПередаче);
	ДоступныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить);
	ДоступныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	ДоступныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ);
	ДоступныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Отказаться);
	ДоступныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ);
	
	Если Объект.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок Тогда
		СостояниеКПередаче = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
	Иначе
		СостояниеКПередаче = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче;
	КонецЕсли;
	
	Для Каждого ПровереннаяУпаковка Из РезультатПроверки Цикл
		
		НомерУпаковки = ПровереннаяУпаковка.НомерУпаковки;
		Если ПровереннаяУпаковка.ТипУпаковки = Перечисления.ТипыУпаковокМДЛП.ГрупповаяУпаковка Тогда
			НайденныеСтроки = Объект.ТранспортныеУпаковки.НайтиСтроки(Новый Структура("НомерУпаковки", НомерУпаковки));
		Иначе
			НайденныеСтроки = Объект.НомераУпаковок.НайтиСтроки(Новый Структура("НомерКиЗ", НомерУпаковки));
		КонецЕсли;
		
		Если ПровереннаяУпаковка.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии Тогда
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если ДоступныеСостояния.Найти(НайденнаяСтрока.СостояниеПодтверждения) <> Неопределено Тогда
					НайденнаяСтрока.СостояниеПодтверждения = СостояниеКПередаче;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если Объект.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок Тогда
					Если ДоступныеСостояния.Найти(НайденнаяСтрока.СостояниеПодтверждения) <> Неопределено Тогда
						НайденнаяСтрока.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Отказаться;
					КонецЕсли;
				Иначе
					Если НайденнаяСтрока.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ Тогда
						НайденнаяСтрока.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Отказаться;
					Иначе
						НайденнаяСтрока.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.НеТребуется;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьПредставленияСостоянияПодтвержденияУпаковок(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыОтложенно()
	
	ОтключитьОбработчикОжидания("ОбработатьШтрихкодыОтложенно");
	
	// Обрабатывать штрихкоды из очереди будем по одному.
	Если ОчередьОбработкиШтрихкодов.Количество() > 0 Тогда
		ДанныеШтрихкода = ОчередьОбработкиШтрихкодов[0];
		ОчередьОбработкиШтрихкодов.Удалить(0);
		ОбработатьШтрихкоды(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеШтрихкода));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, ЗагрузкаИзТСД = Ложь)
	
	Если РедактированиеФормыНедоступно Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СхемаАкцептования <> ПредопределенноеЗначение("Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкодовПоТипам = ИнтеграцияМДЛПКлиентСервер.РазобратьШтрихкодыПоТипам(ДанныеШтрихкодов);
	
	Доступность = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПродолжитьОбработкуШтрихкодов", ЭтотОбъект, ДанныеШтрихкодовПоТипам);
	КонтрольКодовМаркировкиМДЛПКлиент.НачатьПроверкуКМНаФорме(ЭтотОбъект, Объект, ДанныеШтрихкодовПоТипам, ОповещениеОЗавершении, ЗагрузкаИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОбработкуШтрихкодов(Результат, ДанныеШтрихкодовПоТипам) Экспорт
	
	Доступность = Истина;
	
	ЗаполнитьДокументПоПолученнымШтрихкодам(ДанныеШтрихкодовПоТипам);
	
	// Когда была обработана очередная порция данных, можно обрабатывать следующую.
	ПодключитьОбработчикОжидания("ОбработатьШтрихкодыОтложенно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументПоПолученнымШтрихкодам(ДанныеШтрихкодовПоТипам)
	
	ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц = Истина;
	ПараметрыЗаполнения.ПересчитатьСумму = Истина;
	
	ДанныеДляОбработки = СобытияФормМДЛПКлиентПереопределяемый.ПодготовитьДанныеДляОбработкиШтрихкодов(
		ЭтотОбъект, ДанныеШтрихкодовПоТипам, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ИнтеграцияМДЛПСлужебныйКлиент.ЗаполнитьДокументПоШтрихкодам(ЭтотОбъект, Объект, КэшированныеЗначения, ДанныеШтрихкодовПоТипам.НомераКиЗ, ДанныеШтрихкодовПоТипам.НомераТранспортныхУпаковок);
	
	ОбработатьПолученныеШтрихкодыСервер(ДанныеДляОбработки, КэшированныеЗначения);
	
	СобытияФормМДЛПКлиентСервер.ОбновитьЗаголовокКоличествоНомеровУпаковок(ЭтотОбъект);
	
	СобытияФормМДЛПКлиентПереопределяемый.ПослеОбработкиШтрихкодов(
		ЭтотОбъект,
		ДанныеДляОбработки,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныеШтрихкодыСервер(ДанныеДляОбработки, КэшированныеЗначения)
	
	СобытияФормМДЛППереопределяемый.ОбработатьШтрихкоды(ЭтотОбъект, ДанныеДляОбработки, КэшированныеЗначения);
	
	ОбновитьСтатусыЗаполненияНомеровУпаковок(Объект);
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперации()
	
	ВсеРеквизиты = Неопределено;
	РеквизитыОперации = Неопределено;
	Документы.УведомлениеОПриемкеМДЛП.ЗаполнитьИменаРеквизитовПоТипуОперации(Объект.Операция, ВсеРеквизиты, РеквизитыОперации);
	
	Для Каждого Реквизит Из ВсеРеквизиты Цикл
		ВидимостьРеквизита = РеквизитыОперации.Найти(Реквизит) <> Неопределено;
		ИмяЭлемента = СтрЗаменить(Реквизит, ".", "");
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", ВидимостьРеквизита);
	КонецЦикла;
	
	Если Объект.Операция = Перечисления.ОперацииПриемкиМДЛП.ПередачаСобственникуВРамкахГЛО И Элементы.ТипОперации.Видимость Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.ТипОперации.Имя, "АвтоОтметкаНезаполненного", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.ТипОперации.Имя, "ОтметкаНезаполненного", Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.ТипОперации.Имя, "АвтоОтметкаНезаполненного", Неопределено);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.ТипОперации.Имя, "ОтметкаНезаполненного", Истина);
	КонецЕсли;
	
	ВерсияСхемОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ВерсияСхемОбмена");
	ВозможнаПостановкаВАрбитраж = Документы.УведомлениеОПриемкеМДЛП.ВозможнаПостановкаВАрбитраж(Объект.Операция, ВерсияСхемОбмена);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.НомераУпаковокКонтекстноеМенюПостановитьВАрбитражВыделенныеУпаковки.Имя, "Видимость", ВозможнаПостановкаВАрбитраж);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.НомераУпаковокКонтекстноеМенюСнятьАрбитражВыделенныхУпаковок.Имя, "Видимость", ВозможнаПостановкаВАрбитраж);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.ТранспортныеУпаковкиКонтекстноеМенюПостановитьВАрбитражВыделенныеТранспортныеУпаковки.Имя, "Видимость", ВозможнаПостановкаВАрбитраж);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.ТранспортныеУпаковкиКонтекстноеМенюСнятьАрбитражВыделенныхТранспортныхУпаковок.Имя, "Видимость", ВозможнаПостановкаВАрбитраж);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.НомераУпаковокКонтекстноеМенюОтказатьсяОтПостановкиСнятияАрбитражаУпаковок.Имя, "Видимость", ВозможнаПостановкаВАрбитраж);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элементы.ТранспортныеУпаковкиКонтекстноеМенюОтказатьсяОтПостановкиСнятияАрбитражаТранспортныхУпаковок.Имя, "Видимость", ВозможнаПостановкаВАрбитраж);
	
КонецПроцедуры

#Область ЗапросИнформацииОбУпаковках

&НаКлиенте
Процедура ЗапроситьИнформациюОбУпаковкахСЗаписью()
	
	Обработчик = Новый ОписаниеОповещения("ЗапроситьИнформациюОбУпаковках_ПослеЗаписи", ЭтотОбъект);
	ИнтеграцияМДЛПСлужебныйКлиент.ЗаписатьДокументВФормеПриНеобходимости(Обработчик, ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьИнформациюОбУпаковках_ПослеЗаписи(ЗаписаноУспешно, ДополнительныеПараметры) Экспорт
	
	Если Не ЗаписаноУспешно Тогда
		Возврат;
	КонецЕсли;
	
	ЗапроситьИнформациюОбУпаковках();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьИнформациюОбУпаковках()
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый Структура("Поле, Значение", "Организация", Объект.Организация));
	Отбор.Добавить(Новый Структура("Поле, Значение", "МестоДеятельности", Объект.МестоДеятельности));
	
	ДоступныйТранспорт = ТранспортМДЛПВызовСервера.ДоступныеТранспортныеМодули(Отбор);
	Если ДоступныйТранспорт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗапроситьИнформациюОбУпаковках_ПослеПопыткиАвторизации", ЭтотОбъект);
	ТранспортМДЛПАПИКлиент.ПолучитьТекущийКлючСессии(ДоступныйТранспорт[0].ПараметрыПодключения, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьИнформациюОбУпаковках_ПослеПопыткиАвторизации(РезультатАвторизации, Контекст) Экспорт
	
	Если РезультатАвторизации.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатАвторизации.ОписаниеОшибки;
	КонецЕсли;
	
	ЗапроситьИнформациюОПотребительскихУпаковках(РезультатАвторизации.ТранспортныйМодуль, Объект.НомераУпаковок);
	
	Если Объект.СхемаАкцептования = ПредопределенноеЗначение("Перечисление.СхемыАкцептованияМДЛП.ПрямойПорядок") Тогда
		// Параллельно запускать получение информации о транспортных упаковках есть смысл только при прямом порядке акцептования,
		// когда точно известно, что количество и состав транспортных упаковок не изменится.
		ЗапроситьИнформациюОТранспортныхУпаковках(РезультатАвторизации.ТранспортныйМодуль, Объект.ТранспортныеУпаковки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьЗапросИнформацииОбУпаковках()
	
	ОтменитьПолучениеИнформациюОПотребительскихУпаковках();
	ОтменитьПолучениеИнформациюОТранспортныхУпаковках();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВыполнениеПолученияИнформацииОбУпаковках(Состояние)
	
	Если Состояние = "Начало" Тогда
		
		Элементы.ОтменитьЗапросИнформацииОКиЗ.Видимость = Истина;
		
		Элементы.СтатусПредставление.Доступность = Ложь;
		Элементы.ГруппаСканированиеИПроверкаТоваров.Доступность = Ложь;
		Элементы.ТоварыСгенерироватьСерии.Доступность = Ложь;
		Элементы.Товары.Доступность = Ложь;
		Элементы.НомераУпаковок.Доступность = Ложь;
		Элементы.ТранспортныеУпаковки.Доступность = Ложь;
		Элементы.СоставТранспортныхУпаковок.Доступность = Ложь;
		
		ТекстОповещения = НСтр("ru = 'Получение информации'");
		ПояснениеОповещения = НСтр("ru = 'Получение информации об упаковках запущено'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ПояснениеОповещения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗаданияПолученияИнформацииОКИЗ)
		   И Не ЗначениеЗаполнено(ИдентификаторЗаданияПолученияИнформацииОТранспортныхУпаковках) Тогда
			
			Элементы.ОтменитьЗапросИнформацииОКиЗ.Видимость = Ложь;
			
			Элементы.СтатусПредставление.Доступность = Истина;
			Элементы.ГруппаСканированиеИПроверкаТоваров.Доступность = Истина;
			Элементы.ТоварыСгенерироватьСерии.Доступность = Истина;
			Элементы.Товары.Доступность = Истина;
			Элементы.НомераУпаковок.Доступность = Истина;
			Элементы.ТранспортныеУпаковки.Доступность = Истина;
			Элементы.СоставТранспортныхУпаковок.Доступность = Истина;
			
			ТекстОповещения = НСтр("ru = 'Получение информации'");
			ПояснениеОповещения = НСтр("ru = 'Получение информации об упаковках завершено'");
			ПоказатьОповещениеПользователя(ТекстОповещения,, ПояснениеОповещения, БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

#Область ЗапросИнформацииОПотребительскихУпаковках

&НаКлиенте
Процедура ЗапроситьИнформациюОПотребительскихУпаковках(ПараметрыПодключения, НомераУпаковок)
	
	СтандартнаяОбработка = Истина;
	СобытияФормМДЛПКлиентПереопределяемый.ЗапроситьИнформациюОПотребительскихУпаковках(ЭтотОбъект, ПараметрыПодключения, НомераУпаковок, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьПолучениеИнформациюОПотребительскихУпаковках();
	
	ОтобразитьВыполнениеПолученияИнформацииОбУпаковках("Начало");
	
	Контекст = Новый Структура;
	Контекст.Вставить("ПараметрыПодключения", ПараметрыПодключения);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьПолучениеИнформацииОПотребительскихУпаковках", ЭтотОбъект, Контекст);
	
	НомераКИЗ = Новый Массив;
	Для Каждого Строка Из Объект.Товары Цикл
		Для Каждого СтрокаУпаковки Из НомераУпаковок Цикл
			Если Строка.ИдентификаторСтроки = СтрокаУпаковки.ИдентификаторСтроки И ЗначениеЗаполнено(СтрокаУпаковки.НомерКИЗ) Тогда
				НомераКИЗ.Добавить(СтрокаУпаковки.НомерКИЗ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если НомераКИЗ.Количество() = 0 Тогда
		ТекстОповещения = НСтр("ru = 'Получение информации'");
		ПояснениеОповещения = НСтр("ru = 'Нет данных потребительских упаковок для обработки'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ПояснениеОповещения, БиблиотекаКартинок.Информация32);
		ВыполнитьОбработкуОповещения(Оповещение, ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации());
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = ТранспортМДЛПАПИКлиентСервер.ПараметрыПолученияИнформацииОПотребительскихУпаковках(Строка(УникальныйИдентификатор));
	ПараметрыМетода.НомераУпаковок = НомераКИЗ;
	ПараметрыМетода.ТипИсточникаИнформацииОбУпаковках = ПредопределенноеЗначение("Перечисление.ТипыИсточниковИнформацииОбУпаковкахМДЛП.Публичный");
	ПараметрыМетода.ПолучатьВерхнеуровневыеУпаковки = Истина;
	
	ПараметрыЗапуска = ТранспортМДЛПАПИКлиент.ПараметрыЗапускаМетодовАПИВДлительнойОперации(ЭтотОбъект);
	ПараметрыЗапуска.ОповещениеПередОжиданиемДлительнойОперации = Новый ОписаниеОповещения("ПередОжиданиемПолученияИнформацииОПотребительскихУпаковках", ЭтотОбъект);
	
	ТранспортМДЛПАПИКлиент.НачатьПолучениеИнформацииОКИЗ(ПараметрыПодключения, Оповещение, ПараметрыМетода, ПараметрыЗапуска);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеИнформацииОПотребительскихУпаковках(Результат, Контекст) Экспорт
	
	СтандартнаяОбработка = Истина;
	СобытияФормМДЛПКлиентПереопределяемый.ОбработатьПолучениеИнформацииОПотребительскихУпаковках(ЭтотОбъект, Результат, Контекст, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗаданияПолученияИнформацииОКИЗ = Неопределено;
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьВыполнениеПолученияИнформацииОбУпаковках("Конец");
	
	АдресРезультатаМетодаАПИ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "АдресРезультатаМетодаАПИ");
	Если АдресРезультатаМетодаАПИ <> Неопределено Тогда
		ОбработатьПолучениеИнформацииОПотребительскихУпаковкахНаСервере(АдресРезультатаМетодаАПИ);
		СобытияФормМДЛПКлиентСервер.ОбновитьЗаголовокКоличествоНомеровУпаковок(ЭтотОбъект);
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Если Объект.СхемаАкцептования = ПредопределенноеЗначение("Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок") Тогда
		// При обратном порядке акцептования запрос информации о транспортных упаковках
		// есть смылс запускать только после получения информации о потребительских упаковках,
		// т.к. введенные пользователем номера потребительских упаковок, могут находится, по данным ИС МДЛП, внутри транспортной упаковки.
		// Эти данные мы получаем из ответа на запрос информации о потребительских упаковках,
		// после чего можем получать информацию о тех транспортных упаковках, которые ввел пользователь
		// и тех, которые мы получили в ответе на запрос информцаии о потребительских упаковках.
		ЗапроситьИнформациюОТранспортныхУпаковках(Контекст.ПараметрыПодключения, Объект.ТранспортныеУпаковки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолучениеИнформацииОПотребительскихУпаковкахНаСервере(Знач АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Данные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Данные");
	Если ЗначениеЗаполнено(Данные) Тогда
		
		СтандартнаяОбработка = Истина;
		СобытияФормМДЛППереопределяемый.ОбработатьПолучениеИнформацииОПотребительскихУпаковках(ЭтотОбъект, Данные, СтандартнаяОбработка);
		Если Не СтандартнаяОбработка Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДанныеКИЗ(Данные);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ЗавершитьОбработкуПолученияИнформацииОбУпаковках();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКИЗ(Данные)
	
	Документ = Объект;
	ТоварыДоИзменения = Документ.Товары.Выгрузить();
	Для Каждого КлючЗначение Из Данные Цикл
		
		НайденныйСтроки = Документ.НомераУпаковок.НайтиСтроки(Новый Структура("НомерКиЗ", КлючЗначение.Ключ));
		Если НайденныйСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаУпаковки = НайденныйСтроки[0];
		
		ДанныеУпаковки = КлючЗначение.Значение;
		ЕстьИнформация = ДанныеУпаковки["error_code"] = Неопределено;
		Если ЕстьИнформация Тогда
			
			Если ДанныеУпаковки["gtin"] = Неопределено Тогда
				GTIN = Лев(14, КлючЗначение.Ключ);
				Статус = НСтр("ru = 'Не известен'");
			Иначе
				GTIN = ДанныеУпаковки["gtin"];
				Статус = ДанныеУпаковки["status"];
			КонецЕсли;
			
			СтрокаУпаковки.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
			СтрокаУпаковки.Статус = Статус;
			
			ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
			ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок = Истина;
			ПараметрыЗаполнения.ПересчитатьСумму = Истина;
			
			СтрокаТовараСтарая = Документ.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки))[0];
			Если СтрокаТовараСтарая.Количество > 1 Тогда
				СуммаНДС = Окр(СтрокаТовараСтарая.СуммаНДС / СтрокаТовараСтарая.Количество, 2);
			Иначе
				СуммаНДС = СтрокаТовараСтарая.СуммаНДС;
			КонецЕсли;
			
			НомерВерхнеуровневойТранспортнойУпаковки = ДанныеУпаковки["parent_sscc"];
			Если ЗначениеЗаполнено(НомерВерхнеуровневойТранспортнойУпаковки) Тогда
				
				// При обратном порядке акцептования может быть случай, когда потребительская упаковка, введенная розсыпью,
				// на самом деле находится в транспортной упаковке.
				// В этом случае нужно получить полный состав транспортной упаковки
				// и при необходимости соединить с составом транспортной упаковки вместо товара розсыпью (см. ЗаполнитьДанныеТранспортныхУпаковок).
				// В случае, если в ИС МДЛП выполняется авторазагрегирование или автоизъятие, тогда данный механизм может быть неактуальным.
				// Для включения/отключения механизма необходимо установить параметр ПолучатьВерхнеуровневыеУпаковки = Истина/Ложь.
				
				Отбор = Новый Структура;
				Отбор.Вставить("НомерУпаковки", НомерВерхнеуровневойТранспортнойУпаковки);
				
				НайденныеСтроки = Документ.ТранспортныеУпаковки.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрокаТранспортнойУпаковки = Документ.ТранспортныеУпаковки.Добавить();
					НоваяСтрокаТранспортнойУпаковки.НомерУпаковки          = НомерВерхнеуровневойТранспортнойУпаковки;
					НоваяСтрокаТранспортнойУпаковки.ИдентификаторСтроки    = Строка(Новый УникальныйИдентификатор);
					НоваяСтрокаТранспортнойУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче;
					НоваяСтрокаТранспортнойУпаковки.СуммаНДС               = СуммаНДС;
					НоваяСтрокаТранспортнойУпаковки.Цена                   = СтрокаТовараСтарая.Цена;
					НоваяСтрокаТранспортнойУпаковки.ДобавляемаяПерераспределением = Истина;
				КонецЕсли;
				
				СтрокаУпаковки.Статус = СтрШаблон("(%1) %2", 0, НСтр("ru = 'В транспортной упаковке'"));
				СтрокаУпаковки.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
				СтрокаУпаковки.Перераспределяемая = Истина;
				
			КонецЕсли;
			
			Отбор = Новый Структура;
			Отбор.Вставить("GTIN"      , GTIN);
			Отбор.Вставить("НомерСерии", Строка(ДанныеУпаковки["batch"]));
			Отбор.Вставить("ГоденДо"   , ТранспортМДЛПАПИКлиентСервер.СтрокаВДату(ДанныеУпаковки["expiration_date"]));
			Отбор.Вставить("Цена"      , СтрокаТовараСтарая.Цена);
			
			НайденныеСтроки = Документ.Товары.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если НайденныеСтроки.Найти(СтрокаТовараСтарая) = Неопределено Тогда
				
					СтрокаТовараСтарая.Количество = СтрокаТовараСтарая.Количество - 1;
					СтрокаТовараСтарая.СуммаНДС = СтрокаТовараСтарая.СуммаНДС - СуммаНДС;
					Если СтрокаТовараСтарая.Количество = 0 Тогда
						Документ.Товары.Удалить(СтрокаТовараСтарая);
					Иначе
						ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, СтрокаТовараСтарая, ПараметрыЗаполнения);
					КонецЕсли;
					
					НоваяСтрокаТовара = НайденныеСтроки[0];
					СтрокаУпаковки.ИдентификаторСтроки = НоваяСтрокаТовара.ИдентификаторСтроки;
					НоваяСтрокаТовара.Количество = НоваяСтрокаТовара.Количество + 1;
					НоваяСтрокаТовара.СуммаНДС = НоваяСтрокаТовара.СуммаНДС + СуммаНДС;
					ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, НоваяСтрокаТовара, ПараметрыЗаполнения);
					
				КонецЕсли;
				
			Иначе
				
				ОтборПоИдентификатору = Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки);
				НайденныеСтроки = Документ.НомераУпаковок.НайтиСтроки(ОтборПоИдентификатору);
				Если НайденныеСтроки.Количество() > 1 Тогда
					СтрокаТовараСтарая.Количество = СтрокаТовараСтарая.Количество - 1;
					СтрокаТовараСтарая.СуммаНДС = СтрокаТовараСтарая.СуммаНДС - СуммаНДС;
					ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, СтрокаТовараСтарая, ПараметрыЗаполнения);
					
					НоваяСтрокаТовара = Документ.Товары.Вставить(СтрокаТовараСтарая.НомерСтроки);
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовара, СтрокаТовараСтарая,, "Серия, Количество, КоличествоУпаковок, ИдентификаторСтроки");
					НоваяСтрокаТовара.Количество = 1;
					НоваяСтрокаТовара.СуммаНДС = СуммаНДС;
					НоваяСтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
					СтрокаУпаковки.ИдентификаторСтроки = НоваяСтрокаТовара.ИдентификаторСтроки;
					
					ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, НоваяСтрокаТовара, ПараметрыЗаполнения);
				Иначе
					НоваяСтрокаТовара = СтрокаТовараСтарая;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовара, Отбор);
				
				ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
				ПараметрыЗаполнения.ОбработатьУпаковки = Ложь;
				ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
				ПараметрыЗаполнения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
				ИнтеграцияМДЛППереопределяемый.ПриИзмененииПараметровНоменклатуры(Документ, НоваяСтрокаТовара, ПараметрыЗаполнения);
				
			КонецЕсли;
			
		Иначе
			ОписаниеОшибки = ДанныеУпаковки["error_desc"];
			Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ОписаниеОшибки = ДанныеУпаковки["error_description"];
			КонецЕсли;
			СтрокаУпаковки.Статус = СтрШаблон("(%1) %2", ДанныеУпаковки["error_code"], ОписаниеОшибки);
			СтрокаУпаковки.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
		КонецЕсли;
		
	КонецЦикла;
	
	// Для обратного порядка акцептования, после получения информации об упаковках,
	// нужно перезаполнить цены, в соответствии с данными, которые были получены из документа-основания
	// или введены вручную без данных о сериях упаковок.
	Если Документ.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок Тогда
		
		Очередь = Новый Массив;
		Для Каждого СтрокаТовара Из Документ.Товары Цикл
			Отбор = Новый Структура("Номенклатура, Серия");
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТовара);
			Очередь.Добавить(Новый Структура("СтрокаТовара, Отбор, НомерПопытки", СтрокаТовара, Отбор, 1));
		КонецЦикла;
		
		Пока Очередь.Количество() > 0 Цикл
			
			ЭлементОчереди = Очередь[0];
			
			СтрокаТовара = ЭлементОчереди.СтрокаТовара;
			Отбор        = ЭлементОчереди.Отбор;
			НомерПопытки = ЭлементОчереди.НомерПопытки;
			
			НайденныеСтроки = ТоварыДоИзменения.НайтиСтроки(Отбор);
			
			СтрокаТовара.СуммаНДС  = 0;
			СтрокаТовара.Цена      = 0;
			ОбработанноеКоличество = 0;
			
			Очередь.Удалить(0);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				// Если не удалось найти строки по отбору с учетом серии, тогда добавим в конец очереди строку с отбором по пустой серии.
				// Возможно, серия в строке не была заполнена изначально.
				Если НомерПопытки < 2 Тогда
					Отбор = Новый Структура("Номенклатура, Серия", СтрокаТовара.Номенклатура, Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип.ПривестиЗначение());
					Очередь.Добавить(Новый Структура("СтрокаТовара, Отбор, НомерПопытки", СтрокаТовара, Отбор, 2));
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				// Пропускаем строки, у которых количество не заполнено.
				Если СтрокаТовара.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Прерываем обход найденных строк, т.к. по строке товара уже все количество обработано.
				Если ОбработанноеКоличество = СтрокаТовара.Количество Тогда
					Прервать;
				КонецЕсли;
				
				// Если в очередной найденной строке цена отличается от цены, которую установили на предыдущей итерации,
				// а количество упаковок еще не полностью обработано,
				// тогда переходим к следующей строке, может у нее цена будет такая же.
				// Если ни одна строка не подойдет, тогда будет добавлена новая строка товара и выполнен новый поиск подходящих цен (см. механизм после цикла).
				Если СтрокаТовара.Цена > 0 И СтрокаТовара.Цена <> НайденнаяСтрока.Цена Тогда
					Продолжить;
				КонецЕсли;
				
				// Рассчитываем количество упаковок, для которого будет установлена новая цена.
				КоличествоЗачета = Мин(СтрокаТовара.Количество - ОбработанноеКоличество, НайденнаяСтрока.Количество);
				ОбработанноеКоличество = ОбработанноеКоличество + КоличествоЗачета;
				
				// Расчет Суммы НДС
				Если НайденнаяСтрока.Количество = КоличествоЗачета Тогда
					СуммаНДС = НайденнаяСтрока.СуммаНДС;
				ИначеЕсли НайденнаяСтрока.Количество > 1 Тогда
					СуммаНДС = Окр(КоличествоЗачета * НайденнаяСтрока.СуммаНДС / НайденнаяСтрока.Количество, 2);
				Иначе // НайденнаяСтрока.Количество = 1
					СуммаНДС = НайденнаяСтрока.СуммаНДС;
				КонецЕсли;
				
				// Устанавливаем новую сумму НДС и цену.
				СтрокаТовара.СуммаНДС = СтрокаТовара.СуммаНДС + СуммаНДС;
				СтрокаТовара.Цена     = НайденнаяСтрока.Цена;
				
				// Уменьшаем количество упаковок и сумму НДС в строке поиска, для использования в следующих итерациях.
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - КоличествоЗачета;
				НайденнаяСтрока.СуммаНДС = НайденнаяСтрока.СуммаНДС - СуммаНДС;
				
				// Если все количество упаковок было зачтено,
				// тогда текущая найденная строка считается обработанной полностью и ее можно удалять из коллекции поиска.
				Если НайденнаяСтрока.Количество = 0 Тогда
					ТоварыДоИзменения.Удалить(НайденнаяСтрока);
				КонецЕсли;
				
			КонецЦикла;
			
			ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
			ПараметрыЗаполнения.ПересчитатьСумму = Истина;
			ИнтеграцияМДЛППереопределяемый.ПриИзмененииЦены(Документ, СтрокаТовара, ПараметрыЗаполнения);
			
			Если ОбработанноеКоличество > 0 Тогда
				
				// Если не удалось накопить количество упаковок такое же как в строке товара,
				// тогда нужно поискать строки с другой ценой.
				// Для этого нужно создать новую строку товара, по которому не удалось найти цену, как в текущей строке.
				Если ОбработанноеКоличество < СтрокаТовара.Количество Тогда
					
					ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
					ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок = Истина;
					
					// Создаем строку товара, у которой цена отличается от текущей.
					НоваяСтрокаТовара = Документ.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовара, СтрокаТовара,, "Количество, КоличествоУпаковок, ИдентификаторСтроки, Цена, Сумма, СуммаНДС");
					НоваяСтрокаТовара.Количество = СтрокаТовара.Количество - ОбработанноеКоличество;
					НоваяСтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
					
					// Переносим "последние" упаковки на новую строку товара, у которой цена отличается от текущей.
					ОтборПоИдентификатору = Новый Структура("ИдентификаторСтроки", СтрокаТовара.ИдентификаторСтроки);
					НайденныеСтрокиУпаковок = Документ.НомераУпаковок.НайтиСтроки(ОтборПоИдентификатору);
					Для Индекс = ОбработанноеКоличество По НайденныеСтрокиУпаковок.Количество() - 1 Цикл
						СтрокаУпаковки = НайденныеСтрокиУпаковок[Индекс];
						СтрокаУпаковки.ИдентификаторСтроки = НоваяСтрокаТовара.ИдентификаторСтроки;
					КонецЦикла;
					
					ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, НоваяСтрокаТовара, ПараметрыЗаполнения);
					
					// Уменьшаем количество упаковок в строке товара, из которой были перенесены упаковки в строку нового товара.
					СтрокаТовара.Количество = ОбработанноеКоличество;
					
					ПараметрыЗаполнения.ПересчитатьСумму = Истина;
					ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, СтрокаТовара, ПараметрыЗаполнения);
					
					// Добавляем в начало очереди созданную строку, т.к. по ней нужно также выполнить поиск цен.
					Отбор = Новый Структура("Номенклатура, Серия");
					ЗаполнитьЗначенияСвойств(Отбор, НоваяСтрокаТовара);
					Очередь.Вставить(0, Новый Структура("СтрокаТовара, Отбор, НомерПопытки", НоваяСтрокаТовара, Отбор, 1));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередОжиданиемПолученияИнформацииОПотребительскихУпаковках(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	ИдентификаторЗаданияПолученияИнформацииОКИЗ = ДлительнаяОперация.ИдентификаторЗадания;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПолучениеИнформациюОПотребительскихУпаковках()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияПолученияИнформацииОКИЗ) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияПолученияИнформацииОКИЗ);
		ИдентификаторЗаданияПолученияИнформацииОКИЗ = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗапросИнформацииОТранспортныхУпаковках

&НаКлиенте
Процедура ЗапроситьИнформациюОТранспортныхУпаковках(ПараметрыПодключения, НомераУпаковок)
	
	СтандартнаяОбработка = Истина;
	СобытияФормМДЛПКлиентПереопределяемый.ЗапроситьИнформациюОТранспортныхУпаковках(ЭтотОбъект, ПараметрыПодключения, НомераУпаковок, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьПолучениеИнформациюОТранспортныхУпаковках();
	
	ОтобразитьВыполнениеПолученияИнформацииОбУпаковках("Начало");
	
	ЕстьДобавленныеПерераспределением = Ложь;
	Для Каждого СтрокаУпаковки Из НомераУпаковок Цикл
		Если ЗначениеЗаполнено(СтрокаУпаковки.НомерУпаковки)
		   И СтрокаУпаковки.ДобавляемаяПерераспределением Тогда
			ЕстьДобавленныеПерераспределением = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ПараметрыПодключения", ПараметрыПодключения);
	Контекст.Вставить("НомераУпаковок", НомераУпаковок);
	
	Оповещение = Новый ОписаниеОповещения("ЗапроситьИнформациюОТранспортныхУпаковках_ПослеВопросаПользователю", ЭтотОбъект, Контекст);
	Если ЕстьДобавленныеПерераспределением Тогда
		ЗаголовокВопроса = НСтр("ru = 'Обнаружены несоответствия'");
		ТекстВопроса     = НСтр("ru = 'Обнаружены введенные россыпью потребительские упаковки, которые по данным ИС МДЛП находятся в составе транспортной упаковки.'");
		ТекстВопроса     = ТекстВопроса + Символы.ПС + НСтр("ru = 'Перераспределить или показать несоответствия без перераспределения?'");
		КнопкиВопроса    = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.ОК    , НСтр("ru = 'Перераспределить'"));
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Показать несоответствия'"));
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса,, КодВозвратаДиалога.Отмена, ЗаголовокВопроса);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Отмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьИнформациюОТранспортныхУпаковках_ПослеВопросаПользователю(Ответ, Контекст) Экспорт
	
	ПараметрыПодключения = Контекст.ПараметрыПодключения;
	НомераУпаковок       = Контекст.НомераУпаковок;
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		// Если не нужно перераспределять, тогда удаляем транспортные упаковки,
		// которые были добавлены по данным запроса информации об упаковках.
		Граница = НомераУпаковок.Количество() - 1;
		Для Индекс = 0 По Граница Цикл
			СтрокаУпаковки = НомераУпаковок[Граница - Индекс];
			Если СтрокаУпаковки.ДобавляемаяПерераспределением Тогда
				НомераУпаковок.Удалить(Граница - Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Удаляем временные признаки перераспределения.
	Для Каждого СтрокаУпаковки Из Объект.НомераУпаковок Цикл
		СтрокаУпаковки.Перераспределяемая = Неопределено;
	КонецЦикла;
	Для Каждого СтрокаУпаковки Из Объект.ТранспортныеУпаковки Цикл
		СтрокаУпаковки.ДобавляемаяПерераспределением = Неопределено;
	КонецЦикла;
	
	// Продолжаем выполнение запроса информации о транспортных упаковках.
	Оповещение = Новый ОписаниеОповещения("ОбработатьПолучениеИнформацииОТранспортныхУпаковках", ЭтотОбъект);
	
	НомераТранспортныхУпаковок = Новый Массив;
	Для Каждого СтрокаУпаковки Из НомераУпаковок Цикл
		Если ЗначениеЗаполнено(СтрокаУпаковки.НомерУпаковки) Тогда
			НомераТранспортныхУпаковок.Добавить(СтрокаУпаковки.НомерУпаковки);
		КонецЕсли;
	КонецЦикла;
	
	Если НомераТранспортныхУпаковок.Количество() = 0 Тогда
		ТекстОповещения = НСтр("ru = 'Получение информации'");
		ПояснениеОповещения = НСтр("ru = 'Нет данных транспортных упаковок для обработки'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ПояснениеОповещения, БиблиотекаКартинок.Информация32);
		ВыполнитьОбработкуОповещения(Оповещение, ТранспортМДЛПКлиентСервер.РезультатВыполненияОперации());
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = ТранспортМДЛПАПИКлиентСервер.ПараметрыПолученияИнформацииОТранспортныхУпаковках(Строка(УникальныйИдентификатор));
	ПараметрыМетода.НомераУпаковок = НомераТранспортныхУпаковок;
	
	ПараметрыЗапуска = ТранспортМДЛПАПИКлиент.ПараметрыЗапускаМетодовАПИВДлительнойОперации(ЭтотОбъект);
	ПараметрыЗапуска.ОповещениеПередОжиданиемДлительнойОперации = Новый ОписаниеОповещения("ПередОжиданиемПолученияИнформацииОТранспортныхУпаковках", ЭтотОбъект);
	
	ТранспортМДЛПАПИКлиент.НачатьПолучениеИнформацииОТранспортныхУпаковках(ПараметрыПодключения, Оповещение, ПараметрыМетода, ПараметрыЗапуска);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеИнформацииОТранспортныхУпаковках(Результат, Контекст) Экспорт
	
	СтандартнаяОбработка = Истина;
	СобытияФормМДЛПКлиентПереопределяемый.ОбработатьПолучениеИнформацииОТранспортныхУпаковках(ЭтотОбъект, Результат, Контекст, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗаданияПолученияИнформацииОТранспортныхУпаковках = Неопределено;
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьВыполнениеПолученияИнформацииОбУпаковках("Конец");
	
	АдресРезультатаМетодаАПИ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "АдресРезультатаМетодаАПИ");
	Если АдресРезультатаМетодаАПИ <> Неопределено Тогда
		ОбработатьПолучениеИнформацииОТранспортныхУпаковкахНаСервере(АдресРезультатаМетодаАПИ);
		СобытияФормМДЛПКлиентСервер.ОбновитьЗаголовокКоличествоНомеровУпаковок(ЭтотОбъект);
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолучениеИнформацииОТранспортныхУпаковкахНаСервере(Знач АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Данные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Данные");
	Если ЗначениеЗаполнено(Данные) Тогда
		
		СтандартнаяОбработка = Истина;
		СобытияФормМДЛППереопределяемый.ОбработатьПолучениеИнформацииОТранспортныхУпаковках(ЭтотОбъект, Данные, СтандартнаяОбработка);
		Если Не СтандартнаяОбработка Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДанныеТранспортныхУпаковок(Данные);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ЗавершитьОбработкуПолученияИнформацииОбУпаковках();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТранспортныхУпаковок(Данные)
	
	Для Каждого КлючЗначение Из Данные Цикл
		НайденныйСтроки = Объект.ТранспортныеУпаковки.НайтиСтроки(Новый Структура("НомерУпаковки", КлючЗначение.Ключ));
		Если НайденныйСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаУпаковки = НайденныйСтроки[0];
		
		ДанныеУпаковки = КлючЗначение.Значение;
		ЕстьИнформация = ДанныеУпаковки["error_code"] = Неопределено;
		Если ЕстьИнформация Тогда
			СтрокаУпаковки.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
			
			ТекущийСостав = Объект.СоставТранспортныхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
			Для Каждого СтрокаСостава Из ТекущийСостав Цикл
				СтрокаСостава.Количество = 0;
				УпаковкиВСоставе = Объект.НомераУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтрокиУпаковки));
				Для Каждого УдаляемаяСтрока Из УпаковкиВСоставе Цикл
					Объект.НомераУпаковок.Удалить(УдаляемаяСтрока);
				КонецЦикла;
			КонецЦикла;
			ГрупповыеУпаковкиВСоставе = Объект.ИерархияГрупповыхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
			Для Каждого УдаляемаяСтрока Из ГрупповыеУпаковкиВСоставе Цикл
				Объект.ИерархияГрупповыхУпаковок.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			
			ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
			ПараметрыЗаполнения.ОбработатьУпаковки = Ложь;
			ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
			ПараметрыЗаполнения.ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(Объект, ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка));
			
			СтекУпаковок = Новый Массив;
			СтекУпаковок.Добавить(ДанныеУпаковки["down"]);
			
			Пока СтекУпаковок.Количество() > 0 Цикл
				ТекущаяУпаковка = СтекУпаковок[0];
				СтекУпаковок.Удалить(0);
				
				Состав = ТекущаяУпаковка["childs"];
				Для Каждого ЭлементСостава Из Состав Цикл
					ЭтоКИЗ = ЭлементСостава["sgtin"] <> Неопределено;
					Если ЭтоКИЗ Тогда
						
						НомерКиЗ = ЭлементСостава["sgtin"];
						Отбор = Новый Структура;
						Отбор.Вставить("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки);
						Отбор.Вставить("GTIN"      , ЭлементСостава["gtin"]);
						Отбор.Вставить("НомерСерии", Строка(ЭлементСостава["batch"]));
						
						ИзменилисьДанныеВСтроке = Ложь;
						
						НайденныеСтроки = Объект.СоставТранспортныхУпаковок.НайтиСтроки(Отбор);
						Если НайденныеСтроки.Количество() > 0 Тогда
							СтрокаТовара = НайденныеСтроки[0];
						Иначе
							СтрокаТовара = Объект.СоставТранспортныхУпаковок.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТовара, Отбор);
							ИзменилисьДанныеВСтроке = Истина;
						КонецЕсли;
						
						ОбновляемыеРеквизиты = Новый Массив;
						ОбновляемыеРеквизиты.Добавить("Цена");
						ОбновляемыеРеквизиты.Добавить("СуммаНДС");
						Для Каждого ОбновляемыйРеквизит Из ОбновляемыеРеквизиты Цикл
							Если Не ЗначениеЗаполнено(СтрокаТовара[ОбновляемыйРеквизит]) И СтрокаТовара[ОбновляемыйРеквизит] <> СтрокаУпаковки[ОбновляемыйРеквизит] Тогда
								СтрокаТовара[ОбновляемыйРеквизит] = СтрокаУпаковки[ОбновляемыйРеквизит];
								ИзменилисьДанныеВСтроке = Истина;
							КонецЕсли;
						КонецЦикла;
						
						Если ПустаяСтрока(СтрокаТовара.ИдентификаторСтрокиУпаковки) Тогда
							СтрокаТовара.ИдентификаторСтрокиУпаковки = Строка(Новый УникальныйИдентификатор);
						КонецЕсли;
						Если Не ЗначениеЗаполнено(СтрокаТовара.ГоденДо) Тогда
							СтрокаТовара.ГоденДо = ТранспортМДЛПАПИКлиентСервер.СтрокаВДату(ЭлементСостава["expiration_date"]);
							ИзменилисьДанныеВСтроке = Истина;
						КонецЕсли;
						
						СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
						
						Если ИзменилисьДанныеВСтроке Тогда
							ИнтеграцияМДЛППереопределяемый.ПриИзмененииПараметровНоменклатуры(Объект, СтрокаТовара, ПараметрыЗаполнения);
						КонецЕсли;
						
						НайденныйСтрокиУпаковок = Объект.НомераУпаковок.НайтиСтроки(Новый Структура("НомерКиЗ", НомерКиЗ));
						Если НайденныйСтрокиУпаковок.Количество() > 0 Тогда
							
							НоваяСтрока = НайденныйСтрокиУпаковок[0];
							
							// Перемещение потребительской упаковки в состав транспортной упаковки
							// средством смены идентификаторов строк и пересчетом количественных и суммовых показателей.
							ПараметрыЗаполненияСтаройСтрокиТовара = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
							ПараметрыЗаполненияСтаройСтрокиТовара.ПересчитатьКоличествоУпаковок = Истина;
							ПараметрыЗаполненияСтаройСтрокиТовара.ПересчитатьСумму = Истина;
							
							СтрокиТовараСтарые = Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", НоваяСтрока.ИдентификаторСтроки));
							Если ЗначениеЗаполнено(СтрокиТовараСтарые) Тогда
								
								СтрокаТовараСтарая = СтрокиТовараСтарые[0];
								
								Если СтрокаТовараСтарая.Количество > 1 Тогда
									СуммаНДС = Окр(СтрокаТовараСтарая.СуммаНДС / СтрокаТовараСтарая.Количество, 2);
								Иначе
									СуммаНДС = СтрокаТовараСтарая.СуммаНДС;
								КонецЕсли;
								
								СтрокаТовараСтарая.Количество = СтрокаТовараСтарая.Количество - 1;
								СтрокаТовараСтарая.СуммаНДС = СтрокаТовараСтарая.СуммаНДС - СуммаНДС;
								Если СтрокаТовараСтарая.Количество = 0 Тогда
									Объект.Товары.Удалить(СтрокаТовараСтарая);
								Иначе
									ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Объект, СтрокаТовараСтарая, ПараметрыЗаполненияСтаройСтрокиТовара);
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе
							НоваяСтрока = Объект.НомераУпаковок.Добавить();
						КонецЕсли;
						
						НоваяСтрока.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтрокиУпаковки;
						НоваяСтрока.НомерКИЗ = НомерКиЗ;
						НоваяСтрока.Статус    = ЭлементСостава["status"];
						НоваяСтрока.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
						НоваяСтрока.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.НеТребуется;
						СтрокаУпаковки.Статус = ЭлементСостава["status"];
						
					Иначе
						НоваяСтрока = Объект.ИерархияГрупповыхУпаковок.Добавить();
						НоваяСтрока.НомерУпаковки = ЭлементСостава["sscc"];
						НоваяСтрока.ИдентификаторСтроки = СтрокаУпаковки.ИдентификаторСтроки;
						СтекУпаковок.Добавить(ЭлементСостава);
					КонецЕсли;
					НоваяСтрока.НомерРодительскойУпаковки = ТекущаяУпаковка["sscc"];
				КонецЦикла;
				
			КонецЦикла;
			
			ТекущийСостав = Объект.СоставТранспортныхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
			Для Каждого СтрокаСостава Из ТекущийСостав Цикл
				СтрокаСостава.Сумма = СтрокаСостава.Цена * СтрокаСостава.Количество;
			КонецЦикла;
		Иначе
			ОписаниеОшибки = ДанныеУпаковки["error_desc"];
			Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ОписаниеОшибки = ДанныеУпаковки["error_description"];
			КонецЕсли;
			СтрокаУпаковки.Статус = СтрШаблон("(%1) %2", ДанныеУпаковки["error_code"], ОписаниеОшибки);
			СтрокаУпаковки.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПредставленияСостоянияПодтвержденияУпаковок(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередОжиданиемПолученияИнформацииОТранспортныхУпаковках(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	ИдентификаторЗаданияПолученияИнформацииОТранспортныхУпаковках = ДлительнаяОперация.ИдентификаторЗадания;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПолучениеИнформациюОТранспортныхУпаковках()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияПолученияИнформацииОТранспортныхУпаковках) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияПолученияИнформацииОТранспортныхУпаковках);
		ИдентификаторЗаданияПолученияИнформацииОТранспортныхУпаковках = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗавершитьОбработкуПолученияИнформацииОбУпаковках()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияПолученияИнформацииОКИЗ)
	 Или ЗначениеЗаполнено(ИдентификаторЗаданияПолученияИнформацииОТранспортныхУпаковках) Тогда
		// Получение информации об упаковках еще не завершилось.
		Возврат;
	КонецЕсли;
	
	СтатусПредставление = ИнтеграцияМДЛП.ОбновитьСтатусУведомленияПослеЗапросаИнформацииОбУпаковках(Объект.Ссылка, Объект.СтатусПроверкиИПодбора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандПолученияИнформацииОбУпаковках()
	
	Если Объект.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок Тогда
		Элементы.ЗагрузитьИнформациюОКиЗ.Видимость  = Ложь;
		Элементы.ДекорацияСледующееДействие.Видимость = Ложь;
	Иначе
		
		НеобходимоВыполнитьЗагрузкуИнформацииОбУпаковках = НеобходимоВыполнитьЗагрузкуИнформацииОбУпаковках(Объект);
		
		Элементы.ЗагрузитьИнформациюОКиЗ.Видимость = НеобходимоВыполнитьЗагрузкуИнформацииОбУпаковках;
		Элементы.ДекорацияСледующееДействие.Видимость = НеобходимоВыполнитьЗагрузкуИнформацииОбУпаковках;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НеобходимоВыполнитьЗагрузкуИнформацииОбУпаковках(Объект)
	
	Состояния = Новый Массив;
	Состояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.КПередаче"));
	Состояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияПодтвержденияМДЛП.Передано"));
	
	НеобходимоВыполнитьЗагрузкуИнформацииОбУпаковках = Ложь;
	Для Каждого Строка Из Объект.НомераУпаковок Цикл
		Если Состояния.Найти(Строка.СостояниеПолученияИнформации) <> Неопределено Тогда
			НеобходимоВыполнитьЗагрузкуИнформацииОбУпаковках = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не НеобходимоВыполнитьЗагрузкуИнформацииОбУпаковках Тогда
		Для Каждого Строка Из Объект.ТранспортныеУпаковки Цикл
			Если Состояния.Найти(Строка.СостояниеПолученияИнформации) <> Неопределено Тогда
				НеобходимоВыполнитьЗагрузкуИнформацииОбУпаковках = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НеобходимоВыполнитьЗагрузкуИнформацииОбУпаковках;
	
КонецФункции

#КонецОбласти // ЗапросИнформацииОбУпаковках

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
