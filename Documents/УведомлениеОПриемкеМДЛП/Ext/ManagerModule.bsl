
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПВызовСервера.ПриПолученииФормыДокумента(
		ПустаяСсылка(), ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбмене

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросСоставаУпаковки
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИерархииВложенностиУпаковок Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросСоставаУпаковки
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИерархииВложенностиУпаковок Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ИнформацияОКиЗ
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.Получение_КвитанцияОФиксации И ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.Получение_СоставУпаковки
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.Получение_КвитанцияОФиксации И ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросСоставаУпаковки
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ИерархияВложенностиУпаковок
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.Получение_КвитанцияОФиксации И ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИерархииВложенностиУпаковок Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДальнейшиеДействия = ПолучитьДальнейшиеДействияПоДокументу(ДокументСсылка, Операция);
	
	Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
	
	Если ДальнейшиеДействия.Количество() = 0 Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято;
		Статусы.Принят  = Перечисления.СтатусыИнформированияМДЛП.Закрыто;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Статусы.ПринятДействия  , ДальнейшиеДействия);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Статусы.ОтклоненДействия, ДальнейшиеДействия);
		
		Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_КвитанцияОФиксации Тогда
			
			СтатусОбработки = ДополнительныеПараметры.СтатусОбработки;
			
			Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.Принято;
			
			Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.ПринятоЧастично Тогда
				Статусы.Отклонен = Перечисления.СтатусыИнформированияМДЛП.ЧастичноПринято;
			Иначе
				Статусы.Отклонен = Перечисления.СтатусыИнформированияМДЛП.Отклонено;
			КонецЕсли;
			
		Иначе // Входящее уведомление
			
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято;
			Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.ПринятоИзМДЛП;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОбновления.Вставить("Комментарий", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Комментарий"));
	НовыйСтатус = РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления);
	
	Возврат НовыйСтатус;
	
КонецФункции

Функция ПолучитьДальнейшиеДействияПоДокументу(ДокументСсылка, Операция) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка  КАК Ссылка,
	|	Ссылка.СхемаАкцептования       КАК СхемаАкцептования,
	|	Ссылка.СтатусПроверкиИПодбора  КАК СтатусПроверкиИПодбора,
	
	|	МИНИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&КонечныеСостояния)
	|			И НомераУпаковок.Арбитраж В (&АрбитражНеУстановлен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК ВзаимодействиеЗавершено,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноПередатьДанные) И НомераУпаковок.Арбитраж В (&АрбитражНеУстановлен) И Ссылка.СхемаАкцептования = &СхемаАкцептования_ОбратныйПорядок
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&МожноПодтвердитьПолучение) И НомераУпаковок.Арбитраж В (&АрбитражНеУстановлен) И Ссылка.СхемаАкцептования = &СхемаАкцептования_ПрямойПорядок
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияОтклоненнойИнициацииАрбитража) И НомераУпаковок.Арбитраж В (&ИнициацияПостановкиВАрбитраж) И Ссылка.СхемаАкцептования = &СхемаАкцептования_ПрямойПорядок
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияПодтвержденногоАрбитража) И НомераУпаковок.Арбитраж В (&ИнициацияСнятияАрбитража, &ПодтверждениеСнятияАрбитража) И Ссылка.СхемаАкцептования = &СхемаАкцептования_ПрямойПорядок
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноПередатьДанныеИлиПодтвердитьПолучение,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноОприходовать) И НомераУпаковок.Арбитраж В (&АрбитражНеУстановлен)
	|			И Ссылка.Операция <> ЗНАЧЕНИЕ(Перечисление.ОперацииПриемкиМДЛП.ИмпортЕАЭС)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноОприходовать,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&ОжиданиеПодтверждения) И Ссылка.СхемаАкцептования = &СхемаАкцептования_ОбратныйПорядок
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&ОжиданиеПодтвержденияАрбитража) И НомераУпаковок.Арбитраж В (&ИнициацияПостановкиВАрбитраж, &ИнициацияСнятияАрбитража)
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияПодтвержденногоАрбитража) И НомераУпаковок.Арбитраж В (&ИнициацияСнятияАрбитража, &ПодтверждениеСнятияАрбитража) И Ссылка.СхемаАкцептования = &СхемаАкцептования_ОбратныйПорядок
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК ОжиданиеПодтверждения,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&ОжиданиеОбмена)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК ОжиданиеОбмена,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноПолучитьКвитанциюОФиксации)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноПолучитьКвитанциюОФиксации,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноОтказатьсяОтТоваров) И НомераУпаковок.Арбитраж В (&АрбитражНеУстановлен)
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияОтклоненнойИнициацииАрбитража) И НомераУпаковок.Арбитраж В (&ИнициацияПостановкиВАрбитраж)
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияОтклоненногоПодтвержденияАрбитража) И НомераУпаковок.Арбитраж В (&ПодтверждениеПостановкиВАрбитраж)
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияПодтвержденногоАрбитража) И НомераУпаковок.Арбитраж В (&ИнициацияСнятияАрбитража, &ПодтверждениеСнятияАрбитража)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноОтказатьсяОтТоваров,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ &ВозможнаПостановкаВАрбитраж
	|			ТОГДА ЛОЖЬ
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноПостановитьВАрбитраж) И НомераУпаковок.Арбитраж В (&АрбитражНеУстановлен) И Ссылка.СхемаАкцептования = &СхемаАкцептования_ПрямойПорядок
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияОтклоненнойИнициацииАрбитража) И НомераУпаковок.Арбитраж В (&ИнициацияПостановкиВАрбитраж, &ИнициацияСнятияАрбитража)
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияОтклоненногоПодтвержденияАрбитража) И НомераУпаковок.Арбитраж В (&ИнициацияСнятияАрбитража, &ПодтверждениеСнятияАрбитража)
	|			ИЛИ НомераУпаковок.СостояниеПодтверждения В (&СостоянияПодтвержденногоАрбитража) И НомераУпаковок.Арбитраж <> &АрбитражНеУстановлен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноПостановитьСнятьАрбитраж,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ &ВозможнаПостановкаВАрбитраж
	|			ТОГДА ЛОЖЬ
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража) И НомераУпаковок.Арбитраж В (&ПодтверждениеПостановкиВАрбитраж, &ПодтверждениеСнятияАрбитража)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража,
	
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПодтверждения В (&МожноЗакрыть) И НомераУпаковок.Арбитраж В (&АрбитражНеУстановлен) И Ссылка.СхемаАкцептования = &СхемаАкцептования_ОбратныйПорядок
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК МожноЗакрыть,
	
	|	МИНИМУМ(ВЫБОР
	|		КОГДА НомераУпаковок.СостояниеПолученияИнформации = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)            КАК НужноЗапроситьИнформациюОбУпаковках
	
	|ИЗ
	|	(ВЫБРАТЬ
	|		НомераУпаковок.Ссылка                  КАК Ссылка,
	|		НомераУпаковок.Арбитраж                КАК Арбитраж,
	|		НомераУпаковок.СостояниеПодтверждения  КАК СостояниеПодтверждения,
	|		НомераУпаковок.СостояниеПолученияИнформации  КАК СостояниеПолученияИнформации
	|	ИЗ
	|		Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ГДЕ
	|		НомераУпаковок.Ссылка = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НомераУпаковок.Ссылка                  КАК Ссылка,
	|		НомераУпаковок.Арбитраж                КАК Арбитраж,
	|		НомераУпаковок.СостояниеПодтверждения  КАК СостояниеПодтверждения,
	|		НомераУпаковок.СостояниеПолученияИнформации  КАК СостояниеПолученияИнформации
	|	ИЗ
	|		Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|	ГДЕ
	|		НомераУпаковок.Ссылка = &Ссылка
	|	) КАК НомераУпаковок
	|СГРУППИРОВАТЬ ПО
	|	Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.УстановитьПараметр("СхемаАкцептования_ПрямойПорядок", Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок);
	Запрос.УстановитьПараметр("СхемаАкцептования_ОбратныйПорядок", Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок);
	
	Запрос.УстановитьПараметр("АрбитражНеУстановлен"            , Перечисления.СостоянияАрбитражаМДЛП.ПустаяСсылка());
	Запрос.УстановитьПараметр("ИнициацияПостановкиВАрбитраж"    , Перечисления.СостоянияАрбитражаМДЛП.УстановленПередача);
	Запрос.УстановитьПараметр("ИнициацияСнятияАрбитража"        , Перечисления.СостоянияАрбитражаМДЛП.СнятПередача);
	Запрос.УстановитьПараметр("ПодтверждениеПостановкиВАрбитраж", Перечисления.СостоянияАрбитражаМДЛП.УстановленПолучение);
	Запрос.УстановитьПараметр("ПодтверждениеСнятияАрбитража"    , Перечисления.СостоянияАрбитражаМДЛП.СнятПолучение);
	
	
	КонечныеСостояния = Новый Массив;
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем);
	Запрос.УстановитьПараметр("КонечныеСостояния", КонечныеСостояния);
	
	
	СостоянияОтклоненнойИнициацииАрбитража = Новый Массив;
	СостоянияОтклоненнойИнициацииАрбитража.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	СостоянияОтклоненнойИнициацииАрбитража.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПоставщиком);
	Запрос.УстановитьПараметр("СостоянияОтклоненнойИнициацииАрбитража", СостоянияОтклоненнойИнициацииАрбитража);
	
	СостоянияОтклоненногоПодтвержденияАрбитража = Новый Массив;
	СостоянияОтклоненногоПодтвержденияАрбитража.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем);
	Запрос.УстановитьПараметр("СостоянияОтклоненногоПодтвержденияАрбитража", СостоянияОтклоненногоПодтвержденияАрбитража);
	
	СостоянияПодтвержденногоАрбитража = Новый Массив;
	СостоянияПодтвержденногоАрбитража.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено);
	Запрос.УстановитьПараметр("СостоянияПодтвержденногоАрбитража", СостоянияПодтвержденногоАрбитража);
	
	
	МожноПередатьДанные = Новый Массив;
	МожноПередатьДанные.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.КПередаче);
	МожноПередатьДанные.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПустаяСсылка());
	МожноПередатьДанные.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	Запрос.УстановитьПараметр("МожноПередатьДанные", МожноПередатьДанные);
	
	МожноПодтвердитьПолучение = Новый Массив;
	МожноПодтвердитьПолучение.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить);
	МожноПодтвердитьПолучение.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ);
	МожноПодтвердитьПолучение.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ);
	Запрос.УстановитьПараметр("МожноПодтвердитьПолучение", МожноПодтвердитьПолучение);
	
	
	МожноОприходовать = Новый Массив;
	МожноОприходовать.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	МожноОприходовать.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ);
	Запрос.УстановитьПараметр("МожноОприходовать", МожноОприходовать);
	
	
	ОжиданиеОбмена = Новый Массив;
	ОжиданиеОбмена.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодготовленоКПередаче);
	ОжиданиеОбмена.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Передано);
	ОжиданиеОбмена.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьПодготовленоКПередаче);
	ОжиданиеОбмена.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьПередано);
	ОжиданиеОбмена.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяПодготовленоКПередаче);
	ОжиданиеОбмена.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяПередано);
	Запрос.УстановитьПараметр("ОжиданиеОбмена", ОжиданиеОбмена);
	
	
	МожноПолучитьКвитанциюОФиксации = Новый Массив;
	МожноПолучитьКвитанциюОФиксации.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Передано);
	МожноПолучитьКвитанциюОФиксации.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьПередано);
	МожноПолучитьКвитанциюОФиксации.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяПередано);
	Запрос.УстановитьПараметр("МожноПолучитьКвитанциюОФиксации", МожноПолучитьКвитанциюОФиксации);
	
	
	ОжиданиеПодтверждения = Новый Массив;
	ОжиданиеПодтверждения.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ);
	ОжиданиеПодтверждения.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ);
	Запрос.УстановитьПараметр("ОжиданиеПодтверждения", ОжиданиеПодтверждения);
	
	ОжиданиеПодтвержденияАрбитража = Новый Массив;
	ОжиданиеПодтвержденияАрбитража.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ);
	Запрос.УстановитьПараметр("ОжиданиеПодтвержденияАрбитража", ОжиданиеПодтвержденияАрбитража);
	
	
	МожноОтказатьсяОтТоваров = Новый Массив;
	МожноОтказатьсяОтТоваров.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ);
	МожноОтказатьсяОтТоваров.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить);
	МожноОтказатьсяОтТоваров.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ);
	МожноОтказатьсяОтТоваров.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Отказаться);
	МожноОтказатьсяОтТоваров.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ);
	Запрос.УстановитьПараметр("МожноОтказатьсяОтТоваров", МожноОтказатьсяОтТоваров);
	
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, Новый Структура("Операция, ВерсияСхемОбмена", "Операция", "Организация.ВерсияСхемОбмена"));
	ВозможнаПостановкаВАрбитраж = ВозможнаПостановкаВАрбитраж(ДанныеДокумента.Операция, ДанныеДокумента.ВерсияСхемОбмена);
	Запрос.УстановитьПараметр("ВозможнаПостановкаВАрбитраж", ВозможнаПостановкаВАрбитраж);
	
	МожноПостановитьВАрбитраж = Новый Массив;
	МожноПостановитьВАрбитраж.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить);
	МожноПостановитьВАрбитраж.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ);
	МожноПостановитьВАрбитраж.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ);
	// Инициатор документооборота не должен быть также инициатором постановки в арбитраж,
	// т.к. на стороне подтверждения нельзя будет опраделить что подтверждается, приемка/отгрузка товаров или постановка в арбитраж.
	//МожноПостановитьВАрбитраж.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ);
	Запрос.УстановитьПараметр("МожноПостановитьВАрбитраж", МожноПостановитьВАрбитраж);
	
	МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража = Новый Массив;
	МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить);
	МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ);
	МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ);
	Запрос.УстановитьПараметр("МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража", МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража);
	
	
	МожноЗакрыть = Новый Массив;
	МожноЗакрыть.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ);
	Запрос.УстановитьПараметр("МожноЗакрыть", МожноЗакрыть);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДальнейшиеДействия = Новый Массив;
	Если Выборка.ВзаимодействиеЗавершено Тогда
		
	ИначеЕсли Выборка.ОжиданиеОбмена Тогда
		
		Если Выборка.МожноПолучитьКвитанциюОФиксации Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации);
		КонецЕсли;
		
		ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
		
	Иначе
		
		Если Выборка.МожноПередатьДанныеИлиПодтвердитьПолучение Тогда
			Если ИнтеграцияМДЛПКлиентСервер.ЗавершеныПроверкаИПодбор(Выборка.СтатусПроверкиИПодбора) Тогда
				Если Выборка.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок Тогда
					ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПодтвердитеПолучение);
				Иначе
					ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
				КонецЕсли;
			Иначе
				Если Выборка.НужноЗапроситьИнформациюОбУпаковках
					И ИнтеграцияМДЛП.ИспользоватьДействиеЗапросаИнформацииОбУпаковках(ПустаяСсылка()) Тогда
					ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗапроситеИнформациюОбУпаковках);
				Иначе
					ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПроверку);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.МожноОприходовать Тогда
			Если ИнтеграцияМДЛПКлиентСервер.ЗавершеныПроверкаИПодбор(Выборка.СтатусПроверкиИПодбора) Тогда
				ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОприходуйтеБезПодтверждения);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ОжиданиеПодтверждения Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолученияПодтверждения);
			Если Выборка.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок
			   И ДальнейшиеДействия.Найти(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОприходуйтеБезПодтверждения) = Неопределено Тогда
				ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОприходуйтеБезПодтверждения);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.МожноПостановитьСнятьАрбитраж Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПостановкуВАрбитражСнятиеАрбитража);
		ИначеЕсли Выборка.МожноПодтвердитьИлиОтказатьсяОтПостановкиСнятияАрбитража Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПодтвердитеПостановкуВАрбитражСнятиеАрбитража);
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОткажитесьОтПостановкиСнятияАрбитража);
		КонецЕсли;
		
		Если Выборка.МожноОтказатьсяОтТоваров Тогда
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОткажитесьОтПриемкиТовара);
		КонецЕсли;
		
		Если Выборка.МожноЗакрыть Тогда
			МожноЗакрыть = Истина;
			Для Каждого ДальнейшееДействие Из ДальнейшиеДействия Цикл
				Если ДальнейшееДействие <> Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные
				   И ДальнейшееДействие <> Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОприходуйтеБезПодтверждения Тогда
					МожноЗакрыть = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если МожноЗакрыть Тогда
				ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.Закройте);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДальнейшиеДействия;
	
КонецФункции

Процедура ОбновитьСостояниеПодтверждения(ДокументОбъект, Операция, Сообщение, СтатусОбработки, ОтклоненныеНомера = Неопределено) Экспорт
	
	НовоеСостояние = Неопределено;
	СхемаАкцептования = ДокументОбъект.СхемаАкцептования;
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПриемкаЛПНаСклад
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПриемкаЛПАгентомВРамкахАгентскогоДоговора
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПриемкаЛПНаСкладРанееНеЗарегистрированный
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВвозЛекарственныхПрепаратовВРФ
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВвозЛекарственныхПрепаратовВРФизЕСЭС
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПостановкаСнятиеАрбитража
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_Оприходование
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОприходованиеИмпорт Тогда
		
		ИсходноеСообщение = Сообщение;
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.КПередаче Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПодготовленоКПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Ошибка Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Передано Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Передано;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
		Иначе
			Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПриемкаЛПНаСкладРанееНеЗарегистрированный
			 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_Оприходование
			 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОприходованиеИмпорт Тогда
				НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
			Иначе
				НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПодтверждениеСведенийОПриемке Тогда
		
		ИсходноеСообщение = Сообщение;
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.КПередаче Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьПодготовленоКПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Ошибка Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Передано Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьПередано;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ;
		Иначе
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтказОтПриемкиТовара Тогда
		
		ИсходноеСообщение = Сообщение;
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.КПередаче Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяПодготовленоКПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Ошибка Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Отказаться;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Передано Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяПередано;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ;
		Иначе
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем;
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ
			Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросСоставаУпаковки
			Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИерархииВложенностиУпаковок Тогда
		
		ИсходноеСообщение = Сообщение;
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.КПередаче Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.КПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Передано Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.Передано;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Отклонено
			  Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Ошибка Тогда
			НовоеСостояние = Перечисления.СостоянияПодтвержденияМДЛП.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовоеСостояние = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = ИнтеграцияМДЛПВызовСервера.ТекстСообщенияИзПротокола(ИсходноеСообщение);
	ОбъектXDTO = ИнтеграцияМДЛП.ОбъектXDTOПоТекстуСообщенияXML(ТекстСообщения, "documents", ИнтеграцияМДЛП.ПространствоИмен());
	
	КонечныеСостояния = Новый Массив;
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком);
	
	СостояниеОтклонено = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ;
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПриемкаЛПНаСклад Тогда
		ДанныеДокумента = ОбъектXDTO["receive_order"];
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПриемкаЛПАгентомВРамкахАгентскогоДоговора Тогда
		ДанныеДокумента = ОбъектXDTO["agent_acceptance"];
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПриемкаЛПНаСкладРанееНеЗарегистрированный Тогда
		ДанныеДокумента = ОбъектXDTO["receive_unregistered_order"];
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВвозЛекарственныхПрепаратовВРФизЕСЭС Тогда
		ДанныеДокумента = ОбъектXDTO["eeu_import"];
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВвозЛекарственныхПрепаратовВРФ Тогда
		ДанныеДокумента = ОбъектXDTO["foreign_import"];
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_Оприходование Тогда
		ДанныеДокумента = ОбъектXDTO["posting"];
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОприходованиеИмпорт Тогда
		ДанныеДокумента = ОбъектXDTO["posting_import"];
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПодтверждениеСведенийОПриемке Тогда
		ДанныеДокумента = ОбъектXDTO["accept"];
		СостояниеОтклонено = Перечисления.СостоянияПодтвержденияМДЛП.ПодтвердитьОтклоненоГИСМ;
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтказОтПриемкиТовара Тогда
		ДанныеДокумента = ОбъектXDTO["refusal_receiver"];
		СостояниеОтклонено = Перечисления.СостоянияПодтвержденияМДЛП.ОтказатьсяОтклоненоГИСМ;
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ Тогда
		ДанныеДокумента = ОбъектXDTO["query_kiz_info"];
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросСоставаУпаковки Тогда
		ДанныеДокумента = ОбъектXDTO["query_kiz_info"];
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИерархииВложенностиУпаковок Тогда
		ДанныеДокумента = ОбъектXDTO["query_hierarchy_info"];
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПостановкаСнятиеАрбитража Тогда
		ДанныеДокумента = ОбъектXDTO["arbitration"];
	КонецЕсли;
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПриемкаЛПНаСклад
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВвозЛекарственныхПрепаратовВРФизЕСЭС
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_Оприходование
	 Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОприходованиеИмпорт Тогда
		
		СписокТоваров = ДанныеДокумента.order_details.union;
		Для Каждого Данные Из СписокТоваров Цикл
			Если ЗначениеЗаполнено(Данные.sgtin) Тогда
				НомерУпаковки = Данные.sgtin;
				Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
			Иначе
				НомерУпаковки = Данные.sscc_detail.sscc;
				Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
			КонецЕсли;
			
			Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
				Строка.СостояниеПодтверждения = НовоеСостояние;
			Иначе
				Строка.СостояниеПодтверждения = СостояниеОтклонено;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПриемкаЛПАгентомВРамкахАгентскогоДоговора
			Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПриемкаЛПНаСкладРанееНеЗарегистрированный
			Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВвозЛекарственныхПрепаратовВРФ
			Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПодтверждениеСведенийОПриемке
			Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтказОтПриемкиТовара
			Или Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПостановкаСнятиеАрбитража Тогда
		
		СписокТоваров = ДанныеДокумента.order_details;
		Для Каждого НомерУпаковки Из СписокТоваров.sgtin Цикл
			
			Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
			
			Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
				Строка.СостояниеПодтверждения = НовоеСостояние;
			Иначе
				Строка.СостояниеПодтверждения = СостояниеОтклонено;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого НомерУпаковки Из СписокТоваров.sscc Цикл
			
			Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
			
			Если КонечныеСостояния.Найти(Строка.СостояниеПодтверждения) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтклоненныеНомера = Неопределено Или ОтклоненныеНомера[НомерУпаковки] = Неопределено Тогда
				Строка.СостояниеПодтверждения = НовоеСостояние;
			Иначе
				Строка.СостояниеПодтверждения = СостояниеОтклонено;
				Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(ОтклоненныеНомера[НомерУпаковки]);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ Тогда
		
		НомерУпаковки = ДанныеДокумента.sgtin;
		Строка = ДокументОбъект.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПолученияИнформации = НовоеСостояние;
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросСоставаУпаковки Тогда
		
		НомерУпаковки = ДанныеДокумента.sscc_down;
		Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПолученияИнформации = НовоеСостояние;
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИерархииВложенностиУпаковок Тогда
		
		НомерУпаковки = ДанныеДокумента.sscc;
		Строка = ДокументОбъект.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПолученияИнформации = НовоеСостояние;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОРозничнойПродажеМДЛП - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Основание");
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОПриемке(Основание);
	КонецЕсли;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящее = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	Входящее  = Перечисления.ТипыСообщенийМДЛП.Входящее;
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее, Перечисления.ОперацииОбменаМДЛП.Получение_ОтгрузкаЛПСоСкладаПродавца);
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПодтверждениеСведенийОПриемке);
		
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтказОтПриемкиТовара);
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Входящее , Перечисления.ОперацииОбменаМДЛП.Получение_ОтзывОтправителемПереданногоТовара);
		
		Возврат Таблица;
	КонецЕсли;
	
	ПараметрыОперации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "СхемаАкцептования, Операция");
	Если ПараметрыОперации.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок Тогда
		Если ПараметрыОперации.Операция = Перечисления.ОперацииПриемкиМДЛП.ВозвратПриостановленныхЛП Тогда
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее, Перечисления.ОперацииОбменаМДЛП.Получение_ВозвратПриостановленныхЛП);
		ИначеЕсли ПараметрыОперации.Операция = Перечисления.ОперацииПриемкиМДЛП.ПоступлениеВРамкахАгентскогоДоговора Тогда
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее, Перечисления.ОперацииОбменаМДЛП.Получение_ОтгрузкаЛПвРамкахАгентскогоДоговора);
		ИначеЕсли ПараметрыОперации.Операция = Перечисления.ОперацииПриемкиМДЛП.ПередачаСобственнику Тогда
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее, Перечисления.ОперацииОбменаМДЛП.Получение_ПередачаЛПСобственнику);
		ИначеЕсли ПараметрыОперации.Операция = Перечисления.ОперацииПриемкиМДЛП.ПередачаСобственникуВРамкахГЛО Тогда
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее, Перечисления.ОперацииОбменаМДЛП.Получение_ОтгрузкаЛПСоСкладВРамкахГЛО);
		ИначеЕсли ПараметрыОперации.Операция = Перечисления.ОперацииПриемкиМДЛП.ПередачаСобственникуДляВыпуска Тогда
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее, Перечисления.ОперацииОбменаМДЛП.Получение_ОтгрузкаЛПДляВыпускаГотовойПродукции);
		ИначеЕсли ПараметрыОперации.Операция = Перечисления.ОперацииПриемкиМДЛП.ИмпортЕАЭС Тогда
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее, Перечисления.ОперацииОбменаМДЛП.Получение_ОтгрузкаЛПвРФизЕАЭС);
		ИначеЕсли ПараметрыОперации.Операция = Перечисления.ОперацииПриемкиМДЛП.ВозвратКонтрактномуПроизводителю Тогда
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее, Перечисления.ОперацииОбменаМДЛП.Получение_ВозвратКонтрактномуПроизводителю);
		Иначе
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее, Перечисления.ОперацииОбменаМДЛП.Получение_ОтгрузкаЛПСоСкладаПродавца);
		КонецЕсли;
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПодтверждениеСведенийОПриемке);
	Иначе
		Если ПараметрыОперации.Операция = Перечисления.ОперацииПриемкиМДЛП.ПоступлениеВРамкахАгентскогоДоговора Тогда
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПриемкаЛПАгентомВРамкахАгентскогоДоговора);
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее, Перечисления.ОперацииОбменаМДЛП.Получение_ПодтверждениеСведенийОПриемке);
		ИначеЕсли ПараметрыОперации.Операция = Перечисления.ОперацииПриемкиМДЛП.ПоступлениеНаРанееНеЗарегистрированноеМестоДеятельности Тогда
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПриемкаЛПНаСкладРанееНеЗарегистрированный);
		ИначеЕсли ПараметрыОперации.Операция = Перечисления.ОперацииПриемкиМДЛП.ИмпортЕАЭС Тогда
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВвозЛекарственныхПрепаратовВРФизЕСЭС);
		Иначе
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПриемкаЛПНаСклад);
			ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящее, Перечисления.ОперацииОбменаМДЛП.Получение_ПодтверждениеСведенийОПриемке);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОперации.Операция <> Перечисления.ОперацииПриемкиМДЛП.ПоступлениеНаРанееНеЗарегистрированноеМестоДеятельности Тогда
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтказОтПриемкиТовара);
		ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Входящее , Перечисления.ОперацииОбменаМДЛП.Получение_ОтзывОтправителемПереданногоТовара);
	КонецЕсли;
	
	ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ);
	ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросСоставаУпаковки);
	ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 1, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИерархииВложенностиУпаковок);
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус информирования по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияМДЛП - Статус по-умолчанию.
//
Функция СтатусИнформированияПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыИнформированияМДЛП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Если ИнтеграцияМДЛП.ИспользоватьДействиеЗапросаИнформацииОбУпаковках(ПустаяСсылка()) Тогда
		Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗапроситеИнформациюОбУпаковках;
	Иначе
		Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПроверку;
	КонецЕсли;
	
КонецФункции

// Возвращает признак по умолчанию использования дальнейшего действия ЗапроситеИнформациюОбУпаковках в документе.
//
Функция ИспользоватьДействиеЗапросаИнформацииОбУпаковках() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает запрос для получения статуса оформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ основание.
// 
// Возвращаемое значение:
//  Запрос - Запрос для получения статуса оформления.
//
Функция ЗапросСтатусаОформления(ДокументОснование) Экспорт
	
	Запрос = ИнтеграцияМДЛППереопределяемый.ЗапросСтатусаОформленияУведомленияОПриемке(ДокументОснование);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПанельМаркировкиМДЛП

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПодтвердитеПолучение);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗапроситеИнформациюОКиЗ);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПроверку);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеОбмен);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОприходуйтеБезПодтверждения);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗапроситеИнформациюОбУпаковках);
	
	Возврат Действия;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолученияПодтверждения);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеИнформации);
	
	Возврат Действия;
	
КонецФункции

Процедура ПриЗаполненииДокументовПанелиМаркировкиМДЛП(ТаблицаДокументы) Экспорт
	
	Описание = ИнтеграцияМДЛП.ДобавитьДокументНаПанельМаркировки(
		ТаблицаДокументы,
		Метаданные.Документы.УведомлениеОПриемкеМДЛП,
		НСтр("ru = 'Приемка товаров'"),
		ИнтеграцияМДЛПКлиентСервер.ПанельМаркировкаРазделЗакупки());
	
	Описание.Оформите    = Истина;
	Описание.Отработайте = Истина;
	Описание.Ожидайте    = Истина;
	
КонецПроцедуры

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОформите() Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.УведомлениеОПриемкеТекстЗапросаОформите();
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОтработайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОтработайте(Метаданные.Документы.УведомлениеОПриемкеМДЛП);
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОжидайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОжидайте(Метаданные.Документы.УведомлениеОПриемкеМДЛП);
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического списка формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСписока() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаФормДокументов(Метаданные.Документы.УведомлениеОПриемкеМДЛП);
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического Списка к оформлению формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	ТекстЗапроса = ИнтеграцияМДЛППереопределяемый.УведомлениеОПриемкеТекстЗапросаДинамическогоСпискаКОформлению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщениеМДЛП

Функция СообщениеКПередаче(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ЗапроситеИнформациюОКиЗ Тогда
		Возврат ЗапросИнформацииОКиЗ(ДокументСсылка);
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОткажитесьОтПриемкиТовара Тогда
		Возврат УведомлениеОбОтказеОтПриемкиТовара(ДокументСсылка, ДополнительныеПараметры);
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеПостановкуВАрбитражСнятиеАрбитража Тогда
		Возврат УведомлениеОПостановкеСнятииАрбитража(ДокументСсылка);
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПодтвердитеПостановкуВАрбитражСнятиеАрбитража Тогда
		Возврат УведомлениеОПодтвержденииПостановкиСнятияАрбитража(ДокументСсылка);
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОткажитесьОтПостановкиСнятияАрбитража Тогда
		Возврат УведомлениеОбОтказеОтПостановкиСнятияАрбитража(ДокументСсылка, ДополнительныеПараметры);
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОприходуйтеБезПодтверждения Тогда
		Возврат УведомлениеОбОприходовании(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры);
	Иначе
		Возврат УведомлениеОПриемкеМаркированныхТоваров(ДокументСсылка, ДальнейшееДействие);
	КонецЕсли;
	
КонецФункции

Функция ОпределитьДокументыДляЗагрузки(ДанныеДокумента, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтгрузкаЛПСоСкладаПродавца Тогда
		Возврат ОпределитьУведомлениеОПриемке(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтгрузкаЛПвРамкахАгентскогоДоговора Тогда
		Возврат ОпределитьУведомлениеОПриемке(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПередачаЛПСобственнику Тогда
		Возврат ОпределитьУведомлениеОПриемке(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтгрузкаЛПСоСкладВРамкахГЛО Тогда
		Возврат ОпределитьУведомлениеОПриемке(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтгрузкаЛПДляВыпускаГотовойПродукции Тогда
		Возврат ОпределитьУведомлениеОПриемке(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ВозвратПриостановленныхЛП Тогда
		Возврат ОпределитьУведомлениеОПриемке(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтгрузкаЛПвРФизЕАЭС Тогда
		Возврат ОпределитьУведомлениеОПриемке(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ВозвратКонтрактномуПроизводителю Тогда
		Возврат ОпределитьУведомлениеОПриемке(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПодтверждениеСведенийОПриемке Тогда
		Возврат ОпределитьУведомленияОПриемкеПоПодтверждению(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтзывОтправителемПереданногоТовара Тогда
		Возврат ОпределитьУведомленияОПриемкеПоОтзываемымТоварам(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПостановкаСнятиеАрбитража Тогда
		Возврат ОпределитьУведомленияОПриемкеПоПостановкеСнятииАрбитража(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтказПолучателяОтПриемкиТовара Тогда
		Возврат ОпределитьУведомленияОПриемкеПоОтказуОтПостановкиСнятияАрбитража(ДанныеДокумента);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьВходящееСообщение(ДанныеДокумента, Операция, ДокументСсылка) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтгрузкаЛПСоСкладаПродавца Тогда
		ЗагрузитьУведомлениеОбОтгрузкеСоСкладаПродавца(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ВозвратПриостановленныхЛП Тогда
		ЗагрузитьУведомлениеОВозвратеПриостановленныхЛП(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтгрузкаЛПвРамкахАгентскогоДоговора Тогда
		ЗагрузитьУведомлениеОбОтгрузкеВРамкахАгентскогоДоговора(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПередачаЛПСобственнику Тогда
		ЗагрузитьУведомлениеОПередачеЛПСобственнику(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтгрузкаЛПСоСкладВРамкахГЛО Тогда
		ЗагрузитьУведомлениеОбОтгрузкеВРамкахГЛО(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтгрузкаЛПДляВыпускаГотовойПродукции Тогда
		ЗагрузитьУведомлениеОбОтгрузкеЛПДляВыпускаГотовойПродукции(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПодтверждениеСведенийОПриемке Тогда
		ЗагрузитьУведомлениеОПодтверждении(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтзывОтправителемПереданногоТовара Тогда
		ЗагрузитьУведомлениеОбОтзывеПриемки(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ПостановкаСнятиеАрбитража Тогда
		ЗагрузитьУведомлениеОПостановкеСнятииАрбитража(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтказПолучателяОтПриемкиТовара Тогда
		ЗагрузитьУведомлениеОбОтказеОтПостановкиСнятияАрбитража(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтгрузкаЛПвРФизЕАЭС Тогда
		ЗагрузитьУведомлениеОбОтгрузкеВРФизЕАЭС(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ВозвратКонтрактномуПроизводителю Тогда
		ЗагрузитьУведомлениеОВозвратеКонтрактномуПроизводителю(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ИнформацияОКиЗ Тогда
		ЗагрузитьИнформациюОКиЗ(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_СоставУпаковки Тогда
		ЗагрузитьСоставУпаковки(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ИерархияВложенностиУпаковок Тогда
		ЗагрузитьИерархиюВложенностиУпаковок(ДанныеДокумента, ДокументСсылка);
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестная операция %1'"), Операция);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УпаковкиТовара

Функция ВходящееДеревоУпаковок(ДокументСсылка) Экспорт
	
	ДеревоУпаковок = Новый ДеревоЗначений;
	ДеревоУпаковок.Колонки.Добавить("ИдентификаторСтроки");
	ДеревоУпаковок.Колонки.Добавить("НомерУпаковки");
	ДеревоУпаковок.Колонки.Добавить("ТипУпаковки");
	ДеревоУпаковок.Колонки.Добавить("GTIN");
	ДеревоУпаковок.Колонки.Добавить("НомерСерии");
	ДеревоУпаковок.Колонки.Добавить("ГоденДо");
	ДеревоУпаковок.Колонки.Добавить("КодТНВЭД");
	ДеревоУпаковок.Колонки.Добавить("Номенклатура");
	ДеревоУпаковок.Колонки.Добавить("Характеристика");
	ДеревоУпаковок.Колонки.Добавить("Серия");
	ДеревоУпаковок.Колонки.Добавить("СостояниеПодтверждения");
	ДеревоУпаковок.Колонки.Добавить("СтатусПроверки");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки          КАК НомерСтроки,
	|	ТаблицаТовары.ИдентификаторСтроки  КАК ИдентификаторСтроки,
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Характеристика       КАК Характеристика,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.GTIN                 КАК GTIN,
	|	ТаблицаТовары.НомерСерии           КАК НомерСерии,
	|	ТаблицаТовары.ГоденДо              КАК ГоденДо,
	|	ТаблицаТовары.КодТНВЭД             КАК КодТНВЭД,
	|	ТаблицаУпаковки.НомерРодительскойУпаковки  КАК НомерРодительскойУпаковки,
	|	ТаблицаУпаковки.НомерКиЗ                   КАК НомерУпаковки,
	|	ТаблицаУпаковки.СостояниеПодтверждения     КАК СостояниеПодтверждения
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.Товары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК ТаблицаУпаковки
	|	ПО
	|		ТаблицаУпаковки.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаУпаковки.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаУпаковки.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                  КАК НомерСтроки,
	|	ТаблицаТовары.ИдентификаторСтрокиУпаковки  КАК ИдентификаторСтроки,
	|	ТаблицаТовары.Номенклатура                 КАК Номенклатура,
	|	ТаблицаТовары.Характеристика               КАК Характеристика,
	|	ТаблицаТовары.Серия                        КАК Серия,
	|	ТаблицаТовары.GTIN                         КАК GTIN,
	|	ТаблицаТовары.НомерСерии                   КАК НомерСерии,
	|	ТаблицаТовары.ГоденДо                      КАК ГоденДо,
	|	ТаблицаТовары.КодТНВЭД                     КАК КодТНВЭД,
	|	ТаблицаУпаковки.НомерРодительскойУпаковки    КАК НомерРодительскойУпаковки,
	|	ТаблицаУпаковки.НомерКиЗ                     КАК НомерУпаковки,
	|	ТранспортныеУпаковки.СостояниеПодтверждения  КАК СостояниеПодтверждения
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.СоставТранспортныхУпаковок КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК ТаблицаУпаковки
	|	ПО
	|		ТаблицаУпаковки.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаУпаковки.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтрокиУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК ТранспортныеУпаковки
	|	ПО
	|		ТранспортныеУпаковки.Ссылка = ТаблицаТовары.Ссылка
	|		И ТранспортныеУпаковки.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаУпаковки.Ссылка = &Ссылка
	|	И ТранспортныеУпаковки.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерРодительскойУпаковки,
	|	НомерСтроки УБЫВ
	|
	|ИТОГИ ПО
	|	НомерРодительскойУпаковки,
	|	ИдентификаторСтроки
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТранспортныеУпаковки.НомерУпаковки  КАК НомерУпаковки,
	|	""""                                КАК НомерРодительскойУпаковки,
	|	ТранспортныеУпаковки.СостояниеПодтверждения  КАК СостояниеПодтверждения
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК ТранспортныеУпаковки
	|ГДЕ
	|	ТранспортныеУпаковки.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИерархияУпаковок.НомерУпаковки              КАК НомерУпаковки,
	|	ИерархияУпаковок.НомерРодительскойУпаковки  КАК НомерРодительскойУпаковки,
	|	ТранспортныеУпаковки.СостояниеПодтверждения  КАК СостояниеПодтверждения
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК ТранспортныеУпаковки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.ИерархияГрупповыхУпаковок КАК ИерархияУпаковок
	|	ПО
	|		ИерархияУпаковок.Ссылка = ТранспортныеУпаковки.Ссылка
	|		И ИерархияУпаковок.ИдентификаторСтроки = ТранспортныеУпаковки.ИдентификаторСтроки
	|ГДЕ
	|	ТранспортныеУпаковки.Ссылка = &Ссылка
	|	И ИерархияУпаковок.Ссылка = &Ссылка
	|
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ПотребительскиеУпаковки = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИерархияУпаковок = РезультатЗапроса[1].Выгрузить();
	
	СтатусПроверки = Неопределено;
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "СхемаАкцептования") = Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок Тогда
		СтатусПроверки = Перечисления.СтатусыПроверкиНаличияУпаковкиМДЛП.ВНаличии;
	КонецЕсли;
	
	ДобавитьПотребительскиеУпаковкиВДерево(ДеревоУпаковок, ПотребительскиеУпаковки, "", СтатусПроверки);
	
	ТранспортныеУпаковки = ИерархияУпаковок.НайтиСтроки(Новый Структура("НомерРодительскойУпаковки", ""));
	Для Каждого ТранспортнаяУпаковка Из ТранспортныеУпаковки Цикл
		
		ДобавитьГрупповуюУпаковкуВДерево(ДеревоУпаковок, ТранспортнаяУпаковка, ПотребительскиеУпаковки, ИерархияУпаковок, СтатусПроверки);
		ИерархияУпаковок.Удалить(ТранспортнаяУпаковка);
		
	КонецЦикла;
	
	Возврат ДеревоУпаковок;
	
КонецФункции

Процедура ДобавитьГрупповуюУпаковкуВДерево(ДеревоУпаковок, ТранспортнаяУпаковка, ПотребительскиеУпаковки, ИерархияУпаковок, СтатусПроверки = Неопределено)
	
	Строка = ДеревоУпаковок.Строки.Добавить();
	Строка.НомерУпаковки          = ТранспортнаяУпаковка.НомерУпаковки;
	Строка.ТипУпаковки            = Перечисления.ТипыУпаковокМДЛП.ГрупповаяУпаковка;
	Строка.СостояниеПодтверждения = ТранспортнаяУпаковка.СостояниеПодтверждения;
	Строка.СтатусПроверки         = СтатусПроверки;
	
	ДобавитьПотребительскиеУпаковкиВДерево(Строка, ПотребительскиеУпаковки, Строка.НомерУпаковки);
	
	ВложенныеУпаковки = ИерархияУпаковок.НайтиСтроки(Новый Структура("НомерРодительскойУпаковки", ТранспортнаяУпаковка.НомерУпаковки));
	Для Каждого ВложеннаяУпаковка Из ВложенныеУпаковки Цикл
		ДобавитьГрупповуюУпаковкуВДерево(Строка, ВложеннаяУпаковка, ПотребительскиеУпаковки, ИерархияУпаковок);
		ИерархияУпаковок.Удалить(ВложеннаяУпаковка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПотребительскиеУпаковкиВДерево(Дерево, ПотребительскиеУпаковки, НомерРодительскойУпаковки, СтатусПроверки = Неопределено)
	
	ПотребительскиеУпаковки.Сбросить();
	Если ПотребительскиеУпаковки.НайтиСледующий(НомерРодительскойУпаковки, "НомерРодительскойУпаковки") Тогда
		ВыборкаПоНомеруСтроки = ПотребительскиеУпаковки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоНомеруСтроки.Следующий() Цикл
			
			ПерваяСтрока = Истина;
			
			Выборка = ВыборкаПоНомеруСтроки.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ПерваяСтрока Тогда
					ПерваяСтрока = Ложь;
					СтрокаНоменклатураБезУпаковки = Дерево.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНоменклатураБезУпаковки, Выборка,, "НомерУпаковки, СостояниеПодтверждения");
				КонецЕсли;
				
				Строка = СтрокаНоменклатураБезУпаковки.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, Выборка);
				Строка.ТипУпаковки    = Перечисления.ТипыУпаковокМДЛП.МаркированныйТовар;
				Строка.СтатусПроверки = СтатусПроверки;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает данные для заполнения представления документа.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * КомандаСоздать - Строка - Представление документа, если документ требуется создать.
//  * ИмяКомандыСоздать - Строка - Имя команды "Создать".
//  * ИмяКомандыОткрыть - Строка - Имя команды "Открыть".
//  * ДокументОтсутствуетНетПравНаСоздание - Строка - Представление документа, если документ не создан.
//  * Представление - Строка - Представление документа.
//  * НесколькоДокументовПредставление - Строка - Представление документа, если их несколько.
//
Функция ПредставлениеДокумента() Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияМДЛП.ПустоеПредставлениеДокумента();
	ВозвращаемоеЗначение.КомандаСоздать                       = НСтр("ru = 'Создать уведомление о приемке МДЛП'");
	ВозвращаемоеЗначение.ИмяКомандыСоздать                    = "СоздатьУведомлениеОПриемкеМДЛП";
	ВозвращаемоеЗначение.КомандаСвязать                       = НСтр("ru = 'Связать с уведомлением о приемке МДЛП (%1)'");
	ВозвращаемоеЗначение.ИмяКомандыСвязать                    = "СвязатьУведомлениеОПриемкеМДЛП";
	ВозвращаемоеЗначение.ИмяКомандыОткрыть                    = "ОткрытьУведомлениеОПриемкеМДЛП";
	ВозвращаемоеЗначение.ДокументОтсутствуетНетПравНаСоздание = НСтр("ru = 'Уведомление о приемке МДЛП не создано'");
	ВозвращаемоеЗначение.Представление                        = НСтр("ru = 'Уведомление о приемке МДЛП: %1'");
	ВозвращаемоеЗначение.НесколькоДокументовПредставление     = НСтр("ru = 'Уведомление о приемке МДЛП (%1)'");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПоддерживаетЗагрузкуУведомлений() Экспорт
	Возврат Истина;
КонецФункции

Функция ВозможнаПостановкаВАрбитраж(Знач ОперацияОтгрузки, Знач ВерсияСхемОбмена = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ВерсияСхемОбмена) Тогда
		ВерсияСхемОбмена = ИнтеграцияМДЛП.ИспользуемаяВерсияСхемОбмена();
	КонецЕсли;
	
	Если ВерсияСхемОбмена >= "1.35" Тогда
		
		ОперацииОтгрузки = Новый Массив;
		ОперацииОтгрузки.Добавить(Перечисления.ОперацииПриемкиМДЛП.Поступление);         // 416
		ОперацииОтгрузки.Добавить(Перечисления.ОперацииПриемкиМДЛП.ВозвратОтПокупателя); // 416
		ОперацииОтгрузки.Добавить(Перечисления.ОперацииПриемкиМДЛП.ПоступлениеВРамкахАгентскогоДоговора); // 473
		
		Если ОперацииОтгрузки.Найти(ОперацияОтгрузки) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьИменаРеквизитовПоТипуОперации(Операция, ВсеРеквизиты, РеквизитыОперации) Экспорт
	
	ВсеРеквизиты = Новый Массив;
	ВсеРеквизиты.Добавить("ТипОперации");
	ВсеРеквизиты.Добавить("МестоДеятельности");
	ВсеРеквизиты.Добавить("МестоДеятельностиГрузоотправителя");
	ВсеРеквизиты.Добавить("ТипДоговора");
	ВсеРеквизиты.Добавить("ИсточникФинансирования");
	ВсеРеквизиты.Добавить("НомерКонтракта");
	ВсеРеквизиты.Добавить("НомерДокумента");
	ВсеРеквизиты.Добавить("ДатаДокумента");
	ВсеРеквизиты.Добавить("ПродавецИмпортногоТовара");
	ВсеРеквизиты.Добавить("Товары.Цена");
	ВсеРеквизиты.Добавить("Товары.Сумма");
	ВсеРеквизиты.Добавить("Товары.СуммаНДС");
	ВсеРеквизиты.Добавить("ТранспортныеУпаковки.Цена");
	ВсеРеквизиты.Добавить("ТранспортныеУпаковки.СуммаНДС");
	ВсеРеквизиты.Добавить("СоставТранспортныхУпаковок.Цена");
	ВсеРеквизиты.Добавить("СоставТранспортныхУпаковок.Сумма");
	ВсеРеквизиты.Добавить("СоставТранспортныхУпаковок.СуммаНДС");
	ВсеРеквизиты.Добавить("НомерГосударственногоКонтракта");
	ВсеРеквизиты.Добавить("ДатаГосударственногоКонтракта");
	
	РеквизитыОперации = Новый Массив;
	Если Операция = Перечисления.ОперацииПриемкиМДЛП.Поступление
	 Или Операция = Перечисления.ОперацииПриемкиМДЛП.ВозвратОтПокупателя Тогда
		РеквизитыОперации.Добавить("МестоДеятельности");
		РеквизитыОперации.Добавить("МестоДеятельностиГрузоотправителя");
		РеквизитыОперации.Добавить("ТипДоговора");
		РеквизитыОперации.Добавить("ИсточникФинансирования");
		РеквизитыОперации.Добавить("НомерКонтракта");
		РеквизитыОперации.Добавить("НомерДокумента");
		РеквизитыОперации.Добавить("ДатаДокумента");
		РеквизитыОперации.Добавить("Товары.Цена");
		РеквизитыОперации.Добавить("Товары.Сумма");
		РеквизитыОперации.Добавить("Товары.СуммаНДС");
		РеквизитыОперации.Добавить("ТранспортныеУпаковки.Цена");
		РеквизитыОперации.Добавить("ТранспортныеУпаковки.СуммаНДС");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.Цена");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.Сумма");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.СуммаНДС");
		РеквизитыОперации.Добавить("НомерГосударственногоКонтракта");
		РеквизитыОперации.Добавить("ДатаГосударственногоКонтракта");
	ИначеЕсли Операция = Перечисления.ОперацииПриемкиМДЛП.ПоступлениеВРамкахАгентскогоДоговора Тогда
		РеквизитыОперации.Добавить("ТипОперации");
		РеквизитыОперации.Добавить("МестоДеятельности");
		РеквизитыОперации.Добавить("МестоДеятельностиГрузоотправителя");
		РеквизитыОперации.Добавить("НомерДокумента");
		РеквизитыОперации.Добавить("ДатаДокумента");
	ИначеЕсли Операция = Перечисления.ОперацииПриемкиМДЛП.ПередачаСобственникуВРамкахГЛО Тогда
		РеквизитыОперации.Добавить("ТипОперации");
		РеквизитыОперации.Добавить("МестоДеятельности");
		РеквизитыОперации.Добавить("МестоДеятельностиГрузоотправителя");
		РеквизитыОперации.Добавить("НомерДокумента");
		РеквизитыОперации.Добавить("ДатаДокумента");
	ИначеЕсли Операция = Перечисления.ОперацииПриемкиМДЛП.ПоступлениеНаРанееНеЗарегистрированноеМестоДеятельности Тогда
		РеквизитыОперации.Добавить("МестоДеятельности");
		РеквизитыОперации.Добавить("МестоДеятельностиГрузоотправителя");
		РеквизитыОперации.Добавить("НомерДокумента");
		РеквизитыОперации.Добавить("ДатаДокумента");
	ИначеЕсли Операция = Перечисления.ОперацииПриемкиМДЛП.ПередачаСобственнику
			Или Операция = Перечисления.ОперацииПриемкиМДЛП.ПередачаСобственникуДляВыпуска Тогда
		РеквизитыОперации.Добавить("МестоДеятельности");
		РеквизитыОперации.Добавить("МестоДеятельностиГрузоотправителя");
		РеквизитыОперации.Добавить("НомерДокумента");
		РеквизитыОперации.Добавить("ДатаДокумента");
	ИначеЕсли Операция = Перечисления.ОперацииПриемкиМДЛП.ВозвратПриостановленныхЛП
			Или Операция = Перечисления.ОперацииПриемкиМДЛП.ВозвратКонтрактномуПроизводителю Тогда
		РеквизитыОперации.Добавить("МестоДеятельности");
		РеквизитыОперации.Добавить("МестоДеятельностиГрузоотправителя");
	ИначеЕсли Операция = Перечисления.ОперацииПриемкиМДЛП.ИмпортЕАЭС Тогда
		РеквизитыОперации.Добавить("МестоДеятельности");
		РеквизитыОперации.Добавить("ТипДоговора");
		РеквизитыОперации.Добавить("НомерДокумента");
		РеквизитыОперации.Добавить("ДатаДокумента");
		РеквизитыОперации.Добавить("ПродавецИмпортногоТовара");
		РеквизитыОперации.Добавить("Товары.Цена");
		РеквизитыОперации.Добавить("Товары.Сумма");
		РеквизитыОперации.Добавить("Товары.СуммаНДС");
		РеквизитыОперации.Добавить("ТранспортныеУпаковки.Цена");
		РеквизитыОперации.Добавить("ТранспортныеУпаковки.СуммаНДС");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.Цена");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.Сумма");
		РеквизитыОперации.Добавить("СоставТранспортныхУпаковок.СуммаНДС");
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработкаСообщенийМДЛП

Функция УведомлениеОПриемкеМаркированныхТоваров(ДокументСсылка, ДальнейшееДействие)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные Тогда
		СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПриемкаЛПНаСклад;
	Иначе
		СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПодтверждениеСведенийОПриемке;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена         КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                               КАК Ссылка,
	|	Шапка.Дата                                 КАК Дата,
	|	Шапка.Операция                             КАК Операция,
	|	Шапка.Основание                            КАК Основание,
	|	Шапка.СхемаАкцептования                    КАК СхемаАкцептования,
	|	Шапка.ТипОперации                          КАК ТипОперации,
	|	Шапка.ТипДоговора                          КАК ТипДоговора,
	|	Шапка.ИсточникФинансирования               КАК ИсточникФинансирования,
	|	Шапка.НомерКонтракта                       КАК НомерКонтракта,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|			ТОГДА Шапка.МестоДеятельности.Идентификатор
	|		ИНАЧЕ Шапка.ИдентификаторОрганизации
	|	КОНЕЦ                                      КАК ИдентификаторОрганизации,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|				И Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииПриемкиМДЛП.ИмпортЕАЭС)
	|			ТОГДА Шапка.Грузоотправитель.РегистрационныйНомерУчастника
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|			ТОГДА Шапка.МестоДеятельностиГрузоотправителя.Идентификатор
	|		КОГДА Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииПриемкиМДЛП.ИмпортЕАЭС)
	|			Тогда Шапка.ИдентификаторОрганизацииКонтрагента
	|		ИНАЧЕ Шапка.ИдентификаторКонтрагента
	|	КОНЕЦ                                      КАК ИдентификаторКонтрагента,
	|	Шапка.ПродавецИмпортногоТовара.РегистрационныйНомерУчастника  КАК ПродавецИмпортногоТовара,
	|	Шапка.НомерДокумента                       КАК НомерДокумента,
	|	Шапка.ДатаДокумента                        КАК ДатаДокумента,
	|	Шапка.НомерГосударственногоКонтракта       КАК НомерГосударственногоКонтракта,
	|	Шапка.ДатаГосударственногоКонтракта        КАК ДатаГосударственногоКонтракта
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN              КАК GTIN,
	|	НомераУпаковок.НомерКиЗ  КАК НомерКиЗ,
	|	ВЫБОР
	|		КОГДА Товары.КоличествоУпаковок = Товары.Количество
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК Число(15,2))
	|	КОНЕЦ                    КАК Цена,
	|	ВЫРАЗИТЬ(Товары.СуммаНДС / Товары.Количество КАК Число(15, 2)) КАК СуммаНДС
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения В (ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче), ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить))
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.ПустаяСсылка))
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки                        КАК НомерКиЗ,
	|	НомераУпаковок.Цена                                 КАК ЦенаОстальныхПозиций,
	|	НомераУпаковок.СуммаНДС                             КАК СуммаНДСОстальныхПозиций,
	|	ВЫБОР
	|		КОГДА Состав.GTIN ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                               КАК УказанСостав,
	|	Состав.GTIN                                         КАК GTIN,
	|	Состав.НомерСерии                                   КАК НомерСерии,
	|	ЕСТЬNULL(Состав.Цена, НомераУпаковок.Цена)          КАК Цена,
	|	ЕСТЬNULL(Состав.СуммаНДС, НомераУпаковок.СуммаНДС)  КАК СуммаНДС
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.СоставТранспортныхУпаковок КАК Состав
	|	ПО
	|		Состав.Ссылка = НомераУпаковок.Ссылка
	|		И Состав.ИдентификаторСтроки = НомераУпаковок.ИдентификаторСтроки
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения В (ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче), ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить))
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.ПустаяСсылка))
	|ИТОГИ
	|	МАКСИМУМ(ЦенаОстальныхПозиций),
	|	МАКСИМУМ(СуммаНДСОстальныхПозиций),
	|	МАКСИМУМ(Цена),
	|	МАКСИМУМ(СуммаНДС),
	|	МАКСИМУМ(УказанСостав)
	|ПО
	|	НомерКиЗ
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Результат[2].Пустой()) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Если Шапка.СхемаАкцептования = Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок Тогда
		
		Если Шапка.Операция = Перечисления.ОперацииПриемкиМДЛП.ПоступлениеВРамкахАгентскогоДоговора Тогда
			СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПриемкаЛПАгентомВРамкахАгентскогоДоговора;
			ИмяПакета = "agent_acceptance";
		ИначеЕсли Шапка.Операция = Перечисления.ОперацииПриемкиМДЛП.ПоступлениеНаРанееНеЗарегистрированноеМестоДеятельности Тогда
			СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПриемкаЛПНаСкладРанееНеЗарегистрированный;
			ИмяПакета = "receive_unregistered_order";
		ИначеЕсли Шапка.Операция = Перечисления.ОперацииПриемкиМДЛП.ИмпортЕАЭС Тогда
			СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ВвозЛекарственныхПрепаратовВРФизЕСЭС;
			ИмяПакета = "eeu_import";
		Иначе
			СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПриемкаЛПНаСклад;
			ИмяПакета = "receive_order";
		КонецЕсли;
		
		Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
		ПередачаДанных[ИмяПакета] = Уведомление;
		
		Уведомление.action_id = Уведомление.action_id;
		
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id", Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
		
		Если Шапка.Операция <> Перечисления.ОперацииПриемкиМДЛП.ПоступлениеВРамкахАгентскогоДоговора Тогда
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "seller_id", Шапка.ПродавецИмпортногоТовара, СообщениеКПередаче);
		КонецЕсли;
		
		Если Шапка.Операция = Перечисления.ОперацииПриемкиМДЛП.ИмпортЕАЭС Тогда
			ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "shipper_id", Шапка.ИдентификаторКонтрагента, СообщениеКПередаче);
		Иначе
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "shipper_id", Шапка.ИдентификаторКонтрагента, СообщениеКПередаче);
			ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты);
		КонецЕсли;
		
		ТипКонтракта = ИнтеграцияМДЛП.КодЗначенияПеречисления(Шапка.ТипДоговора);
		
		Если Шапка.Операция = Перечисления.ОперацииПриемкиМДЛП.ПоступлениеВРамкахАгентскогоДоговора Тогда
			
			Операция = ИнтеграцияМДЛП.КодЗначенияПеречисления(Шапка.ТипОперации);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "receive_type", Операция, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_num", Шапка.НомерДокумента, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_date", Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
			
		ИначеЕсли Шапка.Операция = Перечисления.ОперацииПриемкиМДЛП.ИмпортЕАЭС Тогда
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_type", ТипКонтракта, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_num", Шапка.НомерДокумента, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_date", Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
			
		Иначе
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_num", Шапка.НомерДокумента, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_date", Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
			
			Операция = ИнтеграцияМДЛП.КодЗначенияПеречисления(Шапка.Операция);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "receive_type", Операция, СообщениеКПередаче);
			
			ИсточникФинансирования = ИнтеграцияМДЛП.КодЗначенияПеречисления(Шапка.ИсточникФинансирования);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "source", ИсточникФинансирования, СообщениеКПередаче);
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_type", ТипКонтракта, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_num", Шапка.НомерКонтракта, СообщениеКПередаче);
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_gos_num", СокрЛП(Шапка.НомерГосударственногоКонтракта), СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_gos_date", Формат(Шапка.ДатаГосударственногоКонтракта, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
			
		КонецЕсли;
		
		Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Уведомление.order_details, "union") Тогда
			Для Каждого Строка Из Товары Цикл
				НоваяСтрока = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.order_details, "union");
				
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sgtin"    , Строка.НомерКИЗ, СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Строка.Цена, СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Строка.СуммаНДС, СообщениеКПередаче);
				
				Уведомление.order_details.union.Добавить(НоваяСтрока);
			КонецЦикла;
			Пока Упаковки.Следующий() Цикл
				НоваяСтрока = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.order_details, "union");
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "sscc_detail") Тогда
					НоваяСтрока.sscc_detail = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(НоваяСтрока, "sscc_detail");
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока.sscc_detail, "sscc", Упаковки.НомерКИЗ, СообщениеКПередаче);
					Если Упаковки.УказанСостав Тогда
						СоставУпаковки = Упаковки.Выбрать();
						Пока СоставУпаковки.Следующий() Цикл
							СтрокаСостава = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(НоваяСтрока.sscc_detail, "detail");
							ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "gtin"         , СоставУпаковки.GTIN, СообщениеКПередаче);
							ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "series_number", СоставУпаковки.НомерСерии, СообщениеКПередаче);
							ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "cost"         , СоставУпаковки.Цена, СообщениеКПередаче);
							ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "vat_value"    , СоставУпаковки.СуммаНДС, СообщениеКПередаче);
							НоваяСтрока.sscc_detail.detail.Добавить(СтрокаСостава);
						КонецЦикла;
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Упаковки.ЦенаОстальныхПозиций, СообщениеКПередаче);
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Упаковки.СуммаНДСОстальныхПозиций, СообщениеКПередаче);
					Иначе
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Упаковки.Цена, СообщениеКПередаче);
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Упаковки.СуммаНДС, СообщениеКПередаче);
					КонецЕсли;
				Иначе
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sscc"     , Упаковки.НомерКИЗ, СообщениеКПередаче);
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Упаковки.Цена, СообщениеКПередаче);
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Упаковки.СуммаНДС, СообщениеКПередаче);
				КонецЕсли;
				
				Уведомление.order_details.union.Добавить(НоваяСтрока);
			КонецЦикла;
		Иначе
			Для Каждого Строка Из Товары Цикл
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sgtin", Строка.НомерКиЗ, СообщениеКПередаче);
			КонецЦикла;
			Пока Упаковки.Следующий() Цикл
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sscc" , Упаковки.НомерКиЗ, СообщениеКПередаче);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПодтверждениеСведенийОПриемке;
		
		ИмяПакета = "accept";
		
		Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
		ПередачаДанных[ИмяПакета] = Уведомление;
		
		Уведомление.action_id = Уведомление.action_id;
		
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "counterparty_id", Шапка.ИдентификаторКонтрагента, СообщениеКПередаче);
		ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
		
		ЭтоВозвратПриостановленныхЛП = Шапка.Операция = Перечисления.ОперацииПриемкиМДЛП.ВозвратПриостановленныхЛП;
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "confirm_paused", ЭтоВозвратПриостановленныхЛП, СообщениеКПередаче);
		
		Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
		Для Каждого Строка Из Товары Цикл
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sgtin", Строка.НомерКИЗ, СообщениеКПередаче);
		КонецЦикла;
		Пока Упаковки.Следующий() Цикл
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sscc", Упаковки.НомерКИЗ, СообщениеКПередаче);
		КонецЦикла;
		
	КонецЕсли;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция УведомлениеОбОприходовании(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_Оприходование;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена                           КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                                                 КАК Ссылка,
	|	Шапка.Дата                                                   КАК Дата,
	|	Шапка.Операция                                               КАК Операция,
	|	Шапка.Основание                                              КАК Основание,
	|	Шапка.ТипДоговора                                            КАК ТипДоговора,
	|	Шапка.ИсточникФинансирования                                 КАК ИсточникФинансирования,
	|	Шапка.НомерКонтракта                                         КАК НомерКонтракта,
	|	Шапка.Организация.РегистрационныйНомерУчастника              КАК ИдентификаторОрганизации,
	|	Шапка.МестоДеятельности.Идентификатор                        КАК ИдентификаторМестаДеятельности,
	|	Шапка.Грузоотправитель.ИНН                                   КАК ИННКонтрагента,
	|	Шапка.Грузоотправитель.КПП                                   КАК КППКонтрагента,
	|	Шапка.МестоДеятельностиГрузоотправителя.Идентификатор        КАК ИдентификаторМестаДеятельностиКонтрагента,
	|	Шапка.НомерДокумента                                         КАК НомерДокумента,
	|	Шапка.ДатаДокумента                                          КАК ДатаДокумента,
	|	Шапка.НомерГосударственногоКонтракта                         КАК НомерГосударственногоКонтракта,
	|	Шапка.ДатаГосударственногоКонтракта                          КАК ДатаГосударственногоКонтракта
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN              КАК GTIN,
	|	НомераУпаковок.НомерКиЗ  КАК НомерКиЗ,
	|	ВЫБОР
	|		КОГДА Товары.КоличествоУпаковок = Товары.Количество
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК Число(15,2))
	|	КОНЕЦ                    КАК Цена,
	|	ВЫРАЗИТЬ(Товары.СуммаНДС / Товары.Количество КАК Число(15, 2)) КАК СуммаНДС
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения В (
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПринятоГИСМ),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить))
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.ПустаяСсылка))
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки                        КАК НомерКиЗ,
	|	НомераУпаковок.Цена                                 КАК ЦенаОстальныхПозиций,
	|	НомераУпаковок.СуммаНДС                             КАК СуммаНДСОстальныхПозиций,
	|	ВЫБОР
	|		КОГДА Состав.GTIN ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                               КАК УказанСостав,
	|	Состав.GTIN                                         КАК GTIN,
	|	Состав.НомерСерии                                   КАК НомерСерии,
	|	ЕСТЬNULL(Состав.Цена, НомераУпаковок.Цена)          КАК Цена,
	|	ЕСТЬNULL(Состав.СуммаНДС, НомераУпаковок.СуммаНДС)  КАК СуммаНДС
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.СоставТранспортныхУпаковок КАК Состав
	|	ПО
	|		Состав.Ссылка = НомераУпаковок.Ссылка
	|		И Состав.ИдентификаторСтроки = НомераУпаковок.ИдентификаторСтроки
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения В (
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.ПринятоГИСМ),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить))
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.ПустаяСсылка))
	|ИТОГИ
	|	МАКСИМУМ(ЦенаОстальныхПозиций),
	|	МАКСИМУМ(СуммаНДСОстальныхПозиций),
	|	МАКСИМУМ(Цена),
	|	МАКСИМУМ(СуммаНДС),
	|	МАКСИМУМ(УказанСостав)
	|ПО
	|	НомерКиЗ
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Результат[2].Пустой()) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	ЭтоИмпорт = Шапка.Операция = Перечисления.ОперацииПриемкиМДЛП.ИмпортЕАЭС;
	
	Если ЭтоИмпорт Тогда
		СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОприходованиеИмпорт;
		ИмяПакета = "posting_import";
	Иначе
		СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_Оприходование;
		ИмяПакета = "posting";
	КонецЕсли;
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	Если ЭтоИмпорт Тогда
		
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id", Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
		
	Иначе
		
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id", Шапка.ИдентификаторМестаДеятельности, СообщениеКПередаче);
		
		Если ПередачаДанных.version < "1.37" Тогда
			Уведомление.shipper_info = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "shipper_info");
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.shipper_info, "inn", Шапка.ИННКонтрагента, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.shipper_info, "kpp", Шапка.КППКонтрагента, СообщениеКПередаче);
		Иначе
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "shipper_id", Шапка.ИдентификаторМестаДеятельностиКонтрагента, СообщениеКПередаче);
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты);
	
	Если ЭтоИмпорт Тогда
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "custom_receiver_id", "", СообщениеКПередаче);
	КонецЕсли;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_num", Шапка.НомерДокумента, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_date", Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
	
	Если Не ЭтоИмпорт Тогда
		
		Операция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Операция");
		Если Операция = Перечисления.ОперацииОприходованияМДЛП.Пересорт Тогда
			ТипОперации = 3;
		ИначеЕсли Операция = Перечисления.ОперацииОприходованияМДЛП.ВозвратОтПокупателя Тогда
			ТипОперации = 2;
		Иначе
			// По умолчанию тип операции - Поступление.
			ТипОперации = 1;
		КонецЕсли;
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "receive_type", ТипОперации, СообщениеКПередаче);
		
	КонецЕсли;
	
	ТипДоговора = ?(ЗначениеЗаполнено(Шапка.ТипДоговора), Шапка.ТипДоговора, ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ТипДоговора"));
	ТипКонтракта = ИнтеграцияМДЛП.КодЗначенияПеречисления(ТипДоговора);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_type", ТипКонтракта, СообщениеКПередаче);
	
	Если Не ЭтоИмпорт Тогда
		
		ИсточникФинансирования = ?(ЗначениеЗаполнено(Шапка.ИсточникФинансирования), Шапка.ИсточникФинансирования, ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ИсточникФинансирования"));
		КодИсточникаФинансирования = ИнтеграцияМДЛП.КодЗначенияПеречисления(ИсточникФинансирования);
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "source", КодИсточникаФинансирования, СообщениеКПередаче);
		
		НомерКонтракта = ?(ЗначениеЗаполнено(Шапка.НомерКонтракта), Шапка.НомерКонтракта, ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "НомерКонтракта"));
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_num", СокрЛП(НомерКонтракта), СообщениеКПередаче);
		
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_gos_num", СокрЛП(Шапка.НомерГосударственногоКонтракта), СообщениеКПередаче);
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "contract_gos_date", Формат(Шапка.ДатаГосударственногоКонтракта, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
		
	КонецЕсли;
	
	Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Уведомление.order_details, "union") Тогда
		Для Каждого Строка Из Товары Цикл
			НоваяСтрока = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.order_details, "union");
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sgtin"    , Строка.НомерКИЗ, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Строка.Цена, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Строка.СуммаНДС, СообщениеКПередаче);
			
			Уведомление.order_details.union.Добавить(НоваяСтрока);
		КонецЦикла;
		Пока Упаковки.Следующий() Цикл
			НоваяСтрока = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.order_details, "union");
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "sscc_detail") Тогда
				НоваяСтрока.sscc_detail = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(НоваяСтрока, "sscc_detail");
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока.sscc_detail, "sscc", Упаковки.НомерКИЗ, СообщениеКПередаче);
				Если Упаковки.УказанСостав Тогда
					СоставУпаковки = Упаковки.Выбрать();
					Пока СоставУпаковки.Следующий() Цикл
						СтрокаСостава = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(НоваяСтрока.sscc_detail, "detail");
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "gtin"         , СоставУпаковки.GTIN, СообщениеКПередаче);
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "series_number", СоставУпаковки.НомерСерии, СообщениеКПередаче);
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "cost"         , СоставУпаковки.Цена, СообщениеКПередаче);
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(СтрокаСостава, "vat_value"    , СоставУпаковки.СуммаНДС, СообщениеКПередаче);
						НоваяСтрока.sscc_detail.detail.Добавить(СтрокаСостава);
					КонецЦикла;
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Упаковки.ЦенаОстальныхПозиций, СообщениеКПередаче);
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Упаковки.СуммаНДСОстальныхПозиций, СообщениеКПередаче);
				Иначе
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Упаковки.Цена, СообщениеКПередаче);
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Упаковки.СуммаНДС, СообщениеКПередаче);
				КонецЕсли;
			Иначе
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sscc"     , Упаковки.НомерКИЗ, СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Упаковки.Цена, СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Упаковки.СуммаНДС, СообщениеКПередаче);
			КонецЕсли;
			
			Уведомление.order_details.union.Добавить(НоваяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторМестаДеятельности;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция УведомлениеОбОтказеОтПриемкиТовара(ДокументСсылка, ДополнительныеПараметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтказОтПриемкиТовара;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена  КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                        КАК Ссылка,
	|	Шапка.Дата                          КАК Дата,
	|	Шапка.Основание                     КАК Основание,
	|	Шапка.Операция                      КАК Операция,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|			ТОГДА Шапка.МестоДеятельности.Идентификатор
	|		ИНАЧЕ Шапка.ИдентификаторОрганизации
	|	КОНЕЦ                               КАК ИдентификаторОрганизации,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|				И Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииПриемкиМДЛП.ИмпортЕАЭС)
	|			ТОГДА Шапка.Грузоотправитель.РегистрационныйНомерУчастника
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|			ТОГДА Шапка.МестоДеятельностиГрузоотправителя.Идентификатор
	|		КОГДА Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииПриемкиМДЛП.ИмпортЕАЭС)
	|			Тогда Шапка.ИдентификаторОрганизацииКонтрагента
	|		ИНАЧЕ Шапка.ИдентификаторКонтрагента
	|	КОНЕЦ                               КАК ИдентификаторКонтрагента,
	|	Шапка.СхемаАкцептования             КАК СхемаАкцептования
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN              КАК GTIN,
	|	НомераУпаковок.НомерКиЗ  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Отказаться)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Отказаться)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выгрузить();
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Упаковки.Количество() = 0) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "refusal_receiver";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "shipper_id" , Шапка.ИдентификаторКонтрагента, СообщениеКПередаче);
	
	ПричинаОтзыва = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Причина");
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "reason", ПричинаОтзыва, СообщениеКПередаче);
	
	ЭтоВозвратПриостановленныхЛП = Шапка.Операция = Перечисления.ОперацииПриемкиМДЛП.ВозвратПриостановленныхЛП;
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "confirm_paused", ЭтоВозвратПриостановленныхЛП, СообщениеКПередаче);
	
	Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
	Для Каждого Строка Из Товары Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sgtin", Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	Для Каждого Строка Из Упаковки Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sscc" , Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция УведомлениеОПостановкеСнятииАрбитража(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПостановкаСнятиеАрбитража;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена  КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                        КАК Ссылка,
	|	Шапка.Дата                          КАК Дата,
	|	Шапка.Основание                     КАК Основание,
	|	Шапка.Операция                      КАК Операция,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|			ТОГДА Шапка.МестоДеятельности.Идентификатор
	|		ИНАЧЕ Шапка.ИдентификаторОрганизации
	|	КОНЕЦ                               КАК ИдентификаторОрганизации,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|				И Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииПриемкиМДЛП.ИмпортЕАЭС)
	|			ТОГДА Шапка.Грузоотправитель.РегистрационныйНомерУчастника
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|			ТОГДА Шапка.МестоДеятельностиГрузоотправителя.Идентификатор
	|		КОГДА Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииПриемкиМДЛП.ИмпортЕАЭС)
	|			Тогда Шапка.ИдентификаторОрганизацииКонтрагента
	|		ИНАЧЕ Шапка.ИдентификаторКонтрагента
	|	КОНЕЦ                               КАК ИдентификаторКонтрагента,
	|	Шапка.СхемаАкцептования             КАК СхемаАкцептования,
	|	Шапка.НомерДокумента                КАК НомерДокумента,
	|	Шапка.ДатаДокумента                 КАК ДатаДокумента
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN              КАК GTIN,
	|	НомераУпаковок.НомерКиЗ  КАК НомерКиЗ,
	|	НомераУпаковок.Арбитраж  КАК Арбитраж
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.УстановленПередача), ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.СнятПередача))
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки  КАК НомерКиЗ,
	|	НомераУпаковок.Арбитраж       КАК Арбитраж
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.УстановленПередача), ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.СнятПередача))
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выгрузить();
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Упаковки.Количество() = 0) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПризнакПостановкиСнятияАрбитража = Неопределено;
	НомераУпаковок = Новый Массив;
	Для Каждого Строка Из Товары Цикл
		
		НомераУпаковок.Добавить(Строка.НомерКиЗ);
		
		Если ПризнакПостановкиСнятияАрбитража <> Строка.Арбитраж Тогда
			Если ПризнакПостановкиСнятияАрбитража <> Неопределено Тогда
				ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Передача уведомления с одновременной постановкой в арбитраж и снятием арбитража недопустима.'"));
				Сообщения.Добавить(СообщениеКПередаче);
				Возврат Сообщения;
			КонецЕсли;
			ПризнакПостановкиСнятияАрбитража = Строка.Арбитраж;
		КонецЕсли;
		
	КонецЦикла;
	
	НомераТранспортныхУпаковок = Новый Массив;
	Для Каждого Строка Из Упаковки Цикл
		
		НомераТранспортныхУпаковок.Добавить(Строка.НомерКиЗ);
		
		Если ПризнакПостановкиСнятияАрбитража <> Строка.Арбитраж Тогда
			Если ПризнакПостановкиСнятияАрбитража <> Неопределено Тогда
				ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Передача уведомления с одновременной постановкой в арбитраж и снятием арбитража недопустима.'"));
				Сообщения.Добавить(СообщениеКПередаче);
				Возврат Сообщения;
			КонецЕсли;
			ПризнакПостановкиСнятияАрбитража = Строка.Арбитраж;
		КонецЕсли;
		
	КонецЦикла;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "arbitration";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "counterparty_id", Шапка.ИдентификаторКонтрагента, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_date", Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "doc_num", Шапка.НомерДокумента, СообщениеКПередаче);
	
	Если ПризнакПостановкиСнятияАрбитража = Перечисления.СостоянияАрбитражаМДЛП.УстановленПередача Тогда
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "sign_arbitration", 1, СообщениеКПередаче);
	ИначеЕсли ПризнакПостановкиСнятияАрбитража = Перечисления.СостоянияАрбитражаМДЛП.СнятПередача Тогда
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "sign_arbitration", 2, СообщениеКПередаче);
	КонецЕсли;
	
	Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
	Для Каждого НомерКиЗ Из НомераУпаковок Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sgtin", НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	Для Каждого НомерКиЗ Из НомераТранспортныхУпаковок Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sscc", НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция УведомлениеОПодтвержденииПостановкиСнятияАрбитража(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ПодтверждениеСведенийОПриемке;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена                    КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                                          КАК Ссылка,
	|	Шапка.Дата                                            КАК Дата,
	|	Шапка.Основание                                       КАК Основание,
	|	Шапка.Операция                                        КАК Операция,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|			ТОГДА Шапка.МестоДеятельности.Идентификатор
	|		ИНАЧЕ Шапка.ИдентификаторОрганизации
	|	КОНЕЦ                                                 КАК ИдентификаторОрганизации,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|				И Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииПриемкиМДЛП.ИмпортЕАЭС)
	|			ТОГДА Шапка.Грузоотправитель.РегистрационныйНомерУчастника
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|			ТОГДА Шапка.МестоДеятельностиГрузоотправителя.Идентификатор
	|		КОГДА Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииПриемкиМДЛП.ИмпортЕАЭС)
	|			Тогда Шапка.ИдентификаторОрганизацииКонтрагента
	|		ИНАЧЕ Шапка.ИдентификаторКонтрагента
	|	КОНЕЦ                                                 КАК ИдентификаторКонтрагента,
	|	Шапка.СхемаАкцептования                               КАК СхемаАкцептования
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN              КАК GTIN,
	|	НомераУпаковок.НомерКиЗ  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить)
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.УстановленПолучение), ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.СнятПолучение))
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Подтвердить)
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.УстановленПолучение), ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.СнятПолучение))
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выгрузить();
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Упаковки.Количество() = 0) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	ИмяПакета = "accept";
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "counterparty_id", Шапка.ИдентификаторКонтрагента, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	
	ЭтоВозвратПриостановленныхЛП = Шапка.Операция = Перечисления.ОперацииПриемкиМДЛП.ВозвратПриостановленныхЛП;
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "confirm_paused", ЭтоВозвратПриостановленныхЛП, СообщениеКПередаче);
	
	Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
	Для Каждого Строка Из Товары Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sgtin", Строка.НомерКИЗ, СообщениеКПередаче);
	КонецЦикла;
	Для Каждого Строка Из Упаковки Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sscc", Строка.НомерКИЗ, СообщениеКПередаче);
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция УведомлениеОбОтказеОтПостановкиСнятияАрбитража(ДокументСсылка, ДополнительныеПараметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ОтказОтПриемкиТовара;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена  КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                        КАК Ссылка,
	|	Шапка.Дата                          КАК Дата,
	|	Шапка.Основание                     КАК Основание,
	|	Шапка.Операция                      КАК Операция,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|			ТОГДА Шапка.МестоДеятельности.Идентификатор
	|		ИНАЧЕ Шапка.ИдентификаторОрганизации
	|	КОНЕЦ                               КАК ИдентификаторОрганизации,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|				И Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииПриемкиМДЛП.ИмпортЕАЭС)
	|			ТОГДА Шапка.Грузоотправитель.РегистрационныйНомерУчастника
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|			ТОГДА Шапка.МестоДеятельностиГрузоотправителя.Идентификатор
	|		КОГДА Шапка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииПриемкиМДЛП.ИмпортЕАЭС)
	|			Тогда Шапка.ИдентификаторОрганизацииКонтрагента
	|		ИНАЧЕ Шапка.ИдентификаторКонтрагента
	|	КОНЕЦ                               КАК ИдентификаторКонтрагента,
	|	Шапка.СхемаАкцептования             КАК СхемаАкцептования
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.GTIN              КАК GTIN,
	|	НомераУпаковок.НомерКиЗ  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|	ПО
	|		НомераУпаковок.Ссылка = Товары.Ссылка
	|		И НомераУпаковок.ИдентификаторСтроки = Товары.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Отказаться)
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.УстановленПолучение), ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.СнятПолучение))
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки  КАК НомерКиЗ
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.Отказаться)
	|	И НомераУпаковок.Арбитраж В (ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.УстановленПолучение), ЗНАЧЕНИЕ(Перечисление.СостоянияАрбитражаМДЛП.СнятПолучение))
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка    = Результат[0].Выбрать();
	Товары   = Результат[1].Выгрузить();
	Упаковки = Результат[2].Выгрузить();
	
	Если Не Шапка.Следующий() Или (Товары.Количество() = 0 И Упаковки.Количество() = 0) Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "refusal_receiver";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id" , Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "shipper_id" , Шапка.ИдентификаторКонтрагента, СообщениеКПередаче);
	
	ПричинаОтзыва = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Причина");
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "reason", ПричинаОтзыва, СообщениеКПередаче);
	
	ЭтоВозвратПриостановленныхЛП = Шапка.Операция = Перечисления.ОперацииПриемкиМДЛП.ВозвратПриостановленныхЛП;
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "confirm_paused", ЭтоВозвратПриостановленныхЛП, СообщениеКПередаче);
	
	Уведомление.order_details = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "order_details");
	Для Каждого Строка Из Товары Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sgtin", Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	Для Каждого Строка Из Упаковки Цикл
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление.order_details, "sscc" , Строка.НомерКиЗ, СообщениеКПередаче);
	КонецЦикла;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция ЗапросИнформацииОКиЗ(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьЗапросИерархииВложенностиУпаковок = ИнтеграцияМДЛП.ИспользуемаяВерсияСхемОбмена() >= "1.35";
	
	Сообщения = Новый Массив;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена  КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                        КАК Ссылка,
	|	Шапка.Основание                     КАК Основание,
	|	Шапка.Дата                          КАК Дата,
	|	ВЫБОР
	|		КОГДА Шапка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|			ТОГДА Шапка.МестоДеятельности.Идентификатор
	|		ИНАЧЕ Шапка.ИдентификаторОрганизации
	|	КОНЕЦ                               КАК ИдентификаторОрганизации
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерКиЗ  КАК НомерУпаковки
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|	И НомераУпаковок.НомерРодительскойУпаковки = &ПустойSSCC
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераУпаковок.НомерУпаковки  КАК НомерУпаковки
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК НомераУпаковок
	|ГДЕ
	|	НомераУпаковок.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустойSSCC", Метаданные.ОпределяемыеТипы.SSCC.Тип.ПривестиЗначение());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Шапка  = РезультатЗапроса[0].Выбрать();
	ПотребительскиеУпаковки = РезультатЗапроса[1].Выгрузить();
	ТранспортныеУпаковки = РезультатЗапроса[2].Выгрузить();
	
	Если Не Шапка.Следующий() Или (ПотребительскиеУпаковки.Количество() = 0 И ТранспортныеУпаковки.Количество() = 0) Тогда
		
		Если Сообщения.Количество() = 0 Тогда
			СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
			СообщениеКПередаче.Документ = ДокументСсылка;
			
			Если Не ИспользоватьЗапросИерархииВложенностиУпаковок Или Не Шапка.Следующий() Или ПотребительскиеУпаковки.Количество() = 0 Тогда
				СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ;
			Иначе
				СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИерархииВложенностиУпаковок;
			КонецЕсли;
			
			ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
			Сообщения.Добавить(СообщениеКПередаче);
		КонецЕсли;
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	ИмяТипа   = "documents";
	ИмяПакета = "query_kiz_info";
	
	Для Каждого ТекущаяСтрока Из ПотребительскиеУпаковки Цикл
		
		СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
		СообщениеКПередаче.Документ = ДокументСсылка;
		СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИнформацииОКиЗ;
		
		ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
		ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
		
		Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
		ПередачаДанных[ИмяПакета] = Уведомление;
		
		Уведомление.action_id = Уведомление.action_id;
		
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id", Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
		ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "sgtin"     , ТекущаяСтрока.НомерУпаковки, СообщениеКПередаче);
		
		ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
		
		ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
		
		СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
		СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
		СообщениеКПередаче.Основание      = Шапка.Основание;
		СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
		СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
		
		Сообщения.Добавить(СообщениеКПередаче);
		
	КонецЦикла;
	
	Если Не ИспользоватьЗапросИерархииВложенностиУпаковок Тогда
		
		Для Каждого ТекущаяСтрока Из ТранспортныеУпаковки Цикл
			
			СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
			СообщениеКПередаче.Документ = ДокументСсылка;
			СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросСоставаУпаковки;
			
			ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
			ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
			
			Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
			ПередачаДанных[ИмяПакета] = Уведомление;
			
			Уведомление.action_id = Уведомление.action_id;
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id", Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "sscc_down" , ТекущаяСтрока.НомерУпаковки, СообщениеКПередаче);
			
			ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
			
			ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
			
			СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
			СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
			СообщениеКПередаче.Основание      = Шапка.Основание;
			СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
			СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
			
			Сообщения.Добавить(СообщениеКПередаче);
			
		КонецЦикла;
		
	Иначе
		
		ИмяПакета = "query_hierarchy_info";
		
		Для Каждого ТекущаяСтрока Из ТранспортныеУпаковки Цикл
			
			СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
			СообщениеКПередаче.Документ = ДокументСсылка;
			СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_ЗапросИерархииВложенностиУпаковок;
			
			ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
			ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
			
			Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
			ПередачаДанных[ИмяПакета] = Уведомление;
			
			Уведомление.action_id = Уведомление.action_id;
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id", Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "sscc"      , ТекущаяСтрока.НомерУпаковки, СообщениеКПередаче);
			
			ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
			
			ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
			
			СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
			СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
			СообщениеКПередаче.Основание      = Шапка.Основание;
			СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
			СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
			
			Сообщения.Добавить(СообщениеКПередаче);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Сообщения;
	
КонецФункции

Функция ОпределитьУведомлениеОПриемке(ДанныеДокумента)
	
	ДокументСсылка = ПолучитьСсылку();
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка);
	
КонецФункции

Функция ОпределитьУведомленияОПриемкеПоПодтверждению(ДанныеДокумента)
	
	ДатаОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
	ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "counterparty_id");
	ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	СхемаАкцептования = Новый Массив;
	СхемаАкцептования.Добавить(Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок);
	СхемаАкцептования.Добавить(Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок);
	Возврат ОпределитьДокументыПриемки(ДатаОперации, ИдентификаторОрганизации, ИдентификаторКонтрагента, НомераПотребительскихУпаковок, НомераТранспортныхУпаковок, СхемаАкцептования);
	
КонецФункции

Функция ОпределитьУведомленияОПриемкеПоОтзываемымТоварам(ДанныеДокумента)
	
	ДатаОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
	ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "receiver_id");
	ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	СхемаАкцептования = Новый Массив;
	СхемаАкцептования.Добавить(Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок);
	СхемаАкцептования.Добавить(Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок);
	Возврат ОпределитьДокументыПриемки(ДатаОперации, ИдентификаторОрганизации, ИдентификаторКонтрагента, НомераПотребительскихУпаковок, НомераТранспортныхУпаковок, СхемаАкцептования);
	
КонецФункции

Функция ОпределитьУведомленияОПриемкеПоПостановкеСнятииАрбитража(ДанныеДокумента)
	
	ДатаОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
	ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "counterparty_id");
	ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	СхемаАкцептования = Новый Массив;
	СхемаАкцептования.Добавить(Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок);
	СхемаАкцептования.Добавить(Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок);
	Возврат ОпределитьДокументыПриемки(ДатаОперации, ИдентификаторОрганизации, ИдентификаторКонтрагента, НомераПотребительскихУпаковок, НомераТранспортныхУпаковок, СхемаАкцептования);
	
КонецФункции

Функция ОпределитьУведомленияОПриемкеПоОтказуОтПостановкиСнятияАрбитража(ДанныеДокумента)
	
	ДатаОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
	ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "shipper_id");
	ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	СхемаАкцептования = Новый Массив;
	СхемаАкцептования.Добавить(Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок);
	СхемаАкцептования.Добавить(Перечисления.СхемыАкцептованияМДЛП.ОбратныйПорядок);
	Возврат ОпределитьДокументыПриемки(ДатаОперации, ИдентификаторОрганизации, ИдентификаторКонтрагента, НомераПотребительскихУпаковок, НомераТранспортныхУпаковок, СхемаАкцептования);
	
КонецФункции

Функция ОпределитьДокументыПриемки(ДатаОперации, ИдентификаторОрганизации, ИдентификаторКонтрагента, НомераПотребительскихУпаковок, НомераТранспортныхУпаковок, СхемаАкцептования)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка  КАК Документ,
	|	Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.НомераУпаковок КАК Упаковки
	|ГДЕ
	|	Упаковки.НомерКиЗ В (&НомераПотребительскихУпаковок)
	|	И НЕ (Упаковки.СостояниеПодтверждения В (&КонечныеСостояния) И Упаковки.Арбитраж = &АрбитражНеУстановлен)
	|	И ВЫБОР
	|		КОГДА Ссылка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|			ТОГДА Ссылка.МестоДеятельности.Идентификатор
	|		ИНАЧЕ Ссылка.ИдентификаторОрганизации
	|	КОНЕЦ = &ИдентификаторОрганизации
	|	И ВЫБОР
	|		КОГДА Ссылка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|				И Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииПриемкиМДЛП.ИмпортЕАЭС)
	|			ТОГДА Ссылка.Грузоотправитель.РегистрационныйНомерУчастника
	|		КОГДА Ссылка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|			ТОГДА Ссылка.МестоДеятельностиГрузоотправителя.Идентификатор
	|		КОГДА Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииПриемкиМДЛП.ИмпортЕАЭС)
	|			Тогда Ссылка.ИдентификаторОрганизацииКонтрагента
	|		ИНАЧЕ Ссылка.ИдентификаторКонтрагента
	|	КОНЕЦ = &ИдентификаторКонтрагента
	|	И Ссылка.СхемаАкцептования В (&СхемаАкцептования)
	|	И НЕ Ссылка.ПометкаУдаления
	|	И Ссылка.Дата <= &ДатаОперации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Ссылка  КАК Документ,
	|	Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП.ТранспортныеУпаковки КАК Упаковки
	|ГДЕ
	|	Упаковки.НомерУпаковки В (&НомераТранспортныхУпаковок)
	|	И НЕ (Упаковки.СостояниеПодтверждения В (&КонечныеСостояния) И Упаковки.Арбитраж = &АрбитражНеУстановлен)
	|	И ВЫБОР
	|		КОГДА Ссылка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|			ТОГДА Ссылка.МестоДеятельности.Идентификатор
	|		ИНАЧЕ Ссылка.ИдентификаторОрганизации
	|	КОНЕЦ = &ИдентификаторОрганизации
	|	И ВЫБОР
	|		КОГДА Ссылка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|				И Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииПриемкиМДЛП.ИмпортЕАЭС)
	|			ТОГДА Ссылка.Грузоотправитель.РегистрационныйНомерУчастника
	|		КОГДА Ссылка.СхемаАкцептования = ЗНАЧЕНИЕ(Перечисление.СхемыАкцептованияМДЛП.ОбратныйПорядок)
	|			ТОГДА Ссылка.МестоДеятельностиГрузоотправителя.Идентификатор
	|		КОГДА Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииПриемкиМДЛП.ИмпортЕАЭС)
	|			Тогда Ссылка.ИдентификаторОрганизацииКонтрагента
	|		ИНАЧЕ Ссылка.ИдентификаторКонтрагента
	|	КОНЕЦ = &ИдентификаторКонтрагента
	|	И Ссылка.СхемаАкцептования В (&СхемаАкцептования)
	|	И НЕ Ссылка.ПометкаУдаления
	|	И Ссылка.Дата <= &ДатаОперации
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка.Дата УБЫВ,
	|	Ссылка УБЫВ
	|");
	
	КонечныеСостояния = Новый Массив;
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПокупателем);
	КонечныеСостояния.Добавить(Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком);
	
	Запрос.УстановитьПараметр("КонечныеСостояния"            , КонечныеСостояния);
	Запрос.УстановитьПараметр("НомераПотребительскихУпаковок", НомераПотребительскихУпаковок);
	Запрос.УстановитьПараметр("НомераТранспортныхУпаковок"   , НомераТранспортныхУпаковок);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации"     , ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента"     , ИдентификаторКонтрагента);
	Запрос.УстановитьПараметр("СхемаАкцептования"            , СхемаАкцептования);
	Запрос.УстановитьПараметр("ДатаОперации"                 , ДатаОперации);
	Запрос.УстановитьПараметр("АрбитражНеУстановлен"         , Перечисления.СостоянияАрбитражаМДЛП.ПустаяСсылка());
	
	ДокументыСУпаковками = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
	Возврат ДокументыСУпаковками;
	
КонецФункции

Процедура ЗагрузитьУведомлениеОбОтгрузкеСоСкладаПродавца(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если Документ = Неопределено Тогда
		
		ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "receiver_id");
		ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
		НомерДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_num");
		ДатаДокумента = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_date"));
		НомерТипаОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "turnover_type", 1);
		ИндексТипаОперации = ?(ЗначениеЗаполнено(НомерТипаОперации), НомерТипаОперации - 1, 0);
		Операция = Перечисления.ОперацииПриемкиМДЛП.Получить(ИндексТипаОперации); // Индекс типа опреации определяет саму операцию (Поступление или ВозвратОтПокупателя).
		ТипОперации = Перечисления.ТипыОперацийОтгрузкиМДЛП.Получить(ИндексТипаОперации);
		ТипДоговора = Перечисления.ТипыДоговоровМДЛП.Получить(
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "contract_type", 1) - 1);
		НомерКонтракта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "contract_num");
		ИсточникФинансирования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "source");
		Если ИсточникФинансирования <> Неопределено Тогда
			ИсточникФинансирования = Перечисления.ИсточникиФинансированияМДЛП.Получить(ИсточникФинансирования - 1);
		КонецЕсли;
		НомерГосударственногоКонтракта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "contract_gos_num");
		ДатаГосударственногоКонтракта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "contract_gos_date");
		Если ЗначениеЗаполнено(ДатаГосударственногоКонтракта) Тогда
			ДатаГосударственногоКонтракта = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДатаГосударственногоКонтракта);
		КонецЕсли;
		
		Документ = СоздатьДокумент();
		Документ.УстановитьСсылкуНового(ДокументСсылка);
		Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
		Документ.ИдентификаторОрганизации = ИдентификаторОрганизации;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация, Документ.МестоДеятельности);
		Документ.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторКонтрагента, Документ.Грузоотправитель, Документ.МестоДеятельностиГрузоотправителя);
		Документ.СхемаАкцептования        = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок;
		Документ.НомерДокумента           = НомерДокумента;
		Документ.ДатаДокумента            = ДатаДокумента;
		Документ.Операция                 = Операция;
		Документ.ТипОперации              = ТипОперации;
		Документ.ИсточникФинансирования   = ИсточникФинансирования;
		Документ.ТипДоговора              = ТипДоговора;
		Документ.НомерКонтракта           = НомерКонтракта;
		Документ.НомерГосударственногоКонтракта = НомерГосударственногоКонтракта;
		Документ.ДатаГосударственногоКонтракта  = ДатаГосударственногоКонтракта;
		
		Документ.ИдентификаторОрганизацииКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "ИдентификаторОрганизацииОтправителя");
		
	Иначе
		Документ.Заблокировать();
	КонецЕсли;
	
	Для Каждого Товар Из ДанныеДокумента.order_details.union Цикл
		
		Если Товар.sgtin <> Неопределено Тогда
			
			GTIN = Лев(Товар.sgtin, 14);
			Цена = Товар.cost;
			НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN, Цена, НомерСерии", GTIN, Цена, ""));
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаТовара = Документ.Товары.Добавить();
				СтрокаТовара.GTIN = GTIN;
				СтрокаТовара.Цена = Цена;
				СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			Иначе
				СтрокаТовара = НайденныеСтроки[0];
			КонецЕсли;
			
			СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
			СтрокаТовара.СуммаНДС   = СтрокаТовара.СуммаНДС + ?(Товар.vat_value = Неопределено, 0, Товар.vat_value);
			СтрокаТовара.Сумма      = СтрокаТовара.Сумма + СтрокаТовара.Цена;
			
			СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
			СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
			СтрокаУпаковки.НомерКИЗ = Товар.sgtin;
			СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Товар, "sscc_detail") И Товар.sscc_detail <> Неопределено Тогда
			
			СтрокаУпаковки = Документ.ТранспортныеУпаковки.Добавить();
			СтрокаУпаковки.НомерУпаковки = Товар.sscc_detail.sscc;
			СтрокаУпаковки.Цена          = Товар.cost;
			СтрокаУпаковки.СуммаНДС      = Товар.vat_value;
			СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
			СтрокаУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			
			Для Каждого СоставУпаковки Из Товар.sscc_detail.detail Цикл
				СтрокаСостава = Документ.СоставТранспортныхУпаковок.Добавить();
				СтрокаСостава.ИдентификаторСтроки = СтрокаУпаковки.ИдентификаторСтроки;
				СтрокаСостава.GTIN       = СоставУпаковки.GTIN;
				СтрокаСостава.НомерСерии = СоставУпаковки.series_number;
				СтрокаСостава.Цена       = СоставУпаковки.cost;
				СтрокаСостава.СуммаНДС   = СоставУпаковки.vat_value;
			КонецЦикла;
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Товар, "sscc") И Товар.sscc <> Неопределено Тогда
			
			СтрокаУпаковки = Документ.ТранспортныеУпаковки.Добавить();
			СтрокаУпаковки.НомерУпаковки = Товар.sscc;
			СтрокаУпаковки.Цена          = Товар.cost;
			СтрокаУпаковки.СуммаНДС      = Товар.vat_value;
			СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
			СтрокаУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОбОтгрузке(Документ);
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОВозвратеПриостановленныхЛП(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если Документ = Неопределено Тогда
		
		ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "receiver_id");
		ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
		Операция = Перечисления.ОперацииПриемкиМДЛП.ВозвратПриостановленныхЛП;
		
		Документ = СоздатьДокумент();
		Документ.УстановитьСсылкуНового(ДокументСсылка);
		Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
		Документ.ИдентификаторОрганизации = ИдентификаторОрганизации;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация, Документ.МестоДеятельности);
		Документ.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторКонтрагента, Документ.Грузоотправитель, Документ.МестоДеятельностиГрузоотправителя);
		Документ.СхемаАкцептования        = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок;
		Документ.Операция                 = Операция;
		
		Документ.ИдентификаторОрганизацииКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "ИдентификаторОрганизацииОтправителя");
		
	Иначе
		Документ.Заблокировать();
	КонецЕсли;
	
	Для Каждого sgtin Из ДанныеДокумента.order_details.sgtin Цикл
		
		GTIN = Лев(sgtin, 14);
		НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN, НомерСерии", GTIN, ""));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовара = Документ.Товары.Добавить();
			СтрокаТовара.GTIN = GTIN;
			СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		Иначе
			СтрокаТовара = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
		
		СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
		СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
		СтрокаУпаковки.НомерКИЗ = sgtin;
		СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
		
	КонецЦикла;
	
	Для Каждого sscc Из ДанныеДокумента.order_details.sscc Цикл
		
		СтрокаУпаковки = Документ.ТранспортныеУпаковки.Добавить();
		СтрокаУпаковки.НомерУпаковки = sscc;
		СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
		СтрокаУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОбОтгрузке(Документ);
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОПередачеЛПСобственнику(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если Документ = Неопределено Тогда
		
		ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "owner_id");
		ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
		НомерДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_num");
		ДатаДокумента = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_date"));
		Операция = Перечисления.ОперацииПриемкиМДЛП.ПередачаСобственнику;
		
		Документ = СоздатьДокумент();
		Документ.УстановитьСсылкуНового(ДокументСсылка);
		Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
		Документ.ИдентификаторОрганизации = ИдентификаторОрганизации;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация, Документ.МестоДеятельности);
		Документ.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторКонтрагента, Документ.Грузоотправитель, Документ.МестоДеятельностиГрузоотправителя);
		Документ.СхемаАкцептования        = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок;
		Документ.НомерДокумента           = НомерДокумента;
		Документ.ДатаДокумента            = ДатаДокумента;
		Документ.Операция                 = Операция;
		
	Иначе
		Документ.Заблокировать();
	КонецЕсли;
	
	Для Каждого sgtin Из ДанныеДокумента.order_details.sgtin Цикл
		
		GTIN = Лев(sgtin, 14);
		НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN, НомерСерии", GTIN, ""));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовара = Документ.Товары.Добавить();
			СтрокаТовара.GTIN = GTIN;
			СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		Иначе
			СтрокаТовара = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
		
		СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
		СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
		СтрокаУпаковки.НомерКИЗ = sgtin;
		СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
		
	КонецЦикла;
	
	Для Каждого sscc Из ДанныеДокумента.order_details.sscc Цикл
		
		СтрокаУпаковки = Документ.ТранспортныеУпаковки.Добавить();
		СтрокаУпаковки.НомерУпаковки = sscc;
		СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
		СтрокаУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОбОтгрузке(Документ);
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОбОтгрузкеВРамкахАгентскогоДоговора(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если Документ = Неопределено Тогда
		
		ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "receiver_id");
		ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
		НомерДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_num");
		ДатаДокумента = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_date"));
		Операция = Перечисления.ОперацииПриемкиМДЛП.ПоступлениеВРамкахАгентскогоДоговора;
		НомерТипаОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "turnover_type", 1);
		ИндексТипаОперации = ?(ЗначениеЗаполнено(НомерТипаОперации), НомерТипаОперации - 1, 0);
		ТипОперации = Перечисления.ТипыОперацийОтгрузкиМДЛП.Получить(ИндексТипаОперации);
		
		Документ = СоздатьДокумент();
		Документ.УстановитьСсылкуНового(ДокументСсылка);
		Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
		Документ.ИдентификаторОрганизации = ИдентификаторОрганизации;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация, Документ.МестоДеятельности);
		Документ.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторКонтрагента, Документ.Грузоотправитель, Документ.МестоДеятельностиГрузоотправителя);
		Документ.СхемаАкцептования        = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок;
		Документ.НомерДокумента           = НомерДокумента;
		Документ.ДатаДокумента            = ДатаДокумента;
		Документ.Операция                 = Операция;
		Документ.ТипОперации              = ТипОперации;
		
	Иначе
		Документ.Заблокировать();
	КонецЕсли;
	
	Для Каждого sgtin Из ДанныеДокумента.order_details.sgtin Цикл
		
		GTIN = Лев(sgtin, 14);
		НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN, НомерСерии", GTIN, ""));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовара = Документ.Товары.Добавить();
			СтрокаТовара.GTIN = GTIN;
			СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		Иначе
			СтрокаТовара = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
		
		СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
		СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
		СтрокаУпаковки.НомерКИЗ = sgtin;
		СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
		
	КонецЦикла;
	
	Для Каждого sscc Из ДанныеДокумента.order_details.sscc Цикл
		
		СтрокаУпаковки = Документ.ТранспортныеУпаковки.Добавить();
		СтрокаУпаковки.НомерУпаковки = sscc;
		СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
		СтрокаУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОбОтгрузке(Документ);
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОбОтгрузкеВРамкахГЛО(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если Документ = Неопределено Тогда
		
		ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "receiver_id");
		ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
		НомерДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_num");
		ДатаДокумента = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_date"));
		Операция = Перечисления.ОперацииПриемкиМДЛП.ПередачаСобственникуВРамкахГЛО;
		
		Документ = СоздатьДокумент();
		Документ.УстановитьСсылкуНового(ДокументСсылка);
		Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
		Документ.ИдентификаторОрганизации = ИдентификаторОрганизации;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация, Документ.МестоДеятельности);
		Документ.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторКонтрагента, Документ.Грузоотправитель, Документ.МестоДеятельностиГрузоотправителя);
		Документ.СхемаАкцептования        = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок;
		Документ.НомерДокумента           = НомерДокумента;
		Документ.ДатаДокумента            = ДатаДокумента;
		Документ.Операция                 = Операция;
		
	Иначе
		Документ.Заблокировать();
	КонецЕсли;
	
	Для Каждого sgtin Из ДанныеДокумента.order_details.sgtin Цикл
		
		GTIN = Лев(sgtin, 14);
		НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN, НомерСерии", GTIN, ""));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовара = Документ.Товары.Добавить();
			СтрокаТовара.GTIN = GTIN;
			СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		Иначе
			СтрокаТовара = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
		
		СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
		СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
		СтрокаУпаковки.НомерКИЗ = sgtin;
		СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
		
	КонецЦикла;
	
	Для Каждого sscc Из ДанныеДокумента.order_details.sscc Цикл
		
		СтрокаУпаковки = Документ.ТранспортныеУпаковки.Добавить();
		СтрокаУпаковки.НомерУпаковки = sscc;
		СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
		СтрокаУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОбОтгрузке(Документ);
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОбОтгрузкеЛПДляВыпускаГотовойПродукции(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если Документ = Неопределено Тогда
		
		ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "owner_id");
		ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
		НомерДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_num");
		ДатаДокумента = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_date"));
		Операция = Перечисления.ОперацииПриемкиМДЛП.ПередачаСобственникуДляВыпуска;
		
		Документ = СоздатьДокумент();
		Документ.УстановитьСсылкуНового(ДокументСсылка);
		Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
		Документ.ИдентификаторОрганизации = ИдентификаторОрганизации;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация, Документ.МестоДеятельности);
		Документ.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторКонтрагента, Документ.Грузоотправитель, Документ.МестоДеятельностиГрузоотправителя);
		Документ.СхемаАкцептования        = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок;
		Документ.НомерДокумента           = НомерДокумента;
		Документ.ДатаДокумента            = ДатаДокумента;
		Документ.Операция                 = Операция;
		
	Иначе
		Документ.Заблокировать();
	КонецЕсли;
	
	Для Каждого sgtin Из ДанныеДокумента.order_details.sgtin Цикл
		
		GTIN = Лев(sgtin, 14);
		НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN, НомерСерии", GTIN, ""));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовара = Документ.Товары.Добавить();
			СтрокаТовара.GTIN = GTIN;
			СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		Иначе
			СтрокаТовара = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
		
		СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
		СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
		СтрокаУпаковки.НомерКИЗ = sgtin;
		СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
		
	КонецЦикла;
	
	Для Каждого sscc Из ДанныеДокумента.order_details.sscc Цикл
		
		СтрокаУпаковки = Документ.ТранспортныеУпаковки.Добавить();
		СтрокаУпаковки.НомерУпаковки = sscc;
		СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
		СтрокаУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОбОтгрузке(Документ);
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОбОтгрузкеВРФизЕАЭС(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если Документ = Неопределено Тогда
		
		ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "receiver_id");
		ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
		
		ИдентификаторПродавца = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "seller_id");
		
		НомерДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_num");
		ДатаДокумента = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "doc_date"));
		ТипДоговора = Перечисления.ТипыДоговоровМДЛП.Получить(
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "contract_type", 1) - 1);
		Операция = Перечисления.ОперацииПриемкиМДЛП.ИмпортЕАЭС;
		
		Документ = СоздатьДокумент();
		Документ.УстановитьСсылкуНового(ДокументСсылка);
		Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
		Документ.ИдентификаторОрганизации = ИдентификаторОрганизации;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация, Документ.МестоДеятельности);
		Документ.ИдентификаторОрганизацииКонтрагента = ИдентификаторКонтрагента;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторКонтрагента, Документ.Грузоотправитель);
		Документ.СхемаАкцептования        = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок;
		Документ.НомерДокумента           = НомерДокумента;
		Документ.ДатаДокумента            = ДатаДокумента;
		Документ.ТипДоговора              = ТипДоговора;
		Документ.Операция                 = Операция;
		
	Иначе
		Документ.Заблокировать();
	КонецЕсли;
	
	Для Каждого Товар Из ДанныеДокумента.order_details.union Цикл
		
		Если Товар.sgtin <> Неопределено Тогда
			
			GTIN = Лев(Товар.sgtin, 14);
			Цена = Товар.cost;
			НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN, Цена, НомерСерии", GTIN, Цена, ""));
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаТовара = Документ.Товары.Добавить();
				СтрокаТовара.GTIN = GTIN;
				СтрокаТовара.Цена = Цена;
				СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			Иначе
				СтрокаТовара = НайденныеСтроки[0];
			КонецЕсли;
			
			СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
			СтрокаТовара.СуммаНДС   = СтрокаТовара.СуммаНДС + ?(Товар.vat_value = Неопределено, 0, Товар.vat_value);
			СтрокаТовара.Сумма      = СтрокаТовара.Сумма + СтрокаТовара.Цена;
			
			СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
			СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
			СтрокаУпаковки.НомерКИЗ = Товар.sgtin;
			СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Товар, "sscc_detail") И Товар.sscc_detail <> Неопределено Тогда
			
			СтрокаУпаковки = Документ.ТранспортныеУпаковки.Добавить();
			СтрокаУпаковки.НомерУпаковки = Товар.sscc_detail.sscc;
			СтрокаУпаковки.Цена          = Товар.cost;
			СтрокаУпаковки.СуммаНДС      = Товар.vat_value;
			СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
			СтрокаУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			
			Для Каждого СоставУпаковки Из Товар.sscc_detail.detail Цикл
				СтрокаСостава = Документ.СоставТранспортныхУпаковок.Добавить();
				СтрокаСостава.ИдентификаторСтроки = СтрокаУпаковки.ИдентификаторСтроки;
				СтрокаСостава.GTIN       = СоставУпаковки.GTIN;
				СтрокаСостава.НомерСерии = СоставУпаковки.series_number;
				СтрокаСостава.Цена       = СоставУпаковки.cost;
				СтрокаСостава.СуммаНДС   = СоставУпаковки.vat_value;
			КонецЦикла;
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Товар, "sscc") И Товар.sscc <> Неопределено Тогда
			
			СтрокаУпаковки = Документ.ТранспортныеУпаковки.Добавить();
			СтрокаУпаковки.НомерУпаковки = Товар.sscc;
			СтрокаУпаковки.Цена          = Товар.cost;
			СтрокаУпаковки.СуммаНДС      = Товар.vat_value;
			СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
			СтрокаУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОбОтгрузке(Документ);
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОВозвратеКонтрактномуПроизводителю(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если Документ = Неопределено Тогда
		
		ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "receiver_id");
		ИдентификаторКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
		Операция = Перечисления.ОперацииПриемкиМДЛП.ВозвратКонтрактномуПроизводителю;
		
		Документ = СоздатьДокумент();
		Документ.УстановитьСсылкуНового(ДокументСсылка);
		Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
		Документ.ИдентификаторОрганизации = ИдентификаторОрганизации;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация, Документ.МестоДеятельности);
		Документ.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторКонтрагента, Документ.Грузоотправитель, Документ.МестоДеятельностиГрузоотправителя);
		Документ.СхемаАкцептования        = Перечисления.СхемыАкцептованияМДЛП.ПрямойПорядок;
		Документ.Операция                 = Операция;
		
		Документ.ИдентификаторОрганизацииКонтрагента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "ИдентификаторОрганизацииОтправителя");
		
	Иначе
		Документ.Заблокировать();
	КонецЕсли;
	
	Для Каждого sgtin Из ДанныеДокумента.order_details.sgtin Цикл
		
		GTIN = Лев(sgtin, 14);
		НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN, НомерСерии", GTIN, ""));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовара = Документ.Товары.Добавить();
			СтрокаТовара.GTIN = GTIN;
			СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		Иначе
			СтрокаТовара = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
		
		СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
		СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
		СтрокаУпаковки.НомерКИЗ = sgtin;
		СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
		
	КонецЦикла;
	
	Для Каждого sscc Из ДанныеДокумента.order_details.sscc Цикл
		
		СтрокаУпаковки = Документ.ТранспортныеУпаковки.Добавить();
		СтрокаУпаковки.НомерУпаковки = sscc;
		СтрокаУпаковки.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
		СтрокаУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОбОтгрузке(Документ);
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОПодтверждении(ДанныеДокумента, ДокументСсылка)
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Документ.Заблокировать();
	
	Для Каждого НомерУпаковки Из НомераПотребительскихУпаковок Цикл
		Строка = Документ.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
		Если Строка <> Неопределено Тогда
			
			// Снятие арбитража было подтверждено ранее. Сейчас загружается подтверждение отгрузки товаров. Нужно очистить Арбитраж.
			Если (Строка.Арбитраж = Перечисления.СостоянияАрбитражаМДЛП.СнятПередача Или Строка.Арбитраж = Перечисления.СостоянияАрбитражаМДЛП.СнятПолучение)
			   И Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено Тогда
				Строка.Арбитраж = Перечисления.СостоянияАрбитражаМДЛП.ПустаяСсылка();
			КонецЕсли;
			
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НомерУпаковки Из НомераТранспортныхУпаковок Цикл
		Строка = Документ.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
		Если Строка <> Неопределено Тогда
			
			// Снятие арбитража было подтверждено ранее. Сейчас загружается подтверждение отгрузки товаров. Нужно очистить Арбитраж.
			Если (Строка.Арбитраж = Перечисления.СостоянияАрбитражаМДЛП.СнятПередача Или Строка.Арбитраж = Перечисления.СостоянияАрбитражаМДЛП.СнятПолучение)
			   И Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено Тогда
				Строка.Арбитраж = Перечисления.СостоянияАрбитражаМДЛП.ПустаяСсылка();
			КонецЕсли;
			
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
			
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОбОтзывеПриемки(ДанныеДокумента, ДокументСсылка)
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Документ.Заблокировать();
	
	Для Каждого НомерУпаковки Из НомераПотребительскихУпаковок Цикл
		Строка = Документ.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НомерУпаковки Из НомераТранспортныхУпаковок Цикл
		Строка = Документ.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтозваноПоставщиком;
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОПостановкеСнятииАрбитража(ДанныеДокумента, ДокументСсылка)
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	// На этапе загрузки уведомления (схема 621) постановка в арбитраж/снятие арбитража не может быть подтверждена.
	// Подтверждения устанавливаются в момент загрузки квитанции к схеме 701 (для подтверждающего постановку в арбитраж/снятие арбитража),
	// или при загрузке уведомления по схеме 607 (для инициатора постановки в арбитраж/снятия арбитража).
	ПризнакПостановкиСнятияАрбитража = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "sign_arbitration");
	Если ПризнакПостановкиСнятияАрбитража = 1 Тогда
		Арбитраж = Перечисления.СостоянияАрбитражаМДЛП.УстановленПолучение;
	ИначеЕсли ПризнакПостановкиСнятияАрбитража = 2 Тогда
		Арбитраж = Перечисления.СостоянияАрбитражаМДЛП.СнятПолучение;
	КонецЕсли;
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Документ.Заблокировать();
	
	Для Каждого НомерУпаковки Из НомераПотребительскихУпаковок Цикл
		Строка = Документ.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
			Строка.Арбитраж = Арбитраж;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НомерУпаковки Из НомераТранспортныхУпаковок Цикл
		Строка = Документ.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.Подтвердить;
			Строка.Арбитраж = Арбитраж;
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОбОтказеОтПостановкиСнятияАрбитража(ДанныеДокумента, ДокументСсылка)
	
	НомераПотребительскихУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sgtin", Новый Массив);
	НомераТранспортныхУпаковок    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.order_details, "sscc" , Новый Массив);
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Документ.Заблокировать();
	
	Для Каждого НомерУпаковки Из НомераПотребительскихУпаковок Цикл
		Строка = Документ.НомераУпаковок.Найти(НомерУпаковки, "НомерКиЗ");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПоставщиком;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НомерУпаковки Из НомераТранспортныхУпаковок Цикл
		Строка = Документ.ТранспортныеУпаковки.Найти(НомерУпаковки, "НомерУпаковки");
		Если Строка <> Неопределено Тогда
			Строка.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоПоставщиком;
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьИнформациюОКиЗ(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Документ.Заблокировать();
	
	СтрокаУпаковки = Документ.НомераУпаковок.Найти(ДанныеДокумента.sgtin, "НомерКиЗ");
	Если СтрокаУпаковки <> Неопределено Тогда
		СтрокаУпаковки.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
		Если ДанныеДокумента.ЕстьИнформация Тогда
			
			ДанныеУпаковки = ДанныеДокумента.ДанныеУпаковки;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеУпаковки, "info_sgtin") Тогда
				ДанныеУпаковки = ДанныеУпаковки.info_sgtin;
			КонецЕсли;
			СтрокаУпаковки.Статус = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеУпаковки, "status");
			
			СтрокаТовараСтарая = Документ.Товары.Найти(СтрокаУпаковки.ИдентификаторСтроки, "ИдентификаторСтроки");
			Если СтрокаТовараСтарая <> Неопределено Тогда
				
				ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
				ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок = Истина;
				ПараметрыЗаполнения.ПересчитатьСумму = Истина;
				
				Если СтрокаТовараСтарая.Количество > 1 Тогда
					СуммаНДС = Окр(СтрокаТовараСтарая.СуммаНДС / СтрокаТовараСтарая.Количество, 2);
				Иначе
					СуммаНДС = СтрокаТовараСтарая.СуммаНДС;
				КонецЕсли;
				
				Отбор = Новый Структура;
				Отбор.Вставить("GTIN"      , ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеУпаковки, "GTIN"));
				Отбор.Вставить("НомерСерии", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеУпаковки, "series_number"));
				Отбор.Вставить("ГоденДо"   , СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеУпаковки, "expiration_date")));
				Отбор.Вставить("Цена"      , СтрокаТовараСтарая.Цена);
				
				НайденныеСтроки = Документ.Товары.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					Если НайденныеСтроки.Найти(СтрокаТовараСтарая) = Неопределено Тогда
					
						СтрокаТовараСтарая.Количество = СтрокаТовараСтарая.Количество - 1;
						СтрокаТовараСтарая.СуммаНДС = СтрокаТовараСтарая.СуммаНДС - СуммаНДС;
						Если СтрокаТовараСтарая.Количество = 0 Тогда
							Документ.Товары.Удалить(СтрокаТовараСтарая);
						Иначе
							ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, СтрокаТовараСтарая, ПараметрыЗаполнения);
						КонецЕсли;
						
						НоваяСтрокаТовара = НайденныеСтроки[0];
						СтрокаУпаковки.ИдентификаторСтроки = НоваяСтрокаТовара.ИдентификаторСтроки;
						НоваяСтрокаТовара.Количество = НоваяСтрокаТовара.Количество + 1;
						НоваяСтрокаТовара.СуммаНДС = НоваяСтрокаТовара.СуммаНДС + СуммаНДС;
						ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, НоваяСтрокаТовара, ПараметрыЗаполнения);
						
					КонецЕсли;
					
				Иначе
					
					ОтборПоИдентификатору = Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки);
					НайденныеСтроки = Документ.НомераУпаковок.НайтиСтроки(ОтборПоИдентификатору);
					Если НайденныеСтроки.Количество() > 1 Тогда
						СтрокаТовараСтарая.Количество = СтрокаТовараСтарая.Количество - 1;
						СтрокаТовараСтарая.СуммаНДС = СтрокаТовараСтарая.СуммаНДС - СуммаНДС;
						ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, СтрокаТовараСтарая, ПараметрыЗаполнения);
						
						НоваяСтрокаТовара = Документ.Товары.Вставить(СтрокаТовараСтарая.НомерСтроки);
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТовара, СтрокаТовараСтарая,, "Серия, Количество, КоличествоУпаковок, ИдентификаторСтроки");
						НоваяСтрокаТовара.Количество = 1;
						НоваяСтрокаТовара.СуммаНДС = СуммаНДС;
						НоваяСтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
						СтрокаУпаковки.ИдентификаторСтроки = НоваяСтрокаТовара.ИдентификаторСтроки;
						
						ИнтеграцияМДЛППереопределяемый.ПриИзмененииКоличества(Документ, НоваяСтрокаТовара, ПараметрыЗаполнения);
					Иначе
						НоваяСтрокаТовара = СтрокаТовараСтарая;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовара, Отбор);
					НоваяСтрокаТовара.КодТНВЭД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеУпаковки, "tnved_code");
					
					
					Параметры = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
					Параметры.ОбработатьУпаковки = Ложь;
					Параметры.ПроверитьСериюРассчитатьСтатус = Истина;
					Параметры.ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(Документ, ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументСсылка));
					ИнтеграцияМДЛППереопределяемый.ПриИзмененииПараметровНоменклатуры(Документ, НоваяСтрокаТовара, Параметры);
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаУпаковки.Статус = ДанныеДокумента.Статус;
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьСоставУпаковки(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Документ.Заблокировать();
	
	СтрокаУпаковки = Документ.ТранспортныеУпаковки.Найти(ДанныеДокумента.sscc, "НомерУпаковки");
	Если СтрокаУпаковки <> Неопределено Тогда
		СтрокаУпаковки.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
		СтрокаУпаковки.Статус = ДанныеДокумента.Статус;
		
		ТекущийСостав = Документ.СоставТранспортныхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
		Для Каждого СтрокаСостава Из ТекущийСостав Цикл
			СтрокаСостава.Количество = 0;
			УпаковкиВСоставе = Документ.НомераУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтрокиУпаковки));
			Для Каждого УдаляемаяСтрока Из УпаковкиВСоставе Цикл
				Документ.НомераУпаковок.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЦикла;
		ГрупповыеУпаковкиВСоставе = Документ.ИерархияГрупповыхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
		Для Каждого УдаляемаяСтрока Из ГрупповыеУпаковкиВСоставе Цикл
			Документ.ИерархияГрупповыхУпаковок.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		Если ДанныеДокумента.ЕстьИнформация Тогда
			
			ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
			ПараметрыЗаполнения.ОбработатьУпаковки = Ложь;
			ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
			ПараметрыЗаполнения.ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(Документ, ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументСсылка));
			
			Состав = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента.ДанныеУпаковки, "tree", Новый Массив);
			Для Каждого ЭлементСостава Из Состав Цикл
				ИнформацияОКиЗ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЭлементСостава, "sgtin");
				Если ИнформацияОКиЗ <> Неопределено Тогда
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИнформацияОКиЗ, "info_sgtin") Тогда
						ИнформацияОКиЗ = ИнформацияОКиЗ.info_sgtin;
					КонецЕсли;
					
					НомерКиЗ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "sgtin");
					Отбор = Новый Структура;
					Отбор.Вставить("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки);
					Отбор.Вставить("GTIN"      , ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "GTIN"));
					Отбор.Вставить("НомерСерии", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "series_number"));
					
					ИзменилисьДанныеВСтроке = Ложь;
					
					НайденныеСтроки = Документ.СоставТранспортныхУпаковок.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() > 0 Тогда
						СтрокаТовара = НайденныеСтроки[0];
					Иначе
						СтрокаТовара = Документ.СоставТранспортныхУпаковок.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТовара, Отбор);
						ЗаполнитьЗначенияСвойств(СтрокаТовара, СтрокаУпаковки, "Цена, СуммаНДС");
						ИзменилисьДанныеВСтроке = Истина;
					КонецЕсли;
					
					Если ПустаяСтрока(СтрокаТовара.ИдентификаторСтрокиУпаковки) Тогда
						СтрокаТовара.ИдентификаторСтрокиУпаковки = Строка(Новый УникальныйИдентификатор);
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СтрокаТовара.ГоденДо) Тогда
						СтрокаТовара.ГоденДо = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "expiration_date"));
						ИзменилисьДанныеВСтроке = Истина;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СтрокаТовара.КодТНВЭД) Тогда
						СтрокаТовара.КодТНВЭД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "tnved_code");
					КонецЕсли;
					
					СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
					
					Если ИзменилисьДанныеВСтроке Тогда
						ИнтеграцияМДЛППереопределяемый.ПриИзмененииПараметровНоменклатуры(Документ, СтрокаТовара, ПараметрыЗаполнения);
					КонецЕсли;
					
					НоваяСтрока = Документ.НомераУпаковок.Добавить();
					НоваяСтрока.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтрокиУпаковки;
					НоваяСтрока.НомерКИЗ = НомерКиЗ;
					НоваяСтрока.Статус    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "status");
					НоваяСтрока.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
					НоваяСтрока.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.НеТребуется;
					
				Иначе
					НоваяСтрока = Документ.ИерархияГрупповыхУпаковок.Добавить();
					НоваяСтрока.НомерУпаковки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЭлементСостава, "sscc");
					НоваяСтрока.ИдентификаторСтроки = СтрокаУпаковки.ИдентификаторСтроки;
				КонецЕсли;
				НоваяСтрока.НомерРодительскойУпаковки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЭлементСостава, "parent_sscc");
			КонецЦикла;
			
			ТекущийСостав = Документ.СоставТранспортныхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
			Для Каждого СтрокаСостава Из ТекущийСостав Цикл
				СтрокаСостава.Сумма = СтрокаСостава.Цена * СтрокаСостава.Количество;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьИерархиюВложенностиУпаковок(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Документ.Заблокировать();
	
	СтрокаУпаковки = Документ.ТранспортныеУпаковки.Найти(ДанныеДокумента.sscc, "НомерУпаковки");
	Если СтрокаУпаковки <> Неопределено Тогда
		СтрокаУпаковки.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
		СтрокаУпаковки.Статус = ДанныеДокумента.Статус;
		
		ТекущийСостав = Документ.СоставТранспортныхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
		Для Каждого СтрокаСостава Из ТекущийСостав Цикл
			СтрокаСостава.Количество = 0;
			УпаковкиВСоставе = Документ.НомераУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтрокиУпаковки));
			Для Каждого УдаляемаяСтрока Из УпаковкиВСоставе Цикл
				Документ.НомераУпаковок.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЦикла;
		ГрупповыеУпаковкиВСоставе = Документ.ИерархияГрупповыхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
		Для Каждого УдаляемаяСтрока Из ГрупповыеУпаковкиВСоставе Цикл
			Документ.ИерархияГрупповыхУпаковок.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		Если ДанныеДокумента.ЕстьИнформация Тогда
			
			ПараметрыЗаполнения = ИнтеграцияМДЛПКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
			ПараметрыЗаполнения.ОбработатьУпаковки = Ложь;
			ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус = Истина;
			ПараметрыЗаполнения.ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(Документ, ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументСсылка));
			
			СтекУпаковок = Новый Массив;
			СтекУпаковок.Добавить(ДанныеДокумента.ДанныеУпаковки);
			
			Пока СтекУпаковок.Количество() > 0 Цикл
				
				ТекущаяУпаковка = СтекУпаковок[0];
				СтекУпаковок.Удалить(0);
				
				Состав = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущаяУпаковка, "childs", Новый Массив);
				Для Каждого ЭлементСостава Из Состав Цикл
					
					НомераУпаковок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЭлементСостава, "sgtin_info", Новый Массив);
					Если НомераУпаковок.Количество() > 0 Тогда
						
						НомерРодительскойУпаковки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущаяУпаковка, "sscc");
						Для Каждого ИнформацияОКиЗ Из НомераУпаковок Цикл
							
							НомерКиЗ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "sgtin");
							Отбор = Новый Структура;
							Отбор.Вставить("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки);
							Отбор.Вставить("gtin"      , ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "gtin"));
							Отбор.Вставить("НомерСерии", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "series_number"));
							
							ИзменилисьДанныеВСтроке = Ложь;
							
							НайденныеСтроки = Документ.СоставТранспортныхУпаковок.НайтиСтроки(Отбор);
							Если НайденныеСтроки.Количество() > 0 Тогда
								СтрокаТовара = НайденныеСтроки[0];
							Иначе
								СтрокаТовара = Документ.СоставТранспортныхУпаковок.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаТовара, Отбор);
								ЗаполнитьЗначенияСвойств(СтрокаТовара, СтрокаУпаковки, "Цена, СуммаНДС");
								ИзменилисьДанныеВСтроке = Истина;
							КонецЕсли;
							
							Если ПустаяСтрока(СтрокаТовара.ИдентификаторСтрокиУпаковки) Тогда
								СтрокаТовара.ИдентификаторСтрокиУпаковки = Строка(Новый УникальныйИдентификатор);
							КонецЕсли;
							Если Не ЗначениеЗаполнено(СтрокаТовара.ГоденДо) Тогда
								СтрокаТовара.ГоденДо = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "expiration_date"));
								ИзменилисьДанныеВСтроке = Истина;
							КонецЕсли;
							Если Не ЗначениеЗаполнено(СтрокаТовара.КодТНВЭД) Тогда
								СтрокаТовара.КодТНВЭД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "tnved_code");
							КонецЕсли;
							
							СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
							
							Если ИзменилисьДанныеВСтроке Тогда
								ИнтеграцияМДЛППереопределяемый.ПриИзмененииПараметровНоменклатуры(Документ, СтрокаТовара, ПараметрыЗаполнения);
							КонецЕсли;
							
							НоваяСтрока = Документ.НомераУпаковок.Добавить();
							НоваяСтрока.ИдентификаторСтроки          = СтрокаТовара.ИдентификаторСтрокиУпаковки;
							НоваяСтрока.НомерКИЗ                     = НомерКиЗ;
							НоваяСтрока.Статус                       = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКиЗ, "status");
							НоваяСтрока.СостояниеПолученияИнформации = Перечисления.СостоянияПодтвержденияМДЛП.Подтверждено;
							НоваяСтрока.СостояниеПодтверждения       = Перечисления.СостоянияПодтвержденияМДЛП.НеТребуется;
							НоваяСтрока.НомерРодительскойУпаковки    = НомерРодительскойУпаковки;
							
						КонецЦикла;
					КонецЕсли;
					
					ГрупповыеУпаковки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЭлементСостава, "sscc_info", Новый Массив);
					Если ГрупповыеУпаковки.Количество() > 0 Тогда
						
						НомерРодительскойУпаковки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущаяУпаковка, "sscc");
						Для Каждого ИнформацияОГрупповойУпаковке Из ГрупповыеУпаковки Цикл
							НоваяСтрока = Документ.ИерархияГрупповыхУпаковок.Добавить();
							НоваяСтрока.НомерУпаковки             = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОГрупповойУпаковке, "sscc");
							НоваяСтрока.ИдентификаторСтроки       = СтрокаУпаковки.ИдентификаторСтроки;
							НоваяСтрока.НомерРодительскойУпаковки = НомерРодительскойУпаковки;
							СтекУпаковок.Добавить(ИнформацияОГрупповойУпаковке);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			ТекущийСостав = Документ.СоставТранспортныхУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
			Для Каждого СтрокаСостава Из ТекущийСостав Цикл
				СтрокаСостава.Сумма = СтрокаСостава.Цена * СтрокаСостава.Количество;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияМДЛП.ЗаписатьДокумент(Документ);
	Документ.Разблокировать();
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерий(ПустаяСсылка().Метаданные(), Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//  ПараметрыУказанияСерий - Структура
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПустаяСсылка().Метаданные(), ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции Подключаемые.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДокументыДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОПриемкеМДЛП КАК ДокументыДляОбработки
	|ГДЕ
	|		ДокументыДляОбработки.ИдентификаторОрганизации <> """"
	|		И ДокументыДляОбработки.МестоДеятельности = ЗНАЧЕНИЕ(Справочник.МестаДеятельностиМДЛП.ПустаяСсылка)
	|	ИЛИ
	|		ДокументыДляОбработки.ИдентификаторКонтрагента <> """"
	|		И ДокументыДляОбработки.МестоДеятельностиГрузоотправителя = ЗНАЧЕНИЕ(Справочник.МестаДеятельностиМДЛП.ПустаяСсылка)
	|");

	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.УведомлениеОПриемкеМДЛП";
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПараметрыОбработки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если ПараметрыОбработки.ЕстьЗаписиВоВременнойТаблице Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДокументыДляОбработки.Ссылка              КАК Ссылка,
		|	МестаДеятельности.Организация             КАК Организация,
		|	МестаДеятельности.Ссылка                  КАК МестоДеятельности,
		|	МестаДеятельностиКонтрагента.Организация  КАК Грузоотправитель,
		|	МестаДеятельностиКонтрагента.Ссылка       КАК МестоДеятельностиГрузоотправителя,
		|	Документ.ИдентификаторОрганизации         КАК Идентификатор,
		|	Документ.ИдентификаторКонтрагента         КАК ИдентификаторКонтрагента
		|ИЗ
		|	#ДокументыДляОбработки КАК ДокументыДляОбработки
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.УведомлениеОПриемкеМДЛП КАК Документ
		|	ПО
		|		Документ.Ссылка = ДокументыДляОбработки.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.МестаДеятельностиМДЛП КАК МестаДеятельности
		|	ПО
		|		МестаДеятельности.Идентификатор = Документ.ИдентификаторОрганизации
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.МестаДеятельностиМДЛП КАК МестаДеятельностиКонтрагента
		|	ПО
		|		МестаДеятельностиКонтрагента.Идентификатор = Документ.ИдентификаторКонтрагента
		|";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументыДляОбработки", ПараметрыОбработки.ИмяВременнойТаблицы);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
				Блокировка.Заблокировать();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось заблокировать объект: %Объект% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										Выборка.Ссылка.Метаданные(),
										Выборка.Ссылка,
										ТекстСообщения);
				Продолжить;
			КонецПопытки;
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Если Объект = Неопределено
			 Или Не ЗначениеЗаполнено(Выборка.МестоДеятельности)
			   И Не ИнтеграцияМДЛП.ЗначениеСоответствуетТипуXDTO(Выборка.Идентификатор, "subject_id_type")
			   И Не ЗначениеЗаполнено(Выборка.МестоДеятельностиГрузоотправителя)
			   И Не ИнтеграцияМДЛП.ЗначениеСоответствуетТипуXDTO(Выборка.ИдентификаторКонтрагента, "subject_id_type") Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.МестоДеятельности) Тогда
				Объект.Организация       = Выборка.Организация;
				Объект.МестоДеятельности = Выборка.МестоДеятельности;
			ИначеЕсли ИнтеграцияМДЛП.ЗначениеСоответствуетТипуXDTO(Выборка.Идентификатор, "subject_id_type") Тогда
				ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(Выборка.Идентификатор, Объект.Организация, Объект.МестоДеятельности);
				Если Не ЗначениеЗаполнено(Объект.МестоДеятельности) Тогда
					МестоДеятельности = Справочники.МестаДеятельностиМДЛП.СоздатьЭлемент();
					МестоДеятельности.Идентификатор = Выборка.Идентификатор;
					МестоДеятельности.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Место деятельности %1'"), Выборка.Идентификатор);
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(МестоДеятельности);
					Объект.МестоДеятельности = МестоДеятельности.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.МестоДеятельностиГрузоотправителя) Тогда
				Объект.Грузоотправитель                  = Выборка.Грузоотправитель;
				Объект.МестоДеятельностиГрузоотправителя = Выборка.МестоДеятельностиГрузоотправителя;
			ИначеЕсли ИнтеграцияМДЛП.ЗначениеСоответствуетТипуXDTO(Выборка.ИдентификаторКонтрагента, "subject_id_type") Тогда
				ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(Выборка.ИдентификаторКонтрагента, Объект.Грузоотправитель, Объект.МестоДеятельностиГрузоотправителя);
				Если Не ЗначениеЗаполнено(Объект.МестоДеятельностиГрузоотправителя) Тогда
					МестоДеятельности = Справочники.МестаДеятельностиМДЛП.СоздатьЭлемент();
					МестоДеятельности.Идентификатор = Выборка.ИдентификаторКонтрагента;
					МестоДеятельности.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Место деятельности %1'"), Выборка.ИдентификаторКонтрагента);
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(МестоДеятельности);
					Объект.МестоДеятельностиГрузоотправителя = МестоДеятельности.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать: %Объект% по причине: %Причина%'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					Выборка.Ссылка.Метаданные(),
					Выборка.Ссылка,
					ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла;
		
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		
	Иначе
		Параметры.ОбработкаЗавершена = Не ПараметрыОбработки.ЕстьДанныеДляОбработки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
