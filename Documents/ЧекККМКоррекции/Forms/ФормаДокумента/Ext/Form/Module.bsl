////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ПодключаемоеОборудованиеСервер.НастроитьФормуДляИспользованияПодключаемогоОборудования(ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	ТолькоПросмотр = Объект.Статус = Перечисления.СтатусыЧековККМ.Пробит;
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриСозданииНаСервере(ЭтотОбъект);
	
	ДанныеФискальнойОперации = РозничныеПродажи.ДанныеФискальнойОперации();
	
	СформироватьНачальноеЗаполнениеЧекККМТовары();
	РассчитатьВнесенныеРасхожденияНаСервере();
	ПересчитатьДокумент(ЭтотОбъект);
	
	ФискальнаяОперацияОснования = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(Объект.ДокументОснование);
	Объект.ВидКоррекции = ?(ФискальнаяОперацияОснования = Неопределено, 1, 0);
	
	ОбработатьИзменениеВидаКоррекции();
	ОбработатьИзменениеТипаКоррекции();
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода,СчитывательМагнитныхКарт";
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ПринудительнаяАвторизация Тогда
		ПодключитьОбработчикОжидания("ОткрытьОкноАвторизации", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "АвторизованПользователь" Тогда
		
		Если Параметр.Режим = "СменитьПрава" Тогда
			НастроитьПраваДляПользователя(Параметр.Пользователь);
		ИначеЕсли Параметр.Режим = "ЗакрытьЧекККМ" Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОценкаПроизводительностиБольничнаяАптекаКлиент.НачатьЗамерПроведенияДокумента(Объект.Ссылка, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПринудительноеЗавершениеРаботы Или ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПередЗакрытиемЧека(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ФискализацияЧекаКоррекции(Команда)
	
	ОчиститьСообщения();
	
	ЕстьОшибки = Ложь;
	Если Объект.ПометкаУдаления Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Документ помечен на удаление'"), Объект.Ссылка,,, ЕстьОшибки);
	КонецЕсли;
	
	Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если Не ЕстьОшибки И ПроверитьЗаполнение() Тогда
		
		Оповестить = Новый ОписаниеОповещения("ПровестиЧекПослеПодтверждения", ЭтотОбъект);
		Если Не Объект.Проведен Тогда
			Текст = НСтр("ru = 'Операция возможна только после проведения документа, провести документ?'");
			ПоказатьВопрос(Оповестить, Текст, РежимДиалогаВопрос.ДаНет);
		Иначе
			ВыполнитьОбработкуОповещения(Оповестить, КодВозвратаДиалога.Да);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	ОбщегоНазначенияБольничнаяАптекаКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Шапка
#Область Шапка

&НаКлиенте
Процедура ФискальнаяОперацияСтатусОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ОткрытьЗаписьЖурналаФискальныхОпераций" Тогда
		СтандартнаяОбработка = Ложь;
		РозничныеПродажиКлиент.ОткрытьЗаписьЖурналаФискальныхОпераций(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКоррекцииПриИзменении(Элемент)
	
	ОбработатьИзменениеТипаКоррекции();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКоррекцииПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаКоррекции();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(Неопределено, Объект.ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Шапка

////////////////////////////////////////////////////////////////////////////////
// Список "Товары"
#Область Товары

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПодключитьОбработчикОжидания("РассчитатьВнесенныеРасхождения", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ТекущаяСтрока.Штрихкод = "";
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), ТекущаяСтрока.СерияНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	ПараметрыПересчета = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчета);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действие_ПересчитатьЦенуПоСуммеСНДС(), ПараметрыПересчета);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	
	ПересчитатьЦенуПоСуммеСНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элемент.Родитель.ТекущиеДанные;
	ОтборПартий = Новый Структура;
	ОтборПартий.Вставить("Документ"     , Объект.Ссылка);
	ОтборПартий.Вставить("Организация"  , Объект.Организация);
	ОтборПартий.Вставить("Склад"        , Объект.Склад);
	
	ПараметрыВыбораПартии = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыВыбораПартии(ОтборПартий, ТекущаяСтрока);
	ОбработкаТабличнойЧастиКлиент.ВыбратьПартиюНоменклатуры(ЭтотОбъект, Элемент, ПараметрыВыбораПартии, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // Товары

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	Если Объект.Статус <> Перечисления.СтатусыЧековККМ.Пробит Тогда
		НастроитьРМК();
	КонецЕсли;
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	
	ЗаполнитьСлужебныеРеквизиты();
	
	Если ДанныеФискальнойОперации <> Неопределено Тогда
		ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека = Неопределено;
		ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека = Неопределено;
	КонецЕсли;
	
	ФискальнаяОперацияСтатус = РозничныеПродажи.ПредставлениеДанныхФискальнойОперации(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСерийНоменклатуры(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПартий(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеИсточниковФинансирования(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеЦенаВключаетНДС(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСуммаНДС(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСуммНДС(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеЗабракованнойСерии(ЭтотОбъект);
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСерийНоменклатуры(ЭтотОбъект, Элементы.РасхожденияСерияНоменклатуры.Имя, "Расхождения.СтатусУказанияСерий");
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПартий(ЭтотОбъект, Элементы.РасхожденияПартия.Имя, "Расхождения.СтатусУказанияПартий");
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеЦенаВключаетНДС(ЭтотОбъект, Элементы.РасхожденияСуммаСНДС.Имя);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСуммНДС(ЭтотОбъект, Элементы.РасхожденияСтавкаНДС.Имя, Элементы.РасхожденияСуммаНДС.Имя, Элементы.РасхожденияСуммаСНДС.Имя);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеЗабракованнойСерии(ЭтотОбъект, Элементы.РасхожденияСерияНоменклатуры.Имя, "Расхождения.СерияЗабракована");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьРМК()
	
	ОбработатьИзменениеКассыККМ();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	
	ПринудительнаяАвторизация = Константы.ИспользоватьАвторизациюРМК.Получить();
	
	НастроитьПраваДляПользователя(Объект.Кассир);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеКассыККМ()
	
	СостояниеКассовойСмены = РозничныеПродажи.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
	ЗаполнитьЗначенияСвойств(Объект, СостояниеКассовойСмены);
	Объект.КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПраваДляПользователя(Пользователь)
	
	ПраваДоступа = РозничныеПродажи.ПраваДоступаРМК(Пользователь);
	
	Объект.Кассир = Пользователь;
	РеквизитыКассира = РозничныеПродажи.РеквизитыКассира(Пользователь);
	
	Элементы.ТоварыНоменклатура.ТолькоПросмотр      = Не ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыСерияНоменклатуры.ТолькоПросмотр = Не ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыЕдиницаИзмерения.ТолькоПросмотр  = Не ПраваДоступа.КорректировкаСтрок;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТабличнуюЧасть(Объект.Товары, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеВидаКоррекции()
	
	Если Объект.ВидКоррекции = 1 Тогда
		Объект.ОписаниеКоррекции = НСтр("ru = 'Не применение ККТ'");
		Элементы.ОписаниеКоррекции.ТолькоПросмотр = Истина;
		Элементы.ДокументОснование.Видимость = Ложь;
	Иначе
		Элементы.ОписаниеКоррекции.ТолькоПросмотр = Ложь;
		Элементы.ДокументОснование.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеТипаКоррекции()
	
	Если Объект.ТипКоррекции = Перечисления.ТипыЧекаКоррекции.ПоПредписанию Тогда
		Элементы.НомерПредписанияНалоговогоОргана.Видимость = Истина;
	Иначе
		Элементы.НомерПредписанияНалоговогоОргана.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОкноАвторизации()
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.Авторизация", Новый Структура("Режим", "СменитьПрава"), ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНачальноеЗаполнениеЧекККМТовары()
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ТЧТоварыЧекаККМ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Товары").Выгрузить();
	
	РасчетныеКолонки = "Количество, КоличествоВЕдиницахИзмерения, Цена, Сумма, СуммаНДС, СуммаСНДС";
	
	Для Каждого СтрокаТЧ Из ТЧТоварыЧекаККМ Цикл
		
		СтрокаЧекККМТовары = ЧекККМТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЧекККМТовары, СтрокаТЧ,, РасчетныеКолонки);
		
		Для Каждого ИмяКолонки Из СтрРазделить(РасчетныеКолонки, ", ", Ложь) Цикл
			СтрокаЧекККМТовары[ИмяКолонки] = - СтрокаТЧ[ИмяКолонки];
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВнесенныеРасхождения()
	
	РассчитатьВнесенныеРасхожденияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьВнесенныеРасхожденияНаСервере()
	
	Расхождения.Очистить();
	
	РасчетРасхождений = ЧекККМТовары.Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ЗаполнитьЗначенияСвойств(РасчетРасхождений.Добавить(), СтрокаТЧ);
	КонецЦикла;
	
	КолонкиГруппировки = "НомерСтроки, Штрихкод, Номенклатура, СтатусУказанияСерий, СтатусУказанияПартий, СерияНоменклатуры, ЕдиницаИзмерения, Коэффициент, ИсточникФинансирования, СтавкаНДС, Партия, СерияЗабракована";
	РасчетныеКолонки = "Количество, КоличествоВЕдиницахИзмерения, Цена, Сумма, СуммаНДС, СуммаСНДС";
	
	РасчетРасхождений.Свернуть(КолонкиГруппировки, РасчетныеКолонки);
	РасчетРасхождений.Сортировать("НомерСтроки Возр, КоличествоВЕдиницахИзмерения Убыв, Сумма Убыв, СуммаНДС Убыв, СуммаСНДС Убыв");
	
	ГраницаРасхождений = РасчетРасхождений.Количество() - 1;
	Для Индекс = 0 По ГраницаРасхождений Цикл
		
		Расхождение = РасчетРасхождений[ГраницаРасхождений - Индекс];
		Если Расхождение.КоличествоВЕдиницахИзмерения = 0
		   И Расхождение.СуммаНДС = 0
		   И Расхождение.Сумма = 0 Тогда
			
			РасчетРасхождений.Удалить(Расхождение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Расхождения.Загрузить(РасчетРасхождений);
	
	// Используется для установки свойства ПутьКДаннымЗаголовка группы СтраницаРасхождения
	КоличествоРасхождений = Расхождения.Количество();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьДокумент(Форма)
	
	ИнформацияОбОплате = ИнформацияОбОплате(Форма);
	
	Форма.СуммаДокумента = ИнформацияОбОплате.СуммаДокумента;
	Форма.СуммаСдачи     = ИнформацияОбОплате.ИтогоОплачено - ИнформацияОбОплате.СуммаКОплате;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИнформацияОбОплате(Форма)
	
	СуммаДокумента = ЦенообразованиеБольничнаяАптекаКлиентСервер.ПолучитьСуммуДокумента(Форма.Объект.Товары, Форма.Объект.ЦенаВключаетНДС);
	
	СуммаСкидки = 0;
	СуммаБезСкидки = СуммаДокумента + СуммаСкидки;
	СуммаКОплате = СуммаБезСкидки - СуммаСкидки;
	
	ИнформацияОбОплате = Новый Структура;
	ИнформацияОбОплате.Вставить("Документ",              Форма.Объект.Ссылка);
	
	ИнформацияОбОплате.Вставить("Наличные",              Форма.Объект.ПолученоНаличными);
	ИнформацияОбОплате.Вставить("ПлатежныеКарты",        Форма.Объект.ОплатаПлатежнымиКартами.Итог("Сумма"));
	
	ИнформацияОбОплате.Вставить("СуммаДокумента",        СуммаДокумента);
	ИнформацияОбОплате.Вставить("СуммаБезСкидки",        СуммаБезСкидки);
	ИнформацияОбОплате.Вставить("СуммаКОплате",          СуммаКОплате);
	ИнформацияОбОплате.Вставить("СуммаСкидки",           СуммаСкидки);
	ИнформацияОбОплате.Вставить("ИтогоОплачено",         ИнформацияОбОплате.Наличные + ИнформацияОбОплате.ПлатежныеКарты);
	
	Возврат ИнформацияОбОплате;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПересчитатьЦенуПоСуммеСНДС(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	ПараметрыПересчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДействий, Действие_ПересчитатьЦенуПоСуммеСНДС());
	Если ПараметрыПересчета <> Неопределено Тогда
		
		ЦенаВключаетНДС = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПересчета, "ЦенаВключаетНДС", Истина);
		
		ИмяКолонкиКоличество = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПересчета, "ИмяКолонкиКоличество");
		Если Не ЗначениеЗаполнено(ИмяКолонкиКоличество) Тогда
			ИмяКолонкиКоличество = "КоличествоВЕдиницахИзмерения";
		КонецЕсли;
		Количество = ТекущаяСтрока[ИмяКолонкиКоличество];
		
		Если Количество = 0 Тогда
			ТекущаяСтрока.Цена = ?(ЦенаВключаетНДС, ТекущаяСтрока.СуммаСНДС, ТекущаяСтрока.СуммаСНДС - ТекущаяСтрока.СуммаНДС);
		Иначе
			ТекущаяСтрока.Цена = ?(ЦенаВключаетНДС, ТекущаяСтрока.СуммаСНДС, ТекущаяСтрока.СуммаСНДС - ТекущаяСтрока.СуммаНДС) / Количество;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Действие_ПересчитатьЦенуПоСуммеСНДС()
	
	Возврат "ПересчитатьЦенуПоСуммеСНДС";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка фискализации чека коррекции
#Область ОбработкаФискализацииЧека

&НаКлиенте
Процедура ПровестиЧекПослеПодтверждения(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ТоварЗарезервирован");
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ТекстСообщенияПовторнойЗаписи", НСтр("ru = 'Перед пробитием чека коррекции не удалось записать документ.'"));
	
	Оповестить = Новый ОписаниеОповещения("ОбработатьСостояниеСменыПослеПроведения", ЭтотОбъект);
	ВыполнитьДействиеПослеЗаписи(Оповестить, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСостояниеСменыПослеПроведения(Проведен, ДополнительныеПараметры) Экспорт
	
	Если Не Проведен Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Отложен");
		Возврат;
	КонецЕсли;
	
	Оповестить = Новый ОписаниеОповещения("ВыполнитьФискализациюПослеОткрытияСмены", ЭтотОбъект);
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(ЭтотОбъект, Оповестить);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьФискализациюПослеОткрытияСмены(СменаОткрыта, ДополнительныеПараметры) Экспорт
	
	Если Не СменаОткрыта Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить = Новый ОписаниеОповещения("ЗаписатьРезультатФискализации", ЭтотОбъект);
	Если Не ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(
			Оповестить,
			УникальныйИдентификатор,
			ПараметрыКассыККМ.ИдентификаторУстройства,
			ПараметрыОперацииФискализацииЧека());
		
	Иначе
		ВыполнитьОбработкуОповещения(Оповестить, Новый Структура("Результат", Истина));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРезультатФискализации(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Оповестить = Новый ОписаниеОповещения("ЗакончитьФискализациюЧекаКоррекции", ЭтотОбъект, Новый Структура);
	Если РезультатВыполнения.Результат Тогда
		
		Объект.Дата   = ОбщегоНазначенияКлиент.ДатаСеанса();
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
		
		ДанныеДляЖурналаРегистрации = Новый Структура;
		ДанныеДляЖурналаРегистрации.Вставить("Дата"  , Объект.Дата);
		ДанныеДляЖурналаРегистрации.Вставить("Статус", Объект.Статус);
		
		ВыходныеПараметры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыполнения, "ВыходныеПараметры");
		Если ВыходныеПараметры <> Неопределено И ВыходныеПараметры.Количество() > 1 Тогда
			ДанныеДляЖурналаРегистрации.Вставить("НомерЧекаККМ", ВыходныеПараметры[1]);
		КонецЕсли;
		
		Оповестить.ДополнительныеПараметры.Вставить("ДанныеДляЖурналаРегистрации"  , ДанныеДляЖурналаРегистрации);
		Оповестить.ДополнительныеПараметры.Вставить("ВыполненаОперацияНаУстройстве", Истина);
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ТекстСообщенияПовторнойЗаписи", НСтр("ru = 'После пробития чека на ФР не удалось сохранить документ.'"));
		Если ВыходныеПараметры <> Неопределено И ВыходныеПараметры.Количество() > 8 Тогда
			ПараметрыЗаписи.Вставить("ПараметрыФискализации", ВыходныеПараметры[8]);
		КонецЕсли;
		
		ВыполнитьДействиеПослеЗаписи(Оповестить, ПараметрыЗаписи);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При печати чека коррекции произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		ВыполнитьОбработкуОповещения(Оповестить, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьФискализациюЧекаКоррекции(ИзмененныеДанныеЗаписаны, ДополнительныеПараметры) Экспорт
	
	ВыполненаОперацияНаУстройстве = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ВыполненаОперацияНаУстройстве");
	Если ВыполненаОперацияНаУстройстве Тогда
		
		ТолькоПросмотр = Истина;
		
		Если Не ИзмененныеДанныеЗаписаны Тогда
			
			ДанныеДляЖурналаРегистрации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ДанныеДляЖурналаРегистрации");
			ТекстСообщения = НСтр("ru = 'ВНИМАНИЕ! Произошла исключительная ситуация:
				|Чек ККМ пробит, но не зафиксирован в системе.'");
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Данные"                     , Объект.Ссылка);
			ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДанныеДляЖурналаРегистрации);
			ПараметрыФормы.Вставить("ТекстСообщения"             , ТекстСообщения);
			
			ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗакончитьФискализациюЧекаКоррекцииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьФискализациюЧекаКоррекцииНаСервере()
	
	ФискальнаяОперацияСтатус = РозничныеПродажи.ПредставлениеДанныхФискальнойОперации(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОперацииФискализацииЧека()
	
	ПараметрыОперацииФискализацииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииЧекаКоррекции();
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ЗначениеСтавкиНДС = Неопределено;
		Иначе
			СтавкаНДС = ЦенообразованиеБольничнаяАптекаКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЧ.СтавкаНДС);
			ЗначениеСтавкиНДС = СтавкаНДС * 100;
		КонецЕсли;
		
		СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		
		НаименованиеТовара = Строка(СтрокаТЧ.Номенклатура)
			+ ?(ЗначениеЗаполнено(СтрокаТЧ.СерияНоменклатуры), " (" + Строка(СтрокаТЧ.СерияНоменклатуры) + ")", "");
		
		СтрокаПозицииЧека.НомерСтрокиТовара = СтрокаТЧ.НомерСтроки;
		СтрокаПозицииЧека.Наименование      = НаименованиеТовара;
		СтрокаПозицииЧека.Количество        = СтрокаТЧ.КоличествоВЕдиницахИзмерения;
		СтрокаПозицииЧека.Цена              = СтрокаТЧ.Цена;
		СтрокаПозицииЧека.Сумма             = СтрокаТЧ.СуммаСНДС;
		СтрокаПозицииЧека.ЦенаСоСкидками    = Окр(СтрокаПозицииЧека.Сумма / СтрокаПозицииЧека.Количество, 2, 1); // Обязательно, Цена с учетом скидок и наценок (Необходимо начиная с ФФД 1.0.5 и выше)
		СтрокаПозицииЧека.СтавкаНДС         = ЗначениеСтавкиНДС;
		СтрокаПозицииЧека.СуммаНДС          = СтрокаТЧ.СуммаНДС;
		СтрокаПозицииЧека.НомерСекции       = 1;
		СтрокаПозицииЧека.Штрихкод          = СтрокаТЧ.Штрихкод;
		
		СтрокаПозицииЧека.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой; // Признак способа расчета. Обязательно для ФФД 1.0.5 и выше.
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар; // Признак предмета расчета. Обязательно для ФФД 1.1 и выше.
		
		ОписаниеПолучаемыхДанных = Новый Структура("КодВидаНоменклатурнойКлассификации", "КлассификацияМедицинскихИзделийПоВидам.КодВидаНоменклатурнойКлассификации");
		ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.Номенклатура, ОписаниеПолучаемыхДанных);
		Если ЗначениеЗаполнено(ДанныеНоменклатуры.КодВидаНоменклатурнойКлассификации) Тогда
			СтрокаПозицииЧека.КодВидаНоменклатурнойКлассификации = ДанныеНоменклатуры.КодВидаНоменклатурнойКлассификации;
		КонецЕсли;
		
		ПараметрыОперацииФискализацииЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
	КонецЦикла;
	
	ПараметрыОперацииФискализацииЧека.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	
	ЕстьЭлектроннаяОтправка = Ложь;
	Если ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail
	   И ЗначениеЗаполнено(ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека) Тогда
		ПараметрыОперацииФискализацииЧека.Отправляет1СEmail = Не ДанныеФискальнойОперации.ОтправлятьEmailЧерезОФД;
		ПараметрыОперацииФискализацииЧека.ПокупательEmail   = ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека;
		ЕстьЭлектроннаяОтправка = Истина;
	КонецЕсли;
	Если ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS
	   И ЗначениеЗаполнено(ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека) Тогда
		ПараметрыОперацииФискализацииЧека.Отправляет1СSMS = Не ДанныеФискальнойОперации.ОтправлятьSMSЧерезОФД;
		ПараметрыОперацииФискализацииЧека.ПокупательНомер = "+7" + РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека);
		ЕстьЭлектроннаяОтправка = Истина;
	КонецЕсли;
	
	ПараметрыОперацииФискализацииЧека.ОтправительEmail = ДанныеФискальнойОперации.ОтправительEmail;
	
	ПараметрыОперацииФискализацииЧека.Электронно = ЕстьЭлектроннаяОтправка И ДанныеФискальнойОперации.НеПечататьФискальныйЧек;
	
	ПараметрыОперацииФискализацииЧека.СерийныйНомер = ПараметрыКассыККМ.СерийныйНомер;
	
	ПараметрыОперацииФискализацииЧека.ДокументОснование = Объект.Ссылка;
	ПараметрыОперацииФискализацииЧека.КорректируемыйДокумент = Объект.ДокументОснование;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ПараметрыОперацииФискализацииЧека.Кассир = РеквизитыКассира.Наименование;
	ПараметрыОперацииФискализацииЧека.Вставить("ИмяКассира", РеквизитыКассира.Наименование);
	ПараметрыОперацииФискализацииЧека.КассирИНН = РеквизитыКассира.ИНН;
	
	ПараметрыОперацииФискализацииЧека.Организация         = СостояниеКассовойСмены.Организация;
	ПараметрыОперацииФискализацииЧека.ОрганизацияНазвание = СостояниеКассовойСмены.СведенияООрганизации.ОфициальноеНаименование;
	ПараметрыОперацииФискализацииЧека.ОрганизацияИНН      = СостояниеКассовойСмены.СведенияООрганизации.ИНН;
	ПараметрыОперацииФискализацииЧека.ОрганизацияКПП      = СостояниеКассовойСмены.СведенияООрганизации.КПП;
	ПараметрыОперацииФискализацииЧека.НомерКассы          = "00001";
	ПараметрыОперацииФискализацииЧека.НомерЧека           = 1;
	ПараметрыОперацииФискализацииЧека.НомерСмены          = 1;
	
	ПараметрыОперацииФискализацииЧека.ТорговыйОбъект         = СостояниеКассовойСмены.КассаККМ;
	ПараметрыОперацииФискализацииЧека.АдресМагазина          = СостояниеКассовойСмены.АдресСклада;
	ПараметрыОперацииФискализацииЧека.НаименованиеМагазина   = Строка(СостояниеКассовойСмены.Склад);
	ПараметрыОперацииФискализацииЧека.СистемаНалогообложения = СостояниеКассовойСмены.СистемаНалогообложения;
	
	// Подготовка таблицы оплат
	ИнформацияОбОплате = ИнформацияОбОплате(ЭтотОбъект);
	
	// Наличные
	Если ИнформацияОбОплате.Наличные > 0 Тогда
		СтрокаОплаты = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
		СтрокаОплаты.Сумма = ИнформацияОбОплате.Наличные;
		ПараметрыОперацииФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Безналичные
	Если ИнформацияОбОплате.ПлатежныеКарты > 0 Тогда
		СтрокаОплаты = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно;
		СтрокаОплаты.Сумма = ИнформацияОбОплате.ПлатежныеКарты;
		ПараметрыОперацииФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	ПараметрыОперацииФискализацииЧека.ДанныеКоррекции.ТипКоррекции      = ?(Объект.ТипКоррекции = Перечисления.ТипыЧекаКоррекции.Самостоятельно, 0, 1);
	ПараметрыОперацииФискализацииЧека.ДанныеКоррекции.ОписаниеКоррекции = Объект.ОписаниеКоррекции;
	ПараметрыОперацииФискализацииЧека.ДанныеКоррекции.ДатаКоррекции     = Объект.ДатаСовершенияКорректируемогоРасчета;
	ПараметрыОперацииФискализацииЧека.ДанныеКоррекции.НомерПредписания  = Объект.НомерПредписанияНалоговогоОргана;
	ПараметрыОперацииФискализацииЧека.НеприменениеККТ                   = Булево(Объект.ВидКоррекции);
	
	// При необходимости будет проведен формато-логический контроль
	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ПараметрыОперацииФискализацииЧека, ПараметрыКассыККМ.ИдентификаторУстройства);
	
	Возврат ПараметрыОперацииФискализацииЧека;
	
КонецФункции

#КонецОбласти // ОбработкаФискализацииЧека

////////////////////////////////////////////////////////////////////////////////
// Обработка записи чека коррекции
#Область ОбработкаЗаписиЧека

&НаКлиенте
Процедура ВыполнитьДействиеПослеЗаписи(ОповещениеОЗавершении, ПараметрыЗаписи)
	
	ИмяПроцедурыЗаписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаписи, "ИмяПроцедурыЗаписи");
	Если ИмяПроцедурыЗаписи = "ОтложитьНаСервере" Тогда
		РезультатЗаписи = ОтложитьНаСервере(ПараметрыЗаписи);
	Иначе
		РезультатЗаписи = ЗаписатьНаСервере(ПараметрыЗаписи);
	КонецЕсли;
	
	Если Не РезультатЗаписи И ПараметрыЗаписи.Свойство("ТребуетсяПовторнаяПопыткаЗаписи") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи"      , ПараметрыЗаписи);
		ДополнительныеПараметры.Вставить("РезультатЗаписи"      , РезультатЗаписи);
		
		Оповестить = Новый ОписаниеОповещения("ПовторитьЗаписьПриНеобходимости", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповестить, ПараметрыЗаписи.ТекстСообщенияПовторнойЗаписи, РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		
	Иначе
		Оповестить("Запись_ЧекККМКоррекции");
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьЗаписьПриНеобходимости(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Отмена Тогда
		ВыполнитьДействиеПослеЗаписи(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.ПараметрыЗаписи);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.РезультатЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНаСервере(ПараметрыЗаписи)
	
	Если Объект.Ссылка.Пустая() Тогда
		Значение = РеквизитФормыВЗначение("Объект");
		Значение.УстановитьСсылкуНового(Документы.ЧекККМКоррекции.ПолучитьСсылку());
		ЗначениеВРеквизитФормы(Значение, "Объект");
	КонецЕсли;
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "Документ.ЧекККМКоррекции";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		Блокировка.Заблокировать();
		
		ПараметрыФискализации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаписи, "ПараметрыФискализации");
		Если ПараметрыФискализации <> Неопределено Тогда
			Если Не ПараметрыФискализации.ОперацияЗаписана Тогда
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "РегистрСведений.ФискальныеОперации";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				ЭлементБлокировки.УстановитьЗначение("ДокументОснование", ПараметрыФискализации.ДокументОснование);
				Блокировка.Заблокировать();
				
				ОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗаписатьФискальнуюОперацию(ПараметрыФискализации);
				
			КонецЕсли;
			Если ЗначениеЗаполнено(ПараметрыФискализации.ЧекКоррекцииСторно)
			   И Не ПараметрыФискализации.ЧекКоррекцииСторно.ОперацияЗаписана Тогда
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "РегистрСведений.ФискальныеОперации";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				ЭлементБлокировки.УстановитьЗначение("ДокументОснование", ПараметрыФискализации.ЧекКоррекцииСторно.ДокументОснование);
				Блокировка.Заблокировать();
				
				ОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗаписатьФискальнуюОперацию(ПараметрыФискализации.ЧекКоррекцииСторно);
				
			КонецЕсли;
		КонецЕсли;
		
		Результат = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
		
		Если Не Результат Тогда
			ЗаполнитьСлужебныеРеквизиты();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		// СтандартныеПодсистемы.УправлениеДоступом
		УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, Неопределено, Неопределено);
		// Конец СтандартныеПодсистемы.УправлениеДоступом
		
	Исключение
		
		ОтменитьТранзакцию();
		Результат = Ложь;
		ПараметрыЗаписи.Вставить("ТребуетсяПовторнаяПопыткаЗаписи", Истина);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ОбработкаЗаписиЧека

////////////////////////////////////////////////////////////////////////////////
// Обработка закрытия чека
#Область ОбработкаЗакрытияЧека

&НаКлиенте
Процедура ПередЗакрытиемЧека(Отказ, ОповещениеОЗакрытии = Неопределено)
	
	Кнопки = Новый СписокЗначений;
	
	Если Не ТолькоПросмотр И Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные чека ККМ были изменены.'");
		
		Если ПраваДоступа.Отложить Тогда
			Кнопки.Добавить(1, НСтр("ru = 'Отложить'"));
		КонецЕсли;
		
		Если Не Объект.Ссылка.Пустая() И ПраваДоступа.КорректировкаСтрок Тогда
			Кнопки.Добавить(4, НСтр("ru = 'Удалить чек'"));
		КонецЕсли;
		
		Если ПраваДоступа.КорректировкаСтрок Или Объект.Ссылка.Пустая()Тогда
			Если Модифицированность Тогда
				Кнопки.Добавить(3, НСтр("ru = 'Закрыть без сохранения'"));
			Иначе
				Кнопки.Добавить(3, НСтр("ru = 'Закрыть'"));
			КонецЕсли;
		КонецЕсли;
		
		Кнопки.Добавить(99, НСтр("ru = 'Отмена'"));
		
	КонецЕсли;
	
	Если Кнопки.Количество() > 0 Тогда
		
		Отказ = Истина;
		ОповещениеПродолжения = Новый ОписаниеОповещения("ПередЗакрытиемЧекаПродолжение", ЭтотОбъект, Новый Структура("ОповещенияОЗавершении", ОповещениеОЗакрытии));
		ПоказатьВопрос(ОповещениеПродолжения, ТекстВопроса, Кнопки);
		
	Иначе
		
		Если ОповещениеОЗакрытии <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЧекаПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("ПередЗакрытиемЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если РезультатВопроса = 1 Тогда
		
		// Отложить чек без резервирования
		ОтложитьНаКлиенте(ОповещениеПродолжения);
		
	ИначеЕсли РезультатВопроса = 3 Тогда
		
		// Закрыть без сохранения.
		ВыполнитьОбработкуОповещения(ОповещениеПродолжения, Истина);
		
	ИначеЕсли РезультатВопроса = 4 Тогда
		
		// Удалить чек.
		УдалениеВыполнено = УдалитьЧек(Объект.Ссылка);
		Если УдалениеВыполнено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПродолжения, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЧекаЗавершение(РезультатОперации, ДополнительныеПараметры) Экспорт
	
	Оповестить("Запись_ЧекККМКоррекции", Новый Структура, Неопределено);
	
	Если РезультатОперации Тогда
		
		Если ДополнительныеПараметры.ОповещенияОЗавершении = Неопределено Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Закрыть(Неопределено);
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещенияОЗавершении, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьНаКлиенте(ОповещениеПриЗавершении)
	
	Модифицированность = Истина;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ТекстСообщенияПовторнойЗаписи", НСтр("ru = 'После выполнения операции отмены оплаты не удалось записать документ.'"));
	ПараметрыЗаписи.Вставить("ИмяПроцедурыЗаписи"           , "ОтложитьНаСервере");
	
	ВыполнитьДействиеПослеЗаписи(ОповещениеПриЗавершении, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Функция ОтложитьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи)
	
	ОтложитьВыполнено = Истина;
	
	СтарыйСтатус  = Объект.Статус;
	Объект.Статус = Перечисления.СтатусыЧековККМ.Отложен;
	Объект.Дата   = ТекущаяДатаСеанса();
	
	Попытка
		
		ОтложитьВыполнено = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		
		Если Не ОтложитьВыполнено Тогда
			Объект.Статус = СтарыйСтатус;
		КонецЕсли;
		
	Исключение
		
		Объект.Статус = СтарыйСтатус;
		ОтложитьВыполнено = Ложь;
		
	КонецПопытки;
	
	Возврат ОтложитьВыполнено;
	
КонецФункции

&НаСервереБезКонтекста
Функция УдалитьЧек(Ссылка)
	
	Результат = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	ЧекОбъект = Ссылка.ПолучитьОбъект();
	
	Если ЧекОбъект.Статус = Перечисления.СтатусыЧековККМ.Пробит Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Пробитый чек не может быть удален'"));
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ЧекОбъект.Удалить();
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // ОбработкаЗакрытияЧека

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти // СтандартныеПодсистемы