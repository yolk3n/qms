#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ЧекККМ") Тогда
		ЗаполнитьДокументПоЧекуККМ(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		ЗаполнитьДокументПоЧекуККМВозврат(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("Товары") Тогда
		
		КорректируемыеТовары = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.Товары);
		
		ЧекККМ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "ЧекККМ");
		Если ЧекККМ = Неопределено Тогда
			ЧекККМ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "ЧекККМВозврат");
		КонецЕсли;
		
		ТипДанныхЗаполнения = ТипЗнч(ЧекККМ);
		Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ЧекККМ") Тогда
			ЗаполнитьДокументПоЧекуККМ(ЧекККМ, КорректируемыеТовары);
		ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
			ЗаполнитьДокументПоЧекуККМВозврат(ЧекККМ, КорректируемыеТовары);
		КонецЕсли;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если Не ДанныеЗаполнения.Свойство("ЧтениеКомандФормы") Тогда
			ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = 'Чеки ККМ коррекции должны вводится на основании чеков ККМ.'");
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ВызватьИсключение НСтр("ru = 'Копирование документа ""Чек ККМ коррекции"" запрещено!'");
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	ОбработкаТабличнойЧастиСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, НепроверяемыеРеквизиты, Отказ);
	
	Если ОплатаПлатежнымиКартами.Итог("Сумма") > СуммаДокумента Тогда
		ТекстСообщения = НСтр("ru='Сумма оплаты платежными картами превышает сумму документа'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ОплатаПлатежнымиКартами",, Отказ);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиСервер.ПроверитьЗаполнениеИсточникаФинансирования(ЭтотОбъект, НепроверяемыеРеквизиты, Отказ);
	
	ПараметрыУчетаНоменклатуры = ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект);
	ЗапасыСервер.ПроверитьЗаполнениеСерийНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры, НепроверяемыеРеквизиты, Отказ);
	ЗапасыСервер.ПроверитьЗаполнениеПартийНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры, НепроверяемыеРеквизиты, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Статус) Тогда
		Статус = Перечисления.СтатусыЧековККМ.Отложен;
	КонецЕсли;
	
	ПроведениеБольничнаяАптека.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	Если Статус = Перечисления.СтатусыЧековККМ.Пробит И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ТекстОшибки = НСтр("ru='Чек ККМ коррекции пробит. Отмена проведения невозможна'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбработкаТабличнойЧастиСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	СуммаДокумента = ЦенообразованиеБольничнаяАптекаКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС);
	
	ЗапасыСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОбработкаТабличнойЧастиСервер.ЗаполнитьИсточникФинансирования(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение документа
#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Автор = Пользователи.ТекущийПользователь();
	Кассир = Пользователи.ТекущийПользователь();
	
	Если Не ЗначениеЗаполнено(КассаККМ) Тогда
		КассаККМ = Справочники.КассыККМ.КассаККМФискальныйРегистраторДляРМК();
		Если ЗначениеЗаполнено(КассаККМ) Тогда
			ЗаполнитьДокументПоКассеККМ(КассаККМ);
		Иначе
			ВызватьИсключение НСтр("ru = 'Для текущего рабочего места не настроено подключаемое оборудование: Фискальный регистратор'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоКассеККМ(КассаККМ)
	
	СостояниеКассовойСмены = РозничныеПродажи.ПолучитьСостояниеКассовойСмены(КассаККМ);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СостояниеКассовойСмены);
	КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("КассаККМ") Тогда
		ЗаполнитьДокументПоКассеККМ(ДанныеЗаполнения.КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоЧекуККМ(ДокументОснование, КорректируемыеТовары = Неопределено)
	
	Если ЕстьЧекККМНаВозвратПоЧекуККМ(ДокументОснование) Тогда
		ВызватьИсключение НСтр("ru = 'По Чеку ККМ введен Чек ККМ на возврат. Ввод Чека ККМ коррекции запрещен.'");
	КонецЕсли;
	
	Если ЕстьВозвратОтклиентаПоЧекуККМ(ДокументОснование) Тогда
		ВызватьИсключение НСтр("ru = 'По Чеку ККМ введен Возврат товаров от клиента. Ввод Чека ККМ коррекции запрещен.'");
	КонецЕсли;
	
	Если ЕстьКоррекцияПоЧекуККМ(ДокументОснование) Тогда
		ВызватьИсключение НСтр("ru = 'По Чеку ККМ введен Чек ККМ коррекции. Ввод нового Чека ККМ коррекции запрещен.'");
	КонецЕсли;
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЧекККМ.Валюта              КАК Валюта,
	|	ЧекККМ.Ссылка              КАК ДокументОснование,
	|	ЧекККМ.Дата                КАК ДатаЧекаККМ,
	|	ЧекККМ.ВидЦены             КАК ВидЦены,
	|	ЧекККМ.Организация         КАК Организация,
	|	ЧекККМ.КассаККМ            КАК КассаККМ,
	|	ЧекККМ.Склад               КАК Склад,
	|	ЧекККМ.ЦенаВключаетНДС     КАК ЦенаВключаетНДС,
	|	ЧекККМ.НалогообложениеНДС  КАК НалогообложениеНДС,
	|	ЧекККМ.ПолученоНаличными   КАК ПолученоНаличными,
	|	ЧекККМ.Статус              КАК Статус,
	|	ЧекККМ.Проведен            КАК Проведен,
	|	ЧекККМ.ФормаОплаты         КАК ФормаОплаты
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура                  КАК Номенклатура,
	|	Товары.СерияНоменклатуры             КАК СерияНоменклатуры,
	|	Товары.Партия                        КАК Партия,
	|	Товары.СтатусУказанияСерий           КАК СтатусУказанияСерий,
	|	Товары.СтатусУказанияПартий          КАК СтатусУказанияПартий,
	|	Товары.ИсточникФинансирования        КАК ИсточникФинансирования,
	|	Товары.ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
	|	Товары.Коэффициент                   КАК Коэффициент,
	|	Товары.КоличествоВЕдиницахИзмерения  КАК КоличествоВЕдиницахИзмерения,
	|	Товары.Количество                    КАК Количество,
	|	Товары.Цена                          КАК Цена,
	|	Товары.Сумма                         КАК Сумма,
	|	Товары.СтавкаНДС                     КАК СтавкаНДС,
	|	Товары.СуммаНДС                      КАК СуммаНДС,
	|	Товары.СуммаСНДС                     КАК СуммаСНДС
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал  КАК ЭквайринговыйТерминал,
	|	ОплатаПлатежнымиКартами.ВидПлатежнойКарты      КАК ВидПлатежнойКарты,
	|	ОплатаПлатежнымиКартами.КодАвторизации         КАК КодАвторизации,
	|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты    КАК НомерПлатежнойКарты,
	|	ОплатаПлатежнымиКартами.Сумма                  КАК Сумма,
	|	ОплатаПлатежнымиКартами.СсылочныйНомер         КАК СсылочныйНомер,
	|	ОплатаПлатежнымиКартами.НомерЧекаЭТ            КАК НомерЧекаЭТ
	|ИЗ
	|	Документ.ЧекККМ.ОплатаПлатежнымиКартами КАК ОплатаПлатежнымиКартами
	|ГДЕ
	|	ОплатаПлатежнымиКартами.Ссылка = &Ссылка
	|	И НЕ (ОплатаПлатежнымиКартами.ЭквайринговыйТерминал, ОплатаПлатежнымиКартами.КодАвторизации, ОплатаПлатежнымиКартами.НомерПлатежнойКарты, ОплатаПлатежнымиКартами.Сумма) В
	|				(ВЫБРАТЬ
	|					Т.ЭквайринговыйТерминал,
	|					Т.КодАвторизации,
	|					Т.НомерПлатежнойКарты,
	|					Т.Сумма
	|				ИЗ
	|					Документ.ЧекККМВозврат.ОплатаПлатежнымиКартами КАК Т
	|				ГДЕ
	|					Т.Ссылка.ЧекККМ = &Ссылка)
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, ,"Статус, Проведен");
	
	ДатаСовершенияКорректируемогоРасчета = Выборка.ДатаЧекаККМ;
	
	Если Не Выборка.Проведен Тогда
		ТекстОшибки = НСтр("ru='Чек ККМ не проведен. Ввод на основании невозможен.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Выборка.Статус <> Перечисления.СтатусыЧековККМ.Пробит Тогда
		ТекстОшибки = НСтр("ru='Чек ККМ не пробит. Ввод на основании невозможен.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаполнитьДокументПоКассеККМ(КассаККМ);
	
	Если КорректируемыеТовары = Неопределено Тогда
		Товары.Загрузить(РезультатЗапроса[1].Выгрузить());
	Иначе
		Товары.Очистить();
		Для Каждого СтрокаТЧ Из КорректируемыеТовары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		КонецЦикла;
	КонецЕсли;
	
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
	
	ОплатаПлатежнымиКартами.Загрузить(РезультатЗапроса[2].Выгрузить());
	
	СуммаДокумента = ЦенообразованиеБольничнаяАптекаКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоЧекуККМВозврат(ДокументОснование, КорректируемыеТовары = Неопределено)
	
	ВызватьИсключение НСтр("ru = 'Чек ККМ коррекции необходимо вводить на основании чека ККМ'");
	
КонецПроцедуры

#КонецОбласти // ИнициализацияИЗаполнение

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

Функция ЕстьЧекККМНаВозвратПоЧекуККМ(ДокументОснование)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМВозврат.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО
	|			ЧекККМВозврат.Ссылка = ФискальныеОперации.ДокументОснование
	|			И ФискальныеОперации.НомерЧекаККМ <> &ПустаяСтрока
	|ГДЕ
	|	ЧекККМВозврат.Проведен
	|	И ЧекККМВозврат.ЧекККМ = &ДокументОснование
	|");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьВозвратОтклиентаПоЧекуККМ(ДокументОснование)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВозвратТоваровОтКлиента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО
	|			ВозвратТоваровОтКлиента.Ссылка = ФискальныеОперации.ДокументОснование
	|			И ФискальныеОперации.НомерЧекаККМ <> &ПустаяСтрока
	|ГДЕ
	|	ВозвратТоваровОтКлиента.Проведен
	|	И ВозвратТоваровОтКлиента.ЧекККМ = &ДокументОснование
	|");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьКоррекцияПоЧекуККМ(ДокументОснование)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМКоррекции.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМКоррекции КАК ЧекККМКоррекции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО
	|			ЧекККМКоррекции.ДокументОснование = ФискальныеОперации.ДокументОснование
	|			И ФискальныеОперации.НомерЧекаККМ <> &ПустаяСтрока
	|ГДЕ
	|	ЧекККМКоррекции.Проведен
	|	И ЧекККМКоррекции.ДокументОснование = &ДокументОснование
	|");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция СписокРегистровДляКонтроля() Экспорт
	
	РегистрыДляКонтроля = Новый Массив;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение  Тогда
		РегистрыДляКонтроля.Добавить(Движения.СвободныеОстатки);
	КонецЕсли;
	
	Возврат РегистрыДляКонтроля;
	
КонецФункции

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли
