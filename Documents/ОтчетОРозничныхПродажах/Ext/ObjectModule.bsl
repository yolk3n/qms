#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда
		ЗаполнитьПоИнвентаризации(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
	ЗаполнитьПоЗначениямАвтозаполнения();
	
	ОбщегоНазначенияБольничнаяАптека.ЗаполнитьРеквизитыПоСкладу(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьДокумент();
	
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
	
	ОбщегоНазначенияБольничнаяАптека.ЗаполнитьРеквизитыПоСкладу(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	ОбработкаТабличнойЧастиСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, НепроверяемыеРеквизиты, Отказ);
	
	ТипКассы = Справочники.КассыККМ.РеквизитыКассыККМ(КассаККМ).ТипКассы;
	Если ТипКассы <> Перечисления.ТипыКассККМ.ФискальныйРегистратор
	 Или СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.ЗакрытаЧекиЗаархивированы Тогда
		ПроверитьКоличествоВозвращаемогоТовара(Отказ);
	КонецЕсли;
	
	Если ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор И Не ЗначениеЗаполнено(КассоваяСмена) Тогда
		ПроверитьКассовуюСмену(Отказ);
	КонецЕсли;
	
	ПроверитьОплатыПлатежнымиКартами(Отказ);
	
	ПараметрыУчетаНоменклатуры = ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект);
	ЗапасыСервер.ПроверитьЗаполнениеСерийНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры, НепроверяемыеРеквизиты, Отказ);
	ЗапасыСервер.ПроверитьЗаполнениеПартийНоменклатуры(ЭтотОбъект, ПараметрыУчетаНоменклатуры, НепроверяемыеРеквизиты, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеБольничнаяАптека.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбработкаТабличнойЧастиСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	СуммаДокумента = ЦенообразованиеБольничнаяАптекаКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС);
	
	ОбработкаТабличнойЧастиСервер.ЗаполнитьИсточникФинансирования(ЭтотОбъект);
	
	ЗапасыСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение
#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент()
	
	Автор = Пользователи.ТекущийПользователь();
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если Не ЗначениеЗаполнено(КассаККМ) Тогда
		КассаККМ = Справочники.КассыККМ.АвтономнаяКассаККМПоУмолчанию();
		Если ЗначениеЗаполнено(КассаККМ) Тогда
			ЗаполнитьДокументПоКассеККМ(КассаККМ);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаОбъекта = Метаданные().ПолноеИмя();
	Организация = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация, ТаблицаОбъекта);
	ПодразделениеОрганизации = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьПодразделениеПоУмолчанию(ПодразделениеОрганизации, Организация, ТаблицаОбъекта);
	Склад = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьРозничныйСкладПоУмолчанию(Склад, ПодразделениеОрганизации, ТаблицаОбъекта);
	
	НалогообложениеНДС = РозничныеПродажи.НалогообложениеНДС(Организация, Склад, Дата);
	
	НачалоКассовойСмены = НачалоДня(ТекущаяДатаСеанса());
	ОкончаниеКассовойСмены = КонецДня(ТекущаяДатаСеанса());
	
КонецПроцедуры

Процедура ЗаполнитьПоЗначениямАвтозаполнения()
	
	ОбщегоНазначенияБольничнаяАптека.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "Организация, Склад");
	ОбщегоНазначенияБольничнаяАптека.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "КассаККМ", "Организация, Склад");
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		ЗаполнитьДокументПоКассеККМ(КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоИнвентаризации(Инвентаризация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Инвентаризация);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК ИнвентаризацияТоваров,
	|	Документ.Организация КАК Организация,
	|	Документ.Склад КАК Склад,
	|	НЕ Документ.Проведен КАК ЕстьОшибкиПроведен,
	|	Документ.Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА Документ.Статус В (&ДопустимыеСтатусы)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	ВЫБОР
	|		КОГДА Документ.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиТипСклада
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|";
	
	ДопустимыеСтатусы = Новый Массив;
	ДопустимыеСтатусы.Добавить(Перечисления.СтатусыИнвентаризацииТоваров.Выполнено);
	Запрос.УстановитьПараметр("ДопустимыеСтатусы", ДопустимыеСтатусы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если Выборка.ЕстьОшибкиТипСклада Тогда
		ВызватьИсключение(НСтр("ru = 'Документ может быть заполнен только на основании инвентаризации по розничному складу.'"));
	КонецЕсли;
	
	ОбщегоНазначенияБольничнаяАптека.ПроверитьВозможностьВводаНаОсновании(
		Инвентаризация,
		Выборка.ЕстьОшибкиПроведен,
		Выборка.Статус,
		Выборка.ЕстьОшибкиСтатус,
		ДопустимыеСтатусы);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	ЗаполнитьДокументПоСкладу();
	ЗаполнитьТоварыПоИнвентаризации();
	
КонецПроцедуры

Процедура ЗаполнитьТоварыПоИнвентаризации() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ИнвентаризацияТоваров", ИнвентаризацияТоваров);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыКОформлению.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлению.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ТоварыКОформлению.Партия КАК Партия,
	|	ТоварыКОформлению.ИсточникФинансирования КАК ИсточникФинансирования,
	|	СУММА(ТоварыКОформлению.КОформлениюСписанияОстаток) КАК Количество,
	|	ЦеныНоменклатуры.Упаковка КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатуры.Цена КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКОформлению.Номенклатура КАК Номенклатура,
	|		ТоварыКОформлению.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ТоварыКОформлению.Партия КАК Партия,
	|		ТоварыКОформлению.ИсточникФинансирования КАК ИсточникФинансирования,
	|		ТоварыКОформлению.КОформлениюСписанияОстаток КАК КОформлениюСписанияОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыКОформлениюИзлишковНедостач.Остатки(
	|				,
	|				ДокументОснование = &ИнвентаризацияТоваров
	|					И Склад = &Склад
	|					И Организация = &Организация) КАК ТоварыКОформлению
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКОформлению.Номенклатура,
	|		ТоварыКОформлению.СерияНоменклатуры,
	|		ТоварыКОформлению.Партия,
	|		ТоварыКОформлению.ИсточникФинансирования,
	|		ТоварыКОформлению.КОформлениюСписания
	|	ИЗ
	|		РегистрНакопления.ТоварыКОформлениюИзлишковНедостач КАК ТоварыКОформлению
	|	ГДЕ
	|		ТоварыКОформлению.Регистратор = &Ссылка
	|		И ТоварыКОформлению.ДокументОснование = &ИнвентаризацияТоваров
	|		И ТоварыКОформлению.Активность = ИСТИНА) КАК ТоварыКОформлению
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены = &ВидЦены) КАК ЦеныНоменклатуры
	|		ПО ТоварыКОформлению.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И ТоварыКОформлению.СерияНоменклатуры = ЦеныНоменклатуры.СерияНоменклатуры
	|			И ТоварыКОформлению.Партия = ЦеныНоменклатуры.Партия
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.СерияНоменклатуры,
	|	ТоварыКОформлению.Партия,
	|	ТоварыКОформлению.ИсточникФинансирования,
	|	ЦеныНоменклатуры.Упаковка,
	|	ЦеныНоменклатуры.Цена
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.КОформлениюСписанияОстаток) > 0
	|";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Товары.Загрузить(Результат.Выгрузить());
		
		Действия = ОбработкаТабличнойЧастиКлиентСервер;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), НалогообложениеНДС);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоУпаковок());
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
		ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(ЭтотОбъект);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшированныхЗначений();
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТабличнуюЧасть(Товары, СтруктураДействий, КэшированныеЗначения);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по основанию ""%ДокументОснование%"" .'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументОснование%", ИнвентаризацияТоваров);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ИнвентаризацияТоваров");
		
	КонецЕсли;
	
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(ЭтотОбъект, ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(ЭтотОбъект));
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		ЗаполнитьДокументПоКассеККМ(ДанныеЗаполнения.КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоКассеККМ(КассаККМ)
	
	РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(КассаККМ);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыКассыККМ);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоСкладу()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	КассыККМ.Ссылка КАК КассаККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.АвтономнаяККМ)
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И КассыККМ.Владелец = &Организация
	|	И КассыККМ.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1
	   И Выборка.Следующий() Тогда
		КассаККМ = Выборка.КассаККМ;
		ЗаполнитьДокументПоКассеККМ(КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ИнициализацияИЗаполнение

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

Функция СписокРегистровДляКонтроля() Экспорт
	
	РегистрыДляКонтроля = Новый Массив;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РегистрыДляКонтроля.Добавить(Движения.СвободныеОстатки);
		РегистрыДляКонтроля.Добавить(Движения.СебестоимостьТоваров);
		РегистрыДляКонтроля.Добавить(Движения.ТоварыКОформлениюИзлишковНедостач);
	КонецЕсли;
	
	Возврат РегистрыДляКонтроля;
	
КонецФункции

Процедура ПроверитьКоличествоВозвращаемогоТовара(Отказ)
	
	ТабличнаяЧастьТовары = Товары.Выгрузить(,"Номенклатура, СерияНоменклатуры, Партия, ИсточникФинансирования, Количество");
	ТабличнаяЧастьТовары.Свернуть("Номенклатура, СерияНоменклатуры, Партия, ИсточникФинансирования", "Количество");
	Для каждого ВыборкаПоТоварам Из ТабличнаяЧастьТовары Цикл
		
		Если ВыборкаПоТоварам.Количество < 0 Тогда
			
			Остаток = -ВыборкаПоТоварам.Количество;
			
			ОтборСтрок = Новый Структура;
			ОтборСтрок.Вставить("Номенклатура", ВыборкаПоТоварам.Номенклатура);
			ОтборСтрок.Вставить("СерияНоменклатуры", ВыборкаПоТоварам.СерияНоменклатуры);
			ОтборСтрок.Вставить("Партия", ВыборкаПоТоварам.Партия);
			ОтборСтрок.Вставить("ИсточникФинансирования", ВыборкаПоТоварам.ИсточникФинансирования);
			МассивСтрок = Товары.НайтиСтроки(ОтборСтрок);
			// Изменим порядок строк на обратный
			НайденныеСтроки = Новый Массив;
			Для Каждого Строка Из МассивСтрок Цикл
				НайденныеСтроки.Вставить(0, Строка);
			КонецЦикла;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				Если НайденнаяСтрока.Количество > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Количество = ?(-НайденнаяСтрока.Количество >= Остаток, Остаток, -НайденнаяСтрока.Количество);
				Остаток = Остаток - Количество;
				
				ТекстОшибки = НСтр("ru='Количество возвращаемого товара превышает количество проданного на %1% %2%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1%", Количество * (НайденнаяСтрока.КоличествоВЕдиницахИзмерения / НайденнаяСтрока.Количество));
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%2%", НайденнаяСтрока.ЕдиницаИзмерения);
				
				АдресОшибки = " " + НСтр("ru='в строке %НомерСтроки% списка ""Товары""'");
				АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", НайденнаяСтрока.НомерСтроки);
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", НайденнаяСтрока.НомерСтроки, "КоличествоВЕдиницахИзмерения"),
					,
					Отказ);
				
				Если Остаток <= 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьОплатыПлатежнымиКартами(Отказ)
	
	СуммаОплатыПлатежнымиКартами = ОплатаПлатежнымиКартами.Итог("Сумма");
	Если ОплатаПлатежнымиКартами.Количество() > 0
	   И СуммаОплатыПлатежнымиКартами <> 0
	   И СуммаОплатыПлатежнымиКартами > Товары.Итог("СуммаСНДС") Тогда
		
		ТекстОшибки = НСтр("ru='Сумма оплаты платежными картами превышает сумму документа'");
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ОплатаПлатежнымиКартами",
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКассовуюСмену(Отказ)
	
	ОткрытаяКассоваяСмена = РозничныеПродажи.ПолучитьОткрытуюКассовуюСмену(КассаККМ, НачалоКассовойСмены, ОкончаниеКассовойСмены, Ссылка);
	Если ОткрытаяКассоваяСмена <> Неопределено Тогда
		
		Отказ = Истина;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='По данной кассе на дату %1 уже зарегистрирован %2'"),
			Формат(Дата, "ДЛФ=D"),
			ОткрытаяКассоваяСмена);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОкончаниеКассовойСмены)
	   И ЗначениеЗаполнено(СтатусКассовойСмены)
	   И СтатусКассовойСмены <> Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Поле ""Окончание смены"" не заполнено'"),
			ЭтотОбъект,
			"ОкончаниеКассовойСмены",
			,
			Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОкончаниеКассовойСмены)
	   И ОкончаниеКассовойСмены < НачалоКассовойСмены Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Время начала кассовой смены больше времени окончания кассовой смены'"),
			ЭтотОбъект,
			"ОкончаниеКассовойСмены",
			,
			Отказ);
		
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(СтатусКассовойСмены)
	   И СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта
	   И НачалоКассовойСмены <> Дата Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Время начала кассовой смены отличается от даты документа'"),
			ЭтотОбъект,
			"НачалоКассовойСмены",
			,
			Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатусКассовойСмены)
	   И СтатусКассовойСмены <> Перечисления.СтатусыКассовойСмены.Открыта
	   И ОкончаниеКассовойСмены <> Дата Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Время окончания кассовой смены отличается от даты документа'"),
			ЭтотОбъект,
			"ОкончаниеКассовойСмены",
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли