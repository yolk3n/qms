
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Печать
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьОтображениеТолькоВоВсехДействиях(Элементы.ПодменюПечать, Истина);
	// Конец СтандартныеПодсистемы.Печать
	
	// ПодключаемоеОборудование
	ПодключаемоеОборудованиеСервер.НастроитьФормуДляИспользованияПодключаемогоОборудования(ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	// ИнтеграцияСМобильнымПриложением
	ИнтеграцияСМобильнымПриложением.СоздатьКомандуЗагрузкиДанныхИзМобильногоПриложенияНаФорме(ЭтотОбъект, "Товары", Элементы.ГруппаТоварыКоманднаяПанель.Имя);
	// Конец ИнтеграцияСМобильнымПриложением
	
	КонтрольНаСкладеОтключен = Не Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить();
	
	ДанныеФискальнойОперации = РозничныеПродажи.ДанныеФискальнойОперации();
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
	РозничныеПродажи.ПодписатьГорячиеКлавишиНаКнопках(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода,ДисплейПокупателя,СчитывательМагнитныхКарт";
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	// Конец ПодключаемоеОборудование
	
	СтрокаДисплеяПокупателя = НСтр("ru = 'Здравствуйте!'");
	ПересчитатьДокументНаКлиенте();
	
	Если ПринудительнаяАвторизация Тогда
		ПодключитьОбработчикОжидания("ОткрытьОкноАвторизации", 0.5, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если ПодключаемоеОборудованиеКлиент.ОбрабатыватьОповещение(ЭтотОбъект, Источник) Тогда
		Если ПодключаемоеОборудованиеКлиент.ОбработатьПолучениеДанныхОтСканераШтрихкода(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбработатьШтрихкоды(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ВведенШтрихкод" И Источник = УникальныйИдентификатор Тогда
		ОбработатьШтрихкоды(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
	КонецЕсли;
	
	Если ИмяСобытия = "АвторизованПользователь" Тогда
		
		Если Параметр.Режим = "СменитьПрава" Тогда
			НастроитьПраваДляПользователя(Параметр.Пользователь);
			ПересчитатьДокументНаКлиенте();
		ИначеЕсли Параметр.Режим = "ЗакрытьЧекККМ" Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеКассовойСмены" Тогда
		СостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(Объект.КассаККМ);
		ЗаполнитьЗначенияСвойств(Объект, СостояниеКассовойСмены);
		Объект.КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ПодборТоваровКлиент.ОбработатьПодборТоваровВДокументСписания(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодбор(ВыбранноеЗначение.АдресТоваровВХранилище, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОценкаПроизводительностиБольничнаяАптекаКлиент.НачатьЗамерПроведенияДокумента(Объект.Ссылка, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПринудительноеЗавершениеРаботы Или ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПередЗакрытиемЧека(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить()
	
	ОбработкаТабличнойЧастиКлиент.ПоказатьВводШтрихкода(УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗагрузкуДанныхИзТСД", ЭтотОбъект);
	ОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(Оповещение, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Необходимо выбрать строку, для которой необходимо получить вес.'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьПолучениеВеса", ЭтотОбъект, ТекущаяСтрока);
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(Оповещение, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("МестоХраненияОстатка", "Склад");
	ПараметрыПодбора.Вставить("Склад", Объект.Склад);
	ПараметрыПодбора.Вставить("ИсточникФинансирования", Объект.ИсточникФинансирования);
	ПараметрыПодбора.Вставить("ВидЦены", Объект.ВидЦены);
	ПараметрыПодбора.Вставить("ЗапретитьИзменениеЦены", Истина);
	
	ПодборТоваровКлиент.ОткрытьПодборТоваровВДокументСписания(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныйЧек(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КассаККМ", Объект.КассаККМ);
	
	Оповестить = Новый ОписаниеОповещения("ОтложенныйЧекОбработкаВыбора", ЭтотОбъект);
	ОткрытьФорму("Документ.ЧекККМВозврат.Форма.ВыборОтложенногоЧека", ПараметрыОткрытия, ЭтотОбъект,,,, Оповестить);
	
КонецПроцедуры

&НаКлиенте
Процедура Заблокировать(Команда)
	
	ОткрытьОкноАвторизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОплатыПлатежнымиКартами(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ВыполнитьОбработкуОповещения(
		Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартами", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМенюОперацииСККМ(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("КассаККМ", Объект.КассаККМ);
	ПараметрыОткрытияФормы.Вставить("Кассир",   Объект.Кассир);
	ПараметрыОткрытияФормы.Вставить("ИзменитьКассуККМ", Ложь);
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.МенюОперацииСККМ", ПараметрыОткрытияФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличными(Команда)
	
	ОчиститьСообщения();
	
	Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Оповестить = Новый ОписаниеОповещения("ОплатитьНаличнымиОбработкаОповещения", ЭтотОбъект);
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(ЭтотОбъект, Оповестить);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьПлатежнойКартой(Команда)
	
	ОчиститьСообщения();
	
	Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ОтменитьОплатуПлатежнымиКартами(
		Новый ОписаниеОповещения("ОтменитьОплатуПлатежнымиКартамиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СмешаннаяОплата(Команда)
	
	ОчиститьСообщения();
	
	Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
		ЭтотОбъект,
		Новый ОписаниеОповещения("СмешаннаяОплатаОбработкаОповещения", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	// ИнтеграцияСМобильнымПриложением
	Оповестить = Новый ОписаниеОповещения("ОбработатьЗагрузкуДанныхИзТСД", ЭтотОбъект);
	ИнтеграцияСМобильнымПриложениемКлиент.ВыполнитьКомандуЗагрузкиДанныхИзМобильногоПриложения(ЭтотОбъект, Команда, Оповестить);
	// Конец ИнтеграцияСМобильнымПриложением
	
	ОбщегоНазначенияБольничнаяАптекаКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Список "Товары"
#Область Товары

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент <> Элементы.ТоварыШтрихкод Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ТоварыШтрихкод.СписокВыбора.Очистить();
		Возврат;
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("Номенклатура"     , ТекущиеДанные.Номенклатура);
	Структура.Вставить("СерияНоменклатуры", ТекущиеДанные.СерияНоменклатуры);
	Структура.Вставить("Партия"           , ТекущиеДанные.Партия);
	
	Элементы.ТоварыШтрихкод.СписокВыбора.ЗагрузитьЗначения(РозничныеПродажиВызовСервера.ПолучитьШтрихкодыНоменклатуры(Структура));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ПраваДоступа.КорректировкаСтрок Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если Не ПраваДоступа.КорректировкаСтрок Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), ТекущаяСтрока.СерияНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуПродажи(), Действия.ПолучитьПараметрыЗаполненияЦены(Объект));
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	ПараметрыПересчета = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчета);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчета);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуПродажи(), Действия.ПолучитьПараметрыЗаполненияЦены(Объект));
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчета = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчета);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчета);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьЦенуЗаУпаковку(), Действия.ПолучитьПараметрыПересчетаЦеныЗаУпаковку(ТекущаяСтрока.Количество));
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
		ПараметрыПересчета = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчета);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчета);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоВЕдиницахИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчета = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчета);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчета);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьЦену());
	ПараметрыПересчета = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчета);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчета);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	ПараметрыПересчета = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчета);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчета);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	ПараметрыПересчета = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчета);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элемент.Родитель.ТекущиеДанные;
	ОтборПартий = Новый Структура;
	ОтборПартий.Вставить("Документ"     , Объект.Ссылка);
	ОтборПартий.Вставить("Организация"  , Объект.Организация);
	ОтборПартий.Вставить("Склад"        , Объект.Склад);
	
	ПараметрыВыбораПартии = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыВыбораПартии(ОтборПартий, ТекущаяСтрока);
	ОбработкаТабличнойЧастиКлиент.ВыбратьПартиюНоменклатуры(ЭтотОбъект, Элемент, ПараметрыВыбораПартии, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуПродажи(), Действия.ПолучитьПараметрыЗаполненияЦены(Объект));
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчета = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчета);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчета);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти // Товары

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	СостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(Объект.КассаККМ);
	ЗаполнитьЗначенияСвойств(Объект, СостояниеКассовойСмены);
	Объект.КассоваяСмена = СостояниеКассовойСмены.ОтчетОРозничныхПродажах;
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	
	Если ДанныеФискальнойОперации <> Неопределено Тогда
		ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека = Неопределено;
		ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека = Неопределено;
	КонецЕсли;
	
	ОбновитьЗаголовокФормы();
	
	НастроитьРМК();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеЦенаВключаетНДС(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСуммаНДС(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеИсточниковФинансирования(ЭтотОбъект);
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСерийНоменклатуры(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПартий(ЭтотОбъект);
	
	// Серии номенклатуры
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСерияНоменклатурыДополнительно.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтатусУказанияСерий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Партии номенклатуры
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПартияДополнительно.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СтатусУказанияПартий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Заголовок = НСтр("ru = 'Возврат (Кассир: %Кассир%)'");
	Заголовок = СтрЗаменить(Заголовок, "%Кассир%", Объект.Кассир);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьРМК()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолучитьСсылкиНаОборудование();
	
	Если Объект.ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		Элементы.Товары.ТолькоПросмотр                  = Истина;
		Элементы.ТоварыПоискПоШтрихкоду.Доступность     = Ложь;
		Элементы.ТоварыЗагрузитьДанныеИзТСД.Доступность = Ложь;
		Элементы.ТоварыПолучитьВес.Доступность          = Ложь;
		Элементы.ТоварыПодобратьТовары.Доступность      = Ложь;
	КонецЕсли;
	
	НастроитьПраваДляПользователя(Объект.Кассир);
	
	ПринудительнаяАвторизация = Константы.ИспользоватьАвторизациюРМК.Получить();
	Элементы.Заблокировать.Видимость = ПринудительнаяАвторизация;
	
	ДоступныеВидыОплаты = ДоступныеВидыОплаты(ЭтотОбъект);
	Элементы.ОплатитьНаличными.Видимость = ДоступныеВидыОплаты.Наличные    И Не Объект.ОплатаПлатежнымиКартами.Итог("Сумма") > 0;
	Элементы.ОплатитьКартой.Видимость    = ДоступныеВидыОплаты.ПлатежныеКарты И Объект.ОплатаПлатежнымиКартами.Итог("Сумма") > 0;
	Элементы.СмешаннаяОплата.Видимость   = ДоступныеВидыОплаты.ПлатежныеКарты И Объект.ОплатаПлатежнымиКартами.Итог("Сумма") > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗагрузкуДанныхИзТСД(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеВеса(РезультатВыполнения, ТекущаяСтрока) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекущаяСтрока.КоличествоВЕдиницахИзмерения = РезультатВыполнения.Вес;
		ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчета = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчета);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчета);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеИнформационнойПанели(Форма)
	
	НаименованиеТовара = Новый ФорматированнаяСтрока("");
	РасчетСуммы = Новый ФорматированнаяСтрока("");
	
	ИнформацияОбОплате = ИнформацияОбОплате(Форма);
	
	Форма.ИнформационнаяПанельСуммаКВозврату                  = ИнформацияОбОплате.СуммаКОплате;
	Форма.ИнформационнаяПанельСуммаКВозвратуНаличными         = ИнформацияОбОплате.СуммаКОплате - ИнформацияОбОплате.ПлатежныеКарты;
	Форма.ИнформационнаяПанельСуммаКВозвратуПлатежнымиКартами = ИнформацияОбОплате.ПлатежныеКарты;
	
	ОтобразитьСдачу = Форма.ТолькоПросмотр = Истина;
	Если ОтобразитьСдачу Тогда
		
		ИнформацияОбОплате = ИнформацияОбОплате(Форма);
		
		Оплачено = ИнформацияОбОплате.ИтогоОплачено;
		КОплате = ИнформацияОбОплате.СуммаКОплате;
		
		Сдача = Оплачено - КОплате;
		
		Если Сдача < 0 Тогда
			РасчетСуммы = Новый ФорматированнаяСтрока(
				СтрЗаменить(НСтр("ru = 'Осталось возвратить: %1'"), "%1", Формат(-Сдача, "ЧДЦ=2; ЧН=0.00")));
		Иначе
			РасчетСуммы = Новый ФорматированнаяСтрока(
				СтрЗаменить(НСтр("ru = 'Получить сдачу: %1'"), "%1", Формат(Сдача, "ЧДЦ=2; ЧН=0.00")));
		КонецЕсли;
		
	Иначе
		
		КоличествоСтрок = Форма.Объект.Товары.Количество();
		
		ТекущаяСтрока = Форма.Элементы.Товары.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено И КоличествоСтрок > 0 Тогда
			ТекущиеДанные = Форма.Объект.Товары[КоличествоСтрок - 1];
			Форма.Элементы.Товары.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
		ИначеЕсли ТекущаяСтрока = Неопределено И КоличествоСтрок = 0 Тогда
			ТекущиеДанные = Неопределено;
		Иначе
			ТекущиеДанные = Форма.Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
		КонецЕсли;
		
		Если ТекущиеДанные <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
				НаименованиеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					ТекущиеДанные.Номенклатура,
					ТекущиеДанные.СерияНоменклатуры,
					ТекущиеДанные.Партия);
				НаименованиеТовара = Новый ФорматированнаяСтрока(НаименованиеТовара);
			КонецЕсли;
			
			Если ТекущиеДанные.Сумма <> 0 Тогда
				
				// Количество x Цена
				ФорматКоличество = ФорматнаяСтрока(ТекущиеДанные.Количество, 3);
				ФорматЦена = ФорматнаяСтрока(ТекущиеДанные.Цена, 2);
				ЦенаКоличество = СтрШаблон("%1 x %2",
					Формат(ТекущиеДанные.КоличествоВЕдиницахИзмерения, ФорматКоличество),
					Формат(ТекущиеДанные.Цена, ФорматЦена));
				
				// Сумма
				Сумма = " = " + Формат(ТекущиеДанные.Сумма, ФорматЦена);
				
				РасчетСуммы = Новый ФорматированнаяСтрока(
					ЦенаКоличество,
					Сумма);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.ИнформационнаяПанельРасчетСуммы             = РасчетСуммы;
	Форма.ИнформационнаяПанельНаименованиеТовара      = НаименованиеТовара;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФорматнаяСтрока(Число, РазрядностьДробнойЧасти)
	
	Если Цел(Число) = Число Тогда
		Возврат "ЧН=0; ЧДЦ=;";
	Иначе
		Возврат "ЧН=0; ЧДЦ=" + РазрядностьДробнойЧасти;
	КонецЕсли
	
КонецФункции

&НаСервере
Процедура НастроитьПраваДляПользователя(Пользователь)
	
	ПраваДоступа = РозничныеПродажи.ПраваДоступаРМК(Пользователь);
	
	Элементы.ТоварыДобавить.Доступность    = ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыСкопировать.Доступность = ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыУдалить.Доступность     = ПраваДоступа.КорректировкаСтрок;
	
	Элементы.ТоварыКонтекстноеМенюДобавить.Доступность    = ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыКонтекстноеМенюСкопировать.Доступность = ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыКонтекстноеМенюУдалить.Доступность = ПраваДоступа.КорректировкаСтрок;
	
	Элементы.ТоварыШтрихкод.ТолькоПросмотр                     = Не ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыНоменклатура.ТолькоПросмотр                 = Не ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыСерияНоменклатуры.ТолькоПросмотр            = Не ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыПартия.ТолькоПросмотр                       = Не ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыЕдиницаИзмерения.ТолькоПросмотр             = Не ПраваДоступа.КорректировкаСтрок;
	Элементы.ТоварыКоличествоВЕдиницахИзмерения.ТолькоПросмотр = Не ПраваДоступа.КорректировкаСтрок;
	
	Объект.Кассир = Пользователь;
	РеквизитыКассира = РозничныеПродажи.РеквизитыКассира(Пользователь);
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныйЧекОбработкаВыбора(ОтложенныйЧек, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ОтложенныйЧек) И Объект.Ссылка <> ОтложенныйЧек Тогда
		ЗагрузитьНовыйЧек(ОтложенныйЧек);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОкноАвторизации()
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.Авторизация", Новый Структура("Режим", "СменитьПрава"), ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка штрихкодов
#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияСДобавленнымиСтроками = Новый Структура;
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЦенуПродажи(), Действия.ПолучитьПараметрыЗаполненияЦены(Объект));
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьСумму());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	ПараметрыПересчета = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчета);
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчета);
	
	ДействияСИзмененнымиСтроками = Новый Структура;
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчета = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчета);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчета);
	
	ИзменятьКоличество = Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиШтрихкодов(ДанныеШтрихкодов, ДействияСДобавленнымиСтроками, ДействияСИзмененнымиСтроками);
	ПараметрыДействия.ИзменятьКоличество = ИзменятьКоличество;
	ПараметрыДействия.ПропускатьНенайденныеШтрихкоды = Истина;
	ПараметрыДействия.ПараметрыУчетаНоменклатуры = ПараметрыУчетаНоменклатуры;
	ПараметрыДействия.ШтрихкодыВТЧ = Истина;
	
	ОбработатьШтрихкодыНаСервере(ПараметрыДействия, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиКлиент.СообщитьОНеизвестныхШтрихкодах(ПараметрыДействия);
	
	Если ПараметрыДействия.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = ПараметрыДействия.ТекущаяСтрока;
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыНаСервере(ПараметрыДействия, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиСервер.ОбработатьШтрихкоды(ЭтотОбъект, Объект, ПараметрыДействия, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти // ОбработкаШтрихкодов

////////////////////////////////////////////////////////////////////////////////
// Обработка подбора
#Область ОбработкаПодбора

&НаСервере
Процедура ОбработатьПодбор(Знач АдресТоваровВХранилище, КэшированныеЗначения)
	
	СписокТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСтавкуНДС(), Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчета = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Объект);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчета);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчета);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшированныхЗначений();
	
	Для Каждого СтрокаТовара Из СписокТоваров Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти // ОбработкаПодбора

////////////////////////////////////////////////////////////////////////////////
// Операции с чеком
#Область ОперацииСЧеком

&НаКлиенте
Процедура ЗагрузитьНовыйЧек(Ссылка)
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Ссылка", Ссылка);
		
		Отказ = Ложь;
		Оповестить = Новый ОписаниеОповещения("ЗагрузитьНовыйЧекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПередЗакрытиемЧека(Отказ, Оповестить);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		НовыйЧекНаСервере(Ссылка);
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНовыйЧекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НовыйЧекНаСервере(ДополнительныеПараметры.Ссылка);
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура НовыйЧекНаСервере(Ссылка)
	
	НовыйЧек = Ссылка.ПолучитьОбъект();
	НовыйЧек.Дата = ТекущаяДатаСеанса();
	
	РазблокироватьДанныеФормыДляРедактирования();
	ЗначениеВРеквизитФормы(НовыйЧек, "Объект");
	
	ТолькоПросмотр = Ложь;
	Модифицированность = Ложь;
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧек()
	
	ЕстьОшибки = Ложь;
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Документ помечен на удаление'"), Объект.Ссылка,,, ЕстьОшибки);
	КонецЕсли;
	
	Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	Модифицированность = Истина;
	
	Если Не ЕстьОшибки И ПроверитьЗаполнение() Тогда
		ВыполнитьДействиеПослеЗаписи(
			Новый ОписаниеОповещения("ПробитьЧекПослеПроведения", ЭтотОбъект),
			НСтр("ru = 'Перед выполнением операции пробития чека не удалось провести документ.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекПослеПроведения(Проведен, ДополнительныеПараметры) Экспорт
	
	Если Не Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПробитьЧекВыполнитьЗавершение", ЭтотОбъект, Новый Структура("ОписаниеОповещения", ОписаниеОповещения));
	Если Не ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		ДанныеЧека = ПодготовитьПараметрыДляПробитияЧека();
		Оповещение.ДополнительныеПараметры.Вставить("ПараметрыОперацииФискализацииЧека", ДанныеЧека);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
			Оповещение,
			УникальныйИдентификатор,
			ИдентификаторУстройства,
			ДанныеЧека);
		
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Новый Структура("Результат", Истина));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекВыполнитьЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ИзмененныеДанныеЗаписаны = Ложь;
	ВыполненаОперацияНаУстройстве = Ложь;
	
	Если РезультатВыполнения.Результат Тогда
		
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
		Объект.Дата   = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		ДанныеДляЖурналаРегистрации = Новый Структура;
		ДанныеДляЖурналаРегистрации.Вставить("Дата"  , Объект.Дата);
		ДанныеДляЖурналаРегистрации.Вставить("Статус", Объект.Статус);
		
		ПараметрыФискализации = Неопределено;
		Если РезультатВыполнения.Свойство("ВыходныеПараметры")
		   И РезультатВыполнения.ВыходныеПараметры.Количество() > 1 Тогда
			
			ДанныеДляЖурналаРегистрации.Вставить("НомерЧекаККМ", РезультатВыполнения.ВыходныеПараметры[1]);
			
			// Если данные в регистр ФискальныеОперации не были записаны - произошла ошибка при записи.
			Если РезультатВыполнения.ВыходныеПараметры.Количество() > 8 Тогда
				ПараметрыФискализации = РезультатВыполнения.ВыходныеПараметры[8];
			КонецЕсли;
			
		КонецЕсли;
		
		ВыполненаОперацияНаУстройстве = Истина;
		Модифицированность = Истина;
		
		ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
		ИзмененныеДанныеЗаписаны = ЗаписатьФискальнуюОперациюНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи, ПараметрыФискализации);
		Если Не ИзмененныеДанныеЗаписаны Тогда
			
			ДополнительныеПараметрыПовторЗаписи = Новый Структура;
			ДополнительныеПараметрыПовторЗаписи.Вставить("ПараметрыФискализации", ПараметрыФискализации);
			ДополнительныеПараметрыПовторЗаписи.Вставить("ОписаниеОповещения", ДополнительныеПараметры.ОписаниеОповещения);
			ДополнительныеПараметрыПовторЗаписи.Вставить("ТекстСообщения", НСтр("ru = 'После пробития чека на ФР не удалось сохранить документ.'"));
			ДополнительныеПараметрыПовторЗаписи.Вставить("ВозвращатьРезультатФункции", Ложь);
			ДополнительныеПараметрыПовторЗаписи.Вставить("РезультатПриУспешномПроведении", Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Истина));
			ДополнительныеПараметрыПовторЗаписи.Вставить("РезультатПриОтмене", Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Ложь));
			ДополнительныеПараметрыПовторЗаписи.Вставить("ИмяПроцедуры", "ЗаписатьФискальнуюОперациюНаСервере");
			ДополнительныеПараметрыПовторЗаписи.Вставить("РезультатОперации", ИзмененныеДанныеЗаписаны);
			
			Оповестить = Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметрыПовторЗаписи);
			Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
				ВыполнитьОбработкуОповещения(Оповестить, КодВозвратаДиалога.Отмена);
			Иначе
				ПоказатьВопрос(
					Оповестить,
					ДополнительныеПараметрыПовторЗаписи.ТекстСообщения,
					РежимДиалогаВопрос.ПовторитьОтмена,
					10,
					КодВозвратаДиалога.Повторить,
					,
					КодВозвратаДиалога.Повторить);
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		ШаблонСообщенияОбОшибке = НСтр(
			"ru='При печати чека произошла ошибка.
				|Чек не напечатан на фискальном регистраторе.
				|Дополнительное описание:
				|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщенияОбОшибке, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОписаниеОповещения,
		Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
			ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны));
	
КонецПроцедуры

&НаКлиенте
Функция ЗаписатьФискальнуюОперациюНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи, ПараметрыФискализации)
	
	Результат = ЗаписатьФискальнуюОперациюНаСервере(ТребуетсяПовторнаяПопыткаЗаписи, ПараметрыФискализации);
	
	Если Результат Тогда
		Оповестить("Запись_ЧекККМ", Новый Структура, Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаписатьФискальнуюОперациюНаСервере(ТребуетсяПовторнаяПопыткаЗаписи, ПараметрыФискализации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "Документ.ЧекККМВозврат";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		Блокировка.Заблокировать();
		
		Если ПараметрыФискализации <> Неопределено
		   И Не ПараметрыФискализации.ОперацияЗаписана Тогда
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить();
			ЭлементБлокировки.Область = "РегистрСведений.ФискальныеОперации";
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировки.УстановитьЗначение("ДокументОснование", ПараметрыФискализации.ДокументОснование);
			Блокировка.Заблокировать();
			
			ОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗаписатьФискальнуюОперацию(ПараметрыФискализации);
			
		КонецЕсли;
		
		Результат = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТребуетсяПовторнаяПопыткаЗаписи = Истина;
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПробитьЧекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ВыполненаОперацияНаУстройстве
	   И Результат.ИзмененныеДанныеЗаписаны Тогда
		
		ТолькоПросмотр = Истина;
		
	Иначе
		
		Если Результат.ВыполненаОперацияНаУстройстве И Не Результат.ИзмененныеДанныеЗаписаны Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Данные", Объект.Ссылка);
			ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДанныеДляЖурналаРегистрации);
			ПараметрыФормы.Вставить("ТекстСообщения",
				НСтр("ru = 'ВНИМАНИЕ! Произошла исключительная ситуация:
				|Чек ККМ пробит, но не зафиксирован в системе.'"));
			
			ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьЧек(Ссылка)
	
	Результат = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	ЧекОбъект = Ссылка.ПолучитьОбъект();
	
	Если ЧекОбъект.Статус = Перечисления.СтатусыЧековККМ.Пробит Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Пробитый чек не может быть удален'"));
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ЧекОбъект.Удалить();
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемЧека(Отказ, ОповещениеОЗакрытии = Неопределено)
	
	Кнопки = Новый СписокЗначений;
	
	Если Не ТолькоПросмотр И (Модифицированность Или Не Объект.Ссылка.Пустая()) Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные чека ККМ были изменены.'");
		
		Если ПраваДоступа.Отложить Тогда
			Кнопки.Добавить(1, НСтр("ru = 'Отложить'"));
		КонецЕсли;
		
		Если Не Объект.Ссылка.Пустая() И ПраваДоступа.КорректировкаСтрок Тогда
			Кнопки.Добавить(4, НСтр("ru = 'Удалить чек'"));
		КонецЕсли;
		
		Если ПраваДоступа.КорректировкаСтрок Или Объект.Ссылка.Пустая()Тогда
			Если Модифицированность Тогда
				Кнопки.Добавить(3, НСтр("ru = 'Закрыть без сохранения'"));
			Иначе
				Кнопки.Добавить(3, НСтр("ru = 'Закрыть'"));
			КонецЕсли;
		КонецЕсли;
		
		Кнопки.Добавить(99, НСтр("ru = 'Отмена'"));
		
	КонецЕсли;
	
	Если Кнопки.Количество() > 0 Тогда
		
		Отказ = Истина;
		ОповещениеПродолжения = Новый ОписаниеОповещения("ПередЗакрытиемЧекаПродолжение", ЭтотОбъект, Новый Структура("ОповещенияОЗавершении", ОповещениеОЗакрытии));
		ПоказатьВопрос(ОповещениеПродолжения, ТекстВопроса, Кнопки);
		
	Иначе
		
		Если ОповещениеОЗакрытии <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЧекаПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("ПередЗакрытиемЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если РезультатВопроса = 1 Тогда
		
		// Отложить чек без резервирования
		ОтложитьНаКлиенте(ОповещениеПродолжения);
		
	ИначеЕсли РезультатВопроса = 3 Тогда
		
		// Закрыть без сохранения.
		ВыполнитьОбработкуОповещения(ОповещениеПродолжения, Истина);
		
	ИначеЕсли РезультатВопроса = 4 Тогда
		
		// Удалить чек.
		УдалениеВыполнено = УдалитьЧек(Объект.Ссылка);
		Если УдалениеВыполнено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПродолжения, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьНаКлиенте(ОповещениеПриЗавершении)
	
	Модифицированность = Истина;
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	Результат = ОтложитьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
	
	Если Не Результат Тогда
		
		ДополнительныеПараметрыПопытка = Новый Структура;
		ДополнительныеПараметрыПопытка.Вставить("ОписаниеОповещения", ОповещениеПриЗавершении);
		ДополнительныеПараметрыПопытка.Вставить("ТекстСообщения", НСтр("ru = 'После выполнения операции отмены оплаты не удалось записать документ.'"));
		ДополнительныеПараметрыПопытка.Вставить("ВозвращатьРезультатФункции", Истина);
		ДополнительныеПараметрыПопытка.Вставить("ИмяПроцедуры", "ОтложитьНаСервере");
		ДополнительныеПараметрыПопытка.Вставить("РезультатОперации", Результат);
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметрыПопытка);
			Возврат;
		КонецЕсли;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметрыПопытка),
			ДополнительныеПараметрыПопытка.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтложитьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи)
	
	ОтложитьВыполнено = Истина;
	
	СтарыйСтатус  = Объект.Статус;
	Объект.Статус = Перечисления.СтатусыЧековККМ.Отложен;
	Объект.Дата   = ТекущаяДатаСеанса();
	
	Попытка
		
		ОтложитьВыполнено = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		
		Если Не ОтложитьВыполнено Тогда
			Объект.Статус = СтарыйСтатус;
		КонецЕсли;
		
	Исключение
		
		Объект.Статус = СтарыйСтатус;
		ОтложитьВыполнено = Ложь;
		
	КонецПопытки;
	
	Возврат ОтложитьВыполнено;
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемЧекаЗавершение(РезультатОперации, ДополнительныеПараметры) Экспорт
	
	Оповестить("Запись_ЧекККМВозврат", Новый Структура, Неопределено);
	
	Если РезультатОперации Тогда
		
		Если ДополнительныеПараметры.ОповещенияОЗавершении = Неопределено Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Закрыть(Неопределено);
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещенияОЗавершении, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеПослеЗаписи(ОповещениеПриЗавершении, ТекстСообщения)
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
	Если Не ИзмененныеДанныеЗаписаны Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОповещениеПриЗавершении);
		ДополнительныеПараметры.Вставить("ТекстСообщения", ТекстСообщения);
		ДополнительныеПараметры.Вставить("ВозвращатьРезультатФункции", Истина);
		ДополнительныеПараметры.Вставить("ИмяПроцедуры", "ЗаписатьНаСервере");
		ДополнительныеПараметры.Вставить("РезультатОперации", ИзмененныеДанныеЗаписаны);
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметры);
			Возврат;
		КонецЕсли;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ДополнительныеПараметры.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена,
			10,
			КодВозвратаДиалога.Повторить,
			,
			КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи = Неопределено)
	
	Если Модифицированность Тогда
		
		Результат = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		
		Если Результат Тогда
			Оповестить("Запись_ЧекККМВозврат", Новый Структура, Неопределено);
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи = Неопределено)
	
	Если Объект.Ссылка.Пустая() Тогда
		Значение = РеквизитФормыВЗначение("Объект");
		Значение.УстановитьСсылкуНового(Документы.ЧекККМВозврат.ПолучитьСсылку());
		ЗначениеВРеквизитФормы(Значение, "Объект");
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "Документ.ЧекККМВозврат";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		Блокировка.Заблокировать();
		
		Результат = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТребуетсяПовторнаяПопыткаЗаписи = Истина;
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОшибкаПриПроведенииЧекаВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Отмена Тогда
		
		ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
		Если ДополнительныеПараметры.ИмяПроцедуры = "ЗаписатьНаСервере" Тогда
			РезультатОперации = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = "ЗаписатьФискальнуюОперациюНаСервере" Тогда
			РезультатОперации = ЗаписатьФискальнуюОперациюНаСервере(ТребуетсяПовторнаяПопыткаЗаписи, ДополнительныеПараметры.ПараметрыФискализации);
		ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = "ОтложитьНаСервере" Тогда
			РезультатОперации = ОтложитьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		КонецЕсли;
		
		Если РезультатОперации Тогда
			
			ВыполнитьОбработкуОповещения(
				ДополнительныеПараметры.ОписаниеОповещения,
				?(ДополнительныеПараметры.ВозвращатьРезультатФункции, РезультатОперации, ДополнительныеПараметры.РезультатПриУспешномПроведении));
			
		Иначе
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				ДополнительныеПараметры.ТекстСообщения,
				РежимДиалогаВопрос.ПовторитьОтмена,
				10,
				КодВозвратаДиалога.Повторить,
				,
				КодВозвратаДиалога.Повторить);
			
		КонецЕсли;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОписаниеОповещения,
			?(ДополнительныеПараметры.ВозвращатьРезультатФункции, ДополнительныеПараметры.РезультатОперации, ДополнительныеПараметры.РезультатПриОтмене));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыДляПробитияЧека()
	
	ПараметрыФискализацииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	// Подготовка таблицы товаров
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ЗначениеСтавкиНДС = Неопределено;
		Иначе
			СтавкаНДС = ЦенообразованиеБольничнаяАптекаКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЧ.СтавкаНДС);
			ЗначениеСтавкиНДС = СтавкаНДС * 100;
		КонецЕсли;
		
		СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		
		НаименованиеТовара = Строка(СтрокаТЧ.Номенклатура)
			+ ?(ЗначениеЗаполнено(СтрокаТЧ.СерияНоменклатуры), " (" + Строка(СтрокаТЧ.СерияНоменклатуры) + ")", "");
		
		СтрокаПозицииЧека.НомерСтрокиТовара = СтрокаТЧ.НомерСтроки;
		СтрокаПозицииЧека.Наименование   = НаименованиеТовара;
		СтрокаПозицииЧека.Количество     = СтрокаТЧ.КоличествоВЕдиницахИзмерения;
		СтрокаПозицииЧека.Цена           = СтрокаТЧ.Цена;
		СтрокаПозицииЧека.Сумма          = СтрокаТЧ.СуммаСНДС;
		СтрокаПозицииЧека.ЦенаСоСкидками = Окр(СтрокаПозицииЧека.Сумма / СтрокаПозицииЧека.Количество, 2, 1); // Обязательно, Цена с учетом скидок и наценок (Необходимо начиная с ФФД 1.0.5 и выше)
		СтрокаПозицииЧека.СтавкаНДС      = ЗначениеСтавкиНДС;
		СтрокаПозицииЧека.СуммаНДС       = СтрокаТЧ.СуммаНДС;
		СтрокаПозицииЧека.НомерСекции    = 1;
		СтрокаПозицииЧека.Штрихкод       = СтрокаТЧ.Штрихкод;
		
		СтрокаПозицииЧека.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой; // Признак способа расчета. Обязательно для ФФД 1.0.5 и выше.
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар; // Признак предмета расчета. Обязательно для ФФД 1.1 и выше.
		
		ОписаниеПолучаемыхДанных = Новый Структура("КодВидаНоменклатурнойКлассификации", "КлассификацияМедицинскихИзделийПоВидам.КодВидаНоменклатурнойКлассификации");
		ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.Номенклатура, ОписаниеПолучаемыхДанных);
		Если ЗначениеЗаполнено(ДанныеНоменклатуры.КодВидаНоменклатурнойКлассификации) Тогда
			СтрокаПозицииЧека.КодВидаНоменклатурнойКлассификации = ДанныеНоменклатуры.КодВидаНоменклатурнойКлассификации;
		КонецЕсли;
		
		ПараметрыФискализацииЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
	КонецЦикла;
	
	ПараметрыФискализацииЧека.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	
	ЕстьЭлектроннаяОтправка = Ложь;
	Если ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail
	   И ЗначениеЗаполнено(ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека) Тогда
		ПараметрыФискализацииЧека.Отправляет1СEmail = Не ДанныеФискальнойОперации.ОтправлятьEmailЧерезОФД;
		ПараметрыФискализацииЧека.ПокупательEmail = ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека;
		ЕстьЭлектроннаяОтправка = Истина;
	КонецЕсли;
	Если ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS
	   И ЗначениеЗаполнено(ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека) Тогда
		ПараметрыФискализацииЧека.Отправляет1СSMS = Не ДанныеФискальнойОперации.ОтправлятьSMSЧерезОФД;
		ПараметрыФискализацииЧека.ПокупательНомер = "+7" + РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека);
		ЕстьЭлектроннаяОтправка = Истина;
	КонецЕсли;
	
	ПараметрыФискализацииЧека.ОтправительEmail = ДанныеФискальнойОперации.ОтправительEmail;
	
	ПараметрыФискализацииЧека.Электронно = ЕстьЭлектроннаяОтправка И ДанныеФискальнойОперации.НеПечататьФискальныйЧек;
	
	ПараметрыФискализацииЧека.СерийныйНомер = ПараметрыКассыККМ.СерийныйНомер;
	
	ПараметрыФискализацииЧека.ДокументОснование = Объект.Ссылка;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ПараметрыФискализацииЧека.Кассир = РеквизитыКассира.Наименование;
	ПараметрыФискализацииЧека.Вставить("ИмяКассира", РеквизитыКассира.Наименование);
	ПараметрыФискализацииЧека.КассирИНН = РеквизитыКассира.ИНН;
	
	ПараметрыФискализацииЧека.Организация         = СостояниеКассовойСмены.Организация;
	ПараметрыФискализацииЧека.ОрганизацияНазвание = СостояниеКассовойСмены.СведенияООрганизации.ОфициальноеНаименование;
	ПараметрыФискализацииЧека.ОрганизацияИНН      = СостояниеКассовойСмены.СведенияООрганизации.ИНН;
	ПараметрыФискализацииЧека.ОрганизацияКПП      = СостояниеКассовойСмены.СведенияООрганизации.КПП;
	ПараметрыФискализацииЧека.НомерКассы          = "00001";
	ПараметрыФискализацииЧека.НомерЧека           = 1;
	ПараметрыФискализацииЧека.НомерСмены          = 1;
	
	ПараметрыФискализацииЧека.ТорговыйОбъект         = СостояниеКассовойСмены.КассаККМ;
	ПараметрыФискализацииЧека.АдресМагазина          = СостояниеКассовойСмены.АдресСклада;
	ПараметрыФискализацииЧека.НаименованиеМагазина   = Строка(СостояниеКассовойСмены.Склад);
	ПараметрыФискализацииЧека.СистемаНалогообложения = СостояниеКассовойСмены.СистемаНалогообложения;
	
	// Подготовка таблицы оплат
	ИнформацияОбОплате = ИнформацияОбОплате(ЭтотОбъект);
	
	// Наличные
	Если ИнформацияОбОплате.Наличные > 0 Тогда
		СтрокаОплаты = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
		СтрокаОплаты.Сумма = ИнформацияОбОплате.Наличные;
		ПараметрыФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Безналичные
	Если ИнформацияОбОплате.ПлатежныеКарты > 0 Тогда
		СтрокаОплаты = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыСтрокиОплаты();
		СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно;
		СтрокаОплаты.Сумма = ИнформацияОбОплате.ПлатежныеКарты;
		ПараметрыФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Если ПараметрыКассыККМ.ДоступнаПередачаДанных Тогда
		// При необходимости будет проведен формато-логический контроль
		ПараметрыФискализацииЧека.СпособФорматноЛогическогоКонтроля = ПараметрыКассыККМ.СпособФорматноЛогическогоКонтроля;
		ПараметрыФискализацииЧека.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = ПараметрыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
		Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ПараметрыФискализацииЧека) Тогда
			ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ПараметрыФискализацииЧека);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыФискализацииЧека;
	
КонецФункции

#КонецОбласти // ОперацииСЧеком

////////////////////////////////////////////////////////////////////////////////
// Операции по оплате
#Область Оплата

&НаКлиенте
Процедура ОплатитьНаличнымиОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ОткрытьФормуОплатыНаличными", ЭтотОбъект),
		НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОплатыНаличными(ИзмененныеДанныеЗаписаны, ДополнительныеПараметры) Экспорт
	
	Если Не ИзмененныеДанныеЗаписаны Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИнформацияОбОплате"    , ИнформацияОбОплате(ЭтотОбъект));
	ПараметрыОткрытияФормы.Вставить("ОплатаНаличными"       , Истина);
	ПараметрыОткрытияФормы.Вставить("ДоступнаПередачаДанных", ПараметрыКассыККМ.ДоступнаПередачаДанных);
	ПараметрыОткрытияФормы.Вставить("ВариантОтправкиЭлектронногоЧека" , ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека);
	ПараметрыОткрытияФормы.Вставить("КонтактныеДанныеЭлектронногоЧека", ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека);
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ФормаОплаты",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения("ЗавершениеОплаты", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СмешаннаяОплатаОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиКОплатеНаДисплейПокупателя = Истина;
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ОткрытьФормуСмешаннойОплаты", ЭтотОбъект),
		НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСмешаннойОплаты(ИзмененныеДанныеЗаписаны, ДоступныеВидыОплаты) Экспорт
	
	Если Не ИзмененныеДанныеЗаписаны Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиКОплатеНаДисплейПокупателя = Истина;
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	ДанныеОбОплате = Новый Массив;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИнформацияОбОплате", ИнформацияОбОплате(ЭтотОбъект));
	ПараметрыОткрытияФормы.Вставить("ДоступнаПередачаДанных", ПараметрыКассыККМ.ДоступнаПередачаДанных);
	ПараметрыОткрытияФормы.Вставить("ВариантОтправкиЭлектронногоЧека" , ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека);
	ПараметрыОткрытияФормы.Вставить("КонтактныеДанныеЭлектронногоЧека", ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека);
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ФормаОплаты",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения("ЗавершениеОплаты", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОплаты(РезультатОплаты, ДополнительныеПараметры) Экспорт
	
	Объект.ВыданоНаличными = 0;
	Если ТипЗнч(РезультатОплаты) = Тип("Структура") Тогда
		
		Объект.ВыданоНаличными   = РезультатОплаты.ПолученоНаличными;
		
		ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека  = РезультатОплаты.ДанныеЭлектронногоЧека.ВариантОтправкиЭлектронногоЧека;
		ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека = РезультатОплаты.ДанныеЭлектронногоЧека.КонтактныеДанныеЭлектронногоЧека;
		
	КонецЕсли;
	
	ОбработатьДобавлениеОплаты(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуПлатежнымиКартамиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработатьДобавлениеОплаты(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДобавлениеОплаты(ДополнительныеПараметры)
	
	ВывестиКОплатеНаДисплейПокупателя = Ложь;
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	ИнформацияОбОплате = ИнформацияОбОплате(ЭтотОбъект);
	// Команда оплаты картой вызвана из формы РМК
	Если ДополнительныеПараметры = Неопределено Тогда
		
		Если ИнформацияОбОплате.ИтогоОплачено >= ИнформацияОбОплате.СуммаКОплате
		   И (Не ПараметрыКассыККМ.ДоступнаПередачаДанных Или ЗначениеЗаполнено(ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека)) Тогда
			
			ВывестиКОплатеНаДисплейПокупателя = Истина;
			
			ОбновитьДанныеИнформационнойПанели(ЭтотОбъект);
			
			ПробитьЧек();
			
		ИначеЕсли ИнформацияОбОплате.ИтогоОплачено > 0 Тогда
			
			ВыполнитьДействиеПослеЗаписи(
				Новый ОписаниеОповещения("ОткрытьФормуСмешаннойОплаты", ЭтотОбъект),
				НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
			
		КонецЕсли;
		
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВФормуОплаты, ИнформацияОбОплате);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтменитьОплатыПлатежнымиКартами(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВХранилище", ПоместитьТабличнуюЧастьОплатыПлатежнымиКартамиВХранилище());
	
	Если ДополнительныеПараметры.Свойство("ПолученоНаличными") Тогда
		Объект.ПолученоНаличными = ДополнительныеПараметры.ПолученоНаличными;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("Валюта", Объект.Валюта);
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ТабличнаяЧастьОплатаПлатежнымиКартами",
		ПараметрыФормы,
		,
		,
		,
		,
		Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартамиВыборСтрокиОплатыЗавершение", РозничныеПродажиКлиент, ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатыПлатежнымиКартамиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ВыполненаОперацияНаУстройстве И Не Результат.ИзмененныеДанныеЗаписаны Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Данные", ДополнительныеПараметры.Форма.Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДополнительныеПараметры.Форма.ДанныеДляЖурналаРегистрации);
		ПараметрыФормы.Вставить("ТекстСообщения",
			НСтр("ru = 'ВНИМАНИЕ! Произошла исключительная ситуация:
			|Отмена оплаты не зафиксирована в системе.'"));
		
		ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ДополнительныеПараметры.Форма);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеВФормуОплаты") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВФормуОплаты, ИнформацияОбОплате(ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьОплатыПлатежнымиКартамиВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ОплатаПлатежнымиКартами.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОтменитьОплатуПлатежнымиКартами(ОповещениеОЗавершении)
	
	СтрокиОплатыПлатежнымиКартами = Новый Массив;
	Для Каждого СтрокаОплаты Из Объект.ОплатаПлатежнымиКартами Цикл
		Если СтрокаОплаты.ОплатаОтменена Тогда
			Продолжить;
		КонецЕсли;
		СтрокиОплатыПлатежнымиКартами.Добавить(СтрокаОплаты);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("СтрокиОплатыПлатежнымиКартами", СтрокиОплатыПлатежнымиКартами);
	
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("Валюта", Объект.Валюта);
	
	ОтменитьОплатуПлатежнымиКартамиПоследовательно(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуПлатежнойКартой(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ОтменитьОплатуКартой", РозничныеПродажиКлиент, ДополнительныеПараметры),
		НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуПлатежнымиКартамиПоследовательно(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Количество() > 0 Тогда
		
		СтрокаОплаты = ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами[ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Количество() - 1];
		ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Удалить(ДополнительныеПараметры.СтрокиОплатыПлатежнымиКартами.Найти(СтрокаОплаты));
		
		ПараметрыОтмены = Новый Структура;
		ПараметрыОтмены.Вставить("ОповещениеПриЗавершении", Новый ОписаниеОповещения("ОтменитьОплатуПлатежнымиКартамиПоследовательно", ЭтотОбъект, ДополнительныеПараметры));
		ПараметрыОтмены.Вставить("ТекущиеДанные", СтрокаОплаты);
		ПараметрыОтмены.Вставить("Форма", ДополнительныеПараметры.Форма);
		ПараметрыОтмены.Вставить("Валюта", ДополнительныеПараметры.Валюта);
		
		ВыполнитьОбработкуОповещения(
			Новый ОписаниеОповещения("ОтменитьОплатуПлатежнойКартой", ДополнительныеПараметры.Форма, ПараметрыОтмены));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПриЗавершении, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуПлатежнойКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеДляЖурналаРегистрации = Новый Структура;
	ДанныеДляЖурналаРегистрации.Вставить("СуммаОперации" , ДополнительныеПараметры.СуммаОперации);
	ДанныеДляЖурналаРегистрации.Вставить("СсылочныйНомер", ДополнительныеПараметры.СсылочныйНомер);
	ДанныеДляЖурналаРегистрации.Вставить("НомерЧекаЭТ"   , ДополнительныеПараметры.НомерЧекаЭТ);
	
	СтрокаОплаты = Объект.ОплатаПлатежнымиКартами.Получить(Объект.ОплатаПлатежнымиКартами.Индекс(ДополнительныеПараметры.СтрокаОплаты));
	СтрокаОплаты.ОплатаОтменена = Истина;
	Модифицированность = Истина;
	
	ПересчитатьДокументНаКлиенте();
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
	Если Не ИзмененныеДанныеЗаписаны Тогда
		
		ДополнительныеПараметрыПовторЗаписи = Новый Структура;
		ДополнительныеПараметрыПовторЗаписи.Вставить("ОписаниеОповещения", ДополнительныеПараметры.ОповещениеПриЗавершении);
		ДополнительныеПараметрыПовторЗаписи.Вставить("ТекстСообщения", НСтр("ru = 'После выполнения операции отмены оплаты не удалось записать документ.'"));
		ДополнительныеПараметрыПовторЗаписи.Вставить("ВозвращатьРезультатФункции", Ложь);
		ДополнительныеПараметрыПовторЗаписи.Вставить("РезультатПриУспешномПроведении", Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Истина));
		ДополнительныеПараметрыПовторЗаписи.Вставить("РезультатПриОтмене", Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Ложь));
		ДополнительныеПараметрыПовторЗаписи.Вставить("ИмяПроцедуры", "ЗаписатьНаСервере");
		ДополнительныеПараметрыПовторЗаписи.Вставить("РезультатОперации", ИзмененныеДанныеЗаписаны);
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметрыПовторЗаписи);
			Возврат;
		КонецЕсли;
	
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", РозничныеПродажиКлиент, ДополнительныеПараметрыПовторЗаписи),
			ДополнительныеПараметрыПовторЗаписи.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
				Истина, Истина));
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из формы оплаты
&НаКлиенте
Процедура ОтменитьОплату(Результат, ДополнительныеПараметры) Экспорт
	
	Объект.ВыданоНаличными = 0;
	
	ОтменитьОплатуПлатежнымиКартами(
		Новый ОписаниеОповещения("ОтменитьОплатуЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВФормуОплаты, ИнформацияОбОплате(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИнформацияОбОплате(Форма)
	
	ОплатаПлатежнымиКартамиОтменено = 0;
	Для Каждого СтрокаТЧ Из Форма.Объект.ОплатаПлатежнымиКартами Цикл
		Если СтрокаТЧ.ОплатаОтменена Тогда
			ОплатаПлатежнымиКартамиОтменено = ОплатаПлатежнымиКартамиОтменено + СтрокаТЧ.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	СуммаДокумента = ЦенообразованиеБольничнаяАптекаКлиентСервер.ПолучитьСуммуДокумента(Форма.Объект.Товары, Форма.Объект.ЦенаВключаетНДС);
	
	СуммаСкидки = 0;
	СуммаБезСкидки = СуммаДокумента + СуммаСкидки;
	СуммаКОплате = СуммаБезСкидки - СуммаСкидки;
	
	ИнформацияОбОплате = Новый Структура;
	ИнформацияОбОплате.Вставить("Документ",              Форма.Объект.Ссылка);
	
	ИнформацияОбОплате.Вставить("Наличные"              , Форма.Объект.ВыданоНаличными);
	ИнформацияОбОплате.Вставить("ПлатежныеКарты"        , Форма.Объект.ОплатаПлатежнымиКартами.Итог("Сумма"));
	ИнформацияОбОплате.Вставить("ПлатежныеКартыОтменено", ОплатаПлатежнымиКартамиОтменено);
	
	ИнформацияОбОплате.Вставить("СуммаДокумента"        , СуммаДокумента);
	ИнформацияОбОплате.Вставить("СуммаБезСкидки"        , СуммаБезСкидки);
	ИнформацияОбОплате.Вставить("СуммаКОплате"          , СуммаКОплате);
	ИнформацияОбОплате.Вставить("СуммаСкидки"           , СуммаСкидки);
	ИнформацияОбОплате.Вставить("ИтогоОплачено"         , ИнформацияОбОплате.Наличные + ОплатаПлатежнымиКартамиОтменено);
	
	ИнформацияОбОплате.Вставить("ДоступныеВидыОплаты", ДоступныеВидыОплаты(Форма));
	
	Возврат ИнформацияОбОплате;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДоступныеВидыОплаты(Форма)
	
	ОплатаПлатежнымиКартами = Ложь;
	Если Форма.Объект.ОплатаПлатежнымиКартами.Количество() > 0
	   И Форма.ЭквайринговыеТерминалы.Количество() > 0 Тогда
		ОплатаПлатежнымиКартами = Истина;
	КонецЕсли;
	
	ДоступныеВидыОплаты = Новый Структура;
	ДоступныеВидыОплаты.Вставить("Наличные",       Истина);
	ДоступныеВидыОплаты.Вставить("ПлатежныеКарты", ОплатаПлатежнымиКартами);
	
	Возврат ДоступныеВидыОплаты;
	
КонецФункции

#КонецОбласти // Оплата

////////////////////////////////////////////////////////////////////////////////
// Подключаемое оборудование
#Область ПодключаемоеОборудование

&НаСервере
Процедура ПолучитьСсылкиНаОборудование()
	
	ЭквайринговыеТерминалы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Ссылка                                  КАК Ссылка,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования  КАК ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование                КАК ПодключаемоеОборудование,
	|	
	|	ЭквайринговыеТерминалы.ВидыПлатежныхКарт.(
	|		ВидыПлатежныхКарт.ВидПлатежнойКарты КАК ВидПлатежнойКарты
	|	) КАК ВидыПлатежныхКарт
	|	
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Касса = &КассаККМ
	|	И ((ЭквайринговыеТерминалы.ПодключаемоеОборудование <> ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|		И ЭквайринговыеТерминалы.ПодключаемоеОборудование.РабочееМесто = &РабочееМесто)
	|		ИЛИ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)
	|";
	
	Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	
	Если ПодключаемоеОборудованиеКлиентСервер.ИспользоватьПодключаемоеОборудование(ЭтотОбъект) Тогда
		РабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	Иначе
		РабочееМесто = Справочники.РабочиеМеста.ПустаяСсылка();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыЭТ = Новый Структура;
		ПараметрыЭТ.Вставить("Ссылка",                                 Выборка.Ссылка);
		ПараметрыЭТ.Вставить("ПодключаемоеОборудование",               Выборка.ПодключаемоеОборудование);
		ПараметрыЭТ.Вставить("ВидыПлатежныхКарт",                      Новый СписокЗначений);
		ПараметрыЭТ.Вставить(
			"ИспользоватьБезПодключенияОборудования",
			Выборка.ИспользоватьБезПодключенияОборудования
				Или Не ПодключаемоеОборудованиеКлиентСервер.ИспользоватьПодключаемоеОборудование(ЭтотОбъект));
		
		ВыборкаВидыКарт = Выборка.ВидыПлатежныхКарт.Выбрать();
		Пока ВыборкаВидыКарт.Следующий() Цикл
			ПараметрыЭТ.ВидыПлатежныхКарт.Добавить(ВыборкаВидыКарт.ВидПлатежнойКарты);
		КонецЦикла;
		
		ЭквайринговыеТерминалы.Добавить(ПараметрыЭТ);
		
	КонецЦикла;
	
	Если ПодключаемоеОборудованиеКлиентСервер.ИспользоватьПодключаемоеОборудование(ЭтотОбъект) Тогда
		СписокОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		СписокОтбор.ТипыПО = "ДисплейПокупателя";
		СписокОтбор.РабочееМесто = РабочееМесто;
		СписокОтбор.СетевоеОборудование = Истина;
		Дисплеи.ЗагрузитьЗначения(МенеджерОборудованияВызовСервера.СписокОборудования(СписокОтбор));
	КонецЕсли;
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя()
	
	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	ДПТекст1 = "";
	ДПТекст2 = "";
	
	Если ВывестиКОплатеНаДисплейПокупателя Тогда
		
		ИнформацияОбОплате = ИнформацияОбОплате(ЭтотОбъект);
		ДПТекст1 = РозничныеПродажиКлиент.ПодготовитьСтрокуКВыводуНаДисплейПокупателя(
			НСтр("ru = 'К оплате:'"), ИнформацияОбОплате.СуммаКОплате);
		
	Иначе
		
		КоличествоСтрокВТЧ = Объект.Товары.Количество();
		
		ТекущаяСтрока = Элементы.Товары.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ > 0 Тогда
			ТекущиеДанные = Объект.Товары[КоличествоСтрокВТЧ - 1];
			Элементы.Товары.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
		ИначеЕсли ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ = 0 Тогда
			ТекущиеДанные = Неопределено;
		Иначе
			ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
		КонецЕсли;
		
		Если ТекущиеДанные <> Неопределено Тогда
			ДПТекст1 = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ТекущиеДанные.Номенклатура,
				ТекущиеДанные.СерияНоменклатуры,
				ТекущиеДанные.Партия);
		
			ДПТекст2 = РозничныеПродажиКлиент.ПодготовитьСтрокуКВыводуНаДисплейПокупателя(
				НСтр("ru='Итог:'"), Объект.СуммаДокумента);
		Иначе
			ДПТекст1 = НСтр("ru = 'Здравствуйте!'");
		КонецЕсли;
		
	КонецЕсли;
	
	ВыводимыйТекст = ДПТекст1 + Символы.ПС + ДПТекст2;
	
	Для Каждого ЭлементСписка Из Дисплеи Цикл
		
		Дисплей = ЭлементСписка.Значение;
		Оповещение = Новый ОписаниеОповещения("ВывестиИнформациюНаДисплейПокупателяЗавершение", ЭтотОбъект);
		
		ПараметрыВыводаНаДисплей = ОборудованиеДисплеиПокупателяКлиент.ПараметрыОперацииДисплейПокупателя(ВыводимыйТекст);
		ОборудованиеДисплеиПокупателяКлиент.НачатьВыводИнформацииНаДисплейПокупателя(Оповещение, УникальныйИдентификатор, Дисплей.ИдентификаторУстройства, ПараметрыВыводаНаДисплей);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателяЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ШаблонСообщенияОбОшибке = НСтр(
			"ru='При использовании дисплея покупателя произошла ошибка.
				|Дополнительное описание:
				|%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщенияОбОшибке, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПодключаемоеОборудование

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти // СтандартныеПодсистемы
