
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПВызовСервера.ПриПолученииФормыДокумента(
		ПустаяСсылка(), ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбмене

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДанныеКвитанции = Неопределено) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ВыводЛПИзОборотаПоКассе Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийМДЛП.Принято;
		Статусы = РегистрыСведений.СтатусыИнформированияМДЛП.СтатусыОбработки();
		Статусы.Принят = Перечисления.СтатусыИнформированияМДЛП.ПринятоИзМДЛП;
		
		
		ПараметрыОбновления = РегистрыСведений.СтатусыИнформированияМДЛП.РассчитатьСтатусы(
			ДокументСсылка, СтатусОбработки, Статусы);
		
		Если ПараметрыОбновления = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат РегистрыСведений.СтатусыИнформированияМДЛП.ОбновитьСтатус(
			ДокументСсылка, ПараметрыОбновления);
		
	КонецЕсли;
	
	ОперацияКвитанции = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКвитанции, "ОперацияКвитанции");
	Если ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.Получение_РозничнаяПродажаККТ
	 Или ОперацияКвитанции = Перечисления.ОперацииОбменаМДЛП.Получение_ОтпускЛППоЛьготнымРецептамККТ Тогда
		ДанныеКвитанции.Вставить("ЗавершитьПриОтказе", Истина);
	КонецЕсли;
	
	Возврат ИнтеграцияМДЛП.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДанныеКвитанции);
	
КонецФункции

Процедура ОбновитьСостояниеПодтверждения(ДокументОбъект, Операция, Сообщение, СтатусОбработки, ОтклоненныеНомера = Неопределено) Экспорт
	
	ПараметрыОбновления = ИнтеграцияМДЛП.СостояниеПодтверждения(Операция, Сообщение, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.СостояниеПодтверждения = ПараметрыОбновления.Состояние;
	Если ДокументОбъект.СостояниеПодтверждения <> Перечисления.СостоянияПодтвержденияМДЛП.ОтклоненоГИСМ
	   И ЗначениеЗаполнено(ОтклоненныеНомера) Тогда
		
		Для Каждого Номер Из ОтклоненныеНомера Цикл
			Строка = ДокументОбъект.НомераУпаковок.Найти(Номер.Ключ, "НомерКиЗ");
			Строка.Отклонено = Истина;
			Строка.ПричинаОтказа = ИнтеграцияМДЛП.ПредставлениеПричиныОтклонения(Номер.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Расчет статуса оформления при смене статуса информирования.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УведомлениеОРозничнойПродажеМДЛП - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыИнформирования - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыИнформирования - Новый статус.
//
Процедура РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Основание");
	Если ЗначениеЗаполнено(Основание) Тогда
		ИнтеграцияМДЛППереопределяемый.РассчитатьСтатусОформленияУведомленияОРозничныхПродажах(Основание);
	КонецЕсли;
	
КонецПроцедуры

// Получить последовательность операций в течении жизненного цикла документа.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияМДЛП.ПустаяТаблицаПоследовательностьОпераций();
	
	Если ПустаяСтрока(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ИдентификаторОрганизации")) Тогда
		Исходящее = Перечисления.ТипыСообщенийМДЛП.Исходящее;
		Операция = ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящее, Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_РозничнаяПродажаЛП);
	Иначе
		
		// Получение_РозничнаяПродажаККТ
		// Получение_ОтпускЛППоЛьготнымРецептамККТ
		// Получение_ВыводЛПИзОборотаПоКассе - удален из схемы.
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Сообщения.Операция      КАК Операция,
		|	Сообщения.ТипСообщения  КАК ТипСообщения
		|ИЗ
		|	Справочник.МДЛППрисоединенныеФайлы КАК Сообщения
		|ГДЕ
		|	Сообщения.ВладелецФайла = &Документ
		|	И Сообщения.СообщениеОснование = &ПустаяСсылка
		|");
		
		Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.МДЛППрисоединенныеФайлы.ПустаяСсылка());
		Запрос.УстановитьПараметр("Документ", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Операция = ИнтеграцияМДЛП.ДобавитьОперациюВПоследовательность(Таблица, 0, Выборка.ТипСообщения, Выборка.Операция);
		Операция.КвитанцияПринят = Ложь;
		
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус информирования по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияМДЛП - Статус по-умолчанию.
//
Функция СтатусИнформированияПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыИнформированияМДЛП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные;
	
КонецФункции

// Возвращает запрос для получения статуса оформления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ основание.
// 
// Возвращаемое значение:
//  Запрос - Запрос для получения статуса оформления.
//
Функция ЗапросСтатусаОформления(ДокументОснование) Экспорт
	
	Запрос = ИнтеграцияМДЛППереопределяемый.ЗапросСтатусаОформленияУведомленияОРозничныхПродажах(ДокументОснование);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПанельМаркировкиМДЛП

Функция ВсеТребующиеДействия(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПередайтеДанные);
	Если Все Или Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ВыполнитеОбмен);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ПолучитеКвитанциюОФиксации);
	
	Возврат Действия;
	
КонецФункции

Функция ВсеТребующиеОжидания(Все = Ложь) Экспорт
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПолучениеКвитанцииОФиксации);
	Если Все Или ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхМДЛП") Тогда
		Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюМДЛП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	КонецЕсли;
	
	Возврат Действия;
	
КонецФункции

Процедура ПриЗаполненииДокументовПанелиМаркировкиМДЛП(ТаблицаДокументы) Экспорт
	
	Описание = ИнтеграцияМДЛП.ДобавитьДокументНаПанельМаркировки(
		ТаблицаДокументы,
		Метаданные.Документы.УведомлениеОРозничнойПродажеМДЛП,
		НСтр("ru = 'Розничные продажи'"),
		ИнтеграцияМДЛПКлиентСервер.ПанельМаркировкаРазделПродажи());
	
	Описание.Оформите    = Истина;
	Описание.Отработайте = Истина;
	Описание.Ожидайте    = Истина;
	
	Описание.Порядок = 10;
	
КонецПроцедуры

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОформите() Экспорт
	
	Возврат ИнтеграцияМДЛППереопределяемый.УведомлениеОРозничныхПродажахТекстЗапросаОформите();
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОтработайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОтработайте(Метаданные.Документы.УведомлениеОРозничнойПродажеМДЛП);
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаОжидайте() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаОжидайте(Метаданные.Документы.УведомлениеОРозничнойПродажеМДЛП);
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического списка формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСписока() Экспорт
	
	Возврат Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаФормДокументов(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает текст запроса для формирования данных динамического Списка к оформлению формы списка и формы выбора документов.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ПанельМаркировкиМДЛПТекстЗапросаДинамическогоСпискаКОформлению() Экспорт
	
	ТекстЗапроса = ИнтеграцияМДЛППереопределяемый.УведомлениеОРозничныхПродажахТекстЗапросаДинамическогоСпискаКОформлению();
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = Обработки.ПанельМаркировкиМДЛП.ТекстЗапросаДинамическогоСпискаКОформлениюФормДокументов();
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщенияМДЛП

Функция СообщениеКПередаче(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат УведомлениеОРозничнойПродажеМаркированныхТоваров(ДокументСсылка);
	
КонецФункции

Функция ОпределитьДокументыДляЗагрузки(ДанныеДокумента, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ВыводЛПИзОборотаПоКассе Тогда
		Возврат ОпределитьУведомлениеОПродаже(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_РозничнаяПродажаККТ Тогда
		Возврат ОпределитьУведомлениеОПродаже(ДанныеДокумента);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтпускЛППоЛьготнымРецептамККТ Тогда
		Возврат ОпределитьУведомлениеОПродаже(ДанныеДокумента);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьВходящееСообщение(ДанныеДокумента, Операция, ДокументСсылка) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ВыводЛПИзОборотаПоКассе Тогда
		ЗагрузитьУведомлениеОРозничнойПродаже(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_РозничнаяПродажаККТ Тогда
		ЗагрузитьУведомлениеОРозничнойПродажеККТ(ДанныеДокумента, ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаМДЛП.Получение_ОтпускЛППоЛьготнымРецептамККТ Тогда
		ЗагрузитьУведомлениеОЛьготномОтпускеККТ(ДанныеДокумента, ДокументСсылка);
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не известная операция %1'"), Операция);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает данные для заполнения представления документа.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * КомандаСоздать - Строка - Представление документа, если документ требуется создать.
//  * ИмяКомандыСоздать - Строка - Имя команды "Создать".
//  * ИмяКомандыОткрыть - Строка - Имя команды "Открыть".
//  * ДокументОтсутствуетНетПравНаСоздание - Строка - Представление документа, если документ не создан.
//  * Представление - Строка - Представление документа.
//  * НесколькоДокументовПредставление - Строка - Представление документа, если их несколько.
//
Функция ПредставлениеДокумента() Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияМДЛП.ПустоеПредставлениеДокумента();
	ВозвращаемоеЗначение.КомандаСоздать                       = НСтр("ru = 'Создать уведомление о розничных продажах МДЛП'");
	ВозвращаемоеЗначение.ИмяКомандыСоздать                    = "СоздатьУведомлениеОРозничнойПродажеМДЛП";
	ВозвращаемоеЗначение.ИмяКомандыОткрыть                    = "ОткрытьУведомлениеОРозничнойПродажеМДЛП";
	ВозвращаемоеЗначение.ДокументОтсутствуетНетПравНаСоздание = НСтр("ru = 'Уведомление о розничных продажах МДЛП не создано'");
	ВозвращаемоеЗначение.Представление                        = НСтр("ru = 'Уведомление о розничных продажах МДЛП: %1'");
	ВозвращаемоеЗначение.НесколькоДокументовПредставление     = НСтр("ru = 'Уведомление о розничных продажах МДЛП (%1)'");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПоддерживаетЗагрузкуУведомлений() Экспорт
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УведомлениеОРозничнойПродажеМаркированныхТоваров(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сообщения = Новый Массив;
	
	СообщениеКПередаче = ИнтеграцияМДЛП.СтруктураСообщенияКПередаче();
	СообщениеКПередаче.Документ = ДокументСсылка;
	СообщениеКПередаче.Операция = Перечисления.ОперацииОбменаМДЛП.ПередачаДанных_РозничнаяПродажаЛП;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Шапка.Организация.ВерсияСхемОбмена     КАК ВерсияСхемОбмена,
	|	Шапка.Ссылка                           КАК Ссылка,
	|	Шапка.Основание                        КАК Основание,
	|	Шапка.Дата                             КАК Дата,
	|	Шапка.МестоДеятельности.Идентификатор  КАК ИдентификаторОрганизации
	|ИЗ
	|	Документ.УведомлениеОРозничнойПродажеМДЛП КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Шапка.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияПодтвержденияМДЛП.КПередаче)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПродажи.ИдентификаторДокумента      КАК ИдентификаторДокумента,
	|	ДокументыПродажи.ВидДокумента                КАК ВидДокумента,
	|	ДокументыПродажи.НомерДокумента              КАК НомерДокумента,
	|	ДокументыПродажи.ДатаДокумента               КАК ДатаДокумента,
	|	ДокументыПродажи.НаименованиеДокумента       КАК НаименованиеДокумента,
	|	ДокументыПродажи.НомерЛьготногоРецепта       КАК НомерЛьготногоРецепта,
	|	ДокументыПродажи.ДатаЛьготногоРецепта        КАК ДатаЛьготногоРецепта,
	|	ДокументыПродажи.НомерСерииЛьготногоРецепта  КАК НомерСерииЛьготногоРецепта,
	|	ДокументыПродажи.МаркетплейсИНН              КАК МаркетплейсИНН
	|ИЗ
	|	Документ.УведомлениеОРозничнойПродажеМДЛП.ДокументыПродажи КАК ДокументыПродажи
	|ГДЕ
	|	ДокументыПродажи.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторДокумента
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.ИдентификаторДокумента   КАК ИдентификаторДокумента,
	|	ТаблицаТовары.GTIN                     КАК GTIN,
	|	ТаблицаНомераУпаковок.НомерКиЗ         КАК НомерКиЗ,
	|	ТаблицаНомераУпаковок.Цена             КАК Цена,
	|	ТаблицаНомераУпаковок.СуммаНДС         КАК СуммаНДС,
	|	ТаблицаНомераУпаковок.СуммаСкидки      КАК СуммаСкидки,
	|	ТаблицаНомераУпаковок.ДоляОтВторичнойУпаковки         КАК ДоляОтВторичнойУпаковки,
	|	ТаблицаНомераУпаковок.КоличествоПервичныхУпаковок     КАК КоличествоПервичныхУпаковок,
	|	ТаблицаТовары.КоличествоПервичныхУпаковокВоВторичной  КАК КоличествоПервичныхУпаковокВоВторичной
	|ИЗ
	|	Документ.УведомлениеОРозничнойПродажеМДЛП.Товары КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОРозничнойПродажеМДЛП.НомераУпаковок КАК ТаблицаНомераУпаковок
	|	ПО
	|		ТаблицаНомераУпаковок.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаНомераУпаковок.ИдентификаторСтроки = ТаблицаТовары.ИдентификаторСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОРозничнойПродажеМДЛП КАК Шапка
	|	ПО
	|		Шапка.Ссылка = ТаблицаТовары.Ссылка
	|		И НЕ Шапка.ДокументВТабличнойЧасти
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторДокумента
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка            = Результат[Результат.ВГраница() - 2].Выбрать();
	ДокументыПродажи = Результат[Результат.ВГраница() - 1].Выбрать();
	Товары           = Результат[Результат.ВГраница()    ].Выбрать();
	
	Если Не Шапка.Следующий() Или Результат[Результат.ВГраница() - 1].Пустой() Или Результат[Результат.ВГраница()].Пустой() Тогда
		
		ИнтеграцияМДЛПКлиентСервер.ДобавитьТекстОшибки(СообщениеКПередаче, НСтр("ru = 'Нет данных для выгрузки.'"));
		Сообщения.Добавить(СообщениеКПередаче);
		Возврат Сообщения;
		
	КонецЕсли;
	
	ПространствоИмен = ИнтеграцияМДЛП.ПространствоИмен(Шапка.ВерсияСхемОбмена);
	
	УстановленныеДаты = Новый Соответствие;
	
	ИмяТипа   = "documents";
	ИмяПакета = "retail_sale";
	
	ПередачаДанных = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, ПространствоИмен);
	ИнтеграцияМДЛП.УстановитьВерсиюСхемОбменаПакета(ПередачаДанных);
	
	Уведомление = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ПередачаДанных, ИмяПакета);
	ПередачаДанных[ИмяПакета] = Уведомление;
	
	Уведомление.action_id = Уведомление.action_id;
	
	ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(Уведомление, "subject_id", Шапка.ИдентификаторОрганизации, СообщениеКПередаче);
	ИнтеграцияМДЛП.УстановитьДатуСЧасовымПоясом(Уведомление, "operation_date", Шапка.Дата, УстановленныеДаты, СообщениеКПередаче);
	
	Уведомление.sales = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление, "sales");
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Уведомление.sales, "union") Тогда
		Пока ДокументыПродажи.Следующий() Цикл
			
			ДанныеДокументаПродажи = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.sales, "union");
			
			Пока Товары.НайтиСледующий(ДокументыПродажи.ИдентификаторДокумента, "ИдентификаторДокумента") Цикл
				НоваяСтрока = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ДанныеДокументаПродажи, "detail");
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sgtin"    , Товары.НомерКИЗ, СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Товары.Цена    , СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Товары.СуммаНДС, СообщениеКПередаче);
				Если ЗначениеЗаполнено(Товары.КоличествоПервичныхУпаковок) Тогда
					ДоляУпаковки = СтрШаблон("%1/%2", Формат(Товары.КоличествоПервичныхУпаковок, "ЧГ="), Формат(Товары.КоличествоПервичныхУпаковокВоВторичной, "ЧГ="));
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sold_part", ДоляУпаковки, СообщениеКПередаче);
				КонецЕсли;
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "discount", Товары.СуммаСкидки, СообщениеКПередаче);
				ДанныеДокументаПродажи.detail.Добавить(НоваяСтрока);
			КонецЦикла;
			
			ДанныеДокументаПродажи.sale_docs = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ДанныеДокументаПродажи, "sale_docs");
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ДанныеДокументаПродажи.sale_docs, "doc_type", ИнтеграцияМДЛП.КодЗначенияПеречисления(ДокументыПродажи.ВидДокумента), СообщениеКПередаче);
			Если ДокументыПродажи.ВидДокумента = Перечисления.ВидыДокументовПродажиМДЛП.Прочее Тогда
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ДанныеДокументаПродажи.sale_docs, "doc_name", ДокументыПродажи.НаименованиеДокумента, СообщениеКПередаче);
			КонецЕсли;
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ДанныеДокументаПродажи.sale_docs, "doc_number", ДокументыПродажи.НомерДокумента, СообщениеКПередаче);
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ДанныеДокументаПродажи.sale_docs, "doc_date"  , Формат(ДокументыПродажи.ДатаДокумента, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
			
			Если ЗначениеЗаполнено(ДокументыПродажи.НомерЛьготногоРецепта) Тогда
				ЛьготныйРецепт = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(ДанныеДокументаПродажи.sale_docs, "prescription");
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ЛьготныйРецепт, "prescription_num", ДокументыПродажи.НомерЛьготногоРецепта, СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ЛьготныйРецепт, "prescription_date", Формат(ДокументыПродажи.ДатаЛьготногоРецепта, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ЛьготныйРецепт, "prescription_series" , ДокументыПродажи.НомерСерииЛьготногоРецепта, СообщениеКПередаче);
				ДанныеДокументаПродажи.sale_docs.prescription = ЛьготныйРецепт;
			КонецЕсли;
			
			ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ДанныеДокументаПродажи.sale_docs, "marketplace_inn", ДокументыПродажи.МаркетплейсИНН, СообщениеКПередаче);
			
			Уведомление.sales.union.Добавить(ДанныеДокументаПродажи);
			
		КонецЦикла;
	Иначе
		Пока ДокументыПродажи.Следующий() Цикл
			Пока Товары.НайтиСледующий(ДокументыПродажи.ИдентификаторДокумента, "ИдентификаторДокумента") Цикл
				НоваяСтрока = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(Уведомление.sales, "detail");
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sgtin"    , Товары.НомерКИЗ, СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "cost"     , Товары.Цена    , СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "vat_value", Товары.СуммаНДС, СообщениеКПередаче);
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "sold_part") Тогда
					Если НоваяСтрока.Тип().Свойства.Получить("sold_part").Тип.Имя = "decimal_type" Тогда
						Если ЗначениеЗаполнено(Товары.ДоляОтВторичнойУпаковки) Тогда
							ДоляУпаковки = Товары.ДоляОтВторичнойУпаковки;
						ИначеЕсли ЗначениеЗаполнено(Товары.КоличествоПервичныхУпаковок) Тогда
							ДоляУпаковки = Окр(Товары.КоличествоПервичныхУпаковок / Товары.КоличествоПервичныхУпаковокВоВторичной, 5);
						Иначе
							ДоляУпаковки = 0;
						КонецЕсли;
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sold_part", ДоляУпаковки, СообщениеКПередаче);
					ИначеЕсли ЗначениеЗаполнено(Товары.КоличествоПервичныхУпаковок) Тогда
						ДоляУпаковки = СтрШаблон("%1/%2", Формат(Товары.КоличествоПервичныхУпаковок, "ЧГ="), Формат(Товары.КоличествоПервичныхУпаковокВоВторичной, "ЧГ="));
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "sold_part", ДоляУпаковки, СообщениеКПередаче);
					КонецЕсли;
				КонецЕсли;
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(НоваяСтрока, "discount" , Товары.СуммаСкидки, СообщениеКПередаче);
				
				Если ЗначениеЗаполнено(ДокументыПродажи.НомерЛьготногоРецепта) Тогда
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "prescription") Тогда
						ЛьготныйРецепт = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(НоваяСтрока, "prescription");
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ЛьготныйРецепт, "prescription_num", ДокументыПродажи.НомерЛьготногоРецепта, СообщениеКПередаче);
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ЛьготныйРецепт, "prescription_date", Формат(ДокументыПродажи.ДатаЛьготногоРецепта, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
						ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ЛьготныйРецепт, "prescription_series" , ДокументыПродажи.НомерСерииЛьготногоРецепта, СообщениеКПередаче);
						НоваяСтрока.prescription = ЛьготныйРецепт;
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока.sale_docs = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(НоваяСтрока, "sale_docs");
				
				ДанныеДокумента = ИнтеграцияМДЛП.ОбъектXDTOПоИмениСвойства(НоваяСтрока.sale_docs, "doc");
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ДанныеДокумента, "doc_type"  , ИнтеграцияМДЛП.КодЗначенияПеречисления(ДокументыПродажи.ВидДокумента), СообщениеКПередаче);
				Если ДокументыПродажи.ВидДокумента = Перечисления.ВидыДокументовПродажиМДЛП.Прочее Тогда
					ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ДанныеДокумента, "doc_name", ДокументыПродажи.НаименованиеДокумента, СообщениеКПередаче);
				КонецЕсли;
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ДанныеДокумента, "doc_number", ДокументыПродажи.НомерДокумента, СообщениеКПередаче);
				ИнтеграцияМДЛП.ЗаполнитьСвойствоXDTO(ДанныеДокумента, "doc_date"  , Формат(ДокументыПродажи.ДатаДокумента, "ДФ=dd.MM.yyyy"), СообщениеКПередаче);
				
				НоваяСтрока.sale_docs.doc.Добавить(ДанныеДокумента);
				
				Уведомление.sales.detail.Добавить(НоваяСтрока);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ИнтеграцияМДЛП.ПроверитьОбъектXDTO(ПередачаДанных, СообщениеКПередаче);
	
	ТекстСообщения = ИнтеграцияМДЛП.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, ПространствоИмен);
	ТекстСообщения = ИнтеграцияМДЛП.ПреобразоватьВременныеДаты(УстановленныеДаты, ТекстСообщения);
	
	СообщениеКПередаче.ТекстСообщения = ТекстСообщения;
	СообщениеКПередаче.ИдентификаторСубъектаОбращения = Шапка.ИдентификаторОрганизации;
	СообщениеКПередаче.Основание      = Шапка.Основание;
	СообщениеКПередаче.ТипСообщения   = Перечисления.ТипыСообщенийМДЛП.Исходящее;
	СообщениеКПередаче.ОбновитьСостояниеПодтверждения = Истина;
	
	Сообщения.Добавить(СообщениеКПередаче);
	Возврат Сообщения;
	
КонецФункции

Функция ОпределитьУведомлениеОПродаже(ДанныеДокумента)
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПолучитьСсылку());
	
КонецФункции

Процедура ЗагрузитьУведомлениеОРозничнойПродаже(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если Документ = Неопределено Тогда
		
		ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
		
		Документ = СоздатьДокумент();
		Документ.УстановитьСсылкуНового(ДокументСсылка);
		Документ.Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "operation_date", ТекущаяДатаСеанса());
		Документ.ИдентификаторОрганизации = ИдентификаторОрганизации;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация, Документ.МестоДеятельности);
		Документ.СостояниеПодтверждения = Перечисления.СостоянияПодтвержденияМДЛП.ПринятоГИСМ;
		ДОкумент.ДокументВТабличнойЧасти = Истина;
		
	Иначе
		Документ.Заблокировать();
	КонецЕсли;
	
	Для Каждого Товар Из ДанныеДокумента.sales.detail Цикл
		
		GTIN = Лев(Товар.sgtin, 14);
		НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN", GTIN));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовара = Документ.Товары.Добавить();
			СтрокаТовара.GTIN = GTIN;
			СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		Иначе
			СтрокаТовара = НайденныеСтроки[0];
		КонецЕсли;
		
		СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
		
		СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
		СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
		СтрокаУпаковки.НомерКИЗ = Товар.sgtin;
		СтрокаУпаковки.Цена     = Товар.cost;
		СтрокаУпаковки.СуммаНДС = Товар.vat_value;
		СтрокаУпаковки.СуммаСкидки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Товар, "discount", 0);
		СтрокаУпаковки.ДоляОтВторичнойУпаковки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Товар, "sold_part", 0);
		
		ДокументПродажи = Товар.sale_docs.doc[0];
		СтрокаУпаковки.ВидДокумента = Перечисления.ВидыДокументовПродажиМДЛП[ДокументПродажи.doc_type - 1];
		СтрокаУпаковки.НаименованиеДокумента = ДокументПродажи.doc_name;
		СтрокаУпаковки.НомерДокумента = ДокументПродажи.doc_number;
		СтрокаУпаковки.ДатаДокумента  = ДокументПродажи.doc_date;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Товар, "prescription") Тогда
			ЛьготныйРецепт = Товар.prescription;
			СтрокаУпаковки.НомерЛьготногоРецепта =  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЛьготныйРецепт, "prescription_num");
			СтрокаУпаковки.ДатаЛьготногоРецепта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЛьготныйРецепт, "prescription_date");
			СтрокаУпаковки.НомерСерииЛьготногоРецепта =  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЛьготныйРецепт, "prescription_series");
		КонецЕсли;
		
	КонецЦикла;
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОРозничнойПродаже(Документ);
	
	Документ.Записать();
	Документ.Разблокировать();
	
	Отказ = Ложь;
	ИнтеграцияМДЛП.ПровестиДокументПоРегиструУпаковок(Документ.Ссылка,, Отказ, Перечисления.СостоянияПодтвержденияМДЛП.КПередаче);
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось зарезервировать товар для выбытия.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОРозничнойПродажеККТ(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если Документ = Неопределено Тогда
		
		ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
		
		Документ = СоздатьДокумент();
		Документ.ДанныеПолученыИзМДЛП = Истина;
		Документ.УстановитьСсылкуНового(ДокументСсылка);
		Документ.ИдентификаторОрганизации = ИдентификаторОрганизации;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация, Документ.МестоДеятельности);
		
	Иначе
		Документ.Заблокировать();
	КонецЕсли;
	
	ДатаДокумента = Дата(1,1,1);
	Для Каждого ЧекККМ Из ДанныеДокумента.sell_details.receipt Цикл
		
		ДокументПродажи = Документ.ДокументыПродажи.Добавить();
		ДокументПродажи.ИдентификаторДокумента = Строка(Новый УникальныйИдентификатор);
		ДокументПродажи.ВидДокумента = Перечисления.ВидыДокументовПродажиМДЛП.Чек;
		ДокументПродажи.ДатаДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЧекККМ, "operation_date");
		ДокументПродажи.НомерДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЧекККМ, "number");
		ДокументПродажи.ИдентификаторКвитирования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЧекККМ, "receipt_id");
		
		ДанныеЛьготногоРецепта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЧекККМ, "prescription");
		Если ЗначениеЗаполнено(ДанныеЛьготногоРецепта) Тогда
			ДокументПродажи.ДатаЛьготногоРецепта = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЛьготногоРецепта, "doc_date"));
			ДокументПродажи.НомерЛьготногоРецепта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЛьготногоРецепта, "doc_num");
			ДокументПродажи.НомерСерииЛьготногоРецепта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЛьготногоРецепта, "doc_series");
		КонецЕсли;
		
		Если ДатаДокумента < ДокументПродажи.ДатаДокумента Тогда
			ДатаДокумента = ДокументПродажи.ДатаДокумента;
		КонецЕсли;
		
		Для Каждого Товар Из ЧекККМ.items.item Цикл
			
			GTIN = Лев(Товар.sgtin, 14);
			НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN, ИдентификаторДокумента", GTIN, ДокументПродажи.ИдентификаторДокумента));
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаТовара = Документ.Товары.Добавить();
				СтрокаТовара.GTIN = GTIN;
				СтрокаТовара.ИдентификаторДокумента = ДокументПродажи.ИдентификаторДокумента;
				СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			Иначе
				СтрокаТовара = НайденныеСтроки[0];
			КонецЕсли;
			
			СтрокиУпаковок = Документ.НомераУпаковок.НайтиСтроки(Новый Структура("НомерКиЗ", Товар.sgtin));
			Если СтрокиУпаковок.Количество() = 0 Тогда
				
				СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
				
				СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
				СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
				СтрокаУпаковки.НомерКИЗ = Товар.sgtin;
				СтрокаУпаковки.Цена     = Товар.cost * 0.01; // В копейках
				СтрокаУпаковки.СуммаНДС = Товар.vat_value * 0.01; // В копейках
				СтрокаУпаковки.СуммаСкидки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Товар, "discount");
				СтрокаУпаковки.СуммаСкидки = ?(ЗначениеЗаполнено(СтрокаУпаковки.СуммаСкидки), СтрокаУпаковки.СуммаСкидки * 0.01, 0);
				СтрокаУпаковки.ДоляУпаковки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Товар, "sold_part");
				СтрокаУпаковки.ВладелецИНН = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Товар, "owner_inn");
				
			Иначе
				
				// Строка с таким же sgtin может быть, если была продажа части упаковки.
				// В этом случае нужно свернуть строки.
				СтрокаУпаковки = СтрокиУпаковок[0];
				СтрокаУпаковки.СуммаНДС = СтрокаУпаковки.СуммаНДС + Товар.vat_value * 0.01;
				СуммаСкидки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Товар, "discount");
				СтрокаУпаковки.СуммаСкидки = СтрокаУпаковки.СуммаСкидки + ?(ЗначениеЗаполнено(СуммаСкидки), СуммаСкидки * 0.01, 0);
				СтрокаУпаковки.ДоляУпаковки = ДополнитьДолюУпаковки(СтрокаУпаковки.ДоляУпаковки, ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Товар, "sold_part"));
				
				ВладелецИНН = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Товар, "owner_inn");
				Если ЗначениеЗаполнено(ВладелецИНН) Тогда
					СтрокаУпаковки.ВладелецИНН = ВладелецИНН;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Документ.Дата = ДатаДокумента;
	Документ.ПередачаСведенийЧерезККТ = Истина;
	
	ИнтеграцияМДЛП.ЗаполнитьДолиУпаковокВТабличныхЧастях(Документ.Товары, Документ.НомераУпаковок);
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОРозничнойПродаже(Документ);
	
	Документ.Записать();
	Документ.Разблокировать();
	
КонецПроцедуры

Процедура ЗагрузитьУведомлениеОЛьготномОтпускеККТ(ДанныеДокумента, ДокументСсылка)
	
	Документ = ДокументСсылка.ПолучитьОбъект();
	Если Документ = Неопределено Тогда
		
		ИдентификаторОрганизации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДокумента, "subject_id");
		
		Документ = СоздатьДокумент();
		Документ.ДанныеПолученыИзМДЛП = Истина;
		Документ.УстановитьСсылкуНового(ДокументСсылка);
		Документ.ИдентификаторОрганизации = ИдентификаторОрганизации;
		ИнтеграцияМДЛП.ПолучитьОрганизациюМестоДеятельностиПоИдентификатору(ИдентификаторОрганизации, Документ.Организация, Документ.МестоДеятельности);
		
	Иначе
		Документ.Заблокировать();
	КонецЕсли;
	
	ДатаДокумента = Дата(1,1,1);
	Для Каждого ЧекККМ Из ДанныеДокумента.recipe_details.receipt Цикл
		
		ДокументПродажи = Документ.ДокументыПродажи.Добавить();
		ДокументПродажи.ИдентификаторДокумента = Строка(Новый УникальныйИдентификатор);
		ДокументПродажи.ВидДокумента = Перечисления.ВидыДокументовПродажиМДЛП.Чек;
		ДокументПродажи.ДатаДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЧекККМ, "operation_date");
		ДокументПродажи.НомерДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЧекККМ, "number");
		ДокументПродажи.ИдентификаторКвитирования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЧекККМ, "receipt_id");
		
		ДанныеЛьготногоРецепта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЧекККМ, "prescription");
		Если ЗначениеЗаполнено(ДанныеЛьготногоРецепта) Тогда
			ДокументПродажи.ДатаЛьготногоРецепта = СтроковыеФункцииКлиентСервер.СтрокаВДату(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЛьготногоРецепта, "doc_date"));
			ДокументПродажи.НомерЛьготногоРецепта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЛьготногоРецепта, "doc_num");
			ДокументПродажи.НомерСерииЛьготногоРецепта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЛьготногоРецепта, "doc_series");
		КонецЕсли;
		
		Если ДатаДокумента < ДокументПродажи.ДатаДокумента Тогда
			ДатаДокумента = ДокументПродажи.ДатаДокумента;
		КонецЕсли;
		
		Для Каждого Товар Из ЧекККМ.items.item Цикл
			
			GTIN = Лев(Товар.sgtin, 14);
			НайденныеСтроки = Документ.Товары.НайтиСтроки(Новый Структура("GTIN, ИдентификаторДокумента", GTIN, ДокументПродажи.ИдентификаторДокумента));
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаТовара = Документ.Товары.Добавить();
				СтрокаТовара.GTIN = GTIN;
				СтрокаТовара.ИдентификаторДокумента = ДокументПродажи.ИдентификаторДокумента;
				СтрокаТовара.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			Иначе
				СтрокаТовара = НайденныеСтроки[0];
			КонецЕсли;
			
			СтрокиУпаковок = Документ.НомераУпаковок.НайтиСтроки(Новый Структура("НомерКиЗ", Товар.sgtin));
			Если СтрокиУпаковок.Количество() = 0 Тогда
				
				СтрокаТовара.Количество = СтрокаТовара.Количество + 1;
				
				СтрокаУпаковки = Документ.НомераУпаковок.Добавить();
				СтрокаУпаковки.ИдентификаторСтроки = СтрокаТовара.ИдентификаторСтроки;
				СтрокаУпаковки.НомерКИЗ = Товар.sgtin;
				СтрокаУпаковки.ДоляУпаковки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Товар, "sold_part");
				
			Иначе
				// Строка с таким же sgtin может быть, если была продажа части упаковки.
				// В этом случае нужно свернуть строки.
				СтрокаУпаковки = СтрокиУпаковок[0];
				СтрокаУпаковки.ДоляУпаковки = ДополнитьДолюУпаковки(СтрокаУпаковки.ДоляУпаковки, ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Товар, "sold_part"));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Документ.Дата = ДатаДокумента;
	Документ.ПередачаСведенийЧерезККТ = Истина;
	
	ИнтеграцияМДЛП.ЗаполнитьДолиУпаковокВТабличныхЧастях(Документ.Товары, Документ.НомераУпаковок);
	
	ИнтеграцияМДЛППереопределяемый.ПриЗагрузкеУведомленияОРозничнойПродаже(Документ);
	
	Документ.Записать();
	Документ.Разблокировать();
	
КонецПроцедуры

Функция ДополнитьДолюУпаковки(ДоляУпаковкиПриемник, ДоляУпаковкиИсточник)
	
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	
	ПозицияРазделителя = СтрНайти(ДоляУпаковкиПриемник, "/");
	ЧислительПриемник = ОписаниеЧисла.ПривестиЗначение(Лев(ДоляУпаковкиПриемник, ПозицияРазделителя - 1));
	ЗнаменательПриемник = ОписаниеЧисла.ПривестиЗначение(Сред(ДоляУпаковкиПриемник, ПозицияРазделителя + 1));
	
	ПозицияРазделителя = СтрНайти(ДоляУпаковкиИсточник, "/");
	ЧислительИсточник = ОписаниеЧисла.ПривестиЗначение(Лев(ДоляУпаковкиИсточник, ПозицияРазделителя - 1));
	ЗнаменательИсточник = ОписаниеЧисла.ПривестиЗначение(Сред(ДоляУпаковкиИсточник, ПозицияРазделителя + 1));
	
	Если ЗначениеЗаполнено(ЧислительПриемник) И ЗначениеЗаполнено(ЗнаменательПриемник)
	   И ЗначениеЗаполнено(ЧислительИсточник) И ЗначениеЗаполнено(ЗнаменательИсточник)
	   И ЗнаменательПриемник = ЗнаменательИсточник Тогда // Знаменатель (количество первичных упаковок во вторичной) не может отличаться у долей одной и той же упаковки.
		Возврат Формат(ЧислительПриемник + ЧислительИсточник, "ЧГ=0") + "/" + Формат(ЗнаменательПриемник, "ЧГ=0");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ПустаяСсылка().Метаданные());
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерий(ПустаяСсылка().Метаданные(), Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ГосударственныеИнформационныеСистемыПереопределяемый.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПустаяСсылка().Метаданные(), ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции Подключаемые.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, НастройкиФормы) Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОРозничнойПродажеМДЛП КАК ДокументыДляОбработки
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОРозничнойПродажеМДЛП.Товары КАК ТоварыДокумента
	|	ПО
	|		ТоварыДокумента.Ссылка = ДокументыДляОбработки.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.УведомлениеОРозничнойПродажеМДЛП.ДокументыПродажи КАК ДокументыПродажиДокумента
	|	ПО
	|		ДокументыПродажиДокумента.Ссылка = ДокументыДляОбработки.Ссылка
	|ГДЕ
	|	НЕ ТоварыДокумента.Номенклатура ЕСТЬ NULL
	|	И ДокументыПродажиДокумента.ВидДокумента ЕСТЬ NULL
	|");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать объект: %Объект% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Выборка.Ссылка.Метаданные(),
									Выборка.Ссылка,
									ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Или Объект.ДокументыПродажи.Количество() > 0 Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		ДокументПродажи = Объект.ДокументыПродажи.Добавить();
		ДокументПродажи.ИдентификаторДокумента = Строка(Новый УникальныйИдентификатор);
		ДокументПродажи.ВидДокумента = Перечисления.ВидыДокументовПродажиМДЛП.Прочее;
		
		Для Каждого Товар Из Объект.Товары Цикл
			Товар.ИдентификаторДокумента = ДокументПродажи.ИдентификаторДокумента;
		КонецЦикла;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать: %Объект% по причине: %Причина%'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
