
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", Элементы.ГруппаДополнительныеРеквизиты.Имя);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриСозданииНаСервере(ЭтотОбъект);
	
	// БуферОбменаТоварами
	УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, Не ОбработкаТабличнойЧастиСервер.БуферОбменаПустой());
	// Конец БуферОбменаТоварами
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриСозданиеНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриСозданиеНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// БуферОбменаТоварами
	Если ОбработкаТабличнойЧастиКлиент.ОбрабатыватьОповещениеОтБуфераОбмена(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ДоступностьБуфераОбмена = ОбработкаТабличнойЧастиКлиент.ОпределитьДоступностьВставкиИзБуфераОбменаПоСобытию(ИмяСобытия);
		УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, ДоступностьБуфераОбмена);
	КонецЕсли;
	// Конец БуферОбменаТоварами
	
	// ИнтеграцияМДЛП
	Если (ИмяСобытия = "ИзменениеСостоянияМДЛП" Или ИмяСобытия = "Запись_УведомлениеОВыбытииМДЛП")
	   И (Не Параметр.Свойство("Основание") Или Параметр.Основание = Объект.Ссылка) Тогда
		СформироватьТекстУведомленияМДЛП();
	КонецЕсли;
	Если ИмяСобытия = "ВыполненОбменМДЛП" Тогда
		СформироватьТекстУведомленияМДЛП();
	КонецЕсли;
	// Конец ИнтеграцияМДЛП
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ПодборТоваровКлиент.ОбработатьПодборТоваровВДокументСписания(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодборТоваров(ВыбранноеЗначение.АдресТоваровВХранилище, КэшированныеЗначения);
	ИначеЕсли ПодборТоваровКлиент.ОбработатьПодборТоваровПоЗаказуВДокументСписания(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодборТоваровПоПрописи(ВыбранноеЗначение.АдресТоваровВХранилище, КэшированныеЗначения);
	ИначеЕсли ПодборТоваровКлиент.ОбработатьПодборТоваровВДокументПоступления(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодборТоваровВПропись(ВыбранноеЗначение.АдресТоваровВХранилище);
	ИначеЕсли ПодборТоваровКлиент.ОбработатьПодборОписанийТоваров(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодборТоваровВПропись(ВыбранноеЗначение.АдресТоваровВХранилище);
	Иначе
		// БуферОбменаТоварами
		Если ОбработкаТабличнойЧастиКлиент.НужноОбработатьВставкуИзБуфераОбмена(ЭтотОбъект, ИсточникВыбора) Тогда
			ВставитьТоварыИзБуфераОбмена(ВыбранноеЗначение);
		КонецЕсли;
		// Конец БуферОбменаТоварами
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОценкаПроизводительностиБольничнаяАптекаКлиент.НачатьЗамерПроведенияДокумента(Объект.Ссылка, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьСлужебныеРеквизиты();
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияМДЛП
	СформироватьТекстУведомленияМДЛП();
	// Конец ИнтеграцияМДЛП
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаполнитьПропись(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ЛекарственнаяПропись) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не заполнено поле ""Лекарственная пропись""'"),, "Объект.ЛекарственнаяПропись");
		Возврат;
	КонецЕсли;
	
	Если Объект.Пропись.Количество() Тогда
		
		КоличествоСтрок = Объект.Товары.Количество();
		Для Сч = 1 По КоличествоСтрок Цикл
			
			СтрокаТЧ = Объект.Товары.Получить(КоличествоСтрок - Сч);
			Если СтрокаТЧ.КодСтроки > 0 Тогда
				Объект.Товары.Удалить(СтрокаТЧ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьПропись();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("ПослеРазбиенияСтроки", ЭтотОбъект, ТекущаяСтрока);
	ОбработкаТабличнойЧастиКлиент.РазбитьСтрокуТЧ(Объект.Товары, ТекущаяСтрока, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодбор(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ"              , Объект.Ссылка);
	ПараметрыПодбора.Вставить("Дата"                  , Объект.Дата);
	ПараметрыПодбора.Вставить("Организация"           , Объект.Организация);
	ПараметрыПодбора.Вставить("МестоХраненияОстатка"  , "Склад");
	ПараметрыПодбора.Вставить("Склад"                 , Объект.Склад);
	ПараметрыПодбора.Вставить("ИсточникФинансирования", Объект.ИсточникФинансирования);
	ПараметрыПодбора.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ТоварыНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	ПодборТоваровКлиент.ОткрытьПодборТоваровВДокументСписания(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТоварыПоПрописи(Команда)
	
	Если Не ПроверитьЗаполнениеПрописи() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ"              , Объект.Ссылка);
	ПараметрыПодбора.Вставить("Дата"                  , Объект.Дата);
	ПараметрыПодбора.Вставить("Организация"           , Объект.Организация);
	ПараметрыПодбора.Вставить("МестоХраненияОстатка"  , "Склад");
	ПараметрыПодбора.Вставить("Склад"                 , Объект.Склад);
	ПараметрыПодбора.Вставить("ИсточникФинансирования", Объект.ИсточникФинансирования);
	ПараметрыПодбора.Вставить("АдресТоваровВХранилище", ПоместитьТоварыИПрописьВХранилище());
	ПараметрыПодбора.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыПодбора.Вставить("АвтозаполнениеБезУчетаМинимальнойУпаковки", Истина);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ТоварыНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	ПодборТоваровКлиент.ОткрытьПодборТоваровПоЗаказуВДокументСписания(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборВПропись(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("МестоХраненияОстатка", "Склад");
	ПараметрыПодбора.Вставить("Склад", Объект.Склад);
	ПараметрыПодбора.Вставить("ИсточникФинансирования", Объект.ИсточникФинансирования);
	ПараметрыПодбора.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыПодбора.Вставить("РежимПодбораБезРазрезовУчета", Истина);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ПрописьНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	ПодборТоваровКлиент.ОткрытьПодборТоваровВДокументПоступления(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборФОЛС(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	ПараметрыПодбора.Вставить("МестоХраненияОстатка", "Склад");
	ПараметрыПодбора.Вставить("Склад", Объект.Склад);
	ПараметрыПодбора.Вставить("ИсточникФинансирования", Объект.ИсточникФинансирования);
	ПараметрыПодбора.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ПрописьНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	ПодборТоваровКлиент.ОткрытьПодборОписанийТоваров(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКоличествоПоОсновномуКомпоненту(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Единица измерения"".'"),, "Объект.ЕдиницаИзмерения",, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КоличествоПрописи) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Количество по прописи"".'"),, "Объект.КоличествоПрописи",, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ЕдиницаИзмеренияПрописи) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Единица измерения прописи"".'"),, "Объект.ЕдиницаИзмеренияПрописи",, Отказ);
	КонецЕсли;
	
	ОсновнойКомпонент = Объект.Пропись.НайтиСтроки(Новый Структура("ОсновнойКомпонент", Истина));
	Если ОсновнойКомпонент.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В прописи не выбран основной компонент.'"),, "Объект.Пропись",, Отказ);
	Иначе
		
		Если Не ЗначениеЗаполнено(ОсновнойКомпонент[0].КоличествоВЕдиницахИзмерения) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не заполнено поле ""Количество"" основного компонента прописи'"),
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Пропись", ОсновнойКомпонент[0].ПолучитьИдентификатор(), "Количество"),
				,
				Отказ);
		КонецЕсли;
		
		Товары = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", ОсновнойКомпонент[0].КодСтроки));
		Если Товары.Количество() = 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В списке товаров не введен основной компонент прописи.'"),, "Объект.Товары",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Количество = 0;
	Для Каждого СтрокаТовара Из Товары Цикл
		Количество = Количество + СтрокаТовара.КоличествоВЕдиницахЗаказа;
	КонецЦикла;
	
	КоличествоВЕдиницеПрописи = Объект.КоличествоПрописи * Количество / ОсновнойКомпонент[0].КоличествоВЕдиницахИзмерения;
	Если Объект.ЕдиницаИзмерения <> Объект.ЕдиницаИзмеренияПрописи Тогда
		Количество = КоличествоВЕдиницеПрописи * КоэффициентЕдиницыИзмерения(Объект.Номенклатура, Объект.ЕдиницаИзмеренияПрописи) / Объект.Коэффициент;
	Иначе
		Количество = КоличествоВЕдиницеПрописи;
	КонецЕсли;
	
	Если Количество > 0 И Количество <> Объект.КоличествоВЕдиницахИзмерения Тогда
		Объект.КоличествоВЕдиницахИзмерения = Количество;
		
		Действия = ОбработкаТабличнойЧастиКлиентСервер;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(Объект, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОсновнымКомпонентом(Команда)
	
	ТекущаяСтрока = Элементы.Пропись.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ОсновнойКомпонент Тогда
		ТекущаяСтрока.ОсновнойКомпонент = Ложь;
	Иначе
		НайденныеСтроки = Объект.Пропись.НайтиСтроки(Новый Структура("ОсновнойКомпонент", Истина));
		Для Каждого Компонент Из НайденныеСтроки Цикл
			Компонент.ОсновнойКомпонент = Ложь;
		КонецЦикла;
		ТекущаяСтрока.ОсновнойКомпонент = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМестоХранения(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"МестоХранения",
		НСтр("ru='Место хранения'"),
		"Справочник.МестаХранения.ФормаВыбора",
		Новый Структура("Отбор", Новый Структура("Владелец", Объект.Склад)));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсточникФинансирования(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"ИсточникФинансирования",
		НСтр("ru='Источник финансирования'"),
		"Справочник.ИсточникиФинансирования.ФормаВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	ОбщегоНазначенияБольничнаяАптекаКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Шапка
#Область Шапка

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ОбработатьИзменениеПодразделения();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ОбработатьИзменениеСклада();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ОбработатьИзменениеНоменклатурыПродукции(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(Объект, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(Объект, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстУведомленияМДЛПОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияМДЛПКлиент.ТекстУведомленияМДЛПОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // Шапка

////////////////////////////////////////////////////////////////////////////////
// Список "Пропись"
#Область Пропись

&НаКлиенте
Процедура ПрописьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПрописьНоменклатура"
	 Или Поле.Имя = "ПрописьТорговоеНаименование"
	 Или Поле.Имя = "ПрописьДействующиеВеществаМНН"
	 Или Поле.Имя = "ПрописьФормаВыпуска" Тогда
		
		ТекущаяСтрока = Элементы.Пропись.ТекущиеДанные;
		
		ОбрабатываемыеПоля = "Номенклатура, ТорговоеНаименование, ДействующиеВеществаМНН, ФормаВыпуска, ЕдиницаИзмерения";
		ПараметрыВыбораФОЛС = Новый Структура(ОбрабатываемыеПоля);
		ЗаполнитьЗначенияСвойств(ПараметрыВыбораФОЛС, ТекущаяСтрока);
		
		ОткрытьФорму("Обработка.ПодборПоФормальнымОписаниямЛекарственныхСредств.Форма.ФормаВыбора", ПараметрыВыбораФОЛС, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрописьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ОбрабатываемыеПоля = "Номенклатура, ТорговоеНаименование, ДействующиеВеществаМНН, ФормаВыпуска, ЕдиницаИзмерения";
		ТекущаяСтрока = Элементы.Пропись.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыбранноеЗначение, ОбрабатываемыеПоля);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрописьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = истина;
КонецПроцедуры

&НаКлиенте
Процедура ПрописьПередУдалением(Элемент, Отказ)
	
	ТекущаяСтрокаПрописи = Элементы.Пропись.ТекущиеДанные;
	
	СтрокиТовараПоСтрокеПрописи = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", ТекущаяСтрокаПрописи.КодСтроки));
	Если СтрокиТовараПоСтрокеПрописи.Количество() Тогда
		
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ПрописьПередУдалениемЗавершение", ЭтотОбъект, ТекущаяСтрокаПрописи);
		ТекстВопроса = НСтр("ru='С удаляемой строкой прописи связаны товары'");
		ПоказатьВопрос(
			Оповещение,
			ТекстВопроса,
			ВзаимодействиеСПользователемКлиент.ПолучитьКнопкиДаНет(
				НСтр("ru='Удалить связанные товары'"),
				НСтр("ru='Отменить удаление'")));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрописьПередУдалениемЗавершение(Ответ, ТекущаяСтрокаПрописи) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СтрокиТовараПоСтрокеПрописи = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", ТекущаяСтрокаПрописи.КодСтроки));
		Для Каждого УдаляемаяСтрока Из СтрокиТовараПоСтрокеПрописи Цикл
			Объект.Товары.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		Объект.Пропись.Удалить(ТекущаяСтрокаПрописи);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Пропись

////////////////////////////////////////////////////////////////////////////////
// Список "Товары"
#Область Товары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока.НоменклатураЗаказа = Неопределено;
		ТекущаяСтрока.ЕдиницаИзмеренияЗаказа = Неопределено;
		ТекущаяСтрока.КоэффициентЕдиницыЗаказа = 0;
		ТекущаяСтрока.КоличествоВЕдиницахЗаказа = 0;
	КонецЕсли;
	
	СверхЗаказа = Не ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураЗаказа);
	Элементы.ТоварыНоменклатура.РедактированиеТекста = СверхЗаказа;
	Элементы.ТоварыНоменклатура.КнопкаВыбора = СверхЗаказа;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), ТекущаяСтрока.СерияНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьПартиюПоВладельцу(), ТекущаяСтрока.Партия);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры.ТабличнаяЧасть);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоВЕдиницахЗаказа());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элемент.Родитель.ТекущиеДанные;
	ОтборПартий = Новый Структура;
	ОтборПартий.Вставить("Документ"     , Объект.Ссылка);
	ОтборПартий.Вставить("Организация"  , Объект.Организация);
	ОтборПартий.Вставить("Склад"        , Объект.Склад);
	
	ПараметрыВыбораПартии = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыВыбораПартии(ОтборПартий, ТекущаяСтрока);
	
	ОбработкаТабличнойЧастиКлиент.ВыбратьПартиюНоменклатуры(ЭтотОбъект, Элемент, ПараметрыВыбораПартии, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // Товары

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданиеНовогоПриЧтенииНаСервере()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СерияНоменклатуры", "Доступность", Объект.СтатусУказанияСерий > 0);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СерияНоменклатуры", "АвтоОтметкаНезаполненного", Объект.СтатусУказанияСерий > 0);
	
	ОсновнойСклад = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьСкладАптекиПоУмолчанию(Неопределено, Объект.ПодразделениеОрганизации);
	
	ЗаполнитьСлужебныеРеквизиты();
	
	// ИнтеграцияМДЛП
	СформироватьТекстУведомленияМДЛП();
	// Конец ИнтеграцияМДЛП
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСерийНоменклатуры(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПартий(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеИсточниковФинансирования(ЭтотОбъект);
	
	ЗаказыСервер.УстановитьОформлениеСтокиСверхЗаказа(ЭтотОбъект,,, НСтр("ru = '<сверх прописи>'"));
	
	ЗаказыСервер.УстановитьОформлениеОтбораНоменклатуры(ЭтотОбъект, "Пропись", "Объект.Пропись");
	
#Область ОсновнойКомпонент
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.Пропись.Имя);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Пропись.ОсновнойКомпонент");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.Пропись.Шрифт,,, Истина));
	
#КонецОбласти // ОсновнойКомпонент
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЗабраковкуСерий());
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТабличнуюЧасть(Объект.Товары, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСледующийКодСтроки(Таблица)
	
	СледующийКодСтроки = 1;
	Если Таблица.Количество() Тогда
		
		СуществующиеКоды = Таблица.Выгрузить(, "КодСтроки");
		СуществующиеКоды.Сортировать("КодСтроки Убыв");
		
		СледующийКодСтроки = СуществующиеКоды[0].КодСтроки + 1;
		
	КонецЕсли;
	
	Возврат СледующийКодСтроки;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеПрописи()
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.ЕдиницаИзмеренияПрописи) Тогда
		
		ТекстСообщения = НСтр("ru='Не заполнена единица измерения прописи.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.ЕдиницаИзмеренияПрописи",, Отказ);
		
	КонецЕсли;
	
	Если Объект.КоличествоПрописи = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Не указано количество по прописи.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.КоличествоПрописи",, Отказ);
		
	КонецЕсли;
	
	Если Объект.Пропись.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Не заполнена пропись.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Пропись",, Отказ);
		
	КонецЕсли;
	
	Для каждого СтрокаПрописи Из Объект.Пропись Цикл
		
		Если Не (ЗначениеЗаполнено(СтрокаПрописи.ДействующиеВеществаМНН) Или ЗначениеЗаполнено(СтрокаПрописи.ТорговоеНаименование)
				Или ЗначениеЗаполнено(СтрокаПрописи.Номенклатура)) Тогда
			
			ТекстСообщения =
				НСтр("ru='Не заполнена колонка ""Номенклатура"" в строке %НомерСтроки% списка ""%ИмяТабличнойЧасти%""'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаПрописи.НомерСтроки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяТабличнойЧасти%", "Пропись");
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстСообщения,
				, 
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Пропись",
					СтрокаПрописи.НомерСтроки,
					"ДействующиеВеществаМНН"),
				,
				Отказ);
		КонецЕсли;
			
		Если (ЗначениеЗаполнено(СтрокаПрописи.ДействующиеВеществаМНН) Или ЗначениеЗаполнено(СтрокаПрописи.ТорговоеНаименование))
				И Не ЗначениеЗаполнено(СтрокаПрописи.ФормаВыпуска) Тогда
			
			ТекстСообщения = НСтр("ru='Не заполнена колонка ""Форма выпуска"" в строке %НомерСтроки% списка ""%ИмяТабличнойЧасти%""'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаПрописи.НомерСтроки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяТабличнойЧасти%", "Пропись");
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстСообщения,
				, 
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Пропись",
					СтрокаПрописи.НомерСтроки,
					"ФормаВыпуска"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаПрописи.ЕдиницаИзмерения) Тогда
			
			
			ТекстСообщения =
				НСтр("ru='Не заполнена колонка ""Единица измерения"" в строке %НомерСтроки% списка ""%ИмяТабличнойЧасти%""'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаПрописи.НомерСтроки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяТабличнойЧасти%", "Пропись");
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстСообщения,
				, 
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Пропись",
					СтрокаПрописи.НомерСтроки,
					"ЕдиницаИзмерения"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаПрописи.КоличествоВЕдиницахИзмерения) Тогда
			
			
			ТекстСообщения = НСтр("ru='Не заполнена колонка ""Количество"" в строке %НомерСтроки% списка ""%ИмяТабличнойЧасти%""'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаПрописи.НомерСтроки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяТабличнойЧасти%", "Пропись");
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстСообщения,
				, 
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Пропись",
					СтрокаПрописи.НомерСтроки,
					"КоличествоВЕдиницахИзмерения"),
				,
				Отказ);
				
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПропись()
	
	Объект.Пропись.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЛекарственныеПрописи.Номенклатура      КАК ИзготавливаемаяНоменклатура,
	|	ЛекарственныеПрописи.Количество        КАК КоличествоПрописи,
	|	ЛекарственныеПрописи.ЕдиницаИзмерения  КАК ЕдиницаИзмеренияПрописи,
	|	ЛекарственныеПрописи.Товары.(
	|		Номенклатура                  КАК Номенклатура,
	|		ТорговоеНаименование          КАК ТорговоеНаименование,
	|		ДействующиеВеществаМНН        КАК ДействующиеВеществаМНН,
	|		ФормаВыпуска                  КАК ФормаВыпуска,
	|		ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
	|		КоличествоВЕдиницахИзмерения  КАК КоличествоВЕдиницахИзмерения,
	|		НормаЕстественнойУбыли        КАК НормаЕстественнойУбыли,
	|		ОсновнойКомпонент             КАК ОсновнойКомпонент
	|	)
	|ИЗ
	|	Справочник.ЛекарственныеПрописи КАК ЛекарственныеПрописи
	|ГДЕ
	|	ЛекарственныеПрописи.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ЛекарственнаяПропись);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ЗаполнитьЗначенияСвойств(Объект, Шапка, "КоличествоПрописи, ЕдиницаИзмеренияПрописи");
	
	КодСтроки = 1;
	Выборка = Шапка.Товары.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаПрописи = Объект.Пропись.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПрописи, Выборка);
		НоваяСтрокаПрописи.КодСтроки = КодСтроки;
		КодСтроки = КодСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитВВыделенныхСтроках(ИмяРеквизита, ПредставлениеРеквизита, ИмяФормыВыборка, ПараметрыФормы = Неопределено)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	ЗаполнениеВозможно = ОбработкаТабличнойЧастиКлиент.ПроверитьВозможностьЗаполненияРеквизитаВТабличнойЧасти(
		Объект.Товары, ВыделенныеСтроки, НСтр("ru='Товары'"), ПредставлениеРеквизита);
	Если ЗаполнениеВозможно Тогда
		
		ПараметрыЗаполнения = Новый Структура("ИмяРеквизита, ПредставлениеРеквизита", ИмяРеквизита, ПредставлениеРеквизита);
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьРеквизитВВыделенныхСтрокахЗавершение", ЭтотОбъект, ПараметрыЗаполнения);
		ОткрытьФорму(ИмяФормыВыборка, ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитВВыделенныхСтрокахЗавершение(Значение, ПараметрыЗаполнения) Экспорт
	
	Если Значение <> Неопределено Тогда
		ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
		ЗаполненоСтрок = ОбработкаТабличнойЧастиКлиент.ЗаполнитьРеквизитВВыделенныхСтроках(
			Объект.Товары, ВыделенныеСтроки, ПараметрыЗаполнения.ИмяРеквизита, Значение);
		ОбработкаТабличнойЧастиКлиент.ПоказатьОповещениеОЗаполненииРеквизитаВВыделенныхСтроках(
			Значение, ЗаполненоСтрок, ВыделенныеСтроки.Количество(), ПараметрыЗаполнения.ПредставлениеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛекарственнуюПрописьПоУмолчанию()
	
	Если Не ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		Объект.ЛекарственнаяПропись = Неопределено;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ЛекарственнаяПропись)
			Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЛекарственнаяПропись, "Номенклатура") <> Объект.Номенклатура Тогда
		Объект.ЛекарственнаяПропись = Справочники.ЛекарственныеПрописи.ПолучитьОсновнуюПропись(Объект.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоэффициентЕдиницыИзмерения(Знач Номенклатура, Знач ЕдиницаИзмерения)
	Возврат НоменклатураСервер.КоэффициентЕдиницыИзмерения(Номенклатура, ЕдиницаИзмерения);
КонецФункции

// ИнтеграцияМДЛП

&НаСервере
Процедура СформироватьТекстУведомленияМДЛП()
	
	ИнтеграцияМДЛП.СформироватьТекстУведомленияМДЛП(ЭтотОбъект);
	
КонецПроцедуры

// Конец ИнтеграцияМДЛП

////////////////////////////////////////////////////////////////////////////////
// Обработка подбора
#Область ОбработкаПодбора

&НаСервере
Функция ПоместитьТоварыИПрописьВХранилище()
	
	УстановитьПривилегированныйРежим(Истина);
	
	КоличествоПоПрописи = Объект.КоличествоПрописи * НоменклатураСервер.КоэффициентЕдиницыИзмерения(Объект.Номенклатура, Объект.ЕдиницаИзмеренияПрописи);
	Если Объект.Количество > 0 Тогда
		КоэффициентИзготовить = Объект.Количество / КоличествоПоПрописи;
	Иначе
		КоэффициентИзготовить = 1;
	КонецЕсли;
	
	ДанныеЗаказа = ПодборТоваровСервер.ПолучитьПустуюТаблицуДанныхЗаказа();
	Для Каждого СтрокаПрописи Из объект.Пропись Цикл
		СтрокаЗаказа = ДанныеЗаказа.Добавить();
		СтрокаЗаказа.Заказ = Объект.Ссылка;
		СтрокаЗаказа.КодСтроки = СтрокаПрописи.КодСтроки;
		ПоляАналитики = Новый Структура("Номенклатура, ТорговоеНаименование, ДействующиеВеществаМНН, ФормаВыпуска");
		ЗаполнитьЗначенияСвойств(ПоляАналитики, СтрокаПрописи);
		СтрокаЗаказа.НоменклатураЗаказа = Справочники.КлючиАналитикиОписанийОтборовНоменклатуры.ЗначениеКлючаАналитики(ПоляАналитики);
		СтрокаЗаказа.ЕдиницаИзмеренияЗаказа = СтрокаПрописи.ЕдиницаИзмерения;
		СтрокаЗаказа.КОформлению = СтрокаПрописи.КоличествоВЕдиницахИзмерения * КоэффициентИзготовить;
	КонецЦикла;
	
	Товары = Объект.Товары.Выгрузить(, "Номенклатура, СерияНоменклатуры, Партия, ИсточникФинансирования, КоличествоВЕдиницахИзмерения, ЕдиницаИзмерения, Коэффициент, Количество, КодСтроки, НоменклатураЗаказа, КоличествоВЕдиницахЗаказа, ЕдиницаИзмеренияЗаказа, КоэффициентЕдиницыЗаказа");
	Товары.Колонки.Добавить("Заказ");
	Для Каждого Товар Из Товары Цикл
		Если ЗначениеЗаполнено(Товар.НоменклатураЗаказа) Тогда
			Товар.Заказ = Объект.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеПодбораПоЗаказу = Новый Структура("ДанныеЗаказа, Товары", ДанныеЗаказа, Товары);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеПодбораПоЗаказу, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьПодборТоваров(АдресТоваровВХранилище, КэшированныеЗначения)
	
	СписокТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры.ТабличнаяЧасть);
	
	Для Каждого Товар Из СписокТоваров Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодборТоваровПоПрописи(АдресТоваровВХранилище, КэшированныеЗначения)
	
	СписокТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	Объект.Товары.Загрузить(СписокТоваров);
	
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(Объект, ПараметрыУчетаНоменклатуры.ТабличнаяЧасть);
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодборТоваровВПропись(АдресТоваровВХранилище)
	
	СписокТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	КодСтроки = ПолучитьСледующийКодСтроки(Объект.Пропись);
	Для Каждого Товар Из СписокТоваров Цикл
		НоваяСтрока = Объект.Пропись.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар);
		НоваяСтрока.КодСтроки = КодСтроки;
		КодСтроки = КодСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбработкаПодбора

////////////////////////////////////////////////////////////////////////////////
// Обработка изменения реквизитов
#Область ОбработкаИзмененияРеквизитов

&НаСервере
Процедура ОбработатьИзменениеОрганизации()
	
	Подразделение = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьПодразделениеПоУмолчанию(Объект.ПодразделениеОрганизации, Объект.Организация);
	Если Объект.ПодразделениеОрганизации <> Подразделение Тогда
		Объект.ПодразделениеОрганизации = Подразделение;
		ОбработатьИзменениеПодразделения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПодразделения()
	
	ОбщегоНазначенияБольничнаяАптека.ИзменитьСкладПриНеобходимости(Объект.ПодразделениеОрганизации, Объект.Склад, ОсновнойСклад);
	ОбработатьИзменениеСклада();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСклада()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(Объект, ПараметрыУчетаНоменклатуры.Шапка);
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(Объект, ПараметрыУчетаНоменклатуры.ТабличнаяЧасть);
	
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СерияНоменклатуры", "Доступность", Объект.СтатусУказанияСерий > 0);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СерияНоменклатуры", "АвтоОтметкаНезаполненного", Объект.СтатусУказанияСерий > 0);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНоменклатурыПродукции(КэшированныеЗначения);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), Объект.СерияНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), Объект.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры.Шапка);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(Объект, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СерияНоменклатуры", "Доступность", Объект.СтатусУказанияСерий > 0);
	ОбщегоНазначенияБольничнаяАптекаКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СерияНоменклатуры", "АвтоОтметкаНезаполненного", Объект.СтатусУказанияСерий > 0);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), Объект.ЕдиницаИзмеренияПрописи);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Номенклатура", Объект.Номенклатура);
	ТекущаяСтрока.Вставить("ЕдиницаИзмерения", Объект.ЕдиницаИзмеренияПрописи);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Объект.ЕдиницаИзмеренияПрописи = ТекущаяСтрока.ЕдиницаИзмерения;
	
	ЗаполнитьЛекарственнуюПрописьПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоВЕдиницахЗаказа());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРазбиенияСтроки(НоваяСтрока, ТекущаяСтрока) Экспорт
	
	ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	ПриИзмененииКоличестваВСтрокеСпискаТовары(НоваяСтрока);
	
	Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

#КонецОбласти // ОбработкаИзмененияРеквизитов

////////////////////////////////////////////////////////////////////////////////
// Буфер обмена товарами
#Область БуферОбменаТоварами

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПропись Тогда
		ТаблицаТовары = Элементы.Пропись;
	Иначе
		ТаблицаТовары = Элементы.Товары;
	КонецЕсли;
	
	Если ОбработкаТабличнойЧастиКлиент.ВозможноКопированиеСтрок(ТаблицаТовары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиВБуферОбмена(ТаблицаТовары.Имя);
		ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(ТаблицаТовары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ВставитьТоварыИзБуфераОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБуфераОбмена(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ОткрытьБуферОбмена(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиВБуферОбмена(Знач ИмяТабличнойЧасти)
	
	ОбработкаТабличнойЧастиСервер.СкопироватьВыделенныеСтрокиВБуферОбмена(Объект, Объект[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары = Неопределено)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПропись Тогда
		ТаблицаТовары = Объект.Пропись;
	Иначе
		ТаблицаТовары = Объект.Товары;
	КонецЕсли;
	
	КоличествоТоваровДоВставки = ТаблицаТовары.Количество();
	
	ВставитьТоварыИзБуфераОбменаСервер(ВыбранныеТовары);
	
	КоличествоВставленных = ТаблицаТовары.Количество() - КоличествоТоваровДоВставки;
	ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьТоварыИзБуфераОбменаСервер(Знач ВыбранныеТовары = Неопределено)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПропись Тогда
		ТабличнаяЧасть = Объект.Пропись;
	Иначе
		ТабличнаяЧасть = Объект.Товары;
		
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
		СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры.ТабличнаяЧасть);
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	КонецЕсли;
	
	ДанныеВставлены = ОбработкаТабличнойЧастиСервер.ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары, ТабличнаяЧасть, СтруктураДействий);
	Если ДанныеВставлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПропись Тогда
		КодСтроки = ПолучитьСледующийКодСтроки(Объект.Пропись);
		Для Каждого ТекущаяСтрока Из ТабличнаяЧасть Цикл
			Если ТекущаяСтрока.КодСтроки = 0 Тогда
				ТекущаяСтрока.КодСтроки = КодСтроки;
				КодСтроки = КодСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ЕстьДанныеВБуфереОбмена)
	
	Элементы = Форма.Элементы;
	Элементы.ТоварыБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыКонтекстноеМенюБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыБуферОбмена.Доступность = ЕстьДанныеВБуфереОбмена;
	
	Элементы.ПрописьБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ПрописьКонтекстноеМенюБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ПрописьБуферОбмена.Доступность = ЕстьДанныеВБуфереОбмена;
	
КонецПроцедуры

#КонецОбласти // БуферОбменаТоварами

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти // СтандартныеПодсистемы
