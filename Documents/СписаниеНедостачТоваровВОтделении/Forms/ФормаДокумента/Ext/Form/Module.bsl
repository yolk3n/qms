
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	ПодключаемоеОборудованиеСервер.НастроитьФормуДляИспользованияПодключаемогоОборудования(ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриСозданииНаСервере(ЭтотОбъект);
	
	Элементы.ГруппаОснование.Видимость = ЗначениеЗаполнено(Объект.ИнвентаризацияТоваровВОтделении);
	
	// БуферОбменаТоварами
	УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, Не ОбработкаТабличнойЧастиСервер.БуферОбменаПустой());
	// Конец БуферОбменаТоварами
	
	// ИнтеграцияСМобильнымПриложением
	ИнтеграцияСМобильнымПриложением.СоздатьКомандуЗагрузкиДанныхИзМобильногоПриложенияНаФорме(ЭтотОбъект, "Товары", Элементы.ТоварыГруппаЗаполнить.Имя);
	// Конец ИнтеграцияСМобильнымПриложением
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриЧтенииНаСервер_ФормаДокумента(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриСозданииНовогоПриЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если ПодключаемоеОборудованиеКлиент.ОбрабатыватьОповещение(ЭтотОбъект, Источник) Тогда
		Если ПодключаемоеОборудованиеКлиент.ОбработатьПолучениеДанныхОтСканераШтрихкода(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбработатьШтрихкоды(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ВведенШтрихкод" И Источник = УникальныйИдентификатор Тогда
		ОбработатьШтрихкоды(ОбщегоНазначенияБольничнаяАптекаКлиентСервер.ПолучитьДанныеШтрихкода(Параметр, 1));
	КонецЕсли;
	
	Если Источник = "РегистрацияШтрихкодов"
	   И ИмяСобытия = "ЗарегистрированыШтрихкоды"
	   И Параметр.КлючВладельца = УникальныйИдентификатор Тогда
		Если Параметр.ЗарегистрированныеШтрихкоды.Количество() > 0 Тогда
			ОбновитьСтрокиНенайденныхШтрихКодов(Параметр.ЗарегистрированныеШтрихкоды);
		КонецЕсли;
	КонецЕсли;
	
	// БуферОбменаТоварами
	Если ОбработкаТабличнойЧастиКлиент.ОбрабатыватьОповещениеОтБуфераОбмена(ЭтотОбъект, ИмяСобытия, Источник) Тогда
		ДоступностьБуфераОбмена = ОбработкаТабличнойЧастиКлиент.ОпределитьДоступностьВставкиИзБуфераОбменаПоСобытию(ИмяСобытия);
		УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, ДоступностьБуфераОбмена);
	КонецЕсли;
	// Конец БуферОбменаТоварами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптекаКлиент.ОбработкаОповещения_ФормаДокумента(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ПодборТоваровКлиент.ОбработатьПодборТоваровВДокументСписания(ЭтотОбъект, ИсточникВыбора) Тогда
		ОбработатьПодбор(ВыбранноеЗначение.АдресТоваровВХранилище, КэшированныеЗначения);
	Иначе
		// БуферОбменаТоварами
		Если ОбработкаТабличнойЧастиКлиент.НужноОбработатьВставкуИзБуфераОбмена(ЭтотОбъект, ИсточникВыбора) Тогда
			ВставитьТоварыИзБуфераОбмена(ВыбранноеЗначение);
		КонецЕсли;
		// Конец БуферОбменаТоварами
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОценкаПроизводительностиБольничнаяАптекаКлиент.НачатьЗамерПроведенияДокумента(Объект.Ссылка, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НастройкаФормБольничнаяАптека.ФормаДокумента_ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПослеЗаписиНаСервере_ФормаДокумента(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНДЫ ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить()
	
	ОбработкаТабличнойЧастиКлиент.ПоказатьВводШтрихкода(УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодбор(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Документ"              , Объект.Ссылка);
	ПараметрыПодбора.Вставить("Дата"                  , Объект.Дата);
	ПараметрыПодбора.Вставить("Организация"           , Объект.Организация);
	ПараметрыПодбора.Вставить("МестоХраненияОстатка"  , "Отделение");
	ПараметрыПодбора.Вставить("Склад"                 , Объект.Склад);
	ПараметрыПодбора.Вставить("ИсточникФинансирования", Объект.ИсточникФинансирования);
	ПараметрыПодбора.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	
	ТипыНоменклатуры = ПодборТоваровКлиентСервер.ПолучитьОтборПоТипуНоменклатурыИзПараметровВыбора(Элементы.ТоварыНоменклатура.ПараметрыВыбора);
	ПараметрыПодбора.Вставить("ОтборПоТипуНоменклатуры", ТипыНоменклатуры);
	
	Отбор = Новый Структура;
	ПользовательскийОтбор = Новый Массив;
	Если ЗначениеЗаполнено(Объект.МестоХранения) Тогда
		Отбор.Вставить("МестоХранения", Объект.МестоХранения);
	ИначеЕсли ЗначениеЗаполнено(Объект.Склад) Тогда
		ПользовательскийОтбор.Добавить(Новый Структура("Ключ, Значение, Представление", "МестоХранения", Объект.МестоХранения, НСтр("ru = 'Показывать наличие на складе без учета постов'")));
	КонецЕсли;
	
	Если Отбор.Количество() > 0 Тогда
		ПараметрыПодбора.Вставить("Отбор", Отбор);
	КонецЕсли;
	Если ПользовательскийОтбор.Количество() > 0 Тогда
		ПараметрыПодбора.Вставить("ПользовательскийОтбор", ПользовательскийОтбор);
	КонецЕсли;
	
	ПодборТоваровКлиент.ОткрытьПодборТоваровВДокументСписания(ЭтотОбъект, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьНенайденныеШтрихкоды(Команда)
	
	ОбновитьСтрокиНенайденныхШтрихКодов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНенайденныеШтрихкоды(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьНенайденныеШтрихкоды(Объект.Товары, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗагрузкуДанныхИзТСД", ЭтотОбъект);
	ОборудованиеТерминалыСбораДанныхКлиент.НачатьЗагрузкуДанныеИзТСД(Оповещение, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Необходимо выбрать строку, для которой необходимо получить вес.'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьПолучениеВеса", ЭтотОбъект, ТекущаяСтрока);
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(Оповещение, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("ПослеРазбиенияСтроки", ЭтотОбъект, ТекущаяСтрока);
	ОбработкаТабличнойЧастиКлиент.РазбитьСтрокуТЧ(Объект.Товары, ТекущаяСтрока, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.ИнвентаризацияТоваровВОтделении.Пустая() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан документ инвентаризации'"), ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМестоХранения(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"МестоХранения",
		НСтр("ru='Место хранения'"),
		"Справочник.МестаХранения.ФормаВыбора",
		Новый Структура("Отбор", Новый Структура("Владелец", Объект.Склад)));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсточникФинансирования(Команда)
	
	ЗаполнитьРеквизитВВыделенныхСтроках(
		"ИсточникФинансирования",
		НСтр("ru='Источник финансирования'"),
		"Справочник.ИсточникиФинансирования.ФормаВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКомиссии(Команда)
	
	ВзаимодействиеСПользователемКлиент.ОткрытьПодборЧленовКомиссии(Элементы.СоставКомиссии);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзПостоянноДействующихКомиссий(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборКомиссии", ЭтотОбъект);
	ВзаимодействиеСПользователемКлиент.ВыбратьПостоянноДействующуюКомиссию(ЭтотОбъект, Объект.Организация, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	// ИнтеграцияСМобильнымПриложением
	Оповестить = Новый ОписаниеОповещения("ОбработатьЗагрузкуДанныхИзТСД", ЭтотОбъект);
	ИнтеграцияСМобильнымПриложениемКлиент.ВыполнитьКомандуЗагрузкиДанныхИзМобильногоПриложения(ЭтотОбъект, Команда, Оповестить);
	// Конец ИнтеграцияСМобильнымПриложением
	
	ОбщегоНазначенияБольничнаяАптекаКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Шапка
#Область Шапка

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтделениеПриИзменении(Элемент)
	
	ОбработатьИзменениеОтделения();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Склад <> Объект.Склад Тогда
		ОбработатьИзменениеСклада();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияПриИзменении(Элемент)
	
	ОбработатьИзменениеМестаХранения();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	
	ОбработатьИзменениеСтатьиРасходов(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АналитикаРасходовПрочиеРасходы", АналитикаРасходовПрочиеРасходы);
	ПараметрыФормы.Вставить("СтатьяРасходов"                , Объект.СтатьяРасходов);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьНачалоВыбораАналитикиРасходов(ПараметрыФормы, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникИнформацииОЦенахДляПечатиПриИзменении(Элемент)
	
	ОбработатьИзменениеИсточникаИнформацииОЦенахДляПечати();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

#КонецОбласти // Шапка

////////////////////////////////////////////////////////////////////////////////
// Список "Товары"
#Область Товары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ТекущаяСтрока.Штрихкод = "";
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьСериюНоменклатурыПоВладельцу(), ТекущаяСтрока.СерияНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьПартиюПоВладельцу(), ТекущаяСтрока.Партия);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элемент.Родитель.ТекущиеДанные;
	ОтборПартий = Новый Структура;
	ОтборПартий.Вставить("Документ"     , Объект.Ссылка);
	ОтборПартий.Вставить("Организация"  , Объект.Организация);
	ОтборПартий.Вставить("Склад"        , Объект.Склад);
	
	ПараметрыВыбораПартии = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыВыбораПартии(ОтборПартий, ТекущаяСтрока);
	ОбработкаТабличнойЧастиКлиент.ВыбратьПартиюНоменклатуры(ЭтотОбъект, Элемент, ПараметрыВыбораПартии, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // Товары

////////////////////////////////////////////////////////////////////////////////
// Список "Состав комиссии"
#Область Комиссия

&НаКлиенте
Процедура СоставКомиссииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВзаимодействиеСПользователемКлиент.ОбработатьПодборЧленовКомиссии(
		Объект.СоставКомиссии, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставКомиссииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ВзаимодействиеСПользователемКлиент.ОбработатьНачалоРедактированияСоставаКомиссии(
		Объект.СоставКомиссии, Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставКомиссииПослеУдаления(Элемент)
	
	ВзаимодействиеСПользователемКлиент.ОбработатьУдалениеЧленаКомиссии(Объект.СоставКомиссии);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставКомиссииПредседательПриИзменении(Элемент)
	
	ВзаимодействиеСПользователемКлиент.ОбработатьИзменениеПредседателяКомиссии(Объект.СоставКомиссии, Элемент.Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставКомиссииЧленКомиссииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВзаимодействиеСПользователемКлиент.ОбработатьВыборЧленаКомиссии(
		Объект.СоставКомиссии, Элемент.Родитель, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти // Комиссия

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере()
	
	Склад = Объект.Склад;
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	
	ОсновнойСклад = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьСкладОтделенияПоУмолчанию(Неопределено, Объект.Отделение);
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	
	ЗаполнитьСлужебныеРеквизиты();
	
	УстановитьВидимостьМестХранения();
	УстановитьДоступностьВидаЦены();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты(КэшированныеЗначения = Неопределено)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьСлужебныеРеквизитыСтатьиРасходов());
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("СтатьяРасходов", Объект.СтатьяРасходов);
	ДанныеОбъекта.Вставить("АналитикаРасходовКонтролироватьЗаполнениеАналитики");
	ДанныеОбъекта.Вставить("АналитикаРасходовПрочиеРасходы");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(ДанныеОбъекта, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОбъекта);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеСерийНоменклатуры(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеПартий(ЭтотОбъект);
	ОбработкаТабличнойЧастиСервер.УстановитьОформлениеИсточниковФинансирования(ЭтотОбъект);
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьМестХранения()
	
	Элементы.ТоварыМестоХранения.Видимость = Не ЗначениеЗаполнено(Объект.МестоХранения);
	Элементы.ТоварыЗаполнитьМестоХранения.Видимость = Не ЗначениеЗаполнено(Объект.МестоХранения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьВидаЦены()
	
	Элементы.ВидЦены.Доступность = (Объект.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.ЗаполнитьДокументНаОснованииИнвентаризацииТоваровВОтделении();
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитВВыделенныхСтроках(ИмяРеквизита, ПредставлениеРеквизита, ИмяФормыВыборка, ПараметрыФормы = Неопределено)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	ЗаполнениеВозможно = ОбработкаТабличнойЧастиКлиент.ПроверитьВозможностьЗаполненияРеквизитаВТабличнойЧасти(
		Объект.Товары, ВыделенныеСтроки, НСтр("ru='Товары'"), ПредставлениеРеквизита);
	Если ЗаполнениеВозможно Тогда
		
		ПараметрыЗаполнения = Новый Структура("ИмяРеквизита, ПредставлениеРеквизита", ИмяРеквизита, ПредставлениеРеквизита);
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьРеквизитВВыделенныхСтрокахЗавершение", ЭтотОбъект, ПараметрыЗаполнения);
		ОткрытьФорму(ИмяФормыВыборка, ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитВВыделенныхСтрокахЗавершение(Значение, ПараметрыЗаполнения) Экспорт
	
	Если Значение <> Неопределено Тогда
		ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
		ЗаполненоСтрок = ОбработкаТабличнойЧастиКлиент.ЗаполнитьРеквизитВВыделенныхСтроках(
			Объект.Товары, ВыделенныеСтроки, ПараметрыЗаполнения.ИмяРеквизита, Значение);
		ОбработкаТабличнойЧастиКлиент.ПоказатьОповещениеОЗаполненииРеквизитаВВыделенныхСтроках(
			Значение, ЗаполненоСтрок, ВыделенныеСтроки.Количество(), ПараметрыЗаполнения.ПредставлениеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКомиссии(ВыбранноеЗначение, НеИспользуется) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыборКомиссииСервер(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборКомиссииСервер(Комиссия)
	
	ОбработкаТабличнойЧастиСервер.ЗаполнитьДанныеКомиссииИзПостоянноДействующейКомиссии(Комиссия, Объект, Объект.СоставКомиссии);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка штрихкодов
#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияСДобавленнымиСтроками = Новый Структура;
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	ДействияСДобавленнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ДействияСИзмененнымиСтроками = Новый Структура;
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ИзменятьКоличество = Не ТолькоПросмотр;
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиШтрихкодов(ДанныеШтрихкодов, ДействияСДобавленнымиСтроками, ДействияСИзмененнымиСтроками);
	ПараметрыДействия.ИзменятьКоличество = ИзменятьКоличество;
	ПараметрыДействия.ПараметрыУчетаНоменклатуры = ПараметрыУчетаНоменклатуры;
	
	ОбработатьШтрихкодыНаСервере(ПараметрыДействия, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиКлиент.СообщитьОНеизвестныхШтрихкодах(ПараметрыДействия);
	
	Если ПараметрыДействия.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = ПараметрыДействия.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыНаСервере(ПараметрыДействия, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиСервер.ОбработатьШтрихкоды(ЭтотОбъект, Объект, ПараметрыДействия, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокиНенайденныхШтрихКодов(ЗарегистрированныеШтрихкоды = Неопределено)
	
	Если Не ОбработкаТабличнойЧастиКлиент.ЕстьНенайденныеШтрихкоды(Объект.Товары) Тогда
		Возврат;
	КонецЕсли;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияСИзмененнымиСтроками = Новый Структура;
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	ДействияСИзмененнымиСтроками.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиент.ПолучитьПараметрыОбработкиНенайденныхШтрихкодов();
	ПараметрыДействия.ДействияСИзмененнымиСтроками = ДействияСИзмененнымиСтроками;
	Если ЗарегистрированныеШтрихкоды <> Неопределено Тогда
		ПараметрыДействия.ЗарегистрированныеШтрихкоды = ЗарегистрированныеШтрихкоды;
	КонецЕсли;
	
	ОбновитьДанныеНенайденныхШтрихКодовНаСервере(ПараметрыДействия, КэшированныеЗначения);
	
	Если ПараметрыДействия.Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.СообщитьОНеизвестныхШтрихкодах(ПараметрыДействия);
	ОбработкаТабличнойЧастиКлиент.СообщитьОРезультатеОбновленияДанныхПоШтрихкодам(ПараметрыДействия);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНенайденныхШтрихКодовНаСервере(ПараметрыДействия, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиСервер.ОбновитьДанныеНенайденныхШтрихКодов(Объект, ПараметрыДействия, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти // ОбработкаШтрихкодов

////////////////////////////////////////////////////////////////////////////////
// Обработка подбора
#Область ОбработкаПодбора

&НаСервере
Процедура ОбработатьПодбор(АдресТоваровВХранилище, КэшированныеЗначения)
	
	СписокТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	
	Для Каждого Товар Из СписокТоваров Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбработкаПодбора

////////////////////////////////////////////////////////////////////////////////
// Обработка изменения реквизитов
#Область ОбработкаИзмененияРеквизитов

&НаСервере
Процедура ОбработатьИзменениеОрганизации()
	
	Отделение = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОтделениеПоУмолчанию(Объект.Отделение, Объект.Организация);
	Если Объект.Отделение <> Отделение Тогда
		Объект.Отделение = Отделение;
		ОбработатьИзменениеОтделения();
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиБольничнаяАптека.ПриИзмененииКлючевыхРеквизитовСостояниеЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОтделения()
	
	ОбщегоНазначенияБольничнаяАптека.ИзменитьСкладПриНеобходимости(Объект.Отделение, Объект.Склад, ОсновнойСклад);
	ОбработатьИзменениеСклада();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСклада()
	
	Если Склад = Объект.Склад Тогда
		Возврат;
	КонецЕсли;
	
	Склад = Объект.Склад;
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	
	ПараметрыУчетаНоменклатуры = Новый ФиксированнаяСтруктура(ЗапасыСервер.ПолучитьПараметрыУчетаНоменклатуры(Объект));
	ЗапасыСервер.ЗаполнитьСтатусыУчетаНоменклатуры(Объект, ПараметрыУчетаНоменклатуры);
	
	Объект.ИсточникИнформацииОЦенахДляПечати = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ИсточникИнформацииОЦенахДляПечати");
	ОбработатьИзменениеИсточникаИнформацииОЦенахДляПечати();
	
	Объект.МестоХранения = Неопределено;
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьКолонкиТабличнойЧасти(Объект.Товары, Неопределено, "МестоХранения");
	ОбработатьИзменениеМестаХранения();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМестаХранения()
	
	УстановитьВидимостьМестХранения();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеИсточникаИнформацииОЦенахДляПечати()
	
	Если Объект.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен Тогда
		Объект.ВидЦены = Справочники.Склады.УчетныйВидЦены(Объект.Склад);
	Иначе
		Объект.ВидЦены = Неопределено;
	КонецЕсли;
	
	УстановитьДоступностьВидаЦены();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСтатьиРасходов(КэшированныеЗначения)
	
	ПланыВидовХарактеристик.СтатьиРасходов.ОбработатьИзменениеСтатьиРасходов(Объект, Объект);
	
	ЗаполнитьСлужебныеРеквизиты(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗагрузкуДанныхИзТСД(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОбработатьШтрихкоды(РезультатВыполнения.ТаблицаТоваров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолучениеВеса(РезультатВыполнения, ТекущаяСтрока) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ТекущаяСтрока.КоличествоВЕдиницахИзмерения = РезультатВыполнения.Вес;
		ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРазбиенияСтроки(НоваяСтрока, ТекущаяСтрока) Экспорт
	
	ПриИзмененииКоличестваВСтрокеСпискаТовары(ТекущаяСтрока);
	ПриИзмененииКоличестваВСтрокеСпискаТовары(НоваяСтрока);
	
	Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

#КонецОбласти // ОбработкаИзмененияРеквизитов

////////////////////////////////////////////////////////////////////////////////
// Буфер обмена товарами
#Область БуферОбменаТоварами

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ТаблицаТовары = Элементы.Товары;
	Если ОбработкаТабличнойЧастиКлиент.ВозможноКопированиеСтрок(ТаблицаТовары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиВБуферОбмена(ТаблицаТовары.Имя);
		ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(ТаблицаТовары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ВставитьТоварыИзБуфераОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБуфераОбмена(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ОткрытьБуферОбмена(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиВБуферОбмена(Знач ИмяТабличнойЧасти)
	
	ОбработкаТабличнойЧастиСервер.СкопироватьВыделенныеСтрокиВБуферОбмена(Объект, Объект[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары = Неопределено)
	
	ТаблицаТовары = Объект.Товары;
	КоличествоТоваровДоВставки = ТаблицаТовары.Количество();
	
	ВставитьТоварыИзБуфераОбменаСервер(ВыбранныеТовары);
	
	КоличествоВставленных = ТаблицаТовары.Количество() - КоличествоТоваровДоВставки;
	ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьТоварыИзБуфераОбменаСервер(Знач ВыбранныеТовары = Неопределено)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения());
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьПараметрыУчета(), ПараметрыУчетаНоменклатуры);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ДанныеВставлены = ОбработкаТабличнойЧастиСервер.ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары, Объект.Товары, СтруктураДействий);
	Если ДанныеВставлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ЕстьДанныеВБуфереОбмена)
	
	Элементы = Форма.Элементы;
	Элементы.ТоварыБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыКонтекстноеМенюБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыБуферОбмена.Доступность = ЕстьДанныеВБуфереОбмена;
	
КонецПроцедуры

#КонецОбласти // БуферОбменаТоварами

#КонецОбласти // СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти // СтандартныеПодсистемы
