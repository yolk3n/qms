
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформлениеФормы();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Документ = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Предусмотрено открытие обработки только из документов.'");
	КонецЕсли;
	
	Валюта = Параметры.Валюта;
	ЗаполнитьТаблицуТоваров(Параметры.Документ, Параметры.РаспоряжениеНаОформление);
	
	Документ = Параметры.Документ;
	Если ЗначениеЗаполнено(Документ) Тогда
		ПредставлениеДокумента = Строка(Документ);
	Иначе
		ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (новый)'"), Документ.Метаданные().Синоним);
	КонецЕсли;
	
	Заголовок = Заголовок + ": " + ПредставлениеДокумента;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Товары.НайтиСтроки(Новый Структура("СтрокаВыбрана", Истина)).Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Выбранные товары не перенесены в документ. Перенести?'");
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы, ТекстВопроса, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПеренестиВДокументДанныеВыбора();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА КОМАНД ФОРМЫ
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокументДанныеВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТоварыВыполнить()
	
	Для Каждого СтрокаТаблицы Из Товары Цикл
		СтрокаТаблицы.СтрокаВыбрана = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьТоварыВыполнить()
	
	Для Каждого СтрокаТаблицы Из Товары Цикл
		СтрокаТаблицы.СтрокаВыбрана = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		ТекущаяСтрока.СтрокаВыбрана = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	ЗаказыСервер.УстановитьОформлениеСтрокиПрисутствующейВДокументе(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокументДанныеВыбора()
	
	ДанныеПодбора = Новый Структура("АдресДанныхВХранилище", ПоместитьТоварыВХранилище());
	
	ЗакрыватьПриВыборе = Ложь;
	ОповеститьОВыборе(ДанныеПодбора);
	
	Модифицированность = Ложь;
	Закрыть(ДанныеПодбора);
	
КонецПроцедуры

&НаСервере
Функция  ПоместитьТоварыВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Товары.Выгрузить(Новый Структура("СтрокаВыбрана", Истина)));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуТоваров(Документ, Спецификация)
	
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата",      Новый ОписаниеТипов("Дата"));
	ТаблицаКурсовВалют.Колонки.Добавить("Курс",      Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число"));
	
	КурсНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Параметры.ДатаДокумента);
	
	КэшированныеЗначения = Неопределено;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	ДействияПересчетСумм = Новый Структура;
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСумму());
	ПараметрыПересчетаСуммы = Действия.ПолучитьПараметрыПересчетаСуммыНДС(Параметры);
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСуммуНДС(), ПараметрыПересчетаСуммы);
	ДействияПересчетСумм.Вставить(Действия.Действие_ПересчитатьСуммуСНДС(), ПараметрыПересчетаСуммы);
	
	Выборка = Документы.СпецификацияКДоговору.ПолучитьРезультатЗапросаПоОстаткам(Спецификация, Документ).Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТовара = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара, Выборка);
		СтрокаТовара.ОстатокПоДокументу = Выборка.КоличествоВЕдиницахИзмерения;
		
		ИзменилосьКоличество = (Выборка.Количество <> Выборка.КоличествоПоДокументу);
		НеобходимПересчетСумм = ИзменилосьКоличество;
		
		Если Не ИзменилосьКоличество Тогда
			СтрокаТовара.КоличествоВЕдиницахИзмерения = Выборка.КоличествоВЕдиницахИзмеренияПоДокументу;
			СтрокаТовара.ОстатокПоДокументу = Выборка.КоличествоВЕдиницахИзмеренияПоДокументу;
		КонецЕсли;
		
		Если Выборка.ЦенаВключаетНДС <> Параметры.ЦенаВключаетНДС Тогда
			Если Выборка.ЦенаВключаетНДС Тогда
				СтрокаТовара.Сумма = Выборка.СуммаСНДС - Выборка.СуммаНДС;
			Иначе
				СтрокаТовара.Сумма = Выборка.СуммаСНДС
			КонецЕсли;
			СтрокаТовара.Цена = СтрокаТовара.Сумма / Выборка.КоличествоВЕдиницахИзмеренияПоДокументу;
		КонецЕсли;
		
		Если Выборка.Валюта <> Валюта Тогда
			
			НеобходимПересчетСумм = Истина;
			ПараметрыОтбора = Новый Структура("Валюта,Дата", Выборка.Валюта, НачалоДня(Выборка.Дата));
			КурсыВалюты = ТаблицаКурсовВалют.НайтиСтроки(ПараметрыОтбора);
			
			Если КурсыВалюты.Количество() = 0 Тогда
				КурсВалюты = ТаблицаКурсовВалют.Добавить();
				КурсВалюты.Валюта = Выборка.Валюта;
				КурсВалюты.Дата = НачалоДня(Выборка.Дата);
				
				ПараметрыКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата);
				КурсВалюты.Курс = ПараметрыКурса.Курс;
				КурсВалюты.Кратность = ПараметрыКурса.Кратность;
			Иначе
				КурсВалюты = КурсыВалюты[0];
				
			КонецЕсли;
			
			СтрокаТовара.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаТовара.Цена, КурсВалюты, КурсНовойВалюты);
			
		КонецЕсли;
		
		Если НеобходимПересчетСумм Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТабличнойЧасти(СтрокаТовара, ДействияПересчетСумм, КэшированныеЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из Товары Цикл
		
		Для Каждого ДанныеСтроки Из Параметры.ДанныеСтрок Цикл
			Если ДанныеСтроки.КодСтроки = ТекущаяСтрока.КодСтроки Тогда
				Если ТекущаяСтрока.Коэффициент <> 0 Тогда
					ТекущаяСтрока.КоличествоВНакладной = ДанныеСтроки.Количество / ТекущаяСтрока.Коэффициент;
				Иначе
					ТекущаяСтрока.КоличествоВНакладной = ДанныеСтроки.Количество;
				КонецЕсли;
				ТекущаяСтрока.ПрисутствуетВДокументе = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
