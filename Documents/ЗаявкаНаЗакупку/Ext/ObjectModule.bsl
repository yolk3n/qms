
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	ПоступлениеОднойДатой = Истина;
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ТребованиеОтделения") Тогда
		ЗаполнитьДокументНаОснованииТребованиеОтделения(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("Массив") И ДанныеЗаполнения.Количество()>0 И ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ТребованиеОтделения") Тогда
		ЗаполнитьДокументНаОснованииТребованиеОтделения(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
	ЗаполнитьПоЗначениямАвтозаполнения();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение документа
#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент()
	Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
	Автор = Пользователи.ТекущийПользователь();
	Ответственный = Пользователи.ТекущийПользователь();
	
	Организация = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	//ПодразделениеОрганизации = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьПодразделениеПоУмолчанию(ПодразделениеОрганизации, Организация);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗначениямАвтозаполнения()
	
	ОбщегоНазначенияБольничнаяАптека.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "Организация");
	//ОбщегоНазначенияБольничнаяАптека.ЗаполнитьПоЗначениямАвтозаполнения(ЭтотОбъект, Неопределено, "ПодразделениеОрганизации", "Организация");
	
КонецПроцедуры

Процедура ИнициализироватьСпецСостояние(СоответствиеСостояний)
	СоответствиеСостояний.Вставить(Перечисления.СостоянияВнутреннихЗаказов.ПустаяСсылка(),Истина);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияВнутреннихЗаказов.Закрыт,Истина);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияВнутреннихЗаказов.ГотовКЗакрытию,Истина);
КонецПроцедуры	

Процедура ЗаполнитьДокументНаОснованииТребованиеОтделения(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТребованияОтделения.Ссылка КАК Ссылка,
	|	ТребованияОтделения.ПометкаУдаления КАК ПометкаУдаления,
	|	ТребованияОтделения.Проведен КАК Проведен,
	|	ТребованияОтделения.ЖелаемаяДатаПоступления КАК ЖелаемаяДатаПоступления,
	|	ТребованияОтделения.Организация КАК Организация,
	|	ТребованияОтделения.Ответственный КАК Ответственный,
	|	ТребованияОтделения.СкладОтправитель КАК СкладОтправитель,
	|	ТребованияОтделения.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТребованияОтделения.Согласован КАК Согласован,
	|	ТребованияОтделения.Статус КАК Статус,
	|	ТребованияОтделения.ДатаПоступления КАК ДатаПоступления,
	|	ТребованияОтделения.ПоступлениеОднойДатой КАК ПоступлениеОднойДатой,
	|	ТребованияОтделения.ИсточникФинансирования КАК ИсточникФинансирования,
	|	ТребованияОтделения.Отделение КАК Отделение
	|ПОМЕСТИТЬ ТабДокументов
	|ИЗ
	|	Документ.ТребованиеОтделения КАК ТребованияОтделения
	|ГДЕ
	|	ТребованияОтделения.Ссылка В(&ДанныеЗаполнения)
	|	И ТребованияОтделения.Проведен
	|	И НЕ ТребованияОтделения.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТребованиеОтделенияТовары.Ссылка КАК ТребованиеОтделения,
	|	ТребованиеОтделенияТовары.КодСтроки КАК КодСтроки,
	|	ТребованиеОтделенияТовары.Номенклатура КАК Номенклатура,
	|	ТребованиеОтделенияТовары.ТорговоеНаименование КАК ТорговоеНаименование,
	|	ТребованиеОтделенияТовары.ДействующиеВеществаМНН КАК ДействующиеВеществаМНН,
	|	ТребованиеОтделенияТовары.ФормаВыпуска КАК ФормаВыпуска,
	|	ТребованиеОтделенияТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТребованиеОтделенияТовары.КоличествоВЕдиницахИзмерения КАК КоличествоВЕдиницахИзмерения,
	|	ТребованиеОтделенияТовары.ДатаПоступления КАК ДатаПоступления
	|ПОМЕСТИТЬ ТЧДокумента
	|ИЗ
	|	Документ.ТребованиеОтделения.Товары КАК ТребованиеОтделенияТовары
	|ГДЕ
	|	ТребованиеОтделенияТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ТабДокументов.Ссылка
	|			ИЗ
	|				ТабДокументов)
	|	И НЕ ТребованиеОтделенияТовары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтпускТоваровВОтделение.Ссылка КАК Ссылка,
	|	ОтпускТоваровВОтделение.ТребованиеОтделения КАК ТребованиеОтделения
	|ПОМЕСТИТЬ ОтпускВОтделения
	|ИЗ
	|	Документ.ОтпускТоваровВОтделение КАК ОтпускТоваровВОтделение
	|ГДЕ
	|	НЕ ОтпускТоваровВОтделение.ПометкаУдаления
	|	И ОтпускТоваровВОтделение.Проведен
	|	И ОтпускТоваровВОтделение.ТребованиеОтделения В
	|			(ВЫБРАТЬ
	|				ТабДокументов.Ссылка
	|			ИЗ
	|				ТабДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускТоваровВОтделениеТовары.КодСтроки КАК КодСтроки,
	|	ОтпускТоваровВОтделениеТовары.Номенклатура КАК Номенклатура,
	|	ОтпускТоваровВОтделениеТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОтпускТоваровВОтделениеТовары.КоличествоВЕдиницахИзмерения КАК КоличествоВЕдиницахИзмерения,
	|	ОтпускВОтделения.ТребованиеОтделения КАК ТребованиеОтделения
	|ПОМЕСТИТЬ ТЧОтпущено
	|ИЗ
	|	Документ.ОтпускТоваровВОтделение.Товары КАК ОтпускТоваровВОтделениеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтпускВОтделения КАК ОтпускВОтделения
	|		ПО ОтпускТоваровВОтделениеТовары.Ссылка = ОтпускВОтделения.Ссылка
	|ГДЕ
	|	ОтпускТоваровВОтделениеТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ОтпускВОтделения.Ссылка
	|			ИЗ
	|				ОтпускВОтделения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабДокументов.Ссылка КАК Ссылка,
	|	ТабДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ТабДокументов.Проведен КАК Проведен,
	|	ТабДокументов.ЖелаемаяДатаПоступления КАК ЖелаемаяДатаПоступления,
	|	ТабДокументов.Организация КАК Организация,
	|	ТабДокументов.Ответственный КАК Ответственный,
	|	ТабДокументов.СкладОтправитель КАК СкладОтправитель,
	|	ТабДокументов.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ТабДокументов.Согласован КАК Согласован,
	|	ТабДокументов.Статус КАК СтатусТребования,
	|	ТабДокументов.ДатаПоступления КАК ДатаПоступления,
	|	ТабДокументов.ПоступлениеОднойДатой КАК ПоступлениеОднойДатой,
	|	ВЫБОР
	|		КОГДА НЕ ТабДокументов.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(СостоянияВнутреннихЗаказов.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияВнутреннихЗаказов.Закрыт))
	|	КОНЕЦ КАК ТекСостояние,
	|	ТабДокументов.ИсточникФинансирования КАК ИсточникФинансирования
	|ИЗ
	|	ТабДокументов КАК ТабДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВнутреннихЗаказов КАК СостоянияВнутреннихЗаказов
	|		ПО ТабДокументов.Ссылка = СостоянияВнутреннихЗаказов.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧДокумента.ТребованиеОтделения КАК ТребованиеОтделения,
	|	ТЧДокумента.КодСтроки КАК КодСтроки,
	|	ТЧДокумента.Номенклатура КАК Номенклатура,
	|	ТЧДокумента.ТорговоеНаименование КАК ТорговоеНаименование,
	|	ТЧДокумента.ДействующиеВеществаМНН КАК ДействующиеВеществаМНН,
	|	ТЧДокумента.ФормаВыпуска КАК ФормаВыпуска,
	|	ТЧДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТЧДокумента.КоличествоВЕдиницахИзмерения - ЕСТЬNULL(ТЧОтпущено.КоличествоВЕдиницахИзмерения, 0) КАК КоличествоВЕдиницахИзмерения,
	|	ТЧДокумента.ДатаПоступления КАК ДатаПоступления,
	|	ТЧДокумента.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ТабДокументов.Отделение КАК Отделение
	|ИЗ
	|	ТЧДокумента КАК ТЧДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЧОтпущено КАК ТЧОтпущено
	|		ПО ТЧДокумента.ТребованиеОтделения = ТЧОтпущено.ТребованиеОтделения
	|			И ТЧДокумента.КодСтроки = ТЧОтпущено.КодСтроки
	|			И ТЧДокумента.Номенклатура = ТЧОтпущено.Номенклатура
	|			И ТЧДокумента.ЕдиницаИзмерения = ТЧОтпущено.ЕдиницаИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабДокументов КАК ТабДокументов
	|		ПО ТЧДокумента.ТребованиеОтделения = ТабДокументов.Ссылка";
	
	Запрос.УстановитьПараметр("ДанныеЗаполнения", ДанныеЗаполнения);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ПоследнийПакет = РезультатыЗапроса.Количество();
	
	ПропуститьСостояние = Новый Соответствие; ИнициализироватьСпецСостояние(ПропуститьСостояние);
	ПропуститьСтроки = Новый Соответствие;
	
	ВыборкаТабДокументов = РезультатыЗапроса.Получить(ПоследнийПакет-2).Выбрать();
	
	Пока ВыборкаТабДокументов.Следующий() Цикл
		
		Если ПропуститьСостояние.Получить(ВыборкаТабДокументов.ТекСостояние) = Истина ИЛИ (ЗначениеЗаполнено(СкладОтправитель) И СкладОтправитель <> ВыборкаТабДокументов.СкладОтправитель) Тогда
			ПропуститьСтроки.Вставить(ВыборкаТабДокументов.Ссылка,Истина);
		Иначе
			НовСтр = ДокументыОснований.Добавить();
			НовСтр.Основание = ВыборкаТабДокументов.Ссылка;
			Если СкладОтправитель.Пустая() Тогда
				Склад = ВыборкаТабДокументов.СкладОтправитель;
			КонецЕсли;
			Если ИсточникФинансирования.Пустая() Тогда
				ИсточникФинансирования = ВыборкаТабДокументов.ИсточникФинансирования;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	
	МаксДата = Дата(1900,1,1);
	МинДата = Дата(3900,1,1);
	ОтборТовары = Новый Массив;
	
	ВыборкаТЧДокумента = РезультатыЗапроса.Получить(ПоследнийПакет-1).Выбрать();
	//ВремТабТовары = Товары.ВыгрузитьКолонки("ТребованиеОтделения,КодСтроки,Номенклатура");
	Пока ВыборкаТЧДокумента.Следующий() Цикл
		
		Если ПропуститьСтроки.Получить(ВыборкаТЧДокумента.ТребованиеОтделения) = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаТЧДокумента.Номенклатура) Тогда
			
			ОтборТовары.Добавить(ВыборкаТЧДокумента.Номенклатура);
			СтрТЧ = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрТЧ,ВыборкаТЧДокумента);
			
			Если СтрТЧ.Коэффициент = 0 Тогда
				СтрТЧ.Коэффициент = 1;
			КонецЕсли;
			
			СтрТЧ.Количество = СтрТЧ.Коэффициент * СтрТЧ.КоличествоВЕдиницахИзмерения;
			
		Иначе
			//СтрТЗ = ВремТабТовары.Добавить();
			//ЗаполнитьЗначенияСвойств(СтрТЗ,ВыборкаТЧДокумента);
		КонецЕсли;
		
		МаксДата = Макс(МаксДата,ВыборкаТЧДокумента.ДатаПоступления);
		МинДата = Мин(МинДата,ВыборкаТЧДокумента.ДатаПоступления);
		
	КонецЦикла;
	
	Если Товары.Количество() = 0 Тогда
	Иначе
		Документы.ЗаявкаНаЗакупку.ЗаполнитьЦены(Товары,ОтборТовары,ТекущаяДата(),Склад);	
	КонецЕсли;	
	

	
	Если МаксДата = МинДата Тогда
		ДатаПоступления = МинДата;
		ДатаПоступленияТЧ = МинДата;
		ПоступлениеОднойДатой = Истина;
	Иначе
		ДатаПоступления = МаксДата;
		ДатаПоступленияТЧ = МаксДата;
		ПоступлениеОднойДатой = Ложь;
	КонецЕсли;	
	Статус = Перечисления.СтатусыЗаказовПоставщикам.ПустаяСсылка();
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения)
	
	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	//ОбработкаТабличнойЧастиСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, НепроверяемыеРеквизиты, Отказ);
	
	// Желаемая дата поступления в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Желаемая дата поступления должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаПоступления",
			,
			Отказ);
		
	КонецЕсли;
	
	//Комментарий Соколов
	//НепроверяемыеРеквизиты.Добавить("Товары.ДатаПоступления");
	НепроверяемыеРеквизиты.Добавить("Товары.Цена");
	НепроверяемыеРеквизиты.Добавить("Товары.Сумма");
	
	Если ПоступлениеОднойДатой Тогда
	Иначе
		НепроверяемыеРеквизиты.Добавить("ДатаПоступления");
	КонецЕсли;
	
	// Дата поступления в шапке должна быть не меньше даты документа
	Если ПоступлениеОднойДатой
		И ЗначениеЗаполнено(ДатаПоступления)
		И ДатаПоступления < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Дата поступления должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначения.СообщитьПользователю(
		ТекстОшибки,
		ЭтотОбъект,
		"ДатаПоступления",
		,
		Отказ);
		
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из Товары Цикл
		
		АдресОшибки = " " + НСтр("ru='в строке %1 списка ""Товары""'");
		АдресОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(АдресОшибки, СтрокаТовара.НомерСтроки);
		
		// Дата поступления в списке Товары обязательна к заполнению только для заказов в 
		// статусах Подтвержден, КПоступлению, Закрыт
		Если Не ПоступлениеОднойДатой
		   И Не ЗначениеЗаполнено(СтрокаТовара.ДатаПоступления) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата поступления""'");
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТовара.НомерСтроки, "ДатаПоступления"),
				,
				Отказ);
			
		КонецЕсли;
		
		// Дата поступления в списке Товары должна быть не меньше даты документа
		Если Не ПоступлениеОднойДатой И ЗначениеЗаполнено(СтрокаТовара.ДатаПоступления) И СтрокаТовара.ДатаПоступления < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Дата поступления должна быть не меньше даты документа %Дата%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТовара.НомерСтроки, "ДатаПоступления"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если не ЗапущенВРаботу(Статус) Тогда
		НепроверяемыеРеквизиты.Добавить("Товары.Отделение");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти // ИнициализацияИЗаполнение

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
#Область ОбработчикиСобытий

Процедура ПриЗаписи(Отказ)
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	
	//Для Каждого СтрТЧ Из Товары Цикл    
	//	Если НЕ ЗначениеЗаполнено(СтрТЧ.ДатаПоступления) Тогда
	//		СтрТЧ.ДатаПоступления=Дата;
	//	КонецЕсли;	
	//КонецЦикла;
	//
	//Если ПоступлениеОднойДатой Тогда
	//	ДатаПоступленияТЧ = ДатаПоступления;
	//Иначе
	//	_ДатаПоступленияТЧ = '19000101';
	//	Для Каждого СтрТЧ Из Товары Цикл    
	//		ДатаМакс = Макс(СтрТЧ.ДатаПоступления,_ДатаПоступленияТЧ);
	//	КонецЦикла;
	//	ДатаПоступленияТЧ = _ДатаПоступленияТЧ;
	//КонецЕсли;	
	
	СтруктураХранения = Новый Структура;
	Если ЭтоНовый() Тогда
		СтруктураХранения.Вставить("Статус",Перечисления.СтатусыЗаказовПоставщикам.ПустаяСсылка());
	Иначе	
		ТекстЗапроса = ""; 
		Для Каждого Рек из Метаданные().Реквизиты Цикл
			ТекстЗапроса = ?(ПустаяСтрока(ТекстЗапроса),"",ТекстЗапроса+",")+"ТаблицаДокумента."+Рек.Имя+" КАК "+Рек.Имя;
		КонецЦикла;	
		ОбъектЗапрос = Новый Запрос("Выбрать "+ТекстЗапроса+" из Документ.ЗаявкаНаЗакупку КАК ТаблицаДокумента ГДЕ ТаблицаДокумента.Ссылка = &ЭтаСсылка");
		ОбъектЗапрос.УстановитьПараметр("ЭтаСсылка",Ссылка);
		СтрокаДанных = ОбъектЗапрос.Выполнить().Выбрать();
		СтрокаДанных.Следующий();
		Для Каждого Рек из Метаданные().Реквизиты Цикл
			СтруктураХранения.Вставить(Рек.Имя,СтрокаДанных[Рек.Имя]);
		КонецЦикла;	
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВерсияПередЗаписью", СтруктураХранения);
	ДополнительныеСвойства.Вставить("ГруппаТекущегоСотрудника", ПодставитьПользователя());
	
	СуммаДокумента = Товары.Итог("Сумма");	
	
	ПроведениеБольничнаяАптека.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	РезТаб = Товары.ВыгрузитьКолонки("Номенклатура");
	Для Каждого СтрТЧ из Товары Цикл
		Если ЗначениеЗаполнено(СтрТЧ.Номенклатура) Тогда
			ЗаполнитьЗначенияСвойств(РезТаб.Добавить(),СтрТЧ);
		КонецЕсли;	
	КонецЦикла;
	Если РезТаб.Количество() > 0 Тогда
		Документы.ЗаявкаНаЗакупку.ИнициализироватьКлючиАналитикиПоТЗ(РезТаб);
	КонецЕсли;
	
	ДополнитьТЧ();

	//Вставка Соклов
	
	Если ЭтотОбъект.НовыйСпособУчета Тогда   
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ЖелаемаяДатаПоступления) Тогда
			ЭтотОбъект.ЖелаемаяДатаПоступления=ТекущаяДата();
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ДатаПоступления) Тогда
			ЭтотОбъект.ДатаПоступления=ТекущаяДата();
		КонецЕсли;
		ЭтотОбъект.ПоступлениеОднойДатой=Истина;
		Для Каждого Стр из ЭтотОбъект.Товары Цикл
			Если НЕ Стр.ЕдиницаИзмерения=Стр.Номенклатура.ОсновнаяЕдиницаУчета Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке "+Стр.НомерСтроки+" казана единица измерения отличающаяся от основной единицы учета. Сохранение документа не возможно.",ССылка,,,Отказ);
			Конецесли;	
			Если Стр.ИдентификаторСтроки="" Тогда
				Стр.ИдентификаторСтроки=Строка(Новый УникальныйИдентификатор);
				Если НЕ ЗначениеЗаполнено(Стр.Требование) ИЛИ ТипЗнч(Стр.Требование)=Тип("ДокументСсылка.ЗаявкаНаЗакупку") Тогда
					Стр.АвтоЗаполнение=Ложь;
					Стр.КодСтроки=0;
				Иначе	
					Стр.АвтоЗаполнение=Истина;
				КонецЕсли;	
			Конецесли;
			Если НЕ Стр.АвтоЗаполнение Тогда
				Стр.Требование=Ссылка;
				Стр.НоменклатураЗаказа=Стр.Номенклатура;
			КонецЕсли;	
		КонецЦикла;	
	Иначе	
		Для Каждого Стр из ЭтотОбъект.Товары Цикл
			Если ЭтотОбъект.ПоступлениеОднойДатой Тогда
				Стр.ДатаПоступления=ЭтотОбъект.ДатаПоступления;
			ИначеЕсли НЕ ЗначениеЗаполнено(Стр.ДатаПоступления) Тогда
				Стр.ДатаПоступления=ТекущаяДата();
			Конецесли;	
				
		КонецЦикла;	
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Автор) Тогда
		ЭтотОбъект.Автор=ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;	
	///Соколок
	
КонецПроцедуры

Процедура ДополнитьТЧ() 
	
	Если ЭтотОбъект.НовыйСпособУчета Тогда
		Возврат;
	КонецЕсли;	
	//Если Дата > Дата(2021,06,07) Тогда
	//	Возврат;
	//КонецЕсли;
	ОбъектыТребов = Новый Соответствие;
	СканерТЧТреб = Новый Структура("Номенклатура,НомерСтроки",Справочники.Номенклатура.ПустаяСсылка(),0);
	Для Каждого СтрТЧ из Товары Цикл
		
		Если СтрТЧ.НоменклатураЗаказа.Пустая() Тогда 
			
			Если ЗначениеЗаполнено(СтрТЧ.Требование) и СтрТЧ.КодСтроки > 0 Тогда
				ОбъектТребования = ОбъектыТребов.Получить(СтрТЧ.Требование);
				Если ОбъектТребования = Неопределено Тогда
					ОбъектТребования = СтрТЧ.Требование.ПолучитьОбъект();
					ОбъектыТребов.Вставить(СтрТЧ.Требование,ОбъектТребования);
				КонецЕсли;
				
				СканерТЧТреб.Номенклатура	= СтрТЧ.Номенклатура;
				СканерТЧТреб.НомерСтроки	= СтрТЧ.КодСтроки;
				
				Найдено = ОбъектТребования.Товары.НайтиСтроки(СканерТЧТреб);
				Если Найдено.Количество() > 0 Тогда
					СтрокаТаблицаТоварыТреб = Найдено.Получить(0);
					АналитикаОтборов = РегистрыСведений.АналитикаОписанийОтборовНоменклатуры.СоздатьМенеджерЗаписи();
					АналитикаОтборов.ДействующиеВеществаМНН	=	СтрокаТаблицаТоварыТреб.ДействующиеВеществаМНН; 
					АналитикаОтборов.ТорговоеНаименование	=	СтрокаТаблицаТоварыТреб.ТорговоеНаименование;
					АналитикаОтборов.ФормаВыпуска			=	СтрокаТаблицаТоварыТреб.ФормаВыпуска;
					АналитикаОтборов.Номенклатура			=	СтрокаТаблицаТоварыТреб.Номенклатура;
					АналитикаОтборов.Прочитать();
					СтрТЧ.НоменклатураЗаказа = АналитикаОтборов.КлючАналитики;
				КонецЕсли;
			Иначе
				АналитикаОтборов = РегистрыСведений.АналитикаОписанийОтборовНоменклатуры.СоздатьМенеджерЗаписи();
				АналитикаОтборов.Номенклатура			=	СтрТЧ.Номенклатура;
				АналитикаОтборов.Прочитать();
				СтрТЧ.НоменклатураЗаказа = АналитикаОтборов.КлючАналитики;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//Если не Отказ Тогда
	//	Документы.ЗаявкаНаЗакупку.ИнициализироватьКлючиАналитикиОписанийОтборовНоменклатуры(Новый Структура("Ссылка",ЭтотОбъект.Ссылка));
	//КонецЕсли;
	
	Если НЕ ЭтотОбъект.НовыйСпособУчета Тогда
	
		ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ, РежимПроведения);
	КонецЕсли;	
	
	//РегистрыСведений.СостоянияЗаказовПоставщикам.ОтразитьСостояниеЗаказа(Ссылка);
	
	//ЗаказыСервер.ВыполнитьКонтрольЗаказаПослеПроведения(Ссылка, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если НЕ ЭтотОбъект.НовыйСпособУчета Тогда
		ПроведениеБольничнаяАптека.СформироватьДвиженияПоРегистрам(ЭтотОбъект, Отказ);
	Иначе
		Отказ=НЕ ЭтотОбъект.Статус=Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// Прочее
#Область Прочее

Функция СписокРегистровДляКонтроля() Экспорт
	
	РегистрыДляКонтроля = Новый Массив;
	РегистрыДляКонтроля.Добавить(Движения.ЗаявкиНаЗакупку);
	
	Возврат РегистрыДляКонтроля;
	
КонецФункции

#КонецОбласти // Прочее

Функция ЗапущенВРаботу(ПроверяемыйСтатус)
	
	Возврат	ПроверяемыйСтатус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден
		     Или ПроверяемыйСтатус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению
		     Или ПроверяемыйСтатус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
			 
КонецФункции	

Функция НеНовый(ПроверяемыйСтатус)
	
	Возврат	ПроверяемыйСтатус = Перечисления.СтатусыЗаказовПоставщикам.Согласован
				ИЛИ	ПроверяемыйСтатус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден
				Или ПроверяемыйСтатус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению
				Или ПроверяемыйСтатус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
			 
КонецФункции	

Функция  ПодставитьПользователя()
	
	Перем ТекущийПользователь,ГруппаТекущегоСотрудника;
	ГруппаТекущегоСотрудника = "";
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ИменованныеГруппы = Новый Соответствие;
	ИменованныеГруппы.Вставить("Отдел Закупок",Истина);
	ИменованныеГруппы.Вставить("Фармацевты",Истина);
	ИменованныеГруппы.Вставить("Заведующие Отделениями",Истина);
	ИменованныеГруппы.Вставить("Медперсонал",Истина);
	
	ВыборкаГрупп = Справочники.ГруппыПользователей.Выбрать();
	Пока ВыборкаГрупп.Следующий() Цикл
		Если ИменованныеГруппы.Получить(ВыборкаГрупп.Наименование) = Истина Тогда
			Если ВыборкаГрупп.Состав.Найти(ТекущийПользователь)<>Неопределено Тогда
				ГруппаТекущегоСотрудника = ВыборкаГрупп.Наименование;
			КонецЕсли;	
		КонецЕсли; 	
	КонецЦикла;	
	
	Возврат ГруппаТекущегоСотрудника;
	
КонецФункции


