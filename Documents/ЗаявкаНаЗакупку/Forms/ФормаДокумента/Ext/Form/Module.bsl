
////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ПЕРЕМЕННЫХ
#Область ОписаниеПеременных

&НаКлиенте
Перем ПредыдущиеРеквизитыСтроки; //используется для отвязки строки поступления от строки заказа

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти // ОписаниеПеременных

////////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ПОДСИСТЕМЫ
#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом


// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти // СтандартныеПодсистемы


////////////////////////////////////////////////////////////////////////////////
// Буфер обмена товарами
#Область БуферОбменаТоварами

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ТаблицаТовары = Элементы.Товары;
	Если ОбработкаТабличнойЧастиКлиент.ВозможноКопированиеСтрок(ТаблицаТовары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиВБуферОбмена(ТаблицаТовары.Имя);
		ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(ТаблицаТовары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ВставитьТоварыИзБуфераОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБуфераОбмена(Команда)
	
	ОбработкаТабличнойЧастиКлиент.ОткрытьБуферОбмена(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиВБуферОбмена(Знач ИмяТабличнойЧасти)
	
	ОбработкаТабличнойЧастиСервер.СкопироватьВыделенныеСтрокиВБуферОбмена(Объект, Объект[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары = Неопределено)
	
	ТаблицаТовары = Объект.Товары;
	КоличествоТоваровДоВставки = ТаблицаТовары.Количество();
	
	ВставитьТоварыИзБуфераОбменаСервер(ВыбранныеТовары);
	
	КоличествоВставленных = ТаблицаТовары.Количество() - КоличествоТоваровДоВставки;
	ОбработкаТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьТоварыИзБуфераОбменаСервер(Знач ВыбранныеТовары = Неопределено)
	
	ТабличнаяЧасть = Объект.Товары;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	
	ДанныеВставлены = ОбработкаТабличнойЧастиСервер.ВставитьТоварыИзБуфераОбмена(ВыбранныеТовары, ТабличнаяЧасть, СтруктураДействий);
	Если ДанныеВставлены Тогда
		Модифицированность = Истина;
		
		//РассчитатьСостояниеСпецификации();
		//ОбновитьЗависимыеРеквизитыФормыПоСпецификации(ТабличнаяЧасть.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ЕстьДанныеВБуфереОбмена)
	
	Элементы = Форма.Элементы;
	Элементы.ТоварыБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыКонтекстноеМенюБуферОбменаВставить.Доступность = ЕстьДанныеВБуфереОбмена;
	Элементы.ТоварыБуферОбмена.Доступность = ЕстьДанныеВБуфереОбмена;
	
КонецПроцедуры

#КонецОбласти // БуферОбменаТоварами

////////////////////////////////////////////////////////////////////////////////
// Работа со спецификацией
#Область Спецификация

&НаКлиенте
Процедура ВопросПользователюПриИзмененииРеквизитаСтроки(ОписаниеОповещения, ТекущаяСтрока)
	
	// Если текущая строка не связана с заказом
	Если ТекущаяСтрока.КодСтроки = 0 Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	// Если ни один из ключевых реквизитов не изменился
	Если ТекущаяСтрока.Номенклатура = ПредыдущиеРеквизитыСтроки.Номенклатура Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ТекстВопроса = НСтр("ru='Редактируемая строка перестанет быть связанной со строкой Требования. Продолжить?'");
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВопросПользователюПриИзмененииРеквизитаСтрокиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПользователюПриИзмененииРеквизитаСтрокиВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	// Если пользователь подтвердил изменение значения ключевого реквизита
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДополнительныеПараметры.ТекущаяСтрока.КодСтроки = 0;
		ОбновитьОтклоненияОтЗаказаВСтроке(ДополнительныеПараметры.ТекущаяСтрока, Истина);
		//ОбновитьЗависимыеРеквизитыФормыПоСпецификации(Объект.Товары.Итог("РасхождениеЗаказ"), НадписьРасхождениеЗаказ, Элементы.КартинкаРасхождениеЗаказ);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Истина);
		
	Иначе
		
		// Если пользователь отказался менять связанную строку, возвращаем старые значения
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.ТекущаяСтрока, ПредыдущиеРеквизитыСтроки);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ПоступлениеПоЗаказу)
	
	Если Не ПоступлениеПоЗаказу Или ТекущаяСтрока.КодСтроки = 0 Тогда
		
		ТекущаяСтрока.ЦенаИзменилась = Ложь;
		ТекущаяСтрока.КартинкаИзмененияЦены = 8;
		ТекущаяСтрока.ПроцентОтклоненияОтЦеныЗаказа = 0;
		
	КонецЕсли;
	
	Если ПоступлениеПоЗаказу Тогда
		Если ТекущаяСтрока.КодСтроки = 0 Тогда
			ТекущаяСтрока.РасхождениеЗаявка = 1;
			ТекущаяСтрока.КартинкаРасхождениеЗаказ = 1;
		Иначе
			ТекущаяСтрока.РасхождениеЗаявка = 0;
			ТекущаяСтрока.КартинкаРасхождениеЗаказ = ?(ТекущаяСтрока.СтрокаОтсутствуетВЗаказе, 2, 0);
		КонецЕсли;
	Иначе
		ТекущаяСтрока.РасхождениеЗаявка = 0;
		ТекущаяСтрока.КартинкаРасхождениеЗаказ = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Спецификация

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДатПоступления(Форма)
	
	//Форма.Элементы.ТоварыДатаПоступления.АвтоОтметкаНезаполненного	= НЕ Форма.Объект.ПоступлениеОднойДатой;
	Форма.Элементы.ТоварыДатаПоступления.ТолькоПросмотр				= Форма.Объект.ПоступлениеОднойДатой;
	
	Если Форма.Объект.ПоступлениеОднойДатой Тогда
		Форма.Элементы.ТоварыДатаПоступления.Формат = "ДФ=-";
		//Форма.Элементы.ДатаПоступления.Формат = "";
	Иначе
		Форма.Элементы.ТоварыДатаПоступления.Формат = "";
		//Форма.Элементы.ДатаПоступления.Формат = "ДФ=-";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьТаблицы(Форма,Флаг,ГруппаТекущегоСотрудника)
	
	Форма.Элементы.ТоварыКоличествоВЕдиницахИзмерения.ТолькоПросмотр = Флаг;
	Форма.Элементы.Товары.ИзменятьПорядокСтрок	=	НЕ Флаг;
	Форма.Элементы.Товары.ИзменятьСоставСтрок	=	НЕ Флаг;
	
	Если ГруппаТекущегоСотрудника = "Фармацевты" И Флаг Тогда
		Форма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПоля(Вводные,Цена,Поставщик)
	
	Цена = Документы.ЗаявкаНаЗакупку.ПолучитьЦенуПоследнейЗакупки(Вводные.Номен,Вводные.ЕдИзм, Вводные.Дата, Вводные.Склад, Поставщик);
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// События формы
#Область События_формы

&НаСервере
Процедура ПриСозданииНовогоПриЧтенииНаСервере(НовыйСтатус=Неопределено)
	
	//Валюта = Объект.Валюта;
	
	//ОбновитьФормуПоСпецификации();
	//УстановитьВидимостьЭлементовПоСпецификации();
	
	//РассчитатьИтогиСтрокЗаказа(ЭтотОбъект);
	
	УстановитьВидимостьДатПоступления(ЭтотОбъект);
	
	Если НовыйСтатус = Неопределено Тогда
		НовыйСтатус = Объект.Статус;
	КонецЕсли;	
	
	УстановитьДоступностьТаблицы(ЭтотОбъект, ЗапущенВРаботу(НовыйСтатус),ГруппаТекущегоСотрудника);
	
	//ОбновитьТекущееСостояниеСервер();
	
	//ОсновнойСклад = ЗначениеНастроекБольничнаяАптекаПовтИсп.ПолучитьСкладПоУмолчанию(Неопределено, Объект.ПодразделениеОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", Элементы.ГруппаДополнительныеРеквизиты.Имя);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// БуферОбменаТоварами
	УстановитьДоступностьКомандБуфераОбмена(ЭтотОбъект, Не ОбработкаТабличнойЧастиСервер.БуферОбменаПустой());
	// Конец БуферОбменаТоварами
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииНовогоПриЧтенииНаСервере();
	КонецЕсли;
	
	ПодставитьПользователя();
	
	УстановитьДоступностьТаблицы(ЭтаФорма,ЗапущенВРаботу(Объект.Статус),ГруппаТекущегоСотрудника);
	
	//ЗаполнитьКолонкиПоказателиТаб();
	
	Если ЗначениеЗаполнено(Объект.Дата) И  Объект.Дата < Дата(2021,5,21,0,0,0) Тогда
		ДозаполнитьОтделения();
	КонецЕсли;	
	
	ПересчитатьСуммуДокумента();
	//Вставка Соколов
	
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Если УказательДата < ТекущаяДата() Тогда
			УказательДата = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	сок_ЗаполнитьДополнительныеКолонкиТабличнойЧасти();

	Этаформа.ТолькоПросмотр=Ложь;
	
	///Соколов
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьОтделения()
	
	//Для Каждого СтрТЧ из Объект.Товары Цикл
	//	Если СтрТЧ.Отделение.Пустая() И НЕ СтрТЧ.ТребованиеОтделения.Пустая() Тогда
	//		СтрТЧ.Отделение = СтрТЧ.ТребованиеОтделения.Отделение;
	//	КонецЕсли;	
	//КонецЦикла;	
	
КонецПроцедуры	
&НаСервере
Процедура ЗаполнитьКолонкиПоказателиСтрока()

КонецПроцедуры

&НаСервере
Процедура ПодставитьПользователя()
	
	Перем ТекущийПользователь;
	ГруппаТекущегоСотрудника = "Неопределено";
	//Если Объект.Исполнитель.Пустая() ИЛИ Объект.Ответственный.Пустая() Тогда
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ВыборкаГрупп = Справочники.ГруппыПользователей.Выбрать();
	Пока ВыборкаГрупп.Следующий() Цикл
		Если ВыборкаГрупп.Наименование = "Отдел Закупок" Тогда
			Если ВыборкаГрупп.Состав.Найти(ТекущийПользователь)<>Неопределено Тогда
				Если Объект.Исполнитель.Пустая() Тогда
					Объект.Исполнитель = ТекущийПользователь;
					Модифицированность = Истина;
				КонецЕсли;
				ГруппаТекущегоСотрудника = "Отдел Закупок";
			КонецЕсли;	
		ИначеЕсли ВыборкаГрупп.Наименование = "Фармацевты" Тогда
			Если ВыборкаГрупп.Состав.Найти(ТекущийПользователь)<>Неопределено Тогда
				Если Объект.Ответственный.Пустая() Тогда
					Объект.Ответственный = ТекущийПользователь;	
					Модифицированность = Истина;
				КонецЕсли;	
				ГруппаТекущегоСотрудника = "Фармацевты";
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	//КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗапущенВРаботу(Статус)
	
	Возврат	Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Подтвержден")
		     Или Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.КПоступлению")
		     Или Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Закрыт");
			 
КонецФункции	


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПриСозданииНовогоПриЧтенииНаСервере();

	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	УстановитьВидимостьИДостуность();
	ПараметрыЗаписи.Вставить("ДатаПоступленияТЧ", Объект.ДатаПоступленияТЧ);
	Оповестить("Запись_ЗаявкаНаЗакупку", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПредыдущиеРеквизитыСтроки = Новый Структура;
	ПредыдущиеРеквизитыСтроки.Вставить("НоменклатураПоставщика");
	ПредыдущиеРеквизитыСтроки.Вставить("Номенклатура");
	ПредыдущиеРеквизитыСтроки.Вставить("ЕдиницаИзмерения");
	ПредыдущиеРеквизитыСтроки.Вставить("Коэффициент");
	ПредыдущиеРеквизитыСтроки.Вставить("Количество");
	ПредыдущиеРеквизитыСтроки.Вставить("КоличествоВЕдиницахИзмерения");
	ПредыдущиеРеквизитыСтроки.Вставить("КодСтрокиСпецификации");
	
	//Вставка Соколов
	УстановитьВидимостьИДостуность();
	///Соколов
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДостуность()
	Если Объект.НовыйСпособУчета Тогда
		Элементы.ТоварыУстановитьОтделение.Видимость=Ложь;
		Элементы.ТоварыГруппаБуферОбмена.Видимость=Ложь;
		Элементы.ПодменюСоздатьНаОсновании.Видимость=Ложь;
		Элементы.ФормаГруппаГлобальныеКомандыФормы.Видимость=Ложь;
		Элементы.Статус.ТолькоПросмотр=Истина;
		Элементы.ТоварыКодСтроки.Видимость=Истина;
		Элементы.ТоварыЗаполнитьПоТребованиям.Видимость=Истина;
		Элементы.ТоварыЗаказано.Видимость=Ложь;
		Элементы.ТоварыОтгружено.Видимость=Ложь;
		Элементы.ТоварыПредставлениеЗаказы.Видимость=Ложь;
		Элементы.ТоварыГруппаДатыПоступления.Видимость=Ложь;
		Элементы.ТоварыПоставщик.Видимость=Ложь;
		Этаформа.ТолькоПросмотр=НЕ Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.НеСогласован");
		Элементы.ТоварыНоменклатураЗаказа.Видимость=Истина;
		Элементы.ФормаВЗакупку.Доступность= Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.НеСогласован");
	Иначе
		Элементы.ТоварыЗаполнитьПоТребованиям.Видимость=Ложь;
		ЭтаФорма.ТолькоПросмотр=Ложь;       
		Элементы.ТоварыНоменклатураЗаказа.Видимость=Ложь;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти // События_формы

////////////////////////////////////////////////////////////////////////////////
// Работа с табличной частью Товары
#Область ТЧ_Товары

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	ЗаполнитьЗначенияСвойств(ПредыдущиеРеквизитыСтроки, Элементы.Товары.ТекущиеДанные);
	//Вставка Соколов
	ПрежКоличество=Элементы.Товары.ТекущиеДанные.КоличествоВЕдиницахИзмерения;
	///Соколов
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	ВопросПользователюПриИзмененииРеквизитаСтроки(
		Новый ОписаниеОповещения("ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПроверитьУпаковкуПоВладельцу(), ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЕдиницуИзмерения(), НоменклатураКлиентСервер.ВидЕдиницы_ПотребительскаяУпаковка());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	//СтруктураДействий.Вставить(Действия.Действие_ЗаполнитьЦенуЗакупки(), ПараметрыЗаполненияЦены);
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	//СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//Документы ПолучитьЦенуПоследнейЗакупки
	
	ПараметрыЗаполненияЦены = Новый Структура;
	ПараметрыЗаполненияЦены.Вставить("Дата",       Объект.Дата);
	ПараметрыЗаполненияЦены.Вставить("Склад",      Объект.СкладОтправитель);
	ПараметрыЗаполненияЦены.Вставить("Номен",      ТекущаяСтрока.Номенклатура);
	ПараметрыЗаполненияЦены.Вставить("ЕдИзм",      ТекущаяСтрока.ЕдиницаИзмерения);
	
	УстановитьПоля(ПараметрыЗаполненияЦены,ТекущаяСтрока.Цена,ТекущаяСтрока.Поставщик);

	ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.КоличествоВЕдиницахИзмерения;
	
	сок_ЗаполнитьДополнительныеКолонкиТабличнойЧасти();
	ПересчитатьСуммуДокумента();
	
КонецПроцедуры

&НаСервере
Функция ИзменитьколичествоВПодчиненныхДокументах(Ид)
	  ТекущаяСтрока=Объект.Товары.НайтиПоИдентификатору(Ид);
	  Рег = РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
	  Рег.Отбор.ИдентификаторСтроки.Установить(ТекущаяСтрока.ИдентификаторСтроки);
	  Рег.Отбор.КодСтроки.Установить(ТекущаяСтрока.КодСтроки);
	  Рег.Прочитать();
	  
	  Если Рег.Количество()=1 Тогда                                    
		  Если Рег[0].Состояние=Перечисления.СостоянияТребований.Требование Тогда
			    НачатьТранзакцию();
		  		Рег[0].Количество=ТекущаяСтрока.КоличествоВЕдиницахИзмерения;
				Рег.ОбменДанными.Загрузка=Истина;
				Рег.Записать(Истина);
				Элемент = Рег[0].Требование.ПолучитьОбъект();
				Если Ложь Тогда Элемент = Документы.ТребованиеОтделения.СоздатьДокумент() КонецЕсли;
				
				Стр=Элемент.Товары.Найти(Рег[0].ИдентификаторСтроки,"ИдентификаторСтроки");
				Если Стр=Неопределено Тогда
				  ОтменитьТранзакцию();
				  ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось внести изменения в "+Элемент.Ссылка+" строка и с идентификатором "+Рег[0].ИдентификаторСтроки+" отсутствует в Тркбовании.");
				  Возврат Ложь;
				КонецЕсли;	
				Стр.КоличествоВЕдиницахИзмерения=ТекущаяСтрока.КоличествоВЕдиницахИзмерения;
				попытка
					Элемент.Записать();       
				Исключение
				  ОтменитьТранзакцию();
				  ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось внести изменения в "+Элемент.Ссылка);
				  Возврат Ложь;
				КонецПопытки;	
				Попытка
					ЗафиксироватьТранзакцию();
				Исключение
				  ОтменитьТранзакцию();
				  ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось зафиксировать транцакцию.");
				  Возврат Ложь;
				КонецПопытки	
		 Иначе
			  ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В регистре ""Состояния требований отделений"" состяние "+Рег[0].Состояние+", а ожидется ""Требование"". Данные в подчиненных документах не удалось изменить.");
			  Возврат Ложь;
		 КонецЕсли; 
	  Иначе
		  ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка в регистре ""Состояния требований отделений"". Данные в подчиненных документах не удалось изменить.");
		  Возврат Ложь;
	  Конецесли;
	  //Записать();
	  Возврат Истина;
КонецФункции



&НаКлиенте
Процедура ТоварыКоличествоВЕдиницахИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПриИзмененииКоличестваВСтрокеТовары(ТекущаяСтрока);
	ПересчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоэффициент());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьЦенуЗаУпаковку(), Действия.ПолучитьПараметрыПересчетаЦеныЗаУпаковку(ТекущаяСтрока.Количество));
		СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПересчитатьСуммуДокумента();
	//ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, Не Объект.СпецификацияКДоговору.Пустая());

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьЦену());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваВСтрокеТовары(ТекущаяСтрока)
	
	Действия = ОбработкаТабличнойЧастиКлиентСервер;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьКоличествоЕдиниц());
	СтруктураДействий.Вставить(Действия.Действие_ПересчитатьСумму());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТабличнойЧасти(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуДокумента();
	
КонецПроцедуры


#КонецОбласти // ТЧ_Товары

////////////////////////////////////////////////////////////////////////////////
// События элементов формы
#Область События_элементов_формы

&НаКлиенте
Процедура ПоступлениеОднойДатойПриИзменении(Элемент)
	
	УстановитьВидимостьДатПоступления(ЭтаФорма);
	
	ЭтаФорма.ОбновитьОтображениеДанных(Элементы.ТоварыДатаПоступления);
	Элементы.Товары.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ПриСозданииНовогоПриЧтенииНаСервере(ТекущийОбъект.Статус);
	//Вставка Соколов
	//Вставка из Расширения
	Если УказательДата < ТекущаяДата() Тогда
		УказательДата = ТекущаяДата();
		сок_ЗаполнитьДополнительныеКолонкиТабличнойЧасти();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтделение(Команда)
	
	ИдентыСтрок = Новый Массив;
	Для Каждого СтрТЧ из Элементы.Товары.ВыделенныеСтроки Цикл
		ИдентыСтрок.Добавить(Элементы.Товары.ДанныеСтроки(СтрТЧ).ПолучитьИдентификатор());
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",Объект.Организация);
	СтруктураПараметров.Вставить("ВыборГруппИЭлементов",ИспользованиеГруппИЭлементов.Элементы);
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе",Истина);
	СтруктураПараметров.Вставить("ЗакрыватьПриЗакрытииВладельца",Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор",Ложь);
	СтруктураПараметров.Вставить("РазрешитьВыборКорня",Ложь);
	СтруктураПараметров.Вставить("РежимВыбора",Истина);
	СтруктураПараметров.Вставить("Отбор",Новый Структура);
	СтруктураПараметров.Отбор.Вставить("Владелец",Объект.Организация);

	ОткрытьФорму("Справочник.ОтделенияОрганизаций.ФормаВыбора",СтруктураПараметров,ЭтаФорма,ЭтаФорма.УникальныйИдентификатор,,,Новый ОписаниеОповещения("ВведеноОтделение",ЭтаФорма,ИдентыСтрок),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//ПоказатьВводЗначения(Новый ОписаниеОповещения("ВведеноОтделение",ЭтаФорма,ИдентыСтрок),
	//ПредопределенноеЗначение("Справочник.ОтделенияОрганизаций.ПустаяСсылка"),"Введите отделение куда будет поставлен материал",Тип("СправочникСсылка.ОтделенияОрганизаций"));

КонецПроцедуры

&НаКлиенте
Процедура ВведеноОтделение(ОтделениеСсылка,ИдентыСтрок) Экспорт 

	Если ЗначениеЗаполнено(ОтделениеСсылка) Тогда
		
		Для Каждого СтрТЧ из ИдентыСтрок Цикл
			СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(СтрТЧ);
			СтрокаТовары.Отделение =  ОтделениеСсылка;
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция  ТоварыТребованиеОтделенияПриИзмененииНаСервере(ТребованиеСсылка,НоменклатураСсылка)
	
	РезультатФу = Новый Структура;
	
	РезультатФу.Вставить("КодСтроки",0);
	РезультатФу.Вставить("Отделение",ПредопределенноеЗначение("Справочник.ОтделенияОрганизаций.ПустаяСсылка"));
	
	Если ЗначениеЗаполнено(ТребованиеСсылка) Тогда
		
		РезультатФу.Отделение = ТребованиеСсылка.Отделение;
		Если ЗначениеЗаполнено(НоменклатураСсылка) Тогда
			МассивСтрок = ТребованиеСсылка.Товары.НайтиСтроки(Новый Структура("Номенклатура",НоменклатураСсылка));
			Если МассивСтрок.Количество() > 0 Тогда
				СтрТЧ = МассивСтрок.Получить(0);
				РезультатФу.КодСтроки = СтрТЧ.НомерСтроки;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат РезультатФу;
	
КонецФункции

&НаКлиенте
Процедура ТоварыТребованиеОтделенияПриИзменении(Элемент)
	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		РезультатЧтения = ТоварыТребованиеОтделенияПриИзмененииНаСервере(Элементы.Товары.ТекущиеДанные.ТребованиеОтделения,Элементы.Товары.ТекущиеДанные.Номенклатура);
		ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные,РезультатЧтения);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьКлючиАналитикиНаСервере(ДокуСсылка)
	
	Документы.ЗаявкаНаЗакупку.ИнициализироватьКлючиАналитикиОписанийОтборовНоменклатуры(Новый Структура("Ссылка",ДокуСсылка));
КонецПроцедуры   

&НаКлиенте
Процедура ПроверитьКлючиАналитики(Команда)
	ПроверитьКлючиАналитикиНаСервере(Объект.Ссылка);
КонецПроцедуры
	
#КонецОбласти // События_элементов_формы


#Область ДоработкиИзРасширения



&НаСервере
Функция ПолучитьДатуОтгрузки(Заказ,Номенклатура)
	Если Заказ.ПоступлениеОднойДатой Тогда
		Возврат Формат(Заказ.ДатаПоступления,"ДЛФ=Д");
	Иначе
		Масс=Заказ.Товары.НайтиСтроки(Новый структура("Номенклатура",Номенклатура));
		Если Масс.Количество()>0 Тогда
			Если ЗначениеЗаполнено(Масс[0].ДатаПоступления) Тогда
				Возврат Формат(Масс[0].ДатаПоступления,"ДЛФ=Д");
			Иначе
				Возврат "<НЕТ ДАТЫ>";
			КонецЕсли;
		Иначе
			Возврат "<НЕТ ТОВАРА>";
		КонецЕсли;	
	КонецЕсли;	
КонецФункции	

&НаСервере
Функция сок_ПересчитатьПредставлениеСпискаЗаказов(СписокСсылок,Номенклатура,СтрокаЗаказов,СтрокаДатОтгрузки)
	СтрокаЗаказов="";
	СтрокаДатОтгрузки="";
	
	КолСтрок = СписокСсылок.Количество();
	Если КолСтрок = 1 Тогда
		СтрокаЗаказов = Строка("№ "+СписокСсылок.Получить(0).Значение.Номер+" от "+Формат(СписокСсылок.Получить(0).Значение.Дата,"ДЛФ=Д"));
		СтрокаДатОтгрузки = ПолучитьДатуОтгрузки(СписокСсылок.Получить(0).Значение,Номенклатура);
	ИначеЕсли КолСтрок > 1 Тогда
		//СтрокаЗаказов = "("+Строка(КолСтрок)+") ";
		//СтрокаДатОтгрузки="("+Строка(КолСтрок)+") ";
		Для Каждого СтрокаТЗ из СписокСсылок Цикл
			СтрокаЗаказов = ?(ПустаяСтрока(СтрокаЗаказов),"",СтрокаЗаказов+";")+"№"+СтрокаТЗ.Значение.Номер+" от "+Формат(СтрокаТЗ.Значение.Дата,"ДЛФ=Д"); 
			СтрокаДатОтгрузки = ?(ПустаяСтрока(СтрокаДатОтгрузки),"",СтрокаДатОтгрузки+";")+ПолучитьДатуОтгрузки(СтрокаТЗ.Значение,Номенклатура); 
		КонецЦикла;
	КонецЕсли;	
	
КонецФункции	



&НаСервере
Процедура сок_ЗаполнитьДополнительныеКолонкиТабличнойЧасти()    
	//Заполним заказы поставщику
	Если НЕ Объект.Ссылка.Пустая() И Объект.Ссылка.Проведен Тогда
		Для Каждого Стр из Объект.Товары Цикл
			Рег=РегистрыСведений.СостоянияТребованийОтделений.СоздатьНаборЗаписей();
			Рег.Отбор.ИдентификаторСтроки.Установить(Стр.ИдентификаторСтроки);
			//Рег.Отбор.КодСтроки.Использование=Ложь;
			Рег.Прочитать();
			Заказано=0;
			Для Каждого СтрР из Рег Цикл
				Если СтрР.КодСтроки=Стр.КодСтроки Тогда
					Стр.ЗаказПоставщику=СтрР.ЗаказПоставщику;
				КонецЕсли;	
				Если СтрР.Состояние=Перечисления.СостоянияТребований.Требование ИЛИ 
					 СтрР.Состояние=Перечисления.СостоянияТребований.ТребованиеНеФормализованное ИЛИ 
					 СтрР.Состояние=Перечисления.СостоянияТребований.ВЗакупке Тогда
				 Иначе
					 Заказано=Заказано+СтрР.Количество;
				КонецЕсли;	 
			КонецЦикла;	
			Если Заказано>0 Тогда
				Если Стр.КоличествоВЕдиницахИзмерения=Заказано Тогда
					Стр.ЦветСтроки=2;
				Иначе
					Стр.ЦветСтроки=1;
				Конецесли;	
			Иначе
				Стр.ЦветСтроки=0;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	//Заполним Последнего поставщика и последнюю закупочную цену
	//Заполним поставщика, если пустой
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура",Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ДатаНач",НачалоДня(ТекущаяДата())-Константы.сок_ПериодАнализаРасхода.Получить()*86400);
	Запрос.УстановитьПараметр("ДатаКон",КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Склад",сок_Сервер.ПолучитьСкладАптека());
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию);
	Запрос.УстановитьПараметр("РазделУчета",Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыВОтделениях);
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ЦеныЗакупкиСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныЗакупкиСрезПоследних.Регистратор КАК Регистратор,
	|	ЦеныЗакупкиСрезПоследних.Цена КАК ПоследняяЦенаЗакупки,
	|	ЦеныЗакупкиСрезПоследних.Регистратор.Контрагент КАК Поставщик
	|ИЗ
	|	РегистрСведений.ЦеныЗакупки.СрезПоследних(, Номенклатура В (&Номенклатура)) КАК ЦеныЗакупкиСрезПоследних";
	Выборка=Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр из Объект.Товары Цикл
		
		СтрН=ВЫборка.Найти(Стр.Номенклатура,"Номенклатура");
		Если СтрН=Неопределено Тогда
			Стр.ПоследнийПоставщик=Справочники.Контрагенты.ПустаяСсылка();
			Стр.ПоследняяЦенаЗакупки=0;
		Иначе
			Стр.ПоследнийПоставщик=СтрН.Поставщик;
			Стр.ПоследняяЦенаЗакупки=СтрН.ПоследняяЦенаЗакупки*Стр.Коэффициент;
			Если НЕ ЗначениеЗаполнено(Стр.Поставщик) Тогда
					Стр.Поставщик=СтрН.Поставщик;
			Конецесли;	
		КонецЕсли;	
	КонецЦикла;	
	
	//Установим остатки 
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура,
	|	СвободныеОстаткиОстатки.ВНаличииОстаток КАК Остаток,
	|	СвободныеОстаткиОстатки.Номенклатура.ОсновнаяЕдиницаУчета КАК ЕдиницаИзмерения,
	|	ЕдиницыИзмеренияНоменклатуры.Коэффициент КАК Коэффициент
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(
	|			,
	|			Номенклатура В (&Номенклатура)
	|				И Склад = &Склад) КАК СвободныеОстаткиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЕдиницыИзмеренияНоменклатуры КАК ЕдиницыИзмеренияНоменклатуры
	|		ПО СвободныеОстаткиОстатки.Номенклатура = ЕдиницыИзмеренияНоменклатуры.Номенклатура
	|			И СвободныеОстаткиОстатки.Номенклатура.ОсновнаяЕдиницаУчета = ЕдиницыИзмеренияНоменклатуры.ЕдиницаИзмерения";
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого Стр из Объект.Товары Цикл
		СтрН=Выборка.Найти(Стр.Номенклатура,"Номенклатура");
		
		Если СтрН=Неопределено Тогда
			Стр.Остаток=0;
		Иначе
			Если НЕ СтрН.ЕдиницаИзмерения=Стр.ЕдиницаИзмерения Тогда
				Стр.ЕдиницаИзмерения=СтрН.ЕдиницаИзмерения;
			КонецЕсли;	
			Если НЕ СтрН.Коэффициент=Стр.Коэффициент Тогда
				Стр.Коэффициент=?(СтрН.Коэффициент=0,1,СтрН.Коэффициент);
			КонецЕсли;	
			
			Стр.Остаток=СтрН.Остаток/Стр.Коэффициент;
		конецЕсли;	
	КонецЦикла;
	
	//Соколов
	Возврат;
	///Соколов
	
	//Заполним отгружено
	Запрос.Текст=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	СебестоимостьТоваров.Количество КАК Количество
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|ГДЕ
	|	СебестоимостьТоваров.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И СебестоимостьТоваров.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И СебестоимостьТоваров.АналитикаУчетаНоменклатуры.Номенклатура В(&Номенклатура)
	|	И СебестоимостьТоваров.РазделУчета = &РазделУчета";
	Выборка = Запрос.Выполнить().Выгрузить();
	Выборка.Свернуть("Номенклатура","Количество");
	Для Каждого Стр из Объект.Товары Цикл
		СтрН=Выборка.Найти(Стр.Номенклатура,"Номенклатура");
		Если СтрН=Неопределено Тогда
			Стр.Отгружено=0;
		Иначе
			Если Стр.Коэффициент=0 Тогда
				Стр.Коэффициент=1;
			Конецесли;	
			Стр.Отгружено=СтрН.Количество/Стр.Коэффициент/Константы.сок_ПериодАнализаРасхода.Получить()*30;
		конецЕсли;	
	КонецЦикла;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
	
		//Заполним Заказы поставщикам и дату поставки 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщикуТовары.Ссылка КАК Ссылка,
		|	СУММА(ЕСТЬNULL(ЗаказПоставщикуТовары.Количество, 0)) КАК Количество,
		|	СРЕДНЕЕ(ЗаказПоставщикуТовары.Коэффициент) КАК Коэффициент,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщикуТовары.сок_НоменклатураЗаказа = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ТОГДА ЗаказПоставщикуТовары.Номенклатура
		|		ИНАЧЕ ЗаказПоставщикуТовары.сок_НоменклатураЗаказа
		|	КОНЕЦ КАК Номенклатура,
		|	СРЕДНЕЕ(ЕСТЬNULL(ВложенныйЗапрос.ВНаличииОстаток, 0)) КАК Остаток,
		|	ЗаказПоставщикуТовары.Номенклатура КАК НоменклатураОстатка
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СУММА(СвободныеОстаткиОстатки.ВНаличииОстаток) КАК ВНаличииОстаток,
		|			СвободныеОстаткиОстатки.Номенклатура КАК Номенклатура
		|		ИЗ
		|			РегистрНакопления.СвободныеОстатки.Остатки(
		|					&НаДату,
		|					ИсточникФинансирования = &ИсточникФинансирования
		|						И Номенклатура В (&Номенклатура)
		|						И Организация = &Организация
		|						И Склад = &Склад) КАК СвободныеОстаткиОстатки
		|		
		|		СГРУППИРОВАТЬ ПО
		|			СвободныеОстаткиОстатки.Номенклатура) КАК ВложенныйЗапрос
		|		ПО ЗаказПоставщикуТовары.Номенклатура = ВложенныйЗапрос.Номенклатура
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				ЗаказПоставщикуТовары.Ссылка КАК Ссылка
		|			ИЗ
		|				Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|			ГДЕ
		|				(ЗаказПоставщикуТовары.ЗаявкаНаЗакупку = &ЗаявкаНаЗакупку
		|					ИЛИ ЗаказПоставщикуТовары.Ссылка.ЗаявкаНаЗакупку = &ЗаявкаНаЗакупку)
		|				И ЗаказПоставщикуТовары.Ссылка.Проведен)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПоставщикуТовары.Ссылка,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщикуТовары.сок_НоменклатураЗаказа = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ТОГДА ЗаказПоставщикуТовары.Номенклатура
		|		ИНАЧЕ ЗаказПоставщикуТовары.сок_НоменклатураЗаказа
		|	КОНЕЦ,
		|	ЗаказПоставщикуТовары.Номенклатура";
		
		Запрос.УстановитьПараметр("ЗаявкаНаЗакупку", Объект.Ссылка);
		Запрос.УстановитьПараметр("НаДату", Объект.Дата);
		Запрос.УстановитьПараметр("Номенклатура", Объект.Товары.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"));
		
		СтрокаОстаток=0;
		Если Объект.ИсточникФинансирования.Пустая() Тогда
			//Объект.ИсточникФинансирования	Платные	СправочникСсылка.ИсточникиФинансирования	a256ff09-cc60-11e8-9101-005056928435	УникальныйИдентификатор
			Запрос.УстановитьПараметр("ИсточникФинансирования", Справочники.ИсточникиФинансирования.ПолучитьСсылку(Новый УникальныйИдентификатор("a256ff09-cc60-11e8-9101-005056928435")));
		Иначе	
			Запрос.УстановитьПараметр("ИсточникФинансирования", Объект.ИсточникФинансирования);
		КонецЕсли;
		Если Объект.Организация.Пустая() Тогда
			//Объект.Организация	Филиал компании "Хадасса Медикал ЛТД"	СправочникСсылка.Организации      7c076f18-cc69-11e8-9101-005056928435	УникальныйИдентификатор
			Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор("7c076f18-cc69-11e8-9101-005056928435")));
		Иначе
			Запрос.УстановитьПараметр("Организация", Объект.Организация);
		КонецЕсли;	
		Если Объект.Склад.Пустая() Тогда
			//Объект.Склад	Склад Аптеки	СправочникСсылка.Склады   0c3eb40c-8b7f-410a-937f-a361e51a3608	УникальныйИдентификатор
			
			Запрос.УстановитьПараметр("Склад", Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор("0c3eb40c-8b7f-410a-937f-a361e51a3608")));
		Иначе
			Запрос.УстановитьПараметр("Склад", Объект.Склад);
		КонецЕсли;	
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Сканер = Новый Структура("Номенклатура");
		//ОписаниеЗаказ = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику");
		Для Каждого Стр из Объект.Товары Цикл
			Стр.Заказы.Очистить();
		КонецЦикла;	
			
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сканер.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
			Найдено = Объект.Товары.НайтиСтроки(Сканер);
			Если Найдено.Количество() > 0 Тогда
				ТекСтр = Найдено.Получить(0);
				Если ТекСтр.Заказы.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Ссылка) = Неопределено Тогда
					ТекСтр.Заказы.Добавить(ВыборкаДетальныеЗаписи.Ссылка);	
				КонецЕсли;	

				// Комментарий Соколов
				//ТекСтр.Заказано = ВыборкаДетальныеЗаписи.Количество / ВыборкаДетальныеЗаписи.Коэффициент;
				//Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Коэффициент) Тогда
				//	ТекСтр.Остаток = ВыборкаДетальныеЗаписи.Остаток / ВыборкаДетальныеЗаписи.Коэффициент;
				//ИначеЕсли ЗначениеЗаполнено(ТекСтр.Коэффициент) Тогда
				//	ТекСтр.Остаток = ВыборкаДетальныеЗаписи.Остаток / ТекСтр.Коэффициент;
				//ИначеЕсли ЗначениеЗаполнено(ТекСтр.ЕдиницаИзмерения) И ЗначениеЗаполнено(ТекСтр.Номенклатура) Тогда	
				//	ТекСтр.Коэффициент = НоменклатураСервер.КоэффициентЕдиницыИзмерения(ТекСтр.Номенклатура, ТекСтр.ЕдиницаИзмерения);
				//	ТекСтр.Остаток = ВыборкаДетальныеЗаписи.Остаток / ТекСтр.Коэффициент;
				//Иначе	
				//	ТекСтр.Остаток = ВыборкаДетальныеЗаписи.Остаток;
				//КонецЕсли;	
				
				 сок_ПересчитатьПредставлениеСпискаЗаказов(ТекСтр.Заказы,ТекСтр.Номенклатура,ТекСтр.ПредставлениеЗаказы,ТекСтр.ДатаПоступленияЗак);
				 ТекСтр.ЕстьЗаказы=ТекСтр.Заказы.Количество()>0;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.ГиперссылкаЯчейки тогда
		СтандартнаяОбработка = Ложь;
		Если Элементы.Товары.ТекущиеДанные.Заказы.Количество() = 1 Тогда
			ПоказатьЗначение(,Элементы.Товары.ТекущиеДанные.Заказы.Получить(0).Значение);
		Иначе
			ПараметрыОткрытия = Новый Структура("СписокЗаказовМедскан",Элементы.Товары.ТекущиеДанные.Заказы);
			ОткрытьФорму("Документ.ЗаказПоставщику.ФормаСписка",ПараметрыОткрытия,ЭтаФорма,ЭтаФорма.УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникФинансированияПриИзменении(Элемент)
	сок_ЗаполнитьДополнительныеКолонкиТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	сок_ЗаполнитьДополнительныеКолонкиТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	сок_ЗаполнитьДополнительныеКолонкиТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		Если НЕ НоваяСтрока Тогда
			ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			Если ПрежКоличество<>ТекущаяСтрока.КоличествоВЕдиницахИзмерения Тогда
				Если ЗначениеЗаполнено(ТекущаяСтрока.Требование)
					И (ТипЗнч(ТекущаяСтрока.Требование)=Тип("ДокументСсылка.ТребованиеОтделения")
					   ИЛИ ТипЗнч(ТекущаяСтрока.Требование)=Тип("ДокументСсылка.сок_НеФормализованноеТребованиеОтделения"))
					И ТекущаяСтрока.Кодстроки=0 Тогда
					Если НЕ ИзменитьколичествоВПодчиненныхДокументах(ТекущаяСтрока.ПолучитьИдентификатор()) Тогда
						ТекущаяСтрока.КоличествоВЕдиницахИзмерения=ПрежКоличество;
						Возврат;
					КонецЕсли;
				КонецЕсли;	
				ПриИзмененииКоличестваВСтрокеТовары(ТекущаяСтрока);
				ПересчитатьСуммуДокумента();
			КонецЕсли;
		КонецЕсли;	
		сок_ЗаполнитьДополнительныеКолонкиТабличнойЧасти();	
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Процедура ПересчитатьСуммуДокумента()
	СуммаДокумента=0;
	Для Каждого Стр из Объект.Товары Цикл
		Если НЕ Стр.Отменено Тогда
			СуммаДокумента=СуммаДокумента+Стр.Сумма;
		КонецЕсли;	
	КонецЦикла;	
	Если НЕ Объект.СуммаДокумента=СуммаДокумента Тогда
		Объект.СуммаДокумента=СуммаДокумента;
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ТоварыОтмененоПриИзменении(Элемент)
	ПересчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура НовыйСпособУчетаПриИзменении(Элемент)
	УстановитьВидимостьИДостуность();
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПоТребованиямНаСервере()
	Объект.Товары.Очистить();
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач",Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон",?(Период.ДатаОкончания='00010101','30991231',Период.ДатаОкончания));
	Запрос.УстановитьПараметр("ВидНоменклатуры",ВидНоменклатуры);
	Запрос.УстановитьПараметр("ТипТребования",ТипТребования);   
	Запрос.УстановитьПараметр("ОтборПоРегулярной",ОтборПоРегулярной);
	Запрос.УстановитьПараметр("Регулярная",Регулярная);
	Запрос.УстановитьПараметр("ОтборПоОтделениям",Отделения.Количество()>0);
	Запрос.УстановитьПараметр("Отделения",Отделения.ВыгрузитьЗначения());
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СостоянияТребованийОтделений.Требование КАК Требование,
	|	СостоянияТребованийОтделений.НоменклатураЗаказа КАК НоменклатураЗаказа,
	|	СостоянияТребованийОтделений.Номенклатура КАК Номенклатура,
	|	СостоянияТребованийОтделений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СостоянияТребованийОтделений.КодСтроки КАК КодСтроки,
	|	СостоянияТребованийОтделений.Количество КАК КоличествоВЕдиницахИзмерения,
	|	ИСТИНА КАК АвтоЗаполнение
	|ИЗ
	|	РегистрСведений.СостоянияТребованийОтделений КАК СостоянияТребованийОтделений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаЗакупку.Товары КАК ЗаявкаНаЗакупкуТовары
	|		ПО СостоянияТребованийОтделений.ИдентификаторСтроки = ЗаявкаНаЗакупкуТовары.ИдентификаторСтроки
	|			И СостоянияТребованийОтделений.КодСтроки = ЗаявкаНаЗакупкуТовары.КодСтроки
	|			И (ЗаявкаНаЗакупкуТовары.Ссылка <> &Ссылка)
	|ГДЕ
	|	СостоянияТребованийОтделений.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияТребований.Требование)
	|	И СостоянияТребованийОтделений.Требование.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И (&ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|			ИЛИ СостоянияТребованийОтделений.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры)
	|	И (&ТипТребования = ЗНАЧЕНИЕ(Перечисление.ТипыТребованийОтделений.ПустаяСсылка)
	|			ИЛИ СостоянияТребованийОтделений.Требование.ВидОперации = &ТипТребования)
	|	И (НЕ &ОтборПоРегулярной
	|			ИЛИ &Регулярная = СостоянияТребованийОтделений.Номенклатура.Регулярная)
	|	И (НЕ &ОтборПоОтделениям
	|			ИЛИ СостоянияТребованийОтделений.Требование.Отделение В (&Отделения))
	|	И ЗаявкаНаЗакупкуТовары.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	СостоянияТребованийОтделений.Требование,
	|	НоменклатураЗаказа"; 
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура",Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ЦеныЗакупкиСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныЗакупкиСрезПоследних.Регистратор КАК Регистратор,
	|	ЦеныЗакупкиСрезПоследних.Цена КАК Цена,
	|	ЦеныЗакупкиСрезПоследних.Регистратор.Контрагент КАК Поставщик
	|ИЗ
	|	РегистрСведений.ЦеныЗакупки.СрезПоследних(, Номенклатура В (&Номенклатура)) КАК ЦеныЗакупкиСрезПоследних";
	Выборка=Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр из Объект.Товары Цикл    
		Стр.ЕдиницаИзмерения=Стр.Номенклатура.ОсновнаяЕдиницаУчета;
		Стр.Коэффициент=1;
		Стр.Количество=Стр.КоличествоВЕдиницахИзмерения;
		СтрН=ВЫборка.Найти(Стр.Номенклатура,"Номенклатура");
		Если СтрН=Неопределено Тогда
			Стр.Цена=0;
		Иначе
			Стр.Цена=СтрН.Цена*Стр.Коэффициент;
		КонецЕсли;	
		Стр.Сумма=Стр.Цена * Стр.КоличествоВЕдиницахИзмерения;
	КонецЦикла;	
	сок_ЗаполнитьДополнительныеКолонкиТабличнойЧасти();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоТребованиям(Команда)
	ЗаполнитьПоТребованиямНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВЗакупкуНаСервере()
	сок_Сервер.ЗаявкаНаЗакупку_ПереверстивСостояние_ВЗакупку(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ВЗакупку(Команда)
	Если Этаформа.Модифицированность Тогда
		ПоказатьПредупреждение(,"Сначала запишите документ.");
	ИначеЕсли НЕ Объект.Проведен Тогда
		ПоказатьПредупреждение(,"Сначала проведите документ.");
	Иначе	
		ВЗакупкуНаСервере();             
		Закрыть(Ложь); 
		ОткрытьФорму("Документ.ЗаявкаНаЗакупку.ФормаОбъекта",Новый структура("Ключ",Объект.Ссылка));
		//УстановитьВидимостьИДостуность();
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти